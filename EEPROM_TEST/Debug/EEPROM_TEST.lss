
EEPROM_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  000026ce  00002762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000f0  008000f0  000027f2  2**0
                  ALLOC
  3 .stab         0000435c  00000000  00000000  000027f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002336  00000000  00000000  00006b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__vector_12>
      34:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__vector_13>
      38:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 91 12 	call	0x2522	; 0x2522 <main>
      8a:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <STR_CMP>:
#include "STR.h"
#include "../../MCAL/UART/UART_interface.h"


uint8_t STR_CMP(uint8_t* STR1,uint8_t* STR2)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	29 97       	sbiw	r28, 0x09	; 9
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	9f 83       	std	Y+7, r25	; 0x07
      a8:	8e 83       	std	Y+6, r24	; 0x06
      aa:	79 87       	std	Y+9, r23	; 0x09
      ac:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8StringCounter=0;
      ae:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8String1_Length=0;
      b0:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t u8String2_Length=0;
      b2:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t u8SimilarityCounter=0;
      b4:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8CMPResult;

	do
	{
		u8String1_Length++;
      b6:	8c 81       	ldd	r24, Y+4	; 0x04
      b8:	8f 5f       	subi	r24, 0xFF	; 255
      ba:	8c 83       	std	Y+4, r24	; 0x04
		u8StringCounter++;
      bc:	8d 81       	ldd	r24, Y+5	; 0x05
      be:	8f 5f       	subi	r24, 0xFF	; 255
      c0:	8d 83       	std	Y+5, r24	; 0x05
	}while (STR1[u8StringCounter]!='\0'&&STR1[u8StringCounter]!=0x0D);
      c2:	8d 81       	ldd	r24, Y+5	; 0x05
      c4:	28 2f       	mov	r18, r24
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	8e 81       	ldd	r24, Y+6	; 0x06
      ca:	9f 81       	ldd	r25, Y+7	; 0x07
      cc:	fc 01       	movw	r30, r24
      ce:	e2 0f       	add	r30, r18
      d0:	f3 1f       	adc	r31, r19
      d2:	80 81       	ld	r24, Z
      d4:	88 23       	and	r24, r24
      d6:	59 f0       	breq	.+22     	; 0xee <STR_CMP+0x5c>
      d8:	8d 81       	ldd	r24, Y+5	; 0x05
      da:	28 2f       	mov	r18, r24
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	8e 81       	ldd	r24, Y+6	; 0x06
      e0:	9f 81       	ldd	r25, Y+7	; 0x07
      e2:	fc 01       	movw	r30, r24
      e4:	e2 0f       	add	r30, r18
      e6:	f3 1f       	adc	r31, r19
      e8:	80 81       	ld	r24, Z
      ea:	8d 30       	cpi	r24, 0x0D	; 13
      ec:	21 f7       	brne	.-56     	; 0xb6 <STR_CMP+0x24>

	u8StringCounter=0;
      ee:	1d 82       	std	Y+5, r1	; 0x05

	do
	{
		u8String2_Length++;
      f0:	8b 81       	ldd	r24, Y+3	; 0x03
      f2:	8f 5f       	subi	r24, 0xFF	; 255
      f4:	8b 83       	std	Y+3, r24	; 0x03
		u8StringCounter++;
      f6:	8d 81       	ldd	r24, Y+5	; 0x05
      f8:	8f 5f       	subi	r24, 0xFF	; 255
      fa:	8d 83       	std	Y+5, r24	; 0x05
	}while (STR2[u8StringCounter]!='\0'&&STR2[u8StringCounter]!=0x0D);
      fc:	8d 81       	ldd	r24, Y+5	; 0x05
      fe:	28 2f       	mov	r18, r24
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	88 85       	ldd	r24, Y+8	; 0x08
     104:	99 85       	ldd	r25, Y+9	; 0x09
     106:	fc 01       	movw	r30, r24
     108:	e2 0f       	add	r30, r18
     10a:	f3 1f       	adc	r31, r19
     10c:	80 81       	ld	r24, Z
     10e:	88 23       	and	r24, r24
     110:	59 f0       	breq	.+22     	; 0x128 <STR_CMP+0x96>
     112:	8d 81       	ldd	r24, Y+5	; 0x05
     114:	28 2f       	mov	r18, r24
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	88 85       	ldd	r24, Y+8	; 0x08
     11a:	99 85       	ldd	r25, Y+9	; 0x09
     11c:	fc 01       	movw	r30, r24
     11e:	e2 0f       	add	r30, r18
     120:	f3 1f       	adc	r31, r19
     122:	80 81       	ld	r24, Z
     124:	8d 30       	cpi	r24, 0x0D	; 13
     126:	21 f7       	brne	.-56     	; 0xf0 <STR_CMP+0x5e>

	u8StringCounter=0;
     128:	1d 82       	std	Y+5, r1	; 0x05


	if (u8String2_Length==u8String1_Length)
     12a:	9b 81       	ldd	r25, Y+3	; 0x03
     12c:	8c 81       	ldd	r24, Y+4	; 0x04
     12e:	98 17       	cp	r25, r24
     130:	01 f5       	brne	.+64     	; 0x172 <STR_CMP+0xe0>
	{

		for (u8StringCounter=0;u8StringCounter<u8String1_Length;u8StringCounter++)
     132:	1d 82       	std	Y+5, r1	; 0x05
     134:	1a c0       	rjmp	.+52     	; 0x16a <STR_CMP+0xd8>
		{
			if (STR1[u8StringCounter]==STR2[u8StringCounter])
     136:	8d 81       	ldd	r24, Y+5	; 0x05
     138:	28 2f       	mov	r18, r24
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	8e 81       	ldd	r24, Y+6	; 0x06
     13e:	9f 81       	ldd	r25, Y+7	; 0x07
     140:	fc 01       	movw	r30, r24
     142:	e2 0f       	add	r30, r18
     144:	f3 1f       	adc	r31, r19
     146:	40 81       	ld	r20, Z
     148:	8d 81       	ldd	r24, Y+5	; 0x05
     14a:	28 2f       	mov	r18, r24
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	88 85       	ldd	r24, Y+8	; 0x08
     150:	99 85       	ldd	r25, Y+9	; 0x09
     152:	fc 01       	movw	r30, r24
     154:	e2 0f       	add	r30, r18
     156:	f3 1f       	adc	r31, r19
     158:	80 81       	ld	r24, Z
     15a:	48 17       	cp	r20, r24
     15c:	51 f4       	brne	.+20     	; 0x172 <STR_CMP+0xe0>
			{
				u8SimilarityCounter++;
     15e:	8a 81       	ldd	r24, Y+2	; 0x02
     160:	8f 5f       	subi	r24, 0xFF	; 255
     162:	8a 83       	std	Y+2, r24	; 0x02


	if (u8String2_Length==u8String1_Length)
	{

		for (u8StringCounter=0;u8StringCounter<u8String1_Length;u8StringCounter++)
     164:	8d 81       	ldd	r24, Y+5	; 0x05
     166:	8f 5f       	subi	r24, 0xFF	; 255
     168:	8d 83       	std	Y+5, r24	; 0x05
     16a:	9d 81       	ldd	r25, Y+5	; 0x05
     16c:	8c 81       	ldd	r24, Y+4	; 0x04
     16e:	98 17       	cp	r25, r24
     170:	10 f3       	brcs	.-60     	; 0x136 <STR_CMP+0xa4>
			}
		}
	}


	if (u8String1_Length==u8SimilarityCounter && u8SimilarityCounter!=0)
     172:	9c 81       	ldd	r25, Y+4	; 0x04
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	98 17       	cp	r25, r24
     178:	31 f4       	brne	.+12     	; 0x186 <STR_CMP+0xf4>
     17a:	8a 81       	ldd	r24, Y+2	; 0x02
     17c:	88 23       	and	r24, r24
     17e:	19 f0       	breq	.+6      	; 0x186 <STR_CMP+0xf4>
	{
		u8CMPResult=CMP_MATCH;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	89 83       	std	Y+1, r24	; 0x01
     184:	01 c0       	rjmp	.+2      	; 0x188 <STR_CMP+0xf6>
	}else
	{
		u8CMPResult=CMP_NOT_MATCHED;
     186:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8CMPResult;
     188:	89 81       	ldd	r24, Y+1	; 0x01
}
     18a:	29 96       	adiw	r28, 0x09	; 9
     18c:	0f b6       	in	r0, 0x3f	; 63
     18e:	f8 94       	cli
     190:	de bf       	out	0x3e, r29	; 62
     192:	0f be       	out	0x3f, r0	; 63
     194:	cd bf       	out	0x3d, r28	; 61
     196:	cf 91       	pop	r28
     198:	df 91       	pop	r29
     19a:	08 95       	ret

0000019c <STR_BinToInt>:


uint8_t STR_BinToInt(uint8_t* BinaryArray)
{
     19c:	df 93       	push	r29
     19e:	cf 93       	push	r28
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <STR_BinToInt+0x6>
     1a2:	00 d0       	rcall	.+0      	; 0x1a4 <STR_BinToInt+0x8>
     1a4:	0f 92       	push	r0
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62
     1aa:	9d 83       	std	Y+5, r25	; 0x05
     1ac:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16ReturnedInt=0;
     1ae:	1b 82       	std	Y+3, r1	; 0x03
     1b0:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8_t Counter=0;Counter<=16;Counter++)
     1b2:	19 82       	std	Y+1, r1	; 0x01
     1b4:	22 c0       	rjmp	.+68     	; 0x1fa <STR_BinToInt+0x5e>
	{
		u16ReturnedInt= u16ReturnedInt|((BinaryArray[Counter]-'0')<<Counter);
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	28 2f       	mov	r18, r24
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	8c 81       	ldd	r24, Y+4	; 0x04
     1be:	9d 81       	ldd	r25, Y+5	; 0x05
     1c0:	fc 01       	movw	r30, r24
     1c2:	e2 0f       	add	r30, r18
     1c4:	f3 1f       	adc	r31, r19
     1c6:	80 81       	ld	r24, Z
     1c8:	88 2f       	mov	r24, r24
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	9c 01       	movw	r18, r24
     1ce:	20 53       	subi	r18, 0x30	; 48
     1d0:	30 40       	sbci	r19, 0x00	; 0
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	88 2f       	mov	r24, r24
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	a9 01       	movw	r20, r18
     1da:	02 c0       	rjmp	.+4      	; 0x1e0 <STR_BinToInt+0x44>
     1dc:	44 0f       	add	r20, r20
     1de:	55 1f       	adc	r21, r21
     1e0:	8a 95       	dec	r24
     1e2:	e2 f7       	brpl	.-8      	; 0x1dc <STR_BinToInt+0x40>
     1e4:	ca 01       	movw	r24, r20
     1e6:	9c 01       	movw	r18, r24
     1e8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ea:	9b 81       	ldd	r25, Y+3	; 0x03
     1ec:	82 2b       	or	r24, r18
     1ee:	93 2b       	or	r25, r19
     1f0:	9b 83       	std	Y+3, r25	; 0x03
     1f2:	8a 83       	std	Y+2, r24	; 0x02


uint8_t STR_BinToInt(uint8_t* BinaryArray)
{
	uint16_t u16ReturnedInt=0;
	for(uint8_t Counter=0;Counter<=16;Counter++)
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	8f 5f       	subi	r24, 0xFF	; 255
     1f8:	89 83       	std	Y+1, r24	; 0x01
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	81 31       	cpi	r24, 0x11	; 17
     1fe:	d8 f2       	brcs	.-74     	; 0x1b6 <STR_BinToInt+0x1a>
	{
		u16ReturnedInt= u16ReturnedInt|((BinaryArray[Counter]-'0')<<Counter);
	}

	return u16ReturnedInt;
     200:	8a 81       	ldd	r24, Y+2	; 0x02
}
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	0f 90       	pop	r0
     208:	0f 90       	pop	r0
     20a:	0f 90       	pop	r0
     20c:	cf 91       	pop	r28
     20e:	df 91       	pop	r29
     210:	08 95       	ret

00000212 <UART_u8Init>:
/**
 * @fn uint8_t UART_u8Init(uint32_t UART_u32BaudRate)
 * @brief This function is used to Initiate the UART Peripheral
 */
uint8_t UART_u8Init(uint32_t UART_u32BaudRate)
{
     212:	df 93       	push	r29
     214:	cf 93       	push	r28
     216:	00 d0       	rcall	.+0      	; 0x218 <UART_u8Init+0x6>
     218:	00 d0       	rcall	.+0      	; 0x21a <UART_u8Init+0x8>
     21a:	0f 92       	push	r0
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
     220:	9d 83       	std	Y+5, r25	; 0x05
     222:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ErrorState = UART_OK;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t u16UBBR;  /// A Temporary Variable used to hold the calculated value of the UBBR register depending on the Baudrate

	// Make the Access to UCSRC Register
	SET_BIT(UCSRC_REG,URSEL_BIT);
     228:	a0 e4       	ldi	r26, 0x40	; 64
     22a:	b0 e0       	ldi	r27, 0x00	; 0
     22c:	e0 e4       	ldi	r30, 0x40	; 64
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	80 68       	ori	r24, 0x80	; 128
     234:	8c 93       	st	X, r24

	/*
	 * Set the operation mode of the UART Depending on the chosen UART_OPERATION_MODE Configuration
	 */
#if   UART_OPERATION_MODE == UART_ASYNC_NORMAL_SPEED
	CLR_BIT(UCSRC_REG,UMSEL_BIT);
     236:	a0 e4       	ldi	r26, 0x40	; 64
     238:	b0 e0       	ldi	r27, 0x00	; 0
     23a:	e0 e4       	ldi	r30, 0x40	; 64
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	8f 7b       	andi	r24, 0xBF	; 191
     242:	8c 93       	st	X, r24
	CLR_BIT(UCSRA_REG,U2X_BIT);
     244:	ab e2       	ldi	r26, 0x2B	; 43
     246:	b0 e0       	ldi	r27, 0x00	; 0
     248:	eb e2       	ldi	r30, 0x2B	; 43
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	8d 7f       	andi	r24, 0xFD	; 253
     250:	8c 93       	st	X, r24
	//Calculate the UBBR Value depending on the CPU frequency and the input desired baudrate
	// in the UART_ASYNC_NORMAL_SPEED the baudrate divisor is 16
	u16UBBR = (UART_F_CPU/(16UL*UART_u32BaudRate)-1);
     252:	8c 81       	ldd	r24, Y+4	; 0x04
     254:	9d 81       	ldd	r25, Y+5	; 0x05
     256:	cc 01       	movw	r24, r24
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	aa 1f       	adc	r26, r26
     262:	bb 1f       	adc	r27, r27
     264:	88 0f       	add	r24, r24
     266:	99 1f       	adc	r25, r25
     268:	aa 1f       	adc	r26, r26
     26a:	bb 1f       	adc	r27, r27
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	aa 1f       	adc	r26, r26
     272:	bb 1f       	adc	r27, r27
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	aa 1f       	adc	r26, r26
     27a:	bb 1f       	adc	r27, r27
     27c:	9c 01       	movw	r18, r24
     27e:	ad 01       	movw	r20, r26
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	92 e1       	ldi	r25, 0x12	; 18
     284:	aa e7       	ldi	r26, 0x7A	; 122
     286:	b0 e0       	ldi	r27, 0x00	; 0
     288:	bc 01       	movw	r22, r24
     28a:	cd 01       	movw	r24, r26
     28c:	0e 94 43 13 	call	0x2686	; 0x2686 <__udivmodsi4>
     290:	da 01       	movw	r26, r20
     292:	c9 01       	movw	r24, r18
     294:	01 97       	sbiw	r24, 0x01	; 1
     296:	9a 83       	std	Y+2, r25	; 0x02
     298:	89 83       	std	Y+1, r24	; 0x01
#elif UART_CHARACTER_SIZE == UART_7_BIT_CHARACTER
	CLR_BIT(UCSRC_REG,UCSZ0_BIT);
	SET_BIT(UCSRC_REG,UCSZ1_BIT);
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
#elif UART_CHARACTER_SIZE == UART_8_BIT_CHARACTER
	SET_BIT(UCSRC_REG,UCSZ0_BIT);
     29a:	a0 e4       	ldi	r26, 0x40	; 64
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	e0 e4       	ldi	r30, 0x40	; 64
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	82 60       	ori	r24, 0x02	; 2
     2a6:	8c 93       	st	X, r24
	SET_BIT(UCSRC_REG,UCSZ1_BIT);
     2a8:	a0 e4       	ldi	r26, 0x40	; 64
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	e0 e4       	ldi	r30, 0x40	; 64
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	84 60       	ori	r24, 0x04	; 4
     2b4:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
     2b6:	aa e2       	ldi	r26, 0x2A	; 42
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	ea e2       	ldi	r30, 0x2A	; 42
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	8b 7f       	andi	r24, 0xFB	; 251
     2c2:	8c 93       	st	X, r24

	/*
	 * Set the Parity mode of the UART Depending on the chosen UART_PARITY_MODE Configuration
	 */
#if UART_PARITY_MODE == UART_DISABLE_PARITY
	CLR_BIT(UCSRC_REG,UPM0_BIT);
     2c4:	a0 e4       	ldi	r26, 0x40	; 64
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	e0 e4       	ldi	r30, 0x40	; 64
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	8f 7e       	andi	r24, 0xEF	; 239
     2d0:	8c 93       	st	X, r24
	CLR_BIT(UCSRC_REG,UPM1_BIT);
     2d2:	a0 e4       	ldi	r26, 0x40	; 64
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	e0 e4       	ldi	r30, 0x40	; 64
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	8f 7d       	andi	r24, 0xDF	; 223
     2de:	8c 93       	st	X, r24

	/*
	 * Set the Stop bits number in the frame of the UART Depending on the chosen UART_STOP_BITS_NUMBER Configuration
	 */
#if UART_STOP_BITS_NUMBER == UART_1_STOP_BIT
	CLR_BIT(UCSRC_REG,USBS_BIT);
     2e0:	a0 e4       	ldi	r26, 0x40	; 64
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	e0 e4       	ldi	r30, 0x40	; 64
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	87 7f       	andi	r24, 0xF7	; 247
     2ec:	8c 93       	st	X, r24
	// if the UART_STOP_BITS_NUMBER is not one of this values then update the Error state
	u8ErrorState = WRONG_STOP_BITS_CFG;
#endif

	// Set the UBRR Register to the calculated value to configure the input baudrate
	UBRRL_REG= u16UBBR;
     2ee:	e9 e2       	ldi	r30, 0x29	; 41
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	80 83       	st	Z, r24
	UBRRH_REG= (u16UBBR>>8);
     2f6:	e0 e4       	ldi	r30, 0x40	; 64
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	89 2f       	mov	r24, r25
     300:	99 27       	eor	r25, r25
     302:	80 83       	st	Z, r24
	//Enable the Receiving and Transmitting Capabilities in the UART
	SET_BIT(UCSRB_REG,RXEN_BIT);
     304:	aa e2       	ldi	r26, 0x2A	; 42
     306:	b0 e0       	ldi	r27, 0x00	; 0
     308:	ea e2       	ldi	r30, 0x2A	; 42
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	80 61       	ori	r24, 0x10	; 16
     310:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,TXEN_BIT);
     312:	aa e2       	ldi	r26, 0x2A	; 42
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	ea e2       	ldi	r30, 0x2A	; 42
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	88 60       	ori	r24, 0x08	; 8
     31e:	8c 93       	st	X, r24
	if (u8ErrorState == UART_OK)
     320:	8b 81       	ldd	r24, Y+3	; 0x03
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	19 f4       	brne	.+6      	; 0x32c <UART_u8Init+0x11a>
	{
		// if there is no errors happened the Rise the Initialization flag indicating that the Peripherals is Initialized Correctly
		gu8_IntializationFlag = UART_INITIALIZED;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 93 f0 00 	sts	0x00F0, r24
	}else
	{
		//NOP
	}
	return u8ErrorState;
     32c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	cf 91       	pop	r28
     33a:	df 91       	pop	r29
     33c:	08 95       	ret

0000033e <UART_u8SendByte>:
 * @fn uint8_t UART_u8SendByte(uint8_t u8Data)
 * @brief This function is used to Send a Byte by polling mechanism
 * @pre the UART must be initialized
 */
uint8_t UART_u8SendByte(uint8_t u8Data)
{
     33e:	df 93       	push	r29
     340:	cf 93       	push	r28
     342:	00 d0       	rcall	.+0      	; 0x344 <UART_u8SendByte+0x6>
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
     348:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState;
	if (gu8_IntializationFlag==UART_INITIALIZED) // Check if the UART is initialized
     34a:	80 91 f0 00 	lds	r24, 0x00F0
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	89 f4       	brne	.+34     	; 0x374 <UART_u8SendByte+0x36>
	{
		// Busy wait until the current UART Transmittion ends and the UDR register is Available
		while(!GET_BIT(UCSRA_REG,UDRE_BIT));
     352:	eb e2       	ldi	r30, 0x2B	; 43
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	82 95       	swap	r24
     35a:	86 95       	lsr	r24
     35c:	87 70       	andi	r24, 0x07	; 7
     35e:	88 2f       	mov	r24, r24
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	81 70       	andi	r24, 0x01	; 1
     364:	90 70       	andi	r25, 0x00	; 0
     366:	00 97       	sbiw	r24, 0x00	; 0
     368:	a1 f3       	breq	.-24     	; 0x352 <UART_u8SendByte+0x14>
		// After the Register is available Load it with the Data Desired to be sent to initiate a transmission
		UDR_REG = u8Data;
     36a:	ec e2       	ldi	r30, 0x2C	; 44
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	8a 81       	ldd	r24, Y+2	; 0x02
     370:	80 83       	st	Z, r24
     372:	02 c0       	rjmp	.+4      	; 0x378 <UART_u8SendByte+0x3a>
	}else{
		// if the UART is not initialized then update the Error State
		u8ErrorState=UART_INITIALIZATION_ERROR;
     374:	88 e0       	ldi	r24, 0x08	; 8
     376:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
     378:	89 81       	ldd	r24, Y+1	; 0x01
}
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	cf 91       	pop	r28
     380:	df 91       	pop	r29
     382:	08 95       	ret

00000384 <UART_u8SendInt>:


uint8_t UART_u8SendInt(uint32_t u32Data)
{
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	df 93       	push	r29
     38a:	cf 93       	push	r28
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	c8 57       	subi	r28, 0x78	; 120
     392:	d0 40       	sbci	r29, 0x00	; 0
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	fe 01       	movw	r30, r28
     3a0:	ed 58       	subi	r30, 0x8D	; 141
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	91 83       	std	Z+1, r25	; 0x01
     3a6:	80 83       	st	Z, r24
	uint8_t au8Number[100]={0};
     3a8:	84 e6       	ldi	r24, 0x64	; 100
     3aa:	fe 01       	movw	r30, r28
     3ac:	3f 96       	adiw	r30, 0x0f	; 15
     3ae:	df 01       	movw	r26, r30
     3b0:	28 2f       	mov	r18, r24
     3b2:	1d 92       	st	X+, r1
     3b4:	2a 95       	dec	r18
     3b6:	e9 f7       	brne	.-6      	; 0x3b2 <UART_u8SendInt+0x2e>
	uint64_t u8Counter =1;
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	8f 83       	std	Y+7, r24	; 0x07
     3bc:	18 86       	std	Y+8, r1	; 0x08
     3be:	19 86       	std	Y+9, r1	; 0x09
     3c0:	1a 86       	std	Y+10, r1	; 0x0a
     3c2:	1b 86       	std	Y+11, r1	; 0x0b
     3c4:	1c 86       	std	Y+12, r1	; 0x0c
     3c6:	1d 86       	std	Y+13, r1	; 0x0d
     3c8:	1e 86       	std	Y+14, r1	; 0x0e
	uint8_t u8NumberASCII;

	    uint8_t i = 0;
     3ca:	1d 82       	std	Y+5, r1	; 0x05
	    /* Handle 0 explicitly, otherwise empty string is printed for 0 */
	    if (u32Data == 0)
     3cc:	fe 01       	movw	r30, r28
     3ce:	ed 58       	subi	r30, 0x8D	; 141
     3d0:	ff 4f       	sbci	r31, 0xFF	; 255
     3d2:	80 81       	ld	r24, Z
     3d4:	91 81       	ldd	r25, Z+1	; 0x01
     3d6:	00 97       	sbiw	r24, 0x00	; 0
     3d8:	09 f0       	breq	.+2      	; 0x3dc <UART_u8SendInt+0x58>
     3da:	51 c0       	rjmp	.+162    	; 0x47e <UART_u8SendInt+0xfa>
	    {
	    	au8Number[i++] = '0';
     3dc:	8d 81       	ldd	r24, Y+5	; 0x05
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	ce 01       	movw	r24, r28
     3e4:	0f 96       	adiw	r24, 0x0f	; 15
     3e6:	fc 01       	movw	r30, r24
     3e8:	e2 0f       	add	r30, r18
     3ea:	f3 1f       	adc	r31, r19
     3ec:	80 e3       	ldi	r24, 0x30	; 48
     3ee:	80 83       	st	Z, r24
     3f0:	8d 81       	ldd	r24, Y+5	; 0x05
     3f2:	8f 5f       	subi	r24, 0xFF	; 255
     3f4:	8d 83       	std	Y+5, r24	; 0x05
     3f6:	43 c0       	rjmp	.+134    	; 0x47e <UART_u8SendInt+0xfa>
	    // base 10. Otherwise numbers are considered unsigned.

	    // Process individual digits
	    while (u32Data != 0)
	    {
	    	uint8_t rem = u32Data % 10;
     3f8:	fe 01       	movw	r30, r28
     3fa:	ed 58       	subi	r30, 0x8D	; 141
     3fc:	ff 4f       	sbci	r31, 0xFF	; 255
     3fe:	80 81       	ld	r24, Z
     400:	91 81       	ldd	r25, Z+1	; 0x01
     402:	2a e0       	ldi	r18, 0x0A	; 10
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	b9 01       	movw	r22, r18
     408:	0e 94 2f 13 	call	0x265e	; 0x265e <__udivmodhi4>
     40c:	89 83       	std	Y+1, r24	; 0x01
	        au8Number[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
     40e:	8d 81       	ldd	r24, Y+5	; 0x05
     410:	a8 2f       	mov	r26, r24
     412:	b0 e0       	ldi	r27, 0x00	; 0
     414:	e8 96       	adiw	r28, 0x38	; 56
     416:	bf af       	std	Y+63, r27	; 0x3f
     418:	ae af       	std	Y+62, r26	; 0x3e
     41a:	e8 97       	sbiw	r28, 0x38	; 56
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	8a 30       	cpi	r24, 0x0A	; 10
     420:	38 f0       	brcs	.+14     	; 0x430 <UART_u8SendInt+0xac>
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	b8 2f       	mov	r27, r24
     426:	b9 5a       	subi	r27, 0xA9	; 169
     428:	e6 96       	adiw	r28, 0x36	; 54
     42a:	bf af       	std	Y+63, r27	; 0x3f
     42c:	e6 97       	sbiw	r28, 0x36	; 54
     42e:	06 c0       	rjmp	.+12     	; 0x43c <UART_u8SendInt+0xb8>
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	e8 2f       	mov	r30, r24
     434:	e0 5d       	subi	r30, 0xD0	; 208
     436:	e6 96       	adiw	r28, 0x36	; 54
     438:	ef af       	std	Y+63, r30	; 0x3f
     43a:	e6 97       	sbiw	r28, 0x36	; 54
     43c:	ce 01       	movw	r24, r28
     43e:	0f 96       	adiw	r24, 0x0f	; 15
     440:	e8 96       	adiw	r28, 0x38	; 56
     442:	ee ad       	ldd	r30, Y+62	; 0x3e
     444:	ff ad       	ldd	r31, Y+63	; 0x3f
     446:	e8 97       	sbiw	r28, 0x38	; 56
     448:	e8 0f       	add	r30, r24
     44a:	f9 1f       	adc	r31, r25
     44c:	e6 96       	adiw	r28, 0x36	; 54
     44e:	2f ad       	ldd	r18, Y+63	; 0x3f
     450:	e6 97       	sbiw	r28, 0x36	; 54
     452:	20 83       	st	Z, r18
     454:	8d 81       	ldd	r24, Y+5	; 0x05
     456:	8f 5f       	subi	r24, 0xFF	; 255
     458:	8d 83       	std	Y+5, r24	; 0x05
	        u32Data = u32Data/10;
     45a:	8e 01       	movw	r16, r28
     45c:	0d 58       	subi	r16, 0x8D	; 141
     45e:	1f 4f       	sbci	r17, 0xFF	; 255
     460:	fe 01       	movw	r30, r28
     462:	ed 58       	subi	r30, 0x8D	; 141
     464:	ff 4f       	sbci	r31, 0xFF	; 255
     466:	80 81       	ld	r24, Z
     468:	91 81       	ldd	r25, Z+1	; 0x01
     46a:	2a e0       	ldi	r18, 0x0A	; 10
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	b9 01       	movw	r22, r18
     470:	0e 94 2f 13 	call	0x265e	; 0x265e <__udivmodhi4>
     474:	cb 01       	movw	r24, r22
     476:	d8 01       	movw	r26, r16
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	9c 93       	st	X, r25
     47c:	8e 93       	st	-X, r24

	    // In standard itoa(), negative numbers are handled only with
	    // base 10. Otherwise numbers are considered unsigned.

	    // Process individual digits
	    while (u32Data != 0)
     47e:	fe 01       	movw	r30, r28
     480:	ed 58       	subi	r30, 0x8D	; 141
     482:	ff 4f       	sbci	r31, 0xFF	; 255
     484:	80 81       	ld	r24, Z
     486:	91 81       	ldd	r25, Z+1	; 0x01
     488:	00 97       	sbiw	r24, 0x00	; 0
     48a:	09 f0       	breq	.+2      	; 0x48e <UART_u8SendInt+0x10a>
     48c:	b5 cf       	rjmp	.-150    	; 0x3f8 <UART_u8SendInt+0x74>
	        au8Number[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
	        u32Data = u32Data/10;
	    }


	    au8Number[i] = '\0'; // Append string terminator
     48e:	8d 81       	ldd	r24, Y+5	; 0x05
     490:	28 2f       	mov	r18, r24
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	ce 01       	movw	r24, r28
     496:	0f 96       	adiw	r24, 0x0f	; 15
     498:	fc 01       	movw	r30, r24
     49a:	e2 0f       	add	r30, r18
     49c:	f3 1f       	adc	r31, r19
     49e:	10 82       	st	Z, r1

	    // Reverse the string
	    uint8_t start = 0;
     4a0:	1c 82       	std	Y+4, r1	; 0x04
	    uint8_t end = i -1;
     4a2:	8d 81       	ldd	r24, Y+5	; 0x05
     4a4:	81 50       	subi	r24, 0x01	; 1
     4a6:	8b 83       	std	Y+3, r24	; 0x03
     4a8:	28 c0       	rjmp	.+80     	; 0x4fa <UART_u8SendInt+0x176>
	    uint8_t temp;
	    while (start < end)
	    {
	    	temp =*(au8Number+start);
     4aa:	8c 81       	ldd	r24, Y+4	; 0x04
     4ac:	88 2f       	mov	r24, r24
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	fe 01       	movw	r30, r28
     4b2:	3f 96       	adiw	r30, 0x0f	; 15
     4b4:	e8 0f       	add	r30, r24
     4b6:	f9 1f       	adc	r31, r25
     4b8:	80 81       	ld	r24, Z
     4ba:	8a 83       	std	Y+2, r24	; 0x02
	    	*(au8Number+start) = *(au8Number+end);
     4bc:	8c 81       	ldd	r24, Y+4	; 0x04
     4be:	88 2f       	mov	r24, r24
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	de 01       	movw	r26, r28
     4c4:	1f 96       	adiw	r26, 0x0f	; 15
     4c6:	a8 0f       	add	r26, r24
     4c8:	b9 1f       	adc	r27, r25
     4ca:	8b 81       	ldd	r24, Y+3	; 0x03
     4cc:	88 2f       	mov	r24, r24
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	fe 01       	movw	r30, r28
     4d2:	3f 96       	adiw	r30, 0x0f	; 15
     4d4:	e8 0f       	add	r30, r24
     4d6:	f9 1f       	adc	r31, r25
     4d8:	80 81       	ld	r24, Z
     4da:	8c 93       	st	X, r24
	    	*(au8Number+end) = temp;
     4dc:	8b 81       	ldd	r24, Y+3	; 0x03
     4de:	88 2f       	mov	r24, r24
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	fe 01       	movw	r30, r28
     4e4:	3f 96       	adiw	r30, 0x0f	; 15
     4e6:	e8 0f       	add	r30, r24
     4e8:	f9 1f       	adc	r31, r25
     4ea:	8a 81       	ldd	r24, Y+2	; 0x02
     4ec:	80 83       	st	Z, r24
	        start++;
     4ee:	8c 81       	ldd	r24, Y+4	; 0x04
     4f0:	8f 5f       	subi	r24, 0xFF	; 255
     4f2:	8c 83       	std	Y+4, r24	; 0x04
	        end--;
     4f4:	8b 81       	ldd	r24, Y+3	; 0x03
     4f6:	81 50       	subi	r24, 0x01	; 1
     4f8:	8b 83       	std	Y+3, r24	; 0x03

	    // Reverse the string
	    uint8_t start = 0;
	    uint8_t end = i -1;
	    uint8_t temp;
	    while (start < end)
     4fa:	9c 81       	ldd	r25, Y+4	; 0x04
     4fc:	8b 81       	ldd	r24, Y+3	; 0x03
     4fe:	98 17       	cp	r25, r24
     500:	a0 f2       	brcs	.-88     	; 0x4aa <UART_u8SendInt+0x126>
	    	*(au8Number+start) = *(au8Number+end);
	    	*(au8Number+end) = temp;
	        start++;
	        end--;
	    }
	    UART_u8SendString(au8Number);
     502:	ce 01       	movw	r24, r28
     504:	0f 96       	adiw	r24, 0x0f	; 15
     506:	0e 94 91 02 	call	0x522	; 0x522 <UART_u8SendString>
		UART_u8SendByte(u8NumberASCII);
		u8Counter=u8Counter/10;
	}

*/
}
     50a:	c8 58       	subi	r28, 0x88	; 136
     50c:	df 4f       	sbci	r29, 0xFF	; 255
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	de bf       	out	0x3e, r29	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	cd bf       	out	0x3d, r28	; 61
     518:	cf 91       	pop	r28
     51a:	df 91       	pop	r29
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	08 95       	ret

00000522 <UART_u8SendString>:
 * @brief This function is used to Send a String of data by polling mechanism
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */
uint8_t UART_u8SendString(uint8_t* pau8Data)
{
     522:	df 93       	push	r29
     524:	cf 93       	push	r28
     526:	00 d0       	rcall	.+0      	; 0x528 <UART_u8SendString+0x6>
     528:	00 d0       	rcall	.+0      	; 0x52a <UART_u8SendString+0x8>
     52a:	00 d0       	rcall	.+0      	; 0x52c <UART_u8SendString+0xa>
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	9e 83       	std	Y+6, r25	; 0x06
     532:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8ErrorState = UART_OK;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8LastByte; 			/// a variable used to temporarily hold the value of the last character sent
	uint16_t u16StringCounter=0; 	/// counter to navigate the string as array
     538:	1a 82       	std	Y+2, r1	; 0x02
     53a:	19 82       	std	Y+1, r1	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED) // Check if the UART is initialized
     53c:	80 91 f0 00 	lds	r24, 0x00F0
     540:	81 30       	cpi	r24, 0x01	; 1
     542:	e1 f4       	brne	.+56     	; 0x57c <UART_u8SendString+0x5a>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8Data!=NULL)
     544:	8d 81       	ldd	r24, Y+5	; 0x05
     546:	9e 81       	ldd	r25, Y+6	; 0x06
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	a9 f0       	breq	.+42     	; 0x576 <UART_u8SendString+0x54>
		{
			// if not pointing to null
			do{
				//save the value of the character to a temporary variable
				u8LastByte=pau8Data[u16StringCounter];
     54c:	2d 81       	ldd	r18, Y+5	; 0x05
     54e:	3e 81       	ldd	r19, Y+6	; 0x06
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	9a 81       	ldd	r25, Y+2	; 0x02
     554:	f9 01       	movw	r30, r18
     556:	e8 0f       	add	r30, r24
     558:	f9 1f       	adc	r31, r25
     55a:	80 81       	ld	r24, Z
     55c:	8b 83       	std	Y+3, r24	; 0x03
				// Send this character through UART
				UART_u8SendByte(u8LastByte);
     55e:	8b 81       	ldd	r24, Y+3	; 0x03
     560:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_u8SendByte>
				// increment the array navigator to get the next character
				u16StringCounter++;
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	9a 81       	ldd	r25, Y+2	; 0x02
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	9a 83       	std	Y+2, r25	; 0x02
     56c:	89 83       	std	Y+1, r24	; 0x01

			}while(u8LastByte!=0x00);// do the same while the sent byte wasn't a new line
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	88 23       	and	r24, r24
     572:	61 f7       	brne	.-40     	; 0x54c <UART_u8SendString+0x2a>
     574:	05 c0       	rjmp	.+10     	; 0x580 <UART_u8SendString+0x5e>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
     576:	87 e0       	ldi	r24, 0x07	; 7
     578:	8c 83       	std	Y+4, r24	; 0x04
     57a:	02 c0       	rjmp	.+4      	; 0x580 <UART_u8SendString+0x5e>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
     57c:	88 e0       	ldi	r24, 0x08	; 8
     57e:	8c 83       	std	Y+4, r24	; 0x04
	}

	return u8ErrorState;
     580:	8c 81       	ldd	r24, Y+4	; 0x04

}
     582:	26 96       	adiw	r28, 0x06	; 6
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
     588:	de bf       	out	0x3e, r29	; 62
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	cd bf       	out	0x3d, r28	; 61
     58e:	cf 91       	pop	r28
     590:	df 91       	pop	r29
     592:	08 95       	ret

00000594 <UART_u8ReceiveByte>:
 * @brief This function is used to Get the Received byte of data by polling mechanism
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */
uint8_t UART_u8ReceiveByte(uint8_t* pu8RecievedData)
{
     594:	df 93       	push	r29
     596:	cf 93       	push	r28
     598:	00 d0       	rcall	.+0      	; 0x59a <UART_u8ReceiveByte+0x6>
     59a:	0f 92       	push	r0
     59c:	cd b7       	in	r28, 0x3d	; 61
     59e:	de b7       	in	r29, 0x3e	; 62
     5a0:	9b 83       	std	Y+3, r25	; 0x03
     5a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	89 83       	std	Y+1, r24	; 0x01
	// Check if the UART is Initialized
	if (gu8_IntializationFlag==UART_INITIALIZED)
     5a8:	80 91 f0 00 	lds	r24, 0x00F0
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	99 f4       	brne	.+38     	; 0x5d6 <UART_u8ReceiveByte+0x42>
	{
		//if it is initialized then check that the pointer is not pointing to null
		if (pu8RecievedData!=NULL)
     5b0:	8a 81       	ldd	r24, Y+2	; 0x02
     5b2:	9b 81       	ldd	r25, Y+3	; 0x03
     5b4:	00 97       	sbiw	r24, 0x00	; 0
     5b6:	61 f0       	breq	.+24     	; 0x5d0 <UART_u8ReceiveByte+0x3c>
		{
			//if not pointing to null
			// Busy wait until the UART Receive a byte
			while (!GET_BIT(UCSRA_REG,RXC_BIT));
     5b8:	eb e2       	ldi	r30, 0x2B	; 43
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	88 23       	and	r24, r24
     5c0:	dc f7       	brge	.-10     	; 0x5b8 <UART_u8ReceiveByte+0x24>
			// Then Load the received byte from the UDR register and save it to the data location input
			*pu8RecievedData = UDR_REG;
     5c2:	ec e2       	ldi	r30, 0x2C	; 44
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	ea 81       	ldd	r30, Y+2	; 0x02
     5ca:	fb 81       	ldd	r31, Y+3	; 0x03
     5cc:	80 83       	st	Z, r24
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <UART_u8ReceiveByte+0x46>
		}else
		{
			// if the Pointer is pointing to NULL then update the Error State
			u8ErrorState = UART_NULL_INPUT;
     5d0:	87 e0       	ldi	r24, 0x07	; 7
     5d2:	89 83       	std	Y+1, r24	; 0x01
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <UART_u8ReceiveByte+0x46>
		}
	}else
	{
		// if the UART is not initialized then update the Error State
		u8ErrorState=UART_INITIALIZATION_ERROR;
     5d6:	88 e0       	ldi	r24, 0x08	; 8
     5d8:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
     5da:	89 81       	ldd	r24, Y+1	; 0x01
}
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	08 95       	ret

000005e8 <UART_u8ReceiveInt>:


uint8_t UART_u8ReceiveInt(uint32_t* pu32ReceivedInt)
{
     5e8:	df 93       	push	r29
     5ea:	cf 93       	push	r28
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	64 97       	sbiw	r28, 0x14	; 20
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	9b 8b       	std	Y+19, r25	; 0x13
     5fe:	8a 8b       	std	Y+18, r24	; 0x12
    uint8_t u8ArrayCounter=0;
     600:	1e 82       	std	Y+6, r1	; 0x06
    uint32_t u8Multiplier=1;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	9d 83       	std	Y+5, r25	; 0x05
     608:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t ReceivedStr[11];
    *pu32ReceivedInt=0;
     60a:	ea 89       	ldd	r30, Y+18	; 0x12
     60c:	fb 89       	ldd	r31, Y+19	; 0x13
     60e:	11 82       	std	Z+1, r1	; 0x01
     610:	10 82       	st	Z, r1
    UART_u8RecieveString(ReceivedStr);
     612:	ce 01       	movw	r24, r28
     614:	07 96       	adiw	r24, 0x07	; 7
     616:	0e 94 74 03 	call	0x6e8	; 0x6e8 <UART_u8RecieveString>
    uint8_t ArrayNav=0;
     61a:	1b 82       	std	Y+3, r1	; 0x03
     61c:	03 c0       	rjmp	.+6      	; 0x624 <UART_u8ReceiveInt+0x3c>
    //UART_u8SendString(ReceivedStr);
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    {
    	u8ArrayCounter++;
     61e:	8e 81       	ldd	r24, Y+6	; 0x06
     620:	8f 5f       	subi	r24, 0xFF	; 255
     622:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t ReceivedStr[11];
    *pu32ReceivedInt=0;
    UART_u8RecieveString(ReceivedStr);
    uint8_t ArrayNav=0;
    //UART_u8SendString(ReceivedStr);
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
     624:	8e 81       	ldd	r24, Y+6	; 0x06
     626:	28 2f       	mov	r18, r24
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	ce 01       	movw	r24, r28
     62c:	07 96       	adiw	r24, 0x07	; 7
     62e:	fc 01       	movw	r30, r24
     630:	e2 0f       	add	r30, r18
     632:	f3 1f       	adc	r31, r19
     634:	80 81       	ld	r24, Z
     636:	8d 30       	cpi	r24, 0x0D	; 13
     638:	91 f7       	brne	.-28     	; 0x61e <UART_u8ReceiveInt+0x36>
    {
    	u8ArrayCounter++;
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
     63a:	1a 82       	std	Y+2, r1	; 0x02
     63c:	47 c0       	rjmp	.+142    	; 0x6cc <UART_u8ReceiveInt+0xe4>
    {

        for(uint8_t multiplier=(u8ArrayCounter-1)-loopCounter;multiplier>0;multiplier--)
     63e:	9e 81       	ldd	r25, Y+6	; 0x06
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	29 2f       	mov	r18, r25
     644:	28 1b       	sub	r18, r24
     646:	82 2f       	mov	r24, r18
     648:	81 50       	subi	r24, 0x01	; 1
     64a:	89 83       	std	Y+1, r24	; 0x01
     64c:	11 c0       	rjmp	.+34     	; 0x670 <UART_u8ReceiveInt+0x88>
        {
        	u8Multiplier=10*u8Multiplier;
     64e:	8c 81       	ldd	r24, Y+4	; 0x04
     650:	9d 81       	ldd	r25, Y+5	; 0x05
     652:	9c 01       	movw	r18, r24
     654:	22 0f       	add	r18, r18
     656:	33 1f       	adc	r19, r19
     658:	c9 01       	movw	r24, r18
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	82 0f       	add	r24, r18
     664:	93 1f       	adc	r25, r19
     666:	9d 83       	std	Y+5, r25	; 0x05
     668:	8c 83       	std	Y+4, r24	; 0x04
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    {

        for(uint8_t multiplier=(u8ArrayCounter-1)-loopCounter;multiplier>0;multiplier--)
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	81 50       	subi	r24, 0x01	; 1
     66e:	89 83       	std	Y+1, r24	; 0x01
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	88 23       	and	r24, r24
     674:	61 f7       	brne	.-40     	; 0x64e <UART_u8ReceiveInt+0x66>
        {
        	u8Multiplier=10*u8Multiplier;
        }
        *pu32ReceivedInt = *pu32ReceivedInt + ((ReceivedStr[ArrayNav]-'0')*u8Multiplier);
     676:	ea 89       	ldd	r30, Y+18	; 0x12
     678:	fb 89       	ldd	r31, Y+19	; 0x13
     67a:	40 81       	ld	r20, Z
     67c:	51 81       	ldd	r21, Z+1	; 0x01
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	28 2f       	mov	r18, r24
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	ce 01       	movw	r24, r28
     686:	07 96       	adiw	r24, 0x07	; 7
     688:	fc 01       	movw	r30, r24
     68a:	e2 0f       	add	r30, r18
     68c:	f3 1f       	adc	r31, r19
     68e:	80 81       	ld	r24, Z
     690:	88 2f       	mov	r24, r24
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	c0 97       	sbiw	r24, 0x30	; 48
     696:	9c 01       	movw	r18, r24
     698:	8c 81       	ldd	r24, Y+4	; 0x04
     69a:	9d 81       	ldd	r25, Y+5	; 0x05
     69c:	bc 01       	movw	r22, r24
     69e:	26 9f       	mul	r18, r22
     6a0:	c0 01       	movw	r24, r0
     6a2:	27 9f       	mul	r18, r23
     6a4:	90 0d       	add	r25, r0
     6a6:	36 9f       	mul	r19, r22
     6a8:	90 0d       	add	r25, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	84 0f       	add	r24, r20
     6ae:	95 1f       	adc	r25, r21
     6b0:	ea 89       	ldd	r30, Y+18	; 0x12
     6b2:	fb 89       	ldd	r31, Y+19	; 0x13
     6b4:	91 83       	std	Z+1, r25	; 0x01
     6b6:	80 83       	st	Z, r24
        ArrayNav++;
     6b8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ba:	8f 5f       	subi	r24, 0xFF	; 255
     6bc:	8b 83       	std	Y+3, r24	; 0x03
        u8Multiplier=1;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	9d 83       	std	Y+5, r25	; 0x05
     6c4:	8c 83       	std	Y+4, r24	; 0x04
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    {
    	u8ArrayCounter++;
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
     6c6:	8a 81       	ldd	r24, Y+2	; 0x02
     6c8:	8f 5f       	subi	r24, 0xFF	; 255
     6ca:	8a 83       	std	Y+2, r24	; 0x02
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	8e 81       	ldd	r24, Y+6	; 0x06
     6d0:	98 17       	cp	r25, r24
     6d2:	08 f4       	brcc	.+2      	; 0x6d6 <UART_u8ReceiveInt+0xee>
     6d4:	b4 cf       	rjmp	.-152    	; 0x63e <UART_u8ReceiveInt+0x56>
        *pu32ReceivedInt = *pu32ReceivedInt + ((ReceivedStr[ArrayNav]-'0')*u8Multiplier);
        ArrayNav++;
        u8Multiplier=1;
    }

}
     6d6:	64 96       	adiw	r28, 0x14	; 20
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	cd bf       	out	0x3d, r28	; 61
     6e2:	cf 91       	pop	r28
     6e4:	df 91       	pop	r29
     6e6:	08 95       	ret

000006e8 <UART_u8RecieveString>:
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */

uint8_t UART_u8RecieveString(uint8_t* pau8RecievedData)
{
     6e8:	df 93       	push	r29
     6ea:	cf 93       	push	r28
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <UART_u8RecieveString+0x6>
     6ee:	00 d0       	rcall	.+0      	; 0x6f0 <UART_u8RecieveString+0x8>
     6f0:	00 d0       	rcall	.+0      	; 0x6f2 <UART_u8RecieveString+0xa>
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	9e 83       	std	Y+6, r25	; 0x06
     6f8:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8ErrorState = UART_OK;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8PreReading; 			/// a variable used to temporarily hold the value of the last character received
	uint8_t* Temp=pau8RecievedData; /// a temporarily pointer initialized with the place of the first character of the array to save the received string in
     6fe:	8d 81       	ldd	r24, Y+5	; 0x05
     700:	9e 81       	ldd	r25, Y+6	; 0x06
     702:	9a 83       	std	Y+2, r25	; 0x02
     704:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag == UART_INITIALIZED)// Check if the UART is initialized
     706:	80 91 f0 00 	lds	r24, 0x00F0
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	d9 f4       	brne	.+54     	; 0x744 <UART_u8RecieveString+0x5c>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8RecievedData!=NULL)
     70e:	8d 81       	ldd	r24, Y+5	; 0x05
     710:	9e 81       	ldd	r25, Y+6	; 0x06
     712:	00 97       	sbiw	r24, 0x00	; 0
     714:	a1 f0       	breq	.+40     	; 0x73e <UART_u8RecieveString+0x56>
		{
			do{
				// Receive a character through UART
				UART_u8ReceiveByte(&u8PreReading);
     716:	ce 01       	movw	r24, r28
     718:	04 96       	adiw	r24, 0x04	; 4
     71a:	0e 94 ca 02 	call	0x594	; 0x594 <UART_u8ReceiveByte>
				//Save the received character to the last empty place in the array
				*Temp =u8PreReading;
     71e:	8c 81       	ldd	r24, Y+4	; 0x04
     720:	e9 81       	ldd	r30, Y+1	; 0x01
     722:	fa 81       	ldd	r31, Y+2	; 0x02
     724:	80 83       	st	Z, r24
				//Update the last empty place in the array
				Temp++;
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	9a 81       	ldd	r25, Y+2	; 0x02
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	9a 83       	std	Y+2, r25	; 0x02
     72e:	89 83       	std	Y+1, r24	; 0x01
			}while (u8PreReading!=0x0D); // do this while the received byte is not endline
     730:	8c 81       	ldd	r24, Y+4	; 0x04
     732:	8d 30       	cpi	r24, 0x0D	; 13
     734:	81 f7       	brne	.-32     	; 0x716 <UART_u8RecieveString+0x2e>
			*(Temp) ='\0';
     736:	e9 81       	ldd	r30, Y+1	; 0x01
     738:	fa 81       	ldd	r31, Y+2	; 0x02
     73a:	10 82       	st	Z, r1
     73c:	05 c0       	rjmp	.+10     	; 0x748 <UART_u8RecieveString+0x60>

		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
     73e:	87 e0       	ldi	r24, 0x07	; 7
     740:	8b 83       	std	Y+3, r24	; 0x03
     742:	02 c0       	rjmp	.+4      	; 0x748 <UART_u8RecieveString+0x60>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState= UART_INITIALIZATION_ERROR;
     744:	88 e0       	ldi	r24, 0x08	; 8
     746:	8b 83       	std	Y+3, r24	; 0x03
	}

	return u8ErrorState;
     748:	8b 81       	ldd	r24, Y+3	; 0x03
}
     74a:	26 96       	adiw	r28, 0x06	; 6
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	cf 91       	pop	r28
     758:	df 91       	pop	r29
     75a:	08 95       	ret

0000075c <UART_u8ReceiveCountedString>:

uint8_t UART_u8ReceiveCountedString(uint8_t*pau8RecievedData,uint8_t Count)
{
     75c:	df 93       	push	r29
     75e:	cf 93       	push	r28
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	27 97       	sbiw	r28, 0x07	; 7
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	9e 83       	std	Y+6, r25	; 0x06
     772:	8d 83       	std	Y+5, r24	; 0x05
     774:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t u8ErrorState = UART_OK;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8PreReading; 			/// a variable used to temporarily hold the value of the last character received
	uint8_t* Temp=pau8RecievedData; /// a temporarily pointer initialized with the place of the first character of the array to save the received string in
     77a:	8d 81       	ldd	r24, Y+5	; 0x05
     77c:	9e 81       	ldd	r25, Y+6	; 0x06
     77e:	9a 83       	std	Y+2, r25	; 0x02
     780:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag == UART_INITIALIZED)// Check if the UART is initialized
     782:	80 91 f0 00 	lds	r24, 0x00F0
     786:	81 30       	cpi	r24, 0x01	; 1
     788:	f1 f4       	brne	.+60     	; 0x7c6 <UART_u8ReceiveCountedString+0x6a>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8RecievedData!=NULL)
     78a:	8d 81       	ldd	r24, Y+5	; 0x05
     78c:	9e 81       	ldd	r25, Y+6	; 0x06
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	b9 f0       	breq	.+46     	; 0x7c0 <UART_u8ReceiveCountedString+0x64>
		{
			do{
				// Receive a character through UART
				UART_u8ReceiveByte(&u8PreReading);
     792:	ce 01       	movw	r24, r28
     794:	04 96       	adiw	r24, 0x04	; 4
     796:	0e 94 ca 02 	call	0x594	; 0x594 <UART_u8ReceiveByte>
				//Save the received character to the last empty place in the array
				*Temp =u8PreReading;
     79a:	8c 81       	ldd	r24, Y+4	; 0x04
     79c:	e9 81       	ldd	r30, Y+1	; 0x01
     79e:	fa 81       	ldd	r31, Y+2	; 0x02
     7a0:	80 83       	st	Z, r24
				//Update the last empty place in the array
				Temp++;
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	9a 81       	ldd	r25, Y+2	; 0x02
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	9a 83       	std	Y+2, r25	; 0x02
     7aa:	89 83       	std	Y+1, r24	; 0x01
				Count--;
     7ac:	8f 81       	ldd	r24, Y+7	; 0x07
     7ae:	81 50       	subi	r24, 0x01	; 1
     7b0:	8f 83       	std	Y+7, r24	; 0x07
			}while (u8PreReading!=0x0D&&Count!=0); // do this while the received byte is not endline
     7b2:	8c 81       	ldd	r24, Y+4	; 0x04
     7b4:	8d 30       	cpi	r24, 0x0D	; 13
     7b6:	49 f0       	breq	.+18     	; 0x7ca <UART_u8ReceiveCountedString+0x6e>
     7b8:	8f 81       	ldd	r24, Y+7	; 0x07
     7ba:	88 23       	and	r24, r24
     7bc:	51 f7       	brne	.-44     	; 0x792 <UART_u8ReceiveCountedString+0x36>
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <UART_u8ReceiveCountedString+0x6e>

		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
     7c0:	87 e0       	ldi	r24, 0x07	; 7
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <UART_u8ReceiveCountedString+0x6e>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState= UART_INITIALIZATION_ERROR;
     7c6:	88 e0       	ldi	r24, 0x08	; 8
     7c8:	8b 83       	std	Y+3, r24	; 0x03
	}

	return u8ErrorState;
     7ca:	8b 81       	ldd	r24, Y+3	; 0x03
}
     7cc:	27 96       	adiw	r28, 0x07	; 7
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	cf 91       	pop	r28
     7da:	df 91       	pop	r29
     7dc:	08 95       	ret

000007de <UART_u8EnableRecievingInterrupt>:
 * @brief This function is called to enable the Receiving complete Interrupt
 * @pre - the UART must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t UART_u8EnableRecievingInterrupt(void (*pfnCallBack)(void))
{
     7de:	df 93       	push	r29
     7e0:	cf 93       	push	r28
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <UART_u8EnableRecievingInterrupt+0x6>
     7e4:	0f 92       	push	r0
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	9b 83       	std	Y+3, r25	; 0x03
     7ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED)// Check if the UART is initialized
     7f2:	80 91 f0 00 	lds	r24, 0x00F0
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	e1 f4       	brne	.+56     	; 0x832 <UART_u8EnableRecievingInterrupt+0x54>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pfnCallBack!=NULL)
     7fa:	8a 81       	ldd	r24, Y+2	; 0x02
     7fc:	9b 81       	ldd	r25, Y+3	; 0x03
     7fe:	00 97       	sbiw	r24, 0x00	; 0
     800:	a9 f0       	breq	.+42     	; 0x82c <UART_u8EnableRecievingInterrupt+0x4e>
		{
			//update the pointer of the CallBack function with the passed address of function
			gpf_RecieveCallBack = pfnCallBack;
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	9b 81       	ldd	r25, Y+3	; 0x03
     806:	90 93 f2 00 	sts	0x00F2, r25
     80a:	80 93 f1 00 	sts	0x00F1, r24
			//Enable the Receiving Interrupt
			SET_BIT(UCSRB_REG,RXCIE_BIT);
     80e:	aa e2       	ldi	r26, 0x2A	; 42
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ea e2       	ldi	r30, 0x2A	; 42
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	80 68       	ori	r24, 0x80	; 128
     81a:	8c 93       	st	X, r24
			//Enable the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
     81c:	af e5       	ldi	r26, 0x5F	; 95
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	ef e5       	ldi	r30, 0x5F	; 95
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	80 68       	ori	r24, 0x80	; 128
     828:	8c 93       	st	X, r24
     82a:	05 c0       	rjmp	.+10     	; 0x836 <UART_u8EnableRecievingInterrupt+0x58>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
     82c:	87 e0       	ldi	r24, 0x07	; 7
     82e:	89 83       	std	Y+1, r24	; 0x01
     830:	02 c0       	rjmp	.+4      	; 0x836 <UART_u8EnableRecievingInterrupt+0x58>
		}

	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
     832:	88 e0       	ldi	r24, 0x08	; 8
     834:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
     836:	89 81       	ldd	r24, Y+1	; 0x01
}
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	cf 91       	pop	r28
     840:	df 91       	pop	r29
     842:	08 95       	ret

00000844 <UART_u8EnableSendingInterrupt>:
 * @brief This function is called to enable the Sending complete Interrupt
 * @pre - the UART must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t UART_u8EnableSendingInterrupt(void (*pfnCallBack)(void))
{
     844:	df 93       	push	r29
     846:	cf 93       	push	r28
     848:	00 d0       	rcall	.+0      	; 0x84a <UART_u8EnableSendingInterrupt+0x6>
     84a:	0f 92       	push	r0
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
     850:	9b 83       	std	Y+3, r25	; 0x03
     852:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED)// Check if the UART is initialized
     858:	80 91 f0 00 	lds	r24, 0x00F0
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	e1 f4       	brne	.+56     	; 0x898 <__stack+0x39>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pfnCallBack!=NULL)
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	9b 81       	ldd	r25, Y+3	; 0x03
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	a9 f0       	breq	.+42     	; 0x892 <__stack+0x33>
		{
			//update the pointer of the CallBack function with the passed address of function
			gpf_TransmitCallBack = pfnCallBack;
     868:	8a 81       	ldd	r24, Y+2	; 0x02
     86a:	9b 81       	ldd	r25, Y+3	; 0x03
     86c:	90 93 f4 00 	sts	0x00F4, r25
     870:	80 93 f3 00 	sts	0x00F3, r24
			//Enable the Receiving Interrupt
			SET_BIT(UCSRB_REG,TXCIE_BIT);
     874:	aa e2       	ldi	r26, 0x2A	; 42
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	ea e2       	ldi	r30, 0x2A	; 42
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	80 64       	ori	r24, 0x40	; 64
     880:	8c 93       	st	X, r24
			//Enable the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
     882:	af e5       	ldi	r26, 0x5F	; 95
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	ef e5       	ldi	r30, 0x5F	; 95
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	80 68       	ori	r24, 0x80	; 128
     88e:	8c 93       	st	X, r24
     890:	05 c0       	rjmp	.+10     	; 0x89c <__stack+0x3d>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
     892:	87 e0       	ldi	r24, 0x07	; 7
     894:	89 83       	std	Y+1, r24	; 0x01
     896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
		}

	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
     898:	88 e0       	ldi	r24, 0x08	; 8
     89a:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
     89c:	89 81       	ldd	r24, Y+1	; 0x01

}
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	cf 91       	pop	r28
     8a6:	df 91       	pop	r29
     8a8:	08 95       	ret

000008aa <UART_u8DisableReceivingInterrupt>:
/**
 * @fn UART_u8DisableRecievingInterrupt(void)
 * @brief This function is called to disable the Receiving complete Interrupt
 */
void UART_u8DisableReceivingInterrupt(void)
{
     8aa:	df 93       	push	r29
     8ac:	cf 93       	push	r28
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
	//Reset the pointer to the callback function to NULL
	gpf_RecieveCallBack = NULL;
     8b2:	10 92 f2 00 	sts	0x00F2, r1
     8b6:	10 92 f1 00 	sts	0x00F1, r1
	// Clear the Enable bit of the receiving Interrupt
	CLR_BIT(UCSRB_REG,RXCIE_BIT);
     8ba:	aa e2       	ldi	r26, 0x2A	; 42
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	ea e2       	ldi	r30, 0x2A	; 42
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	8f 77       	andi	r24, 0x7F	; 127
     8c6:	8c 93       	st	X, r24
}
     8c8:	cf 91       	pop	r28
     8ca:	df 91       	pop	r29
     8cc:	08 95       	ret

000008ce <UART_u8DisableTransmittionInterrupt>:
/**
 * @fn UART_u8DisableTransmittionInterrupt(void)
 * @brief This function is called to disable the Transmission complete Interrupt
 */
void UART_u8DisableTransmittionInterrupt(void)
{
     8ce:	df 93       	push	r29
     8d0:	cf 93       	push	r28
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
	//Reset the pointer to the callback function to NULL
	gpf_TransmitCallBack = NULL;
     8d6:	10 92 f4 00 	sts	0x00F4, r1
     8da:	10 92 f3 00 	sts	0x00F3, r1
	// Clear the Enable bit of the transmittion complete Interrupt
	CLR_BIT(UCSRB_REG,TXCIE_BIT);
     8de:	aa e2       	ldi	r26, 0x2A	; 42
     8e0:	b0 e0       	ldi	r27, 0x00	; 0
     8e2:	ea e2       	ldi	r30, 0x2A	; 42
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	8f 7b       	andi	r24, 0xBF	; 191
     8ea:	8c 93       	st	X, r24
}
     8ec:	cf 91       	pop	r28
     8ee:	df 91       	pop	r29
     8f0:	08 95       	ret

000008f2 <UART_u8Deinit>:
/**
 * @fn UART_u8Deinit(void)
 * @brief This function is called to Stop the UART Peripheral and De-initialize it
 */
void UART_u8Deinit(void)
{
     8f2:	df 93       	push	r29
     8f4:	cf 93       	push	r28
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
	// Disable the UART capabilities of Receiving and transmitting
	CLR_BIT(UCSRB_REG,RXEN_BIT);
     8fa:	aa e2       	ldi	r26, 0x2A	; 42
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	ea e2       	ldi	r30, 0x2A	; 42
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8f 7e       	andi	r24, 0xEF	; 239
     906:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG,TXEN_BIT);
     908:	aa e2       	ldi	r26, 0x2A	; 42
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	ea e2       	ldi	r30, 0x2A	; 42
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	87 7f       	andi	r24, 0xF7	; 247
     914:	8c 93       	st	X, r24
	//Reset the pointer to the transmittion callback function to NULL
	gpf_TransmitCallBack = NULL;
     916:	10 92 f4 00 	sts	0x00F4, r1
     91a:	10 92 f3 00 	sts	0x00F3, r1
	//Reset the pointer to the Receiving callback function to NULL
	gpf_RecieveCallBack = NULL;
     91e:	10 92 f2 00 	sts	0x00F2, r1
     922:	10 92 f1 00 	sts	0x00F1, r1
	// Clear the Enable bit of the receiving Interrupt
	CLR_BIT(UCSRB_REG,RXCIE_BIT);
     926:	aa e2       	ldi	r26, 0x2A	; 42
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	ea e2       	ldi	r30, 0x2A	; 42
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	8f 77       	andi	r24, 0x7F	; 127
     932:	8c 93       	st	X, r24
	// Clear the Enable bit of the transmittion complete Interrupt
	CLR_BIT(UCSRB_REG,TXCIE_BIT);
     934:	aa e2       	ldi	r26, 0x2A	; 42
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	ea e2       	ldi	r30, 0x2A	; 42
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	8f 7b       	andi	r24, 0xBF	; 191
     940:	8c 93       	st	X, r24
	// Reset the Initialization flag indicating that the UART is not initialized anymore
	gu8_IntializationFlag = UART_INITIALIZED;
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	80 93 f0 00 	sts	0x00F0, r24

}
     948:	cf 91       	pop	r28
     94a:	df 91       	pop	r29
     94c:	08 95       	ret

0000094e <__vector_13>:

/**
 * @brief the Receiving Interrupt ISR
 */
void __vector_13(void) {
     94e:	1f 92       	push	r1
     950:	0f 92       	push	r0
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	0f 92       	push	r0
     956:	11 24       	eor	r1, r1
     958:	2f 93       	push	r18
     95a:	3f 93       	push	r19
     95c:	4f 93       	push	r20
     95e:	5f 93       	push	r21
     960:	6f 93       	push	r22
     962:	7f 93       	push	r23
     964:	8f 93       	push	r24
     966:	9f 93       	push	r25
     968:	af 93       	push	r26
     96a:	bf 93       	push	r27
     96c:	ef 93       	push	r30
     96e:	ff 93       	push	r31
     970:	df 93       	push	r29
     972:	cf 93       	push	r28
     974:	0f 92       	push	r0
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62

	uint8_t UDRFlush; // this is a temporary variable used to read the UDR to clear the receive Complete flag
	if (gpf_RecieveCallBack!=NULL) // check if the pointer to the Callback is pointing to NULL
     97a:	80 91 f1 00 	lds	r24, 0x00F1
     97e:	90 91 f2 00 	lds	r25, 0x00F2
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	31 f0       	breq	.+12     	; 0x992 <__vector_13+0x44>
	{
		//if not then call the function pointing to it
		gpf_RecieveCallBack();
     986:	e0 91 f1 00 	lds	r30, 0x00F1
     98a:	f0 91 f2 00 	lds	r31, 0x00F2
     98e:	09 95       	icall
     990:	04 c0       	rjmp	.+8      	; 0x99a <__vector_13+0x4c>
	}else
	{
		// if it is the just flush the UDR
		UDRFlush = UDR_REG;
     992:	ec e2       	ldi	r30, 0x2C	; 44
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	89 83       	std	Y+1, r24	; 0x01
	}
}
     99a:	0f 90       	pop	r0
     99c:	cf 91       	pop	r28
     99e:	df 91       	pop	r29
     9a0:	ff 91       	pop	r31
     9a2:	ef 91       	pop	r30
     9a4:	bf 91       	pop	r27
     9a6:	af 91       	pop	r26
     9a8:	9f 91       	pop	r25
     9aa:	8f 91       	pop	r24
     9ac:	7f 91       	pop	r23
     9ae:	6f 91       	pop	r22
     9b0:	5f 91       	pop	r21
     9b2:	4f 91       	pop	r20
     9b4:	3f 91       	pop	r19
     9b6:	2f 91       	pop	r18
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	0f 90       	pop	r0
     9be:	1f 90       	pop	r1
     9c0:	18 95       	reti

000009c2 <__vector_14>:

/**
 * @brief the Transmission Interrupt ISR
 */
void __vector_14(void) {
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	2f 93       	push	r18
     9ce:	3f 93       	push	r19
     9d0:	4f 93       	push	r20
     9d2:	5f 93       	push	r21
     9d4:	6f 93       	push	r22
     9d6:	7f 93       	push	r23
     9d8:	8f 93       	push	r24
     9da:	9f 93       	push	r25
     9dc:	af 93       	push	r26
     9de:	bf 93       	push	r27
     9e0:	ef 93       	push	r30
     9e2:	ff 93       	push	r31
     9e4:	df 93       	push	r29
     9e6:	cf 93       	push	r28
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
	if (gpf_TransmitCallBack!=NULL)// check if the pointer to the Callback is pointing to NULL
     9ec:	80 91 f3 00 	lds	r24, 0x00F3
     9f0:	90 91 f4 00 	lds	r25, 0x00F4
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	29 f0       	breq	.+10     	; 0xa02 <__vector_14+0x40>
	{
		//if not then call the function pointing to it
		gpf_TransmitCallBack();
     9f8:	e0 91 f3 00 	lds	r30, 0x00F3
     9fc:	f0 91 f4 00 	lds	r31, 0x00F4
     a00:	09 95       	icall
	}
}
     a02:	cf 91       	pop	r28
     a04:	df 91       	pop	r29
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	7f 91       	pop	r23
     a14:	6f 91       	pop	r22
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0
     a24:	1f 90       	pop	r1
     a26:	18 95       	reti

00000a28 <SPI_u8Init>:
 * @pre This function require
 * 			- the configurations in the peripheral configuration file is configured with allowed options
 * 			- the u8SPIMode should take only two possibilities  SPI_MASTER or SPI_SLAVE
 */
uint8_t SPI_u8Init(SPIMode_t u8SPIMode)
{
     a28:	df 93       	push	r29
     a2a:	cf 93       	push	r28
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <SPI_u8Init+0x6>
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
     a32:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = SPI_OK;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	89 83       	std	Y+1, r24	; 0x01

LED_u8Init(&LEDT);
     a38:	89 ee       	ldi	r24, 0xE9	; 233
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_u8Init>
	/*
	 * Set the transmittion Clock of the SPI as configured by the SPI_CLK_RATE Configuration
	 */
#if SPI_CLK_RATE == SPI_CPU_4
	CLR_BIT(SPCR_REG,SPR0_BIT);
     a40:	ad e2       	ldi	r26, 0x2D	; 45
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	ed e2       	ldi	r30, 0x2D	; 45
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	8e 7f       	andi	r24, 0xFE	; 254
     a4c:	8c 93       	st	X, r24
	CLR_BIT(SPCR_REG,SPR1_BIT);
     a4e:	ad e2       	ldi	r26, 0x2D	; 45
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	ed e2       	ldi	r30, 0x2D	; 45
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	8d 7f       	andi	r24, 0xFD	; 253
     a5a:	8c 93       	st	X, r24
	CLR_BIT(SPSR_REG,SPI2X_BIT);
     a5c:	ae e2       	ldi	r26, 0x2E	; 46
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	ee e2       	ldi	r30, 0x2E	; 46
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	80 81       	ld	r24, Z
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	8c 93       	st	X, r24

	/*
	 * Set the DATA sampling mode of the SPI as configured by the SPI_DATA_MODE configuration in the configuration file
	 */
#if SPI_DATA_MODE == SPI_SAMPLE_LEADING_RISING
	CLR_BIT(SPCR_REG,CPHA_BIT);
     a6a:	ad e2       	ldi	r26, 0x2D	; 45
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	ed e2       	ldi	r30, 0x2D	; 45
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	8b 7f       	andi	r24, 0xFB	; 251
     a76:	8c 93       	st	X, r24
	CLR_BIT(SPCR_REG,CPOL_BIT);
     a78:	ad e2       	ldi	r26, 0x2D	; 45
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	ed e2       	ldi	r30, 0x2D	; 45
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	87 7f       	andi	r24, 0xF7	; 247
     a84:	8c 93       	st	X, r24

	/*
	 * Setting the Data bits transmitting order as configured by the SPI_DATA_ORDER configuration in the configuration file
	 */
#if SPI_DATA_ORDER == SPI_LSB_FIRST
	SET_BIT(SPCR_REG,DORD_BIT);
     a86:	ad e2       	ldi	r26, 0x2D	; 45
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	ed e2       	ldi	r30, 0x2D	; 45
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	80 62       	ori	r24, 0x20	; 32
     a92:	8c 93       	st	X, r24
#else
	u8ErrorState = SPI_WRONG_DATA_ORDER_CFG;
#endif

	/*Set the SPI Mode and Configure the SPI PINS */
	if (u8SPIMode == SPI_MASTER)
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	21 f5       	brne	.+72     	; 0xae2 <SPI_u8Init+0xba>
	{
		//Set the SPI mode to master
		SET_BIT(SPCR_REG,MSTR_BIT);
     a9a:	ad e2       	ldi	r26, 0x2D	; 45
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	ed e2       	ldi	r30, 0x2D	; 45
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	80 61       	ori	r24, 0x10	; 16
     aa6:	8c 93       	st	X, r24
		//Configure the MOSI pin as output
		SET_BIT(DDRB_REG,DDB5_BIT);
     aa8:	a7 e3       	ldi	r26, 0x37	; 55
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	e7 e3       	ldi	r30, 0x37	; 55
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	80 62       	ori	r24, 0x20	; 32
     ab4:	8c 93       	st	X, r24
		//Configure the Slave Select pin as output
		SET_BIT(DDRB_REG,DDB4_BIT);
     ab6:	a7 e3       	ldi	r26, 0x37	; 55
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e7 e3       	ldi	r30, 0x37	; 55
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	80 61       	ori	r24, 0x10	; 16
     ac2:	8c 93       	st	X, r24
		SET_BIT(PORTB_REG,DDB4_BIT);
     ac4:	a8 e3       	ldi	r26, 0x38	; 56
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	e8 e3       	ldi	r30, 0x38	; 56
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	80 61       	ori	r24, 0x10	; 16
     ad0:	8c 93       	st	X, r24
		//Configure the SCK pin as output
		SET_BIT(DDRB_REG,DDB7_BIT);
     ad2:	a7 e3       	ldi	r26, 0x37	; 55
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e7 e3       	ldi	r30, 0x37	; 55
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	80 68       	ori	r24, 0x80	; 128
     ade:	8c 93       	st	X, r24
     ae0:	14 c0       	rjmp	.+40     	; 0xb0a <SPI_u8Init+0xe2>

	}else if (u8SPIMode == SPI_SLAVE)
     ae2:	8a 81       	ldd	r24, Y+2	; 0x02
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	79 f4       	brne	.+30     	; 0xb06 <SPI_u8Init+0xde>
	{
		//Set the SPI mode to Slave
		CLR_BIT(SPCR_REG,MSTR_BIT);
     ae8:	ad e2       	ldi	r26, 0x2D	; 45
     aea:	b0 e0       	ldi	r27, 0x00	; 0
     aec:	ed e2       	ldi	r30, 0x2D	; 45
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	8f 7e       	andi	r24, 0xEF	; 239
     af4:	8c 93       	st	X, r24
		//Configure the MISO pin as output
		SET_BIT(DDRB_REG,DDB6_BIT);
     af6:	a7 e3       	ldi	r26, 0x37	; 55
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	e7 e3       	ldi	r30, 0x37	; 55
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	80 64       	ori	r24, 0x40	; 64
     b02:	8c 93       	st	X, r24
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <SPI_u8Init+0xe2>
	}else
	{
		u8ErrorState = SPI_WRONG_MODE;
     b06:	85 e0       	ldi	r24, 0x05	; 5
     b08:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if no error occurred in the previous stages then Enable the SPI with the Written Configurations*/
	if (u8ErrorState==SPI_OK)
     b0a:	89 81       	ldd	r24, Y+1	; 0x01
     b0c:	81 30       	cpi	r24, 0x01	; 1
     b0e:	51 f4       	brne	.+20     	; 0xb24 <SPI_u8Init+0xfc>
	{
		SET_BIT(SPCR_REG,SPE_BIT);
     b10:	ad e2       	ldi	r26, 0x2D	; 45
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	ed e2       	ldi	r30, 0x2D	; 45
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	80 81       	ld	r24, Z
     b1a:	80 64       	ori	r24, 0x40	; 64
     b1c:	8c 93       	st	X, r24
		/*Change the state of the SPI to initialized as MASTER/SLAVE indicating that it is initialized and in this mode*/
		gu8_SPIState = u8SPIMode;
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	80 93 f5 00 	sts	0x00F5, r24
	else
	{
		//if not do nothing
	}

	return u8ErrorState;
     b24:	89 81       	ldd	r24, Y+1	; 0x01
}
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	cf 91       	pop	r28
     b2c:	df 91       	pop	r29
     b2e:	08 95       	ret

00000b30 <SPI_u8SendByte>:
 * @brief This function is used to Send a byte using the SPI peripheral
 * @pre This function require
 * 			- The SPI to be initialized
 */
uint8_t SPI_u8SendByte(uint8_t u8Data)
{
     b30:	df 93       	push	r29
     b32:	cf 93       	push	r28
     b34:	00 d0       	rcall	.+0      	; 0xb36 <SPI_u8SendByte+0x6>
     b36:	0f 92       	push	r0
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ErrorState = SPI_OK;
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t flush_buffer;
	if (gu8_SPIState!=SPI_NOT_INITIALIZED)//check first if the SPI is initialized
     b42:	80 91 f5 00 	lds	r24, 0x00F5
     b46:	88 23       	and	r24, r24
     b48:	a9 f0       	breq	.+42     	; 0xb74 <SPI_u8SendByte+0x44>
	{
		CLR_BIT(PORTB_REG,DDB4_BIT);
     b4a:	a8 e3       	ldi	r26, 0x38	; 56
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	e8 e3       	ldi	r30, 0x38	; 56
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8f 7e       	andi	r24, 0xEF	; 239
     b56:	8c 93       	st	X, r24
		//Load the Data to the SPI data Register to initiate the transmission
		SPDR_REG = u8Data;
     b58:	ef e2       	ldi	r30, 0x2F	; 47
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	80 83       	st	Z, r24
		//Wait until the Transmission is complete
		while (!GET_BIT(SPSR_REG,SPIF_BIT));
     b60:	ee e2       	ldi	r30, 0x2E	; 46
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 23       	and	r24, r24
     b68:	dc f7       	brge	.-10     	; 0xb60 <SPI_u8SendByte+0x30>
		flush_buffer = SPDR_REG;		/* Flush received data */
     b6a:	ef e2       	ldi	r30, 0x2F	; 47
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	89 83       	std	Y+1, r24	; 0x01
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <SPI_u8SendByte+0x48>
//		SET_BIT(PORTB_REG,DDB4_BIT);
	}else
	{
		u8ErrorState = SPI_INITIALIZATION_ERROR;
     b74:	86 e0       	ldi	r24, 0x06	; 6
     b76:	8a 83       	std	Y+2, r24	; 0x02
	}
	return u8ErrorState;
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
}
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <SPI_u8SendString>:
 * @pre This function require
 * 			- The SPI to be initialized
 * 			- the pu8Data pointer can not points to NULL
 */
uint8_t SPI_u8SendString(uint8_t* pu8Data)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <SPI_u8SendString+0x6>
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <SPI_u8SendString+0x8>
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	9c 83       	std	Y+4, r25	; 0x04
     b94:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ErrorState=SPI_OK;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8CharCounter=0; /// a variable used to navigate the array of the characters
     b9a:	19 82       	std	Y+1, r1	; 0x01

	if (gu8_SPIState!=SPI_NOT_INITIALIZED)// Check first if the SPI is initialized
     b9c:	80 91 f5 00 	lds	r24, 0x00F5
     ba0:	88 23       	and	r24, r24
     ba2:	29 f1       	breq	.+74     	; 0xbee <SPI_u8SendString+0x68>
	{
		if (pu8Data!=NULL) // if it is initialized then check the pointer is not pointing to NULL
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	9c 81       	ldd	r25, Y+4	; 0x04
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	f1 f0       	breq	.+60     	; 0xbe8 <SPI_u8SendString+0x62>
     bac:	0e c0       	rjmp	.+28     	; 0xbca <SPI_u8SendString+0x44>
		{
			while (pu8Data[u8CharCounter]!='\0')
			{
				//While the current character is not endline
				// Send the character through SPI
				SPI_u8SendByte(pu8Data[u8CharCounter]);
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	8b 81       	ldd	r24, Y+3	; 0x03
     bb6:	9c 81       	ldd	r25, Y+4	; 0x04
     bb8:	fc 01       	movw	r30, r24
     bba:	e2 0f       	add	r30, r18
     bbc:	f3 1f       	adc	r31, r19
     bbe:	80 81       	ld	r24, Z
     bc0:	0e 94 98 05 	call	0xb30	; 0xb30 <SPI_u8SendByte>
				//check the next character
				u8CharCounter++;
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	8f 5f       	subi	r24, 0xFF	; 255
     bc8:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_SPIState!=SPI_NOT_INITIALIZED)// Check first if the SPI is initialized
	{
		if (pu8Data!=NULL) // if it is initialized then check the pointer is not pointing to NULL
		{
			while (pu8Data[u8CharCounter]!='\0')
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	8b 81       	ldd	r24, Y+3	; 0x03
     bd2:	9c 81       	ldd	r25, Y+4	; 0x04
     bd4:	fc 01       	movw	r30, r24
     bd6:	e2 0f       	add	r30, r18
     bd8:	f3 1f       	adc	r31, r19
     bda:	80 81       	ld	r24, Z
     bdc:	88 23       	and	r24, r24
     bde:	39 f7       	brne	.-50     	; 0xbae <SPI_u8SendString+0x28>
				SPI_u8SendByte(pu8Data[u8CharCounter]);
				//check the next character
				u8CharCounter++;
			}
			//After sending the string send endline character indicating the end of the string
			SPI_u8SendByte('\0');
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	0e 94 98 05 	call	0xb30	; 0xb30 <SPI_u8SendByte>
     be6:	05 c0       	rjmp	.+10     	; 0xbf2 <SPI_u8SendString+0x6c>

		}else
		{
			// if the input pointer is pointing to NULL update the error state
			u8ErrorState = SPI_NULL_INPUT;
     be8:	87 e0       	ldi	r24, 0x07	; 7
     bea:	8a 83       	std	Y+2, r24	; 0x02
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <SPI_u8SendString+0x6c>
		}

	}else
	{
		// if the SPI is not initialized then update the error state
		u8ErrorState=SPI_INITIALIZATION_ERROR;
     bee:	86 e0       	ldi	r24, 0x06	; 6
     bf0:	8a 83       	std	Y+2, r24	; 0x02
	}

	return u8ErrorState;
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
}
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <SPI_u8ReceiveByte>:
 * @pre This function require
 * 			- The SPI to be initialized
 * 			- the pu8Data pointer can not points to NULL
 */
uint8_t SPI_u8ReceiveByte(uint8_t* pu8Data)
{
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	00 d0       	rcall	.+0      	; 0xc08 <SPI_u8ReceiveByte+0x6>
     c08:	0f 92       	push	r0
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	9b 83       	std	Y+3, r25	; 0x03
     c10:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = SPI_OK;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	89 83       	std	Y+1, r24	; 0x01


	if (gu8_SPIState!=SPI_NOT_INITIALIZED)//check first if the SPI is initialized
     c16:	80 91 f5 00 	lds	r24, 0x00F5
     c1a:	88 23       	and	r24, r24
     c1c:	99 f0       	breq	.+38     	; 0xc44 <SPI_u8ReceiveByte+0x42>
	{
		if (pu8Data!=NULL)//Then Check if the pointer is not pointing to a NULL
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	9b 81       	ldd	r25, Y+3	; 0x03
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	61 f0       	breq	.+24     	; 0xc3e <SPI_u8ReceiveByte+0x3c>
		{
			//Wait until the Reception is complete
			while (!GET_BIT(SPSR_REG,SPIF_BIT));
     c26:	ee e2       	ldi	r30, 0x2E	; 46
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	88 23       	and	r24, r24
     c2e:	dc f7       	brge	.-10     	; 0xc26 <SPI_u8ReceiveByte+0x24>
			//Load the SPI data Register to the place the pointer holding its address
			*pu8Data = SPDR_REG;
     c30:	ef e2       	ldi	r30, 0x2F	; 47
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	ea 81       	ldd	r30, Y+2	; 0x02
     c38:	fb 81       	ldd	r31, Y+3	; 0x03
     c3a:	80 83       	st	Z, r24
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <SPI_u8ReceiveByte+0x46>
		}else
		{
			u8ErrorState = SPI_NULL_INPUT;
     c3e:	87 e0       	ldi	r24, 0x07	; 7
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <SPI_u8ReceiveByte+0x46>
		}

	}else
	{
		u8ErrorState = SPI_INITIALIZATION_ERROR;
     c44:	86 e0       	ldi	r24, 0x06	; 6
     c46:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
}
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <SPI_u8ReceiveString>:
 * @pre This function require
 * 			- The SPI to be initialized
 * 			- the pu8Data pointer can not points to NULL
 */
uint8_t SPI_u8ReceiveString(uint8_t* pu8Data)
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <SPI_u8ReceiveString+0x6>
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <SPI_u8ReceiveString+0x8>
     c5e:	0f 92       	push	r0
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	9d 83       	std	Y+5, r25	; 0x05
     c66:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ErrorState=SPI_OK;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8CharCounter=0;  /// a variable used to navigate the array of the characters
     c6c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Temp;			/// a variable used to temporarily hold the value of the last character sent

	if (gu8_SPIState!=SPI_NOT_INITIALIZED)// Check first if the SPI is initialized
     c6e:	80 91 f5 00 	lds	r24, 0x00F5
     c72:	88 23       	and	r24, r24
     c74:	31 f1       	breq	.+76     	; 0xcc2 <SPI_u8ReceiveString+0x6c>
	{
		if (pu8Data!=NULL)// if it is initialized then check the pointer is not pointing to NULL
     c76:	8c 81       	ldd	r24, Y+4	; 0x04
     c78:	9d 81       	ldd	r25, Y+5	; 0x05
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	f9 f0       	breq	.+62     	; 0xcbc <SPI_u8ReceiveString+0x66>
		{
			do
			{
				//Receive Byte
				SPI_u8ReceiveByte(&u8Temp);
     c7e:	ce 01       	movw	r24, r28
     c80:	03 96       	adiw	r24, 0x03	; 3
     c82:	0e 94 01 06 	call	0xc02	; 0xc02 <SPI_u8ReceiveByte>
				//Save the received byte to the first empty place in the array of characters
				pu8Data[u8CharCounter] = u8Temp;
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	8c 81       	ldd	r24, Y+4	; 0x04
     c8e:	9d 81       	ldd	r25, Y+5	; 0x05
     c90:	fc 01       	movw	r30, r24
     c92:	e2 0f       	add	r30, r18
     c94:	f3 1f       	adc	r31, r19
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	80 83       	st	Z, r24
				//update the array navigator
				u8CharCounter++;
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	8f 5f       	subi	r24, 0xFF	; 255
     c9e:	89 83       	std	Y+1, r24	; 0x01
			}while (u8Temp!='\0'); // do this until we receive endline character indicating the end of the string
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	88 23       	and	r24, r24
     ca4:	61 f7       	brne	.-40     	; 0xc7e <SPI_u8ReceiveString+0x28>

			// save the endline character in the end of the string
			pu8Data[u8CharCounter] = u8Temp;
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	9d 81       	ldd	r25, Y+5	; 0x05
     cb0:	fc 01       	movw	r30, r24
     cb2:	e2 0f       	add	r30, r18
     cb4:	f3 1f       	adc	r31, r19
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	80 83       	st	Z, r24
     cba:	05 c0       	rjmp	.+10     	; 0xcc6 <SPI_u8ReceiveString+0x70>

		}else
		{
			// if the input pointer is pointing to NULL update the error state
			u8ErrorState = SPI_NULL_INPUT;
     cbc:	87 e0       	ldi	r24, 0x07	; 7
     cbe:	8a 83       	std	Y+2, r24	; 0x02
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <SPI_u8ReceiveString+0x70>
		}

	}else
	{
		// if the SPI is not initialized then update the error state
		u8ErrorState=SPI_INITIALIZATION_ERROR;
     cc2:	86 e0       	ldi	r24, 0x06	; 6
     cc4:	8a 83       	std	Y+2, r24	; 0x02
	}

	return u8ErrorState;
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <SPI_u8EnableInterrupt>:
 * @brief This function is called to enable the SPI Transmit complete Interrupt
 * @pre - the SPI must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t SPI_u8EnableInterrupt(void (*pfnCallBack)(void))
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	00 d0       	rcall	.+0      	; 0xcde <SPI_u8EnableInterrupt+0x6>
     cde:	0f 92       	push	r0
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	9b 83       	std	Y+3, r25	; 0x03
     ce6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = SPI_OK;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	89 83       	std	Y+1, r24	; 0x01
	if (gu8_SPIState != SPI_NOT_INITIALIZED)// Check first if the SPI is initialized
     cec:	80 91 f5 00 	lds	r24, 0x00F5
     cf0:	88 23       	and	r24, r24
     cf2:	e1 f0       	breq	.+56     	; 0xd2c <SPI_u8EnableInterrupt+0x54>
	{
		if (pfnCallBack!=NULL)// if it is initialized then check the pointer is not pointing to NULL
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	a9 f0       	breq	.+42     	; 0xd26 <SPI_u8EnableInterrupt+0x4e>
		{
			// Set the pointer of the call function to the function address passed by the user
			gpf_SPICallBack = pfnCallBack;
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	9b 81       	ldd	r25, Y+3	; 0x03
     d00:	90 93 f7 00 	sts	0x00F7, r25
     d04:	80 93 f6 00 	sts	0x00F6, r24
			// Set the Enable bit of the SPI Interrupt
			SET_BIT(SPCR_REG,SPIE_BIT);
     d08:	ad e2       	ldi	r26, 0x2D	; 45
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ed e2       	ldi	r30, 0x2D	; 45
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
			// Set the Enable bit of the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
     d16:	af e5       	ldi	r26, 0x5F	; 95
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	ef e5       	ldi	r30, 0x5F	; 95
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 68       	ori	r24, 0x80	; 128
     d22:	8c 93       	st	X, r24
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <SPI_u8EnableInterrupt+0x58>
		}else
		{
			// if the input pointer is pointing to NULL update the error state
			u8ErrorState = SPI_NULL_INPUT;
     d26:	87 e0       	ldi	r24, 0x07	; 7
     d28:	89 83       	std	Y+1, r24	; 0x01
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <SPI_u8EnableInterrupt+0x58>
		}
	}else
	{
		// if the SPI is not initialized then update the error state
		u8ErrorState = SPI_INITIALIZATION_ERROR;
     d2c:	86 e0       	ldi	r24, 0x06	; 6
     d2e:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
     d30:	89 81       	ldd	r24, Y+1	; 0x01

}
     d32:	0f 90       	pop	r0
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <SPI_u8DisableInterrupt>:
/**
 * @fn void SPI_u8DisableInterrupt(void)
 * @brief Used to disable the SPI Interrupt
 */
void SPI_u8DisableInterrupt(void)
{
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
	// Reset the pointer of the call function to NULL
	gpf_SPICallBack = NULL;
     d46:	10 92 f7 00 	sts	0x00F7, r1
     d4a:	10 92 f6 00 	sts	0x00F6, r1
	// Reset the Enable bit of the SPI Interrupt to disable it
	CLR_BIT(SPCR_REG,SPIE_BIT);
     d4e:	ad e2       	ldi	r26, 0x2D	; 45
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ed e2       	ldi	r30, 0x2D	; 45
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	8f 77       	andi	r24, 0x7F	; 127
     d5a:	8c 93       	st	X, r24
}
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <SPI_u8Deinit>:
/**
 * @fn void SPI_u8Deinit(void)
 * @brief This function is called to Stop the SPI Peripheral and De-initialize it
 */
void SPI_u8Deinit(void)
{
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
	// Disable the SPI capabilities of Receiving and transmitting
	CLR_BIT(SPCR_REG,SPE_BIT);
     d6a:	ad e2       	ldi	r26, 0x2D	; 45
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	ed e2       	ldi	r30, 0x2D	; 45
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8f 7b       	andi	r24, 0xBF	; 191
     d76:	8c 93       	st	X, r24
	//Reset the pointer to the callback function to NULL
	gpf_SPICallBack = NULL;
     d78:	10 92 f7 00 	sts	0x00F7, r1
     d7c:	10 92 f6 00 	sts	0x00F6, r1
	// Clear the Enable bit of the SPI Interrupt
	CLR_BIT(SPCR_REG,SPIE_BIT);
     d80:	ad e2       	ldi	r26, 0x2D	; 45
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	ed e2       	ldi	r30, 0x2D	; 45
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8f 77       	andi	r24, 0x7F	; 127
     d8c:	8c 93       	st	X, r24
	// Reset the Initialization flag indicating that the SPI is not initialized anymore
	gu8_SPIState = SPI_NOT_INITIALIZED;
     d8e:	10 92 f5 00 	sts	0x00F5, r1

}
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <__vector_12>:


/**
 * @brief the SPI Interrupt ISR
 */
void __vector_12(void) {
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62

	if (gpf_SPICallBack!=NULL) // check if the pointer to the Callback is pointing to NULL
     da0:	80 91 f6 00 	lds	r24, 0x00F6
     da4:	90 91 f7 00 	lds	r25, 0x00F7
     da8:	00 97       	sbiw	r24, 0x00	; 0
     daa:	29 f0       	breq	.+10     	; 0xdb6 <__vector_12+0x1e>
	{
		//if not then call the function pointing to it
		gpf_SPICallBack();
     dac:	e0 91 f6 00 	lds	r30, 0x00F6
     db0:	f0 91 f7 00 	lds	r31, 0x00F7
     db4:	09 95       	icall
	}
}
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <I2C_u8Init>:
static volatile uint8_t gu8_I2CState= I2C_NO_INFO;



uint8_t I2C_u8Init()
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = I2C_OK;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	89 83       	std	Y+1, r24	; 0x01

	//Set the clock rate of the I2C bus
	TWBR_REG = I2C_400KHZ;
     dca:	e0 e2       	ldi	r30, 0x20	; 32
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	88 e4       	ldi	r24, 0x48	; 72
     dd0:	80 83       	st	Z, r24
	//Set the slave address which it will respond to
	TWAR_REG =I2C_OWN_SLAVE_ADDRESS;
     dd2:	e2 e2       	ldi	r30, 0x22	; 34
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	80 83       	st	Z, r24
	//Enable the ACK
	SET_BIT(TWCR_REG,TWEA_BIT);
     dda:	a6 e5       	ldi	r26, 0x56	; 86
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e6 e5       	ldi	r30, 0x56	; 86
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	80 64       	ori	r24, 0x40	; 64
     de6:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWIE_BIT);
     de8:	a6 e5       	ldi	r26, 0x56	; 86
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e6 e5       	ldi	r30, 0x56	; 86
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	81 60       	ori	r24, 0x01	; 1
     df4:	8c 93       	st	X, r24
	SET_BIT(SREG_REG,I_BIT);
     df6:	af e5       	ldi	r26, 0x5F	; 95
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ef e5       	ldi	r30, 0x5F	; 95
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	80 68       	ori	r24, 0x80	; 128
     e02:	8c 93       	st	X, r24
	//Enable the I2C Peripheral
	SET_BIT(TWCR_REG,TWEN_BIT);
     e04:	a6 e5       	ldi	r26, 0x56	; 86
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e6 e5       	ldi	r30, 0x56	; 86
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	84 60       	ori	r24, 0x04	; 4
     e10:	8c 93       	st	X, r24

#ifdef DEBUG_MODE
	LED_u8Init(&LEDTEST1);
     e12:	88 ef       	ldi	r24, 0xF8	; 248
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_u8Init>
	LED_u8Init(&LEDTEST2);
     e1a:	8b ee       	ldi	r24, 0xEB	; 235
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 56 10 	call	0x20ac	; 0x20ac <LED_u8Init>
#endif

	return u8ErrorState;
     e22:	89 81       	ldd	r24, Y+1	; 0x01
}
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <I2C_u8GetStatus>:


uint8_t I2C_u8GetStatus(void)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
	return TWSR_REG & I2C_PRESCALAR_MASK;
     e34:	e1 e2       	ldi	r30, 0x21	; 33
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	88 7f       	andi	r24, 0xF8	; 248
}
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <I2C_u8MasterSendSLA>:

uint8_t I2C_u8MasterSendSLA(uint8_t u8SlaveAddress,uint8_t u8MasterOperation)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <I2C_u8MasterSendSLA+0x6>
     e48:	0f 92       	push	r0
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	8a 83       	std	Y+2, r24	; 0x02
     e50:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState= I2C_OK;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	89 83       	std	Y+1, r24	; 0x01
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
     e56:	e6 e5       	ldi	r30, 0x56	; 86
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 23       	and	r24, r24
     e5e:	dc f7       	brge	.-10     	; 0xe56 <I2C_u8MasterSendSLA+0x14>
		if (gu8_I2CState==I2C_MT_START_TRANSMITTED||gu8_I2CState==I2C_MT_REPEATED_START_TRANSMITTED)
     e60:	80 91 ed 00 	lds	r24, 0x00ED
     e64:	88 30       	cpi	r24, 0x08	; 8
     e66:	21 f0       	breq	.+8      	; 0xe70 <I2C_u8MasterSendSLA+0x2e>
     e68:	80 91 ed 00 	lds	r24, 0x00ED
     e6c:	80 31       	cpi	r24, 0x10	; 16
     e6e:	71 f4       	brne	.+28     	; 0xe8c <I2C_u8MasterSendSLA+0x4a>
		{//if it is state that the start condition is successfully sent then load the slave address in the data register and set the mode to write
			TWDR_REG = (u8SlaveAddress|u8MasterOperation);
     e70:	e3 e2       	ldi	r30, 0x23	; 35
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	89 2b       	or	r24, r25
     e7a:	80 83       	st	Z, r24
			// Clear the interrupt flag to start the next action by the peripheral
			ASSIGN_HIGH_NIB(TWCR_REG,I2C_CLR_INTERRUPT_FLAG);
     e7c:	a6 e5       	ldi	r26, 0x56	; 86
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e5       	ldi	r30, 0x56	; 86
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8f 70       	andi	r24, 0x0F	; 15
     e88:	80 68       	ori	r24, 0x80	; 128
     e8a:	8c 93       	st	X, r24
		}
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
     e8c:	e6 e5       	ldi	r30, 0x56	; 86
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	88 23       	and	r24, r24
     e94:	dc f7       	brge	.-10     	; 0xe8c <I2C_u8MasterSendSLA+0x4a>

	return u8ErrorState;
     e96:	89 81       	ldd	r24, Y+1	; 0x01
}
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <I2C_u8MasterSendByte>:


uint8_t I2C_u8MasterSendByte(uint8_t u8Data)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <I2C_u8MasterSendByte+0x6>
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = I2C_OK;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	89 83       	std	Y+1, r24	; 0x01

	//Load the data in the I2C Data Register
	TWDR_REG= u8Data;
     eb4:	e3 e2       	ldi	r30, 0x23	; 35
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	80 83       	st	Z, r24
	// Clear the interrupt flag to start the next action by the peripheral
	ASSIGN_HIGH_NIB(TWCR_REG,I2C_CLR_INTERRUPT_FLAG);
     ebc:	a6 e5       	ldi	r26, 0x56	; 86
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e6 e5       	ldi	r30, 0x56	; 86
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8f 70       	andi	r24, 0x0F	; 15
     ec8:	80 68       	ori	r24, 0x80	; 128
     eca:	8c 93       	st	X, r24
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
     ecc:	e6 e5       	ldi	r30, 0x56	; 86
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	88 23       	and	r24, r24
     ed4:	dc f7       	brge	.-10     	; 0xecc <I2C_u8MasterSendByte+0x28>
	//wait until the byte is sent
	return u8ErrorState;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <I2C_u8MasterSendStart>:

uint8_t I2C_u8MasterSendStart(void)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	0f 92       	push	r0
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState=I2C_OK;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	89 83       	std	Y+1, r24	; 0x01
	if (gu8_I2CState==I2C_NO_INFO)
     ef0:	80 91 ed 00 	lds	r24, 0x00ED
     ef4:	88 3f       	cpi	r24, 0xF8	; 248
     ef6:	69 f4       	brne	.+26     	; 0xf12 <I2C_u8MasterSendStart+0x30>
	{// if it is the first communication or after stop condition

		//Send the Start Condition
		SET_BIT(TWCR_REG,TWSTA_BIT);
     ef8:	a6 e5       	ldi	r26, 0x56	; 86
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e6 e5       	ldi	r30, 0x56	; 86
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 62       	ori	r24, 0x20	; 32
     f04:	8c 93       	st	X, r24
		//Wait until it is sent
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
     f06:	e6 e5       	ldi	r30, 0x56	; 86
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	88 23       	and	r24, r24
     f0e:	dc f7       	brge	.-10     	; 0xf06 <I2C_u8MasterSendStart+0x24>
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <I2C_u8MasterSendStart+0x34>

	}else
	{
		u8ErrorState= I2C_ILLEGAL_START;
     f12:	86 e0       	ldi	r24, 0x06	; 6
     f14:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
     f16:	89 81       	ldd	r24, Y+1	; 0x01
}
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <I2C_u8SendRepeatedStart>:

uint8_t I2C_u8SendRepeatedStart(void)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	0f 92       	push	r0
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = I2C_OK;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	89 83       	std	Y+1, r24	; 0x01
//	uint8_t u8I2CState= I2C_u8GetStatus();
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
     f2e:	e6 e5       	ldi	r30, 0x56	; 86
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	88 23       	and	r24, r24
     f36:	dc f7       	brge	.-10     	; 0xf2e <I2C_u8SendRepeatedStart+0xe>

	if (gu8_I2CState==I2C_MT_DATA_TRANSMITTED_ACK || gu8_I2CState==I2C_MT_DATA_TRANSMITTED_NACK)
     f38:	80 91 ed 00 	lds	r24, 0x00ED
     f3c:	88 32       	cpi	r24, 0x28	; 40
     f3e:	21 f0       	breq	.+8      	; 0xf48 <I2C_u8SendRepeatedStart+0x28>
     f40:	80 91 ed 00 	lds	r24, 0x00ED
     f44:	80 33       	cpi	r24, 0x30	; 48
     f46:	49 f4       	brne	.+18     	; 0xf5a <I2C_u8SendRepeatedStart+0x3a>
	{// if the current state is the data byte is sent
		//Then send the Repeated start condition and clear the interrupt flag to send it
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_START_CONDITION);
     f48:	a6 e5       	ldi	r26, 0x56	; 86
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e6 e5       	ldi	r30, 0x56	; 86
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8f 70       	andi	r24, 0x0F	; 15
     f54:	80 6a       	ori	r24, 0xA0	; 160
     f56:	8c 93       	st	X, r24
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <I2C_u8SendRepeatedStart+0x3e>
	}else
	{
		// if not update the error state to indicate that the start condition can not be send here
		u8ErrorState = I2C_START_WRONG_PLACE;
     f5a:	85 e0       	ldi	r24, 0x05	; 5
     f5c:	89 83       	std	Y+1, r24	; 0x01
	}


	return u8ErrorState;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f60:	0f 90       	pop	r0
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <I2C_u8MasterReceiveWithACK>:


uint8_t I2C_u8MasterReceiveWithACK(uint8_t* pu8Data)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <I2C_u8MasterReceiveWithACK+0x6>
     f6e:	0f 92       	push	r0
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	9b 83       	std	Y+3, r25	; 0x03
     f76:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState=I2C_OK;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	89 83       	std	Y+1, r24	; 0x01
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
     f7c:	e6 e5       	ldi	r30, 0x56	; 86
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	88 23       	and	r24, r24
     f84:	dc f7       	brge	.-10     	; 0xf7c <I2C_u8MasterReceiveWithACK+0x14>
	if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_ACK||gu8_I2CState==I2C_MR_DATA_RECEIVED_ACK)
     f86:	80 91 ed 00 	lds	r24, 0x00ED
     f8a:	80 34       	cpi	r24, 0x40	; 64
     f8c:	21 f0       	breq	.+8      	; 0xf96 <I2C_u8MasterReceiveWithACK+0x2e>
     f8e:	80 91 ed 00 	lds	r24, 0x00ED
     f92:	80 35       	cpi	r24, 0x50	; 80
     f94:	c1 f4       	brne	.+48     	; 0xfc6 <I2C_u8MasterReceiveWithACK+0x5e>
	{
		LED_u8On(&LEDTEST1);
     f96:	88 ef       	ldi	r24, 0xF8	; 248
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LED_u8On>
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_RECEIVE_WITH_ACK);
     f9e:	a6 e5       	ldi	r26, 0x56	; 86
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e6 e5       	ldi	r30, 0x56	; 86
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	8f 70       	andi	r24, 0x0F	; 15
     faa:	80 6c       	ori	r24, 0xC0	; 192
     fac:	8c 93       	st	X, r24
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
     fae:	e6 e5       	ldi	r30, 0x56	; 86
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	88 23       	and	r24, r24
     fb6:	dc f7       	brge	.-10     	; 0xfae <I2C_u8MasterReceiveWithACK+0x46>
		*pu8Data=TWDR_REG;
     fb8:	e3 e2       	ldi	r30, 0x23	; 35
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	ea 81       	ldd	r30, Y+2	; 0x02
     fc0:	fb 81       	ldd	r31, Y+3	; 0x03
     fc2:	80 83       	st	Z, r24
     fc4:	0e c0       	rjmp	.+28     	; 0xfe2 <I2C_u8MasterReceiveWithACK+0x7a>

	}else if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_NACK)
     fc6:	80 91 ed 00 	lds	r24, 0x00ED
     fca:	88 34       	cpi	r24, 0x48	; 72
     fcc:	51 f4       	brne	.+20     	; 0xfe2 <I2C_u8MasterReceiveWithACK+0x7a>
	{
		u8ErrorState= I2C_SLAVE_NOT_AVLBL;
     fce:	87 e0       	ldi	r24, 0x07	; 7
     fd0:	89 83       	std	Y+1, r24	; 0x01
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_STOP_CONDITION);
     fd2:	a6 e5       	ldi	r26, 0x56	; 86
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e6 e5       	ldi	r30, 0x56	; 86
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8f 70       	andi	r24, 0x0F	; 15
     fde:	80 69       	ori	r24, 0x90	; 144
     fe0:	8c 93       	st	X, r24
	}
	return u8ErrorState;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <I2C_u8MasterReceiveWithNAK>:

uint8_t I2C_u8MasterReceiveWithNAK(uint8_t* pu8Data)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <I2C_u8MasterReceiveWithNAK+0x6>
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9b 83       	std	Y+3, r25	; 0x03
     ffe:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState=I2C_OK;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    1004:	e6 e5       	ldi	r30, 0x56	; 86
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	88 23       	and	r24, r24
    100c:	dc f7       	brge	.-10     	; 0x1004 <I2C_u8MasterReceiveWithNAK+0x14>
	if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_ACK||gu8_I2CState==I2C_MR_DATA_RECEIVED_ACK)
    100e:	80 91 ed 00 	lds	r24, 0x00ED
    1012:	80 34       	cpi	r24, 0x40	; 64
    1014:	21 f0       	breq	.+8      	; 0x101e <I2C_u8MasterReceiveWithNAK+0x2e>
    1016:	80 91 ed 00 	lds	r24, 0x00ED
    101a:	80 35       	cpi	r24, 0x50	; 80
    101c:	a1 f4       	brne	.+40     	; 0x1046 <I2C_u8MasterReceiveWithNAK+0x56>
	{
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_CLR_INTERRUPT_FLAG);
    101e:	a6 e5       	ldi	r26, 0x56	; 86
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e6 e5       	ldi	r30, 0x56	; 86
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	8f 70       	andi	r24, 0x0F	; 15
    102a:	80 68       	ori	r24, 0x80	; 128
    102c:	8c 93       	st	X, r24
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    102e:	e6 e5       	ldi	r30, 0x56	; 86
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	88 23       	and	r24, r24
    1036:	dc f7       	brge	.-10     	; 0x102e <I2C_u8MasterReceiveWithNAK+0x3e>
		*pu8Data=TWDR_REG;
    1038:	e3 e2       	ldi	r30, 0x23	; 35
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	ea 81       	ldd	r30, Y+2	; 0x02
    1040:	fb 81       	ldd	r31, Y+3	; 0x03
    1042:	80 83       	st	Z, r24
    1044:	0e c0       	rjmp	.+28     	; 0x1062 <I2C_u8MasterReceiveWithNAK+0x72>

	}else if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_NACK)
    1046:	80 91 ed 00 	lds	r24, 0x00ED
    104a:	88 34       	cpi	r24, 0x48	; 72
    104c:	51 f4       	brne	.+20     	; 0x1062 <I2C_u8MasterReceiveWithNAK+0x72>
	{
		u8ErrorState= I2C_SLAVE_NOT_AVLBL;
    104e:	87 e0       	ldi	r24, 0x07	; 7
    1050:	89 83       	std	Y+1, r24	; 0x01
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_STOP_CONDITION);
    1052:	a6 e5       	ldi	r26, 0x56	; 86
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e6 e5       	ldi	r30, 0x56	; 86
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8f 70       	andi	r24, 0x0F	; 15
    105e:	80 69       	ori	r24, 0x90	; 144
    1060:	8c 93       	st	X, r24
	}

	return u8ErrorState;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <I2C_u8Stop>:

uint8_t I2C_u8Stop(void)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	0f 92       	push	r0
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = I2C_OK;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	89 83       	std	Y+1, r24	; 0x01
	//uint8_t u8I2CState= I2C_u8GetStatus();

	if (gu8_I2CState!=I2C_MT_START_TRANSMITTED || gu8_I2CState==I2C_MT_REPEATED_START_TRANSMITTED)
    107e:	80 91 ed 00 	lds	r24, 0x00ED
    1082:	88 30       	cpi	r24, 0x08	; 8
    1084:	21 f4       	brne	.+8      	; 0x108e <I2C_u8Stop+0x1e>
    1086:	80 91 ed 00 	lds	r24, 0x00ED
    108a:	80 31       	cpi	r24, 0x10	; 16
    108c:	49 f4       	brne	.+18     	; 0x10a0 <I2C_u8Stop+0x30>
	{// if the current state is not after a start condition

		//Then send the stop condition and clear the interrupt flag to send it
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_STOP_CONDITION);
    108e:	a6 e5       	ldi	r26, 0x56	; 86
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e6 e5       	ldi	r30, 0x56	; 86
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8f 70       	andi	r24, 0x0F	; 15
    109a:	80 69       	ori	r24, 0x90	; 144
    109c:	8c 93       	st	X, r24
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <I2C_u8Stop+0x34>
	}else
	{
		// if not update the error state to indicate that the start condition can not be send here
		u8ErrorState = I2C_START_WRONG_PLACE;
    10a0:	85 e0       	ldi	r24, 0x05	; 5
    10a2:	89 83       	std	Y+1, r24	; 0x01
	}
	gu8_I2CState=I2C_NO_INFO;
    10a4:	88 ef       	ldi	r24, 0xF8	; 248
    10a6:	80 93 ed 00 	sts	0x00ED, r24


	return u8ErrorState;
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <I2C_u8SlaveGetByte>:

uint8_t I2C_u8SlaveGetByte(uint8_t* pu8Reading)
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <I2C_u8SlaveGetByte+0x6>
    10ba:	0f 92       	push	r0
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until the Device is addressed*/
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    10c4:	e6 e5       	ldi	r30, 0x56	; 86
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	88 23       	and	r24, r24
    10cc:	dc f7       	brge	.-10     	; 0x10c4 <I2C_u8SlaveGetByte+0x10>

	/*Assign the high nibble of the I2C control register with value that will make it send a NACK after receiving data*/
	ASSIGN_HIGH_NIB(TWCR_REG,I2C_RECEIVE_WITH_ACK);
    10ce:	a6 e5       	ldi	r26, 0x56	; 86
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e6 e5       	ldi	r30, 0x56	; 86
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	8f 70       	andi	r24, 0x0F	; 15
    10da:	80 6c       	ori	r24, 0xC0	; 192
    10dc:	8c 93       	st	X, r24
	while (!(gu8_I2CState==I2C_SR_DATA_RECIEVED ||gu8_I2CState==I2C_SR_LAST_BYTE_RECIEVED ) );
    10de:	80 91 ed 00 	lds	r24, 0x00ED
    10e2:	80 38       	cpi	r24, 0x80	; 128
    10e4:	21 f0       	breq	.+8      	; 0x10ee <I2C_u8SlaveGetByte+0x3a>
    10e6:	80 91 ed 00 	lds	r24, 0x00ED
    10ea:	88 38       	cpi	r24, 0x88	; 136
    10ec:	c1 f7       	brne	.-16     	; 0x10de <I2C_u8SlaveGetByte+0x2a>
	ASSIGN_HIGH_NIB(TWCR_REG,I2C_RECOGNIZE_SLA_WITH_ACK);
    10ee:	a6 e5       	ldi	r26, 0x56	; 86
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e6 e5       	ldi	r30, 0x56	; 86
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 70       	andi	r24, 0x0F	; 15
    10fa:	80 6c       	ori	r24, 0xC0	; 192
    10fc:	8c 93       	st	X, r24
	gu8_I2CState=I2C_NO_INFO;
    10fe:	88 ef       	ldi	r24, 0xF8	; 248
    1100:	80 93 ed 00 	sts	0x00ED, r24
	*pu8Reading= TWDR_REG;
    1104:	e3 e2       	ldi	r30, 0x23	; 35
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	e9 81       	ldd	r30, Y+1	; 0x01
    110c:	fa 81       	ldd	r31, Y+2	; 0x02
    110e:	80 83       	st	Z, r24
}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <__vector_19>:



void __vector_19(void) {
    111c:	1f 92       	push	r1
    111e:	0f 92       	push	r0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	0f 92       	push	r0
    1124:	11 24       	eor	r1, r1
    1126:	8f 93       	push	r24
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	gu8_I2CState=TWSR_REG & I2C_PRESCALAR_MASK;
    1134:	e1 e2       	ldi	r30, 0x21	; 33
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	88 7f       	andi	r24, 0xF8	; 248
    113c:	80 93 ed 00 	sts	0x00ED, r24
}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	ff 91       	pop	r31
    1146:	ef 91       	pop	r30
    1148:	8f 91       	pop	r24
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	0f 90       	pop	r0
    1150:	1f 90       	pop	r1
    1152:	18 95       	reti

00001154 <DIO_u8SetPinDirection>:
#include "../../LIB/atmega32.h"
#include "DIO_interface.h"

// function to set direction of pin 
uint8_t DIO_u8SetPinDirection(DIOPort_t u8_PortName, DIOPin_t u8_PinNum,
		DIODir_t u8_PinDir) {
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	2e 97       	sbiw	r28, 0x0e	; 14
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	8a 83       	std	Y+2, r24	; 0x02
    116a:	6b 83       	std	Y+3, r22	; 0x03
    116c:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01

	/*Check if the inputs are in the right range*/
	if (u8_PinNum < DIO_PINS_NUMBER && u8_PortName < DIO_PORTS_NUMBER) {
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	88 30       	cpi	r24, 0x08	; 8
    1176:	08 f0       	brcs	.+2      	; 0x117a <DIO_u8SetPinDirection+0x26>
    1178:	2c c2       	rjmp	.+1112   	; 0x15d2 <DIO_u8SetPinDirection+0x47e>
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	84 30       	cpi	r24, 0x04	; 4
    117e:	08 f0       	brcs	.+2      	; 0x1182 <DIO_u8SetPinDirection+0x2e>
    1180:	28 c2       	rjmp	.+1104   	; 0x15d2 <DIO_u8SetPinDirection+0x47e>
		/*Check which port */
		switch (u8_PortName) {
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	3e 87       	std	Y+14, r19	; 0x0e
    118a:	2d 87       	std	Y+13, r18	; 0x0d
    118c:	8d 85       	ldd	r24, Y+13	; 0x0d
    118e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1190:	81 30       	cpi	r24, 0x01	; 1
    1192:	91 05       	cpc	r25, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <DIO_u8SetPinDirection+0x44>
    1196:	98 c0       	rjmp	.+304    	; 0x12c8 <DIO_u8SetPinDirection+0x174>
    1198:	2d 85       	ldd	r18, Y+13	; 0x0d
    119a:	3e 85       	ldd	r19, Y+14	; 0x0e
    119c:	22 30       	cpi	r18, 0x02	; 2
    119e:	31 05       	cpc	r19, r1
    11a0:	2c f4       	brge	.+10     	; 0x11ac <DIO_u8SetPinDirection+0x58>
    11a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	71 f0       	breq	.+28     	; 0x11c6 <DIO_u8SetPinDirection+0x72>
    11aa:	11 c2       	rjmp	.+1058   	; 0x15ce <DIO_u8SetPinDirection+0x47a>
    11ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    11ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <DIO_u8SetPinDirection+0x64>
    11b6:	09 c1       	rjmp	.+530    	; 0x13ca <DIO_u8SetPinDirection+0x276>
    11b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	91 05       	cpc	r25, r1
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <DIO_u8SetPinDirection+0x70>
    11c2:	84 c1       	rjmp	.+776    	; 0x14cc <DIO_u8SetPinDirection+0x378>
    11c4:	04 c2       	rjmp	.+1032   	; 0x15ce <DIO_u8SetPinDirection+0x47a>
		case PORTA:
			/*Check which Direction the user wants the pin to be in */
			switch (u8_PinDir) {
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3c 87       	std	Y+12, r19	; 0x0c
    11ce:	2b 87       	std	Y+11, r18	; 0x0b
    11d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	99 f1       	breq	.+102    	; 0x1240 <DIO_u8SetPinDirection+0xec>
    11da:	2b 85       	ldd	r18, Y+11	; 0x0b
    11dc:	3c 85       	ldd	r19, Y+12	; 0x0c
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <DIO_u8SetPinDirection+0x92>
    11e4:	5b c0       	rjmp	.+182    	; 0x129c <DIO_u8SetPinDirection+0x148>
    11e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    11e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <DIO_u8SetPinDirection+0x9c>
    11ee:	6a c0       	rjmp	.+212    	; 0x12c4 <DIO_u8SetPinDirection+0x170>

			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRA_REG, u8_PinNum);
    11f0:	aa e3       	ldi	r26, 0x3A	; 58
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ea e3       	ldi	r30, 0x3A	; 58
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_u8SetPinDirection+0xb8>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	2a 95       	dec	r18
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_u8SetPinDirection+0xb4>
    1210:	80 95       	com	r24
    1212:	84 23       	and	r24, r20
    1214:	8c 93       	st	X, r24
				CLR_BIT(PORTA_REG, u8_PinNum);
    1216:	ab e3       	ldi	r26, 0x3B	; 59
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	48 2f       	mov	r20, r24
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_u8SetPinDirection+0xe0>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_u8SetPinDirection+0xdc>
    1238:	80 95       	com	r24
    123a:	84 23       	and	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	ca c1       	rjmp	.+916    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    1240:	a0 e5       	ldi	r26, 0x50	; 80
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e0 e5       	ldi	r30, 0x50	; 80
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	8b 7f       	andi	r24, 0xFB	; 251
    124c:	8c 93       	st	X, r24
				CLR_BIT(DDRA_REG, u8_PinNum);
    124e:	aa e3       	ldi	r26, 0x3A	; 58
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ea e3       	ldi	r30, 0x3A	; 58
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_u8SetPinDirection+0x116>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	2a 95       	dec	r18
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_u8SetPinDirection+0x112>
    126e:	80 95       	com	r24
    1270:	84 23       	and	r24, r20
    1272:	8c 93       	st	X, r24
				SET_BIT(PORTA_REG, u8_PinNum);
    1274:	ab e3       	ldi	r26, 0x3B	; 59
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	eb e3       	ldi	r30, 0x3B	; 59
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <DIO_u8SetPinDirection+0x13e>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <DIO_u8SetPinDirection+0x13a>
    1296:	84 2b       	or	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	9c c1       	rjmp	.+824    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRA_REG, u8_PinNum);
    129c:	aa e3       	ldi	r26, 0x3A	; 58
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ea e3       	ldi	r30, 0x3A	; 58
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 2e       	mov	r0, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_u8SetPinDirection+0x166>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	0a 94       	dec	r0
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_u8SetPinDirection+0x162>
    12be:	84 2b       	or	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	88 c1       	rjmp	.+784    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    12c4:	19 82       	std	Y+1, r1	; 0x01
    12c6:	86 c1       	rjmp	.+780    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
			}
			break;
		case PORTB:
			/*Check if the inputs are in the right range*/
			switch (u8_PinDir) {
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	3a 87       	std	Y+10, r19	; 0x0a
    12d0:	29 87       	std	Y+9, r18	; 0x09
    12d2:	89 85       	ldd	r24, Y+9	; 0x09
    12d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	91 05       	cpc	r25, r1
    12da:	99 f1       	breq	.+102    	; 0x1342 <DIO_u8SetPinDirection+0x1ee>
    12dc:	29 85       	ldd	r18, Y+9	; 0x09
    12de:	3a 85       	ldd	r19, Y+10	; 0x0a
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <DIO_u8SetPinDirection+0x194>
    12e6:	5b c0       	rjmp	.+182    	; 0x139e <DIO_u8SetPinDirection+0x24a>
    12e8:	89 85       	ldd	r24, Y+9	; 0x09
    12ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <DIO_u8SetPinDirection+0x19e>
    12f0:	6a c0       	rjmp	.+212    	; 0x13c6 <DIO_u8SetPinDirection+0x272>
			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRB_REG, u8_PinNum);
    12f2:	a7 e3       	ldi	r26, 0x37	; 55
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e7 e3       	ldi	r30, 0x37	; 55
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_u8SetPinDirection+0x1ba>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	2a 95       	dec	r18
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_u8SetPinDirection+0x1b6>
    1312:	80 95       	com	r24
    1314:	84 23       	and	r24, r20
    1316:	8c 93       	st	X, r24
				CLR_BIT(PORTB_REG, u8_PinNum);
    1318:	a8 e3       	ldi	r26, 0x38	; 56
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e8 e3       	ldi	r30, 0x38	; 56
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	48 2f       	mov	r20, r24
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 2e       	mov	r0, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_u8SetPinDirection+0x1e2>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	0a 94       	dec	r0
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_u8SetPinDirection+0x1de>
    133a:	80 95       	com	r24
    133c:	84 23       	and	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	49 c1       	rjmp	.+658    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    1342:	a0 e5       	ldi	r26, 0x50	; 80
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e0 e5       	ldi	r30, 0x50	; 80
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8b 7f       	andi	r24, 0xFB	; 251
    134e:	8c 93       	st	X, r24
				CLR_BIT(DDRB_REG, u8_PinNum);
    1350:	a7 e3       	ldi	r26, 0x37	; 55
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e7 e3       	ldi	r30, 0x37	; 55
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_u8SetPinDirection+0x218>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	2a 95       	dec	r18
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_u8SetPinDirection+0x214>
    1370:	80 95       	com	r24
    1372:	84 23       	and	r24, r20
    1374:	8c 93       	st	X, r24
				SET_BIT(PORTB_REG, u8_PinNum);
    1376:	a8 e3       	ldi	r26, 0x38	; 56
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e8 e3       	ldi	r30, 0x38	; 56
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_u8SetPinDirection+0x240>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_u8SetPinDirection+0x23c>
    1398:	84 2b       	or	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	1b c1       	rjmp	.+566    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRB_REG, u8_PinNum);
    139e:	a7 e3       	ldi	r26, 0x37	; 55
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e7 e3       	ldi	r30, 0x37	; 55
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <DIO_u8SetPinDirection+0x268>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <DIO_u8SetPinDirection+0x264>
    13c0:	84 2b       	or	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	07 c1       	rjmp	.+526    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    13c6:	19 82       	std	Y+1, r1	; 0x01
    13c8:	05 c1       	rjmp	.+522    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
			}
			break;
		case PORTC:
			switch (u8_PinDir) {
    13ca:	8c 81       	ldd	r24, Y+4	; 0x04
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	38 87       	std	Y+8, r19	; 0x08
    13d2:	2f 83       	std	Y+7, r18	; 0x07
    13d4:	8f 81       	ldd	r24, Y+7	; 0x07
    13d6:	98 85       	ldd	r25, Y+8	; 0x08
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 05       	cpc	r25, r1
    13dc:	99 f1       	breq	.+102    	; 0x1444 <DIO_u8SetPinDirection+0x2f0>
    13de:	2f 81       	ldd	r18, Y+7	; 0x07
    13e0:	38 85       	ldd	r19, Y+8	; 0x08
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <DIO_u8SetPinDirection+0x296>
    13e8:	5b c0       	rjmp	.+182    	; 0x14a0 <DIO_u8SetPinDirection+0x34c>
    13ea:	8f 81       	ldd	r24, Y+7	; 0x07
    13ec:	98 85       	ldd	r25, Y+8	; 0x08
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <DIO_u8SetPinDirection+0x2a0>
    13f2:	6a c0       	rjmp	.+212    	; 0x14c8 <DIO_u8SetPinDirection+0x374>
			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRC_REG, u8_PinNum);
    13f4:	a4 e3       	ldi	r26, 0x34	; 52
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e4 e3       	ldi	r30, 0x34	; 52
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_u8SetPinDirection+0x2bc>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	2a 95       	dec	r18
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_u8SetPinDirection+0x2b8>
    1414:	80 95       	com	r24
    1416:	84 23       	and	r24, r20
    1418:	8c 93       	st	X, r24
				CLR_BIT(PORTC_REG, u8_PinNum);
    141a:	a5 e3       	ldi	r26, 0x35	; 53
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e5 e3       	ldi	r30, 0x35	; 53
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_u8SetPinDirection+0x2e4>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_u8SetPinDirection+0x2e0>
    143c:	80 95       	com	r24
    143e:	84 23       	and	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	c8 c0       	rjmp	.+400    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    1444:	a0 e5       	ldi	r26, 0x50	; 80
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e0 e5       	ldi	r30, 0x50	; 80
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	8b 7f       	andi	r24, 0xFB	; 251
    1450:	8c 93       	st	X, r24
				CLR_BIT(DDRC_REG, u8_PinNum);
    1452:	a4 e3       	ldi	r26, 0x34	; 52
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e4 e3       	ldi	r30, 0x34	; 52
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_u8SetPinDirection+0x31a>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	2a 95       	dec	r18
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_u8SetPinDirection+0x316>
    1472:	80 95       	com	r24
    1474:	84 23       	and	r24, r20
    1476:	8c 93       	st	X, r24
				SET_BIT(PORTC_REG, u8_PinNum);
    1478:	a5 e3       	ldi	r26, 0x35	; 53
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e5 e3       	ldi	r30, 0x35	; 53
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <DIO_u8SetPinDirection+0x342>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <DIO_u8SetPinDirection+0x33e>
    149a:	84 2b       	or	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	9a c0       	rjmp	.+308    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRC_REG, u8_PinNum);
    14a0:	a4 e3       	ldi	r26, 0x34	; 52
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e4 e3       	ldi	r30, 0x34	; 52
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	48 2f       	mov	r20, r24
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 2e       	mov	r0, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <DIO_u8SetPinDirection+0x36a>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <DIO_u8SetPinDirection+0x366>
    14c2:	84 2b       	or	r24, r20
    14c4:	8c 93       	st	X, r24
    14c6:	86 c0       	rjmp	.+268    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    14c8:	19 82       	std	Y+1, r1	; 0x01
    14ca:	84 c0       	rjmp	.+264    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
			}
			break;
		case PORTD:
			switch (u8_PinDir) {
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3e 83       	std	Y+6, r19	; 0x06
    14d4:	2d 83       	std	Y+5, r18	; 0x05
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	99 f1       	breq	.+102    	; 0x1546 <DIO_u8SetPinDirection+0x3f2>
    14e0:	2d 81       	ldd	r18, Y+5	; 0x05
    14e2:	3e 81       	ldd	r19, Y+6	; 0x06
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <DIO_u8SetPinDirection+0x398>
    14ea:	5b c0       	rjmp	.+182    	; 0x15a2 <DIO_u8SetPinDirection+0x44e>
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	9e 81       	ldd	r25, Y+6	; 0x06
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <DIO_u8SetPinDirection+0x3a2>
    14f4:	6a c0       	rjmp	.+212    	; 0x15ca <DIO_u8SetPinDirection+0x476>
			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRD_REG, u8_PinNum);
    14f6:	a1 e3       	ldi	r26, 0x31	; 49
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e1 e3       	ldi	r30, 0x31	; 49
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8b 81       	ldd	r24, Y+3	; 0x03
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_u8SetPinDirection+0x3be>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	2a 95       	dec	r18
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_u8SetPinDirection+0x3ba>
    1516:	80 95       	com	r24
    1518:	84 23       	and	r24, r20
    151a:	8c 93       	st	X, r24
				CLR_BIT(PORTA_REG, u8_PinNum);
    151c:	ab e3       	ldi	r26, 0x3B	; 59
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	eb e3       	ldi	r30, 0x3B	; 59
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_u8SetPinDirection+0x3e6>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_u8SetPinDirection+0x3e2>
    153e:	80 95       	com	r24
    1540:	84 23       	and	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	47 c0       	rjmp	.+142    	; 0x15d4 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    1546:	a0 e5       	ldi	r26, 0x50	; 80
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e0 e5       	ldi	r30, 0x50	; 80
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8b 7f       	andi	r24, 0xFB	; 251
    1552:	8c 93       	st	X, r24
				CLR_BIT(DDRD_REG, u8_PinNum);
    1554:	a1 e3       	ldi	r26, 0x31	; 49
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e1 e3       	ldi	r30, 0x31	; 49
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_u8SetPinDirection+0x41c>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	2a 95       	dec	r18
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_u8SetPinDirection+0x418>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
				SET_BIT(PORTD_REG, u8_PinNum);
    157a:	a2 e3       	ldi	r26, 0x32	; 50
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e2 e3       	ldi	r30, 0x32	; 50
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_u8SetPinDirection+0x444>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_u8SetPinDirection+0x440>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	19 c0       	rjmp	.+50     	; 0x15d4 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRD_REG, u8_PinNum);
    15a2:	a1 e3       	ldi	r26, 0x31	; 49
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e1 e3       	ldi	r30, 0x31	; 49
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_u8SetPinDirection+0x46c>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_u8SetPinDirection+0x468>
    15c4:	84 2b       	or	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    15ca:	19 82       	std	Y+1, r1	; 0x01
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <DIO_u8SetPinDirection+0x480>
			}
			break;
		default:
			// If the input port is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    15ce:	19 82       	std	Y+1, r1	; 0x01
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <DIO_u8SetPinDirection+0x480>
		}
	} else {
		// If the input port or input pin is not suitable return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    15d2:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorState;
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d6:	2e 96       	adiw	r28, 0x0e	; 14
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <DIO_u8SetPinData>:

// function to assign value to pin 
uint8_t DIO_u8SetPinData(DIOPort_t u8_PortName, DIOPin_t u8_PinNum,
		DIODir_t u8_PinValue) {
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	2e 97       	sbiw	r28, 0x0e	; 14
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	8a 83       	std	Y+2, r24	; 0x02
    15fe:	6b 83       	std	Y+3, r22	; 0x03
    1600:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	89 83       	std	Y+1, r24	; 0x01
	if (u8_PinNum < DIO_PINS_NUMBER) {
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	88 30       	cpi	r24, 0x08	; 8
    160a:	08 f0       	brcs	.+2      	; 0x160e <DIO_u8SetPinData+0x26>
    160c:	06 c1       	rjmp	.+524    	; 0x181a <DIO_u8SetPinData+0x232>
		/*Check which port */
		switch (u8_PortName) {
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3e 87       	std	Y+14, r19	; 0x0e
    1616:	2d 87       	std	Y+13, r18	; 0x0d
    1618:	8d 85       	ldd	r24, Y+13	; 0x0d
    161a:	9e 85       	ldd	r25, Y+14	; 0x0e
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	91 05       	cpc	r25, r1
    1620:	09 f4       	brne	.+2      	; 0x1624 <DIO_u8SetPinData+0x3c>
    1622:	50 c0       	rjmp	.+160    	; 0x16c4 <DIO_u8SetPinData+0xdc>
    1624:	2d 85       	ldd	r18, Y+13	; 0x0d
    1626:	3e 85       	ldd	r19, Y+14	; 0x0e
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	2c f4       	brge	.+10     	; 0x1638 <DIO_u8SetPinData+0x50>
    162e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1630:	9e 85       	ldd	r25, Y+14	; 0x0e
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	71 f0       	breq	.+28     	; 0x1652 <DIO_u8SetPinData+0x6a>
    1636:	f2 c0       	rjmp	.+484    	; 0x181c <DIO_u8SetPinData+0x234>
    1638:	2d 85       	ldd	r18, Y+13	; 0x0d
    163a:	3e 85       	ldd	r19, Y+14	; 0x0e
    163c:	22 30       	cpi	r18, 0x02	; 2
    163e:	31 05       	cpc	r19, r1
    1640:	09 f4       	brne	.+2      	; 0x1644 <DIO_u8SetPinData+0x5c>
    1642:	79 c0       	rjmp	.+242    	; 0x1736 <DIO_u8SetPinData+0x14e>
    1644:	8d 85       	ldd	r24, Y+13	; 0x0d
    1646:	9e 85       	ldd	r25, Y+14	; 0x0e
    1648:	83 30       	cpi	r24, 0x03	; 3
    164a:	91 05       	cpc	r25, r1
    164c:	09 f4       	brne	.+2      	; 0x1650 <DIO_u8SetPinData+0x68>
    164e:	ac c0       	rjmp	.+344    	; 0x17a8 <DIO_u8SetPinData+0x1c0>
    1650:	e5 c0       	rjmp	.+458    	; 0x181c <DIO_u8SetPinData+0x234>
		case PORTA:
			switch (u8_PinValue) {
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	3c 87       	std	Y+12, r19	; 0x0c
    165a:	2b 87       	std	Y+11, r18	; 0x0b
    165c:	8b 85       	ldd	r24, Y+11	; 0x0b
    165e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	c9 f0       	breq	.+50     	; 0x1696 <DIO_u8SetPinData+0xae>
    1664:	2b 85       	ldd	r18, Y+11	; 0x0b
    1666:	3c 85       	ldd	r19, Y+12	; 0x0c
    1668:	21 30       	cpi	r18, 0x01	; 1
    166a:	31 05       	cpc	r19, r1
    166c:	49 f5       	brne	.+82     	; 0x16c0 <DIO_u8SetPinData+0xd8>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTA_REG, u8_PinNum);
    166e:	ab e3       	ldi	r26, 0x3B	; 59
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	eb e3       	ldi	r30, 0x3B	; 59
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <DIO_u8SetPinData+0xa4>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <DIO_u8SetPinData+0xa0>
    1690:	84 2b       	or	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	c3 c0       	rjmp	.+390    	; 0x181c <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTA_REG, u8_PinNum);
    1696:	ab e3       	ldi	r26, 0x3B	; 59
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	eb e3       	ldi	r30, 0x3B	; 59
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <DIO_u8SetPinData+0xcc>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <DIO_u8SetPinData+0xc8>
    16b8:	80 95       	com	r24
    16ba:	84 23       	and	r24, r20
    16bc:	8c 93       	st	X, r24
    16be:	ae c0       	rjmp	.+348    	; 0x181c <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	ac c0       	rjmp	.+344    	; 0x181c <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTB:
			switch (u8_PinValue) {
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	3a 87       	std	Y+10, r19	; 0x0a
    16cc:	29 87       	std	Y+9, r18	; 0x09
    16ce:	89 85       	ldd	r24, Y+9	; 0x09
    16d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	c9 f0       	breq	.+50     	; 0x1708 <DIO_u8SetPinData+0x120>
    16d6:	29 85       	ldd	r18, Y+9	; 0x09
    16d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16da:	21 30       	cpi	r18, 0x01	; 1
    16dc:	31 05       	cpc	r19, r1
    16de:	49 f5       	brne	.+82     	; 0x1732 <DIO_u8SetPinData+0x14a>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTB_REG, u8_PinNum);
    16e0:	a8 e3       	ldi	r26, 0x38	; 56
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e8 e3       	ldi	r30, 0x38	; 56
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <DIO_u8SetPinData+0x116>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <DIO_u8SetPinData+0x112>
    1702:	84 2b       	or	r24, r20
    1704:	8c 93       	st	X, r24
    1706:	8a c0       	rjmp	.+276    	; 0x181c <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTB_REG, u8_PinNum);
    1708:	a8 e3       	ldi	r26, 0x38	; 56
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e8 e3       	ldi	r30, 0x38	; 56
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <DIO_u8SetPinData+0x13e>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <DIO_u8SetPinData+0x13a>
    172a:	80 95       	com	r24
    172c:	84 23       	and	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	75 c0       	rjmp	.+234    	; 0x181c <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    1732:	19 82       	std	Y+1, r1	; 0x01
    1734:	73 c0       	rjmp	.+230    	; 0x181c <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTC:
			switch (u8_PinValue) {
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	38 87       	std	Y+8, r19	; 0x08
    173e:	2f 83       	std	Y+7, r18	; 0x07
    1740:	8f 81       	ldd	r24, Y+7	; 0x07
    1742:	98 85       	ldd	r25, Y+8	; 0x08
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	c9 f0       	breq	.+50     	; 0x177a <DIO_u8SetPinData+0x192>
    1748:	2f 81       	ldd	r18, Y+7	; 0x07
    174a:	38 85       	ldd	r19, Y+8	; 0x08
    174c:	21 30       	cpi	r18, 0x01	; 1
    174e:	31 05       	cpc	r19, r1
    1750:	49 f5       	brne	.+82     	; 0x17a4 <DIO_u8SetPinData+0x1bc>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTC_REG, u8_PinNum);
    1752:	a5 e3       	ldi	r26, 0x35	; 53
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e5 e3       	ldi	r30, 0x35	; 53
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_u8SetPinData+0x188>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_u8SetPinData+0x184>
    1774:	84 2b       	or	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	51 c0       	rjmp	.+162    	; 0x181c <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTC_REG, u8_PinNum);
    177a:	a5 e3       	ldi	r26, 0x35	; 53
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e5 e3       	ldi	r30, 0x35	; 53
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_u8SetPinData+0x1b0>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <DIO_u8SetPinData+0x1ac>
    179c:	80 95       	com	r24
    179e:	84 23       	and	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	3c c0       	rjmp	.+120    	; 0x181c <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	3a c0       	rjmp	.+116    	; 0x181c <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTD:
			switch (u8_PinValue) {
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	3e 83       	std	Y+6, r19	; 0x06
    17b0:	2d 83       	std	Y+5, r18	; 0x05
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	00 97       	sbiw	r24, 0x00	; 0
    17b8:	c9 f0       	breq	.+50     	; 0x17ec <DIO_u8SetPinData+0x204>
    17ba:	2d 81       	ldd	r18, Y+5	; 0x05
    17bc:	3e 81       	ldd	r19, Y+6	; 0x06
    17be:	21 30       	cpi	r18, 0x01	; 1
    17c0:	31 05       	cpc	r19, r1
    17c2:	49 f5       	brne	.+82     	; 0x1816 <DIO_u8SetPinData+0x22e>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTD_REG, u8_PinNum);
    17c4:	a2 e3       	ldi	r26, 0x32	; 50
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e2 e3       	ldi	r30, 0x32	; 50
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_u8SetPinData+0x1fa>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_u8SetPinData+0x1f6>
    17e6:	84 2b       	or	r24, r20
    17e8:	8c 93       	st	X, r24
    17ea:	18 c0       	rjmp	.+48     	; 0x181c <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTD_REG, u8_PinNum);
    17ec:	a2 e3       	ldi	r26, 0x32	; 50
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e2 e3       	ldi	r30, 0x32	; 50
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_u8SetPinData+0x222>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <DIO_u8SetPinData+0x21e>
    180e:	80 95       	com	r24
    1810:	84 23       	and	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	03 c0       	rjmp	.+6      	; 0x181c <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    1816:	19 82       	std	Y+1, r1	; 0x01
    1818:	01 c0       	rjmp	.+2      	; 0x181c <DIO_u8SetPinData+0x234>
			}
			break;
		}
	} else {
		// if not suitable port or pin state return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    181a:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorState;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
}
    181e:	2e 96       	adiw	r28, 0x0e	; 14
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <DIO_u8GetPinData>:

// function to read value on pin 
uint8_t DIO_u8GetPinData(DIOPort_t u8_PortName, DIOPin_t u8_PinNum,
		uint8_t* pu8_ReturnVar) {
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	27 97       	sbiw	r28, 0x07	; 7
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	8a 83       	std	Y+2, r24	; 0x02
    1846:	6b 83       	std	Y+3, r22	; 0x03
    1848:	5d 83       	std	Y+5, r21	; 0x05
    184a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	89 83       	std	Y+1, r24	; 0x01

	if (u8_PinNum < DIO_PINS_NUMBER && pu8_ReturnVar != NULL) {
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	88 30       	cpi	r24, 0x08	; 8
    1854:	08 f0       	brcs	.+2      	; 0x1858 <DIO_u8GetPinData+0x28>
    1856:	78 c0       	rjmp	.+240    	; 0x1948 <DIO_u8GetPinData+0x118>
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	09 f4       	brne	.+2      	; 0x1862 <DIO_u8GetPinData+0x32>
    1860:	73 c0       	rjmp	.+230    	; 0x1948 <DIO_u8GetPinData+0x118>
		switch (u8_PortName) {
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	3f 83       	std	Y+7, r19	; 0x07
    186a:	2e 83       	std	Y+6, r18	; 0x06
    186c:	4e 81       	ldd	r20, Y+6	; 0x06
    186e:	5f 81       	ldd	r21, Y+7	; 0x07
    1870:	41 30       	cpi	r20, 0x01	; 1
    1872:	51 05       	cpc	r21, r1
    1874:	59 f1       	breq	.+86     	; 0x18cc <DIO_u8GetPinData+0x9c>
    1876:	8e 81       	ldd	r24, Y+6	; 0x06
    1878:	9f 81       	ldd	r25, Y+7	; 0x07
    187a:	82 30       	cpi	r24, 0x02	; 2
    187c:	91 05       	cpc	r25, r1
    187e:	34 f4       	brge	.+12     	; 0x188c <DIO_u8GetPinData+0x5c>
    1880:	2e 81       	ldd	r18, Y+6	; 0x06
    1882:	3f 81       	ldd	r19, Y+7	; 0x07
    1884:	21 15       	cp	r18, r1
    1886:	31 05       	cpc	r19, r1
    1888:	69 f0       	breq	.+26     	; 0x18a4 <DIO_u8GetPinData+0x74>
    188a:	5c c0       	rjmp	.+184    	; 0x1944 <DIO_u8GetPinData+0x114>
    188c:	4e 81       	ldd	r20, Y+6	; 0x06
    188e:	5f 81       	ldd	r21, Y+7	; 0x07
    1890:	42 30       	cpi	r20, 0x02	; 2
    1892:	51 05       	cpc	r21, r1
    1894:	79 f1       	breq	.+94     	; 0x18f4 <DIO_u8GetPinData+0xc4>
    1896:	8e 81       	ldd	r24, Y+6	; 0x06
    1898:	9f 81       	ldd	r25, Y+7	; 0x07
    189a:	83 30       	cpi	r24, 0x03	; 3
    189c:	91 05       	cpc	r25, r1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <DIO_u8GetPinData+0x72>
    18a0:	3d c0       	rjmp	.+122    	; 0x191c <DIO_u8GetPinData+0xec>
    18a2:	50 c0       	rjmp	.+160    	; 0x1944 <DIO_u8GetPinData+0x114>
		// get bit value in register to variable depend on port and pin 
		case PORTA:
			*pu8_ReturnVar = GET_BIT(PINA_REG, u8_PinNum);
    18a4:	e9 e3       	ldi	r30, 0x39	; 57
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a9 01       	movw	r20, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <DIO_u8GetPinData+0x8c>
    18b8:	55 95       	asr	r21
    18ba:	47 95       	ror	r20
    18bc:	8a 95       	dec	r24
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <DIO_u8GetPinData+0x88>
    18c0:	ca 01       	movw	r24, r20
    18c2:	81 70       	andi	r24, 0x01	; 1
    18c4:	ec 81       	ldd	r30, Y+4	; 0x04
    18c6:	fd 81       	ldd	r31, Y+5	; 0x05
    18c8:	80 83       	st	Z, r24
    18ca:	3f c0       	rjmp	.+126    	; 0x194a <DIO_u8GetPinData+0x11a>
			break;
		case PORTB:
			*pu8_ReturnVar = GET_BIT(PINB_REG, u8_PinNum);
    18cc:	e6 e3       	ldi	r30, 0x36	; 54
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	88 2f       	mov	r24, r24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a9 01       	movw	r20, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <DIO_u8GetPinData+0xb4>
    18e0:	55 95       	asr	r21
    18e2:	47 95       	ror	r20
    18e4:	8a 95       	dec	r24
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <DIO_u8GetPinData+0xb0>
    18e8:	ca 01       	movw	r24, r20
    18ea:	81 70       	andi	r24, 0x01	; 1
    18ec:	ec 81       	ldd	r30, Y+4	; 0x04
    18ee:	fd 81       	ldd	r31, Y+5	; 0x05
    18f0:	80 83       	st	Z, r24
    18f2:	2b c0       	rjmp	.+86     	; 0x194a <DIO_u8GetPinData+0x11a>
			break;
		case PORTC:
			*pu8_ReturnVar = GET_BIT(PINC_REG, u8_PinNum);
    18f4:	e3 e3       	ldi	r30, 0x33	; 51
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a9 01       	movw	r20, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <DIO_u8GetPinData+0xdc>
    1908:	55 95       	asr	r21
    190a:	47 95       	ror	r20
    190c:	8a 95       	dec	r24
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <DIO_u8GetPinData+0xd8>
    1910:	ca 01       	movw	r24, r20
    1912:	81 70       	andi	r24, 0x01	; 1
    1914:	ec 81       	ldd	r30, Y+4	; 0x04
    1916:	fd 81       	ldd	r31, Y+5	; 0x05
    1918:	80 83       	st	Z, r24
    191a:	17 c0       	rjmp	.+46     	; 0x194a <DIO_u8GetPinData+0x11a>
			break;
		case PORTD:
			*pu8_ReturnVar = GET_BIT(PIND_REG, u8_PinNum);
    191c:	e0 e3       	ldi	r30, 0x30	; 48
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a9 01       	movw	r20, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <DIO_u8GetPinData+0x104>
    1930:	55 95       	asr	r21
    1932:	47 95       	ror	r20
    1934:	8a 95       	dec	r24
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <DIO_u8GetPinData+0x100>
    1938:	ca 01       	movw	r24, r20
    193a:	81 70       	andi	r24, 0x01	; 1
    193c:	ec 81       	ldd	r30, Y+4	; 0x04
    193e:	fd 81       	ldd	r31, Y+5	; 0x05
    1940:	80 83       	st	Z, r24
    1942:	03 c0       	rjmp	.+6      	; 0x194a <DIO_u8GetPinData+0x11a>
			break;
		default:
			// if not suitable port return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    1944:	19 82       	std	Y+1, r1	; 0x01
    1946:	01 c0       	rjmp	.+2      	; 0x194a <DIO_u8GetPinData+0x11a>
		}
	} else {
		// if return address not passed or not suitable pin number return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    1948:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    194a:	89 81       	ldd	r24, Y+1	; 0x01
}
    194c:	27 96       	adiw	r28, 0x07	; 7
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <DIO_u8SetPortDirection>:

// function to set direction of pin
uint8_t DIO_u8SetPortDirection(DIOPort_t u8_PortName, DIODir_t u8_Dir) {
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	2d 97       	sbiw	r28, 0x0d	; 13
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	8a 83       	std	Y+2, r24	; 0x02
    1974:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	89 83       	std	Y+1, r24	; 0x01
	switch (u8_PortName) {
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	3d 87       	std	Y+13, r19	; 0x0d
    1982:	2c 87       	std	Y+12, r18	; 0x0c
    1984:	8c 85       	ldd	r24, Y+12	; 0x0c
    1986:	9d 85       	ldd	r25, Y+13	; 0x0d
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	91 05       	cpc	r25, r1
    198c:	09 f4       	brne	.+2      	; 0x1990 <DIO_u8SetPortDirection+0x32>
    198e:	4b c0       	rjmp	.+150    	; 0x1a26 <DIO_u8SetPortDirection+0xc8>
    1990:	2c 85       	ldd	r18, Y+12	; 0x0c
    1992:	3d 85       	ldd	r19, Y+13	; 0x0d
    1994:	22 30       	cpi	r18, 0x02	; 2
    1996:	31 05       	cpc	r19, r1
    1998:	2c f4       	brge	.+10     	; 0x19a4 <DIO_u8SetPortDirection+0x46>
    199a:	8c 85       	ldd	r24, Y+12	; 0x0c
    199c:	9d 85       	ldd	r25, Y+13	; 0x0d
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	71 f0       	breq	.+28     	; 0x19be <DIO_u8SetPortDirection+0x60>
    19a2:	dd c0       	rjmp	.+442    	; 0x1b5e <DIO_u8SetPortDirection+0x200>
    19a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    19a6:	3d 85       	ldd	r19, Y+13	; 0x0d
    19a8:	22 30       	cpi	r18, 0x02	; 2
    19aa:	31 05       	cpc	r19, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <DIO_u8SetPortDirection+0x52>
    19ae:	6f c0       	rjmp	.+222    	; 0x1a8e <DIO_u8SetPortDirection+0x130>
    19b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    19b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	91 05       	cpc	r25, r1
    19b8:	09 f4       	brne	.+2      	; 0x19bc <DIO_u8SetPortDirection+0x5e>
    19ba:	9d c0       	rjmp	.+314    	; 0x1af6 <DIO_u8SetPortDirection+0x198>
    19bc:	d0 c0       	rjmp	.+416    	; 0x1b5e <DIO_u8SetPortDirection+0x200>
	case PORTA:
		switch (u8_Dir) {
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	3b 87       	std	Y+11, r19	; 0x0b
    19c6:	2a 87       	std	Y+10, r18	; 0x0a
    19c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	91 05       	cpc	r25, r1
    19d0:	a1 f0       	breq	.+40     	; 0x19fa <DIO_u8SetPortDirection+0x9c>
    19d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    19d4:	3b 85       	ldd	r19, Y+11	; 0x0b
    19d6:	22 30       	cpi	r18, 0x02	; 2
    19d8:	31 05       	cpc	r19, r1
    19da:	f1 f0       	breq	.+60     	; 0x1a18 <DIO_u8SetPortDirection+0xba>
    19dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19de:	9b 85       	ldd	r25, Y+11	; 0x0b
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	f9 f4       	brne	.+62     	; 0x1a22 <DIO_u8SetPortDirection+0xc4>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRA_REG = DIO_PORT_LOW;
    19e4:	ea e3       	ldi	r30, 0x3A	; 58
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    19ea:	a0 e5       	ldi	r26, 0x50	; 80
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e0 e5       	ldi	r30, 0x50	; 80
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	84 60       	ori	r24, 0x04	; 4
    19f6:	8c 93       	st	X, r24
    19f8:	b3 c0       	rjmp	.+358    	; 0x1b60 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    19fa:	a0 e5       	ldi	r26, 0x50	; 80
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e0 e5       	ldi	r30, 0x50	; 80
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	8b 7f       	andi	r24, 0xFB	; 251
    1a06:	8c 93       	st	X, r24
			DDRA_REG = DIO_PORT_LOW;
    1a08:	ea e3       	ldi	r30, 0x3A	; 58
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	10 82       	st	Z, r1
			PORTA_REG = DIO_PORT_HIGH;
    1a0e:	eb e3       	ldi	r30, 0x3B	; 59
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8f ef       	ldi	r24, 0xFF	; 255
    1a14:	80 83       	st	Z, r24
    1a16:	a4 c0       	rjmp	.+328    	; 0x1b60 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRA_REG = DIO_PORT_HIGH;
    1a18:	ea e3       	ldi	r30, 0x3A	; 58
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8f ef       	ldi	r24, 0xFF	; 255
    1a1e:	80 83       	st	Z, r24
    1a20:	9f c0       	rjmp	.+318    	; 0x1b60 <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    1a22:	19 82       	std	Y+1, r1	; 0x01
    1a24:	9d c0       	rjmp	.+314    	; 0x1b60 <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTB:
		switch (u8_Dir) {
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	39 87       	std	Y+9, r19	; 0x09
    1a2e:	28 87       	std	Y+8, r18	; 0x08
    1a30:	88 85       	ldd	r24, Y+8	; 0x08
    1a32:	99 85       	ldd	r25, Y+9	; 0x09
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	91 05       	cpc	r25, r1
    1a38:	a1 f0       	breq	.+40     	; 0x1a62 <DIO_u8SetPortDirection+0x104>
    1a3a:	28 85       	ldd	r18, Y+8	; 0x08
    1a3c:	39 85       	ldd	r19, Y+9	; 0x09
    1a3e:	22 30       	cpi	r18, 0x02	; 2
    1a40:	31 05       	cpc	r19, r1
    1a42:	f1 f0       	breq	.+60     	; 0x1a80 <DIO_u8SetPortDirection+0x122>
    1a44:	88 85       	ldd	r24, Y+8	; 0x08
    1a46:	99 85       	ldd	r25, Y+9	; 0x09
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	f9 f4       	brne	.+62     	; 0x1a8a <DIO_u8SetPortDirection+0x12c>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRB_REG = DIO_PORT_LOW;
    1a4c:	e7 e3       	ldi	r30, 0x37	; 55
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    1a52:	a0 e5       	ldi	r26, 0x50	; 80
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e0 e5       	ldi	r30, 0x50	; 80
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	84 60       	ori	r24, 0x04	; 4
    1a5e:	8c 93       	st	X, r24
    1a60:	7f c0       	rjmp	.+254    	; 0x1b60 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    1a62:	a0 e5       	ldi	r26, 0x50	; 80
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e0 e5       	ldi	r30, 0x50	; 80
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8b 7f       	andi	r24, 0xFB	; 251
    1a6e:	8c 93       	st	X, r24
			DDRB_REG = DIO_PORT_LOW;
    1a70:	e7 e3       	ldi	r30, 0x37	; 55
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	10 82       	st	Z, r1
			PORTB_REG = DIO_PORT_HIGH;
    1a76:	e8 e3       	ldi	r30, 0x38	; 56
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	80 83       	st	Z, r24
    1a7e:	70 c0       	rjmp	.+224    	; 0x1b60 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRB_REG = DIO_PORT_HIGH;
    1a80:	e7 e3       	ldi	r30, 0x37	; 55
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	8f ef       	ldi	r24, 0xFF	; 255
    1a86:	80 83       	st	Z, r24
    1a88:	6b c0       	rjmp	.+214    	; 0x1b60 <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    1a8a:	19 82       	std	Y+1, r1	; 0x01
    1a8c:	69 c0       	rjmp	.+210    	; 0x1b60 <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTC:
		switch (u8_Dir) {
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	3f 83       	std	Y+7, r19	; 0x07
    1a96:	2e 83       	std	Y+6, r18	; 0x06
    1a98:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	a1 f0       	breq	.+40     	; 0x1aca <DIO_u8SetPortDirection+0x16c>
    1aa2:	2e 81       	ldd	r18, Y+6	; 0x06
    1aa4:	3f 81       	ldd	r19, Y+7	; 0x07
    1aa6:	22 30       	cpi	r18, 0x02	; 2
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	f1 f0       	breq	.+60     	; 0x1ae8 <DIO_u8SetPortDirection+0x18a>
    1aac:	8e 81       	ldd	r24, Y+6	; 0x06
    1aae:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	f9 f4       	brne	.+62     	; 0x1af2 <DIO_u8SetPortDirection+0x194>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRC_REG = DIO_PORT_LOW;
    1ab4:	e4 e3       	ldi	r30, 0x34	; 52
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    1aba:	a0 e5       	ldi	r26, 0x50	; 80
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e0 e5       	ldi	r30, 0x50	; 80
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	84 60       	ori	r24, 0x04	; 4
    1ac6:	8c 93       	st	X, r24
    1ac8:	4b c0       	rjmp	.+150    	; 0x1b60 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    1aca:	a0 e5       	ldi	r26, 0x50	; 80
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e0 e5       	ldi	r30, 0x50	; 80
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	8b 7f       	andi	r24, 0xFB	; 251
    1ad6:	8c 93       	st	X, r24
			DDRC_REG = DIO_PORT_LOW;
    1ad8:	e4 e3       	ldi	r30, 0x34	; 52
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	10 82       	st	Z, r1
			PORTC_REG = DIO_PORT_HIGH;
    1ade:	e5 e3       	ldi	r30, 0x35	; 53
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    1ae4:	80 83       	st	Z, r24
    1ae6:	3c c0       	rjmp	.+120    	; 0x1b60 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRC_REG = DIO_PORT_HIGH;
    1ae8:	e4 e3       	ldi	r30, 0x34	; 52
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	8f ef       	ldi	r24, 0xFF	; 255
    1aee:	80 83       	st	Z, r24
    1af0:	37 c0       	rjmp	.+110    	; 0x1b60 <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    1af2:	19 82       	std	Y+1, r1	; 0x01
    1af4:	35 c0       	rjmp	.+106    	; 0x1b60 <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTD:
		switch (u8_Dir) {
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	3d 83       	std	Y+5, r19	; 0x05
    1afe:	2c 83       	std	Y+4, r18	; 0x04
    1b00:	8c 81       	ldd	r24, Y+4	; 0x04
    1b02:	9d 81       	ldd	r25, Y+5	; 0x05
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	91 05       	cpc	r25, r1
    1b08:	a1 f0       	breq	.+40     	; 0x1b32 <DIO_u8SetPortDirection+0x1d4>
    1b0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0e:	22 30       	cpi	r18, 0x02	; 2
    1b10:	31 05       	cpc	r19, r1
    1b12:	f1 f0       	breq	.+60     	; 0x1b50 <DIO_u8SetPortDirection+0x1f2>
    1b14:	8c 81       	ldd	r24, Y+4	; 0x04
    1b16:	9d 81       	ldd	r25, Y+5	; 0x05
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	f9 f4       	brne	.+62     	; 0x1b5a <DIO_u8SetPortDirection+0x1fc>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRD_REG = DIO_PORT_LOW;
    1b1c:	e1 e3       	ldi	r30, 0x31	; 49
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    1b22:	a0 e5       	ldi	r26, 0x50	; 80
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e0 e5       	ldi	r30, 0x50	; 80
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	84 60       	ori	r24, 0x04	; 4
    1b2e:	8c 93       	st	X, r24
    1b30:	17 c0       	rjmp	.+46     	; 0x1b60 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    1b32:	a0 e5       	ldi	r26, 0x50	; 80
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e0 e5       	ldi	r30, 0x50	; 80
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8b 7f       	andi	r24, 0xFB	; 251
    1b3e:	8c 93       	st	X, r24
			DDRD_REG = DIO_PORT_LOW;
    1b40:	e1 e3       	ldi	r30, 0x31	; 49
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	10 82       	st	Z, r1
			PORTD_REG = DIO_PORT_HIGH;
    1b46:	e2 e3       	ldi	r30, 0x32	; 50
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	8f ef       	ldi	r24, 0xFF	; 255
    1b4c:	80 83       	st	Z, r24
    1b4e:	08 c0       	rjmp	.+16     	; 0x1b60 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRD_REG = DIO_PORT_HIGH;
    1b50:	e1 e3       	ldi	r30, 0x31	; 49
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	80 83       	st	Z, r24
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    1b5a:	19 82       	std	Y+1, r1	; 0x01
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <DIO_u8SetPortDirection+0x202>
		}
		break;
	default:
		// If the input port is not one of the above cases return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    1b5e:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b62:	2d 96       	adiw	r28, 0x0d	; 13
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <DIO_u8SetPortData>:

// function to assign value to port
uint8_t DIO_u8SetPortData(DIOPort_t u8_PortName, DIODir_t u8_Value) {
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <DIO_u8SetPortData+0x6>
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <DIO_u8SetPortData+0x8>
    1b7c:	0f 92       	push	r0
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	8a 83       	std	Y+2, r24	; 0x02
    1b84:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	89 83       	std	Y+1, r24	; 0x01
	if (u8_Value == DIO_PORT_HIGH || u8_Value == DIO_PORT_LOW) {
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b8e:	19 f0       	breq	.+6      	; 0x1b96 <DIO_u8SetPortData+0x22>
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	88 23       	and	r24, r24
    1b94:	a9 f5       	brne	.+106    	; 0x1c00 <DIO_u8SetPortData+0x8c>
		// check if value of port HIGH or LOW and assign it to the port 
		switch (u8_PortName) {
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	3d 83       	std	Y+5, r19	; 0x05
    1b9e:	2c 83       	std	Y+4, r18	; 0x04
    1ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	d1 f0       	breq	.+52     	; 0x1bde <DIO_u8SetPortData+0x6a>
    1baa:	2c 81       	ldd	r18, Y+4	; 0x04
    1bac:	3d 81       	ldd	r19, Y+5	; 0x05
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <DIO_u8SetPortData+0x4a>
    1bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	61 f0       	breq	.+24     	; 0x1bd4 <DIO_u8SetPortData+0x60>
    1bbc:	1f c0       	rjmp	.+62     	; 0x1bfc <DIO_u8SetPortData+0x88>
    1bbe:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc2:	22 30       	cpi	r18, 0x02	; 2
    1bc4:	31 05       	cpc	r19, r1
    1bc6:	81 f0       	breq	.+32     	; 0x1be8 <DIO_u8SetPortData+0x74>
    1bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bca:	9d 81       	ldd	r25, Y+5	; 0x05
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	91 05       	cpc	r25, r1
    1bd0:	81 f0       	breq	.+32     	; 0x1bf2 <DIO_u8SetPortData+0x7e>
    1bd2:	14 c0       	rjmp	.+40     	; 0x1bfc <DIO_u8SetPortData+0x88>
		case PORTA:
			PORTA_REG = u8_Value;
    1bd4:	eb e3       	ldi	r30, 0x3B	; 59
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	80 83       	st	Z, r24
    1bdc:	12 c0       	rjmp	.+36     	; 0x1c02 <DIO_u8SetPortData+0x8e>
			break;
		case PORTB:
			PORTB_REG = u8_Value;
    1bde:	e8 e3       	ldi	r30, 0x38	; 56
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	80 83       	st	Z, r24
    1be6:	0d c0       	rjmp	.+26     	; 0x1c02 <DIO_u8SetPortData+0x8e>
			break;
		case PORTC:
			PORTC_REG = u8_Value;
    1be8:	e5 e3       	ldi	r30, 0x35	; 53
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	80 83       	st	Z, r24
    1bf0:	08 c0       	rjmp	.+16     	; 0x1c02 <DIO_u8SetPortData+0x8e>
			break;
		case PORTD:
			PORTD_REG = u8_Value;
    1bf2:	e2 e3       	ldi	r30, 0x32	; 50
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	80 83       	st	Z, r24
    1bfa:	03 c0       	rjmp	.+6      	; 0x1c02 <DIO_u8SetPortData+0x8e>
			break;
		default:
			// if input port is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    1bfc:	19 82       	std	Y+1, r1	; 0x01
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <DIO_u8SetPortData+0x8e>
		}
	} else {
		// if Value not HIGH or LOW return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    1c00:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	08 95       	ret

00001c14 <DIO_u8GetPortData>:

// function to read value on port
uint8_t DIO_u8GetPortData(DIOPort_t u8_PortName, uint8_t* pu8_ReturnVar) {
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <DIO_u8GetPortData+0x6>
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <DIO_u8GetPortData+0x8>
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <DIO_u8GetPortData+0xa>
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	8a 83       	std	Y+2, r24	; 0x02
    1c24:	7c 83       	std	Y+4, r23	; 0x04
    1c26:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	89 83       	std	Y+1, r24	; 0x01
	if (pu8_ReturnVar != NULL) {
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	e9 f1       	breq	.+122    	; 0x1cae <DIO_u8GetPortData+0x9a>
		// get port value in register to variable depend on port and pin 
		switch (u8_PortName) {
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	3e 83       	std	Y+6, r19	; 0x06
    1c3c:	2d 83       	std	Y+5, r18	; 0x05
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	81 30       	cpi	r24, 0x01	; 1
    1c44:	91 05       	cpc	r25, r1
    1c46:	e1 f0       	breq	.+56     	; 0x1c80 <DIO_u8GetPortData+0x6c>
    1c48:	2d 81       	ldd	r18, Y+5	; 0x05
    1c4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1c4c:	22 30       	cpi	r18, 0x02	; 2
    1c4e:	31 05       	cpc	r19, r1
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <DIO_u8GetPortData+0x48>
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	61 f0       	breq	.+24     	; 0x1c72 <DIO_u8GetPortData+0x5e>
    1c5a:	27 c0       	rjmp	.+78     	; 0x1caa <DIO_u8GetPortData+0x96>
    1c5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	a1 f0       	breq	.+40     	; 0x1c8e <DIO_u8GetPortData+0x7a>
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	83 30       	cpi	r24, 0x03	; 3
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	b1 f0       	breq	.+44     	; 0x1c9c <DIO_u8GetPortData+0x88>
    1c70:	1c c0       	rjmp	.+56     	; 0x1caa <DIO_u8GetPortData+0x96>
		case PORTA:
			*pu8_ReturnVar = PORTA_REG;
    1c72:	eb e3       	ldi	r30, 0x3B	; 59
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	eb 81       	ldd	r30, Y+3	; 0x03
    1c7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7c:	80 83       	st	Z, r24
    1c7e:	18 c0       	rjmp	.+48     	; 0x1cb0 <DIO_u8GetPortData+0x9c>
			break;
		case PORTB:
			*pu8_ReturnVar = PORTB_REG;
    1c80:	e8 e3       	ldi	r30, 0x38	; 56
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	eb 81       	ldd	r30, Y+3	; 0x03
    1c88:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8a:	80 83       	st	Z, r24
    1c8c:	11 c0       	rjmp	.+34     	; 0x1cb0 <DIO_u8GetPortData+0x9c>
			break;
		case PORTC:
			*pu8_ReturnVar = PORTC_REG;
    1c8e:	e5 e3       	ldi	r30, 0x35	; 53
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	eb 81       	ldd	r30, Y+3	; 0x03
    1c96:	fc 81       	ldd	r31, Y+4	; 0x04
    1c98:	80 83       	st	Z, r24
    1c9a:	0a c0       	rjmp	.+20     	; 0x1cb0 <DIO_u8GetPortData+0x9c>
			break;
		case PORTD:
			*pu8_ReturnVar = PORTD_REG;
    1c9c:	e2 e3       	ldi	r30, 0x32	; 50
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca6:	80 83       	st	Z, r24
    1ca8:	03 c0       	rjmp	.+6      	; 0x1cb0 <DIO_u8GetPortData+0x9c>
			break;
		default:
			// if not suitable port return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    1caa:	19 82       	std	Y+1, r1	; 0x01
    1cac:	01 c0       	rjmp	.+2      	; 0x1cb0 <DIO_u8GetPortData+0x9c>
		}
	} else {
		// if no address passed to function return error state NOK 
		u8ErrorState = STD_TYPES_NOK;
    1cae:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb2:	26 96       	adiw	r28, 0x06	; 6
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	08 95       	ret

00001cc4 <DIO_u8TogglePinData>:

// function to toggle pin state
uint8_t DIO_u8TogglePinData(DIOPort_t u8_PortName, DIOPin_t u8_PinNum) {
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <DIO_u8TogglePinData+0x6>
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <DIO_u8TogglePinData+0x8>
    1ccc:	0f 92       	push	r0
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	8a 83       	std	Y+2, r24	; 0x02
    1cd4:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t u8ErrorState = STD_TYPES_OK;
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	89 83       	std	Y+1, r24	; 0x01
	switch (u8_PortName) {
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	3d 83       	std	Y+5, r19	; 0x05
    1ce2:	2c 83       	std	Y+4, r18	; 0x04
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	91 05       	cpc	r25, r1
    1cec:	49 f1       	breq	.+82     	; 0x1d40 <DIO_u8TogglePinData+0x7c>
    1cee:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf2:	22 30       	cpi	r18, 0x02	; 2
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	2c f4       	brge	.+10     	; 0x1d02 <DIO_u8TogglePinData+0x3e>
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	61 f0       	breq	.+24     	; 0x1d18 <DIO_u8TogglePinData+0x54>
    1d00:	5b c0       	rjmp	.+182    	; 0x1db8 <DIO_u8TogglePinData+0xf4>
    1d02:	2c 81       	ldd	r18, Y+4	; 0x04
    1d04:	3d 81       	ldd	r19, Y+5	; 0x05
    1d06:	22 30       	cpi	r18, 0x02	; 2
    1d08:	31 05       	cpc	r19, r1
    1d0a:	71 f1       	breq	.+92     	; 0x1d68 <DIO_u8TogglePinData+0xa4>
    1d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d10:	83 30       	cpi	r24, 0x03	; 3
    1d12:	91 05       	cpc	r25, r1
    1d14:	e9 f1       	breq	.+122    	; 0x1d90 <DIO_u8TogglePinData+0xcc>
    1d16:	50 c0       	rjmp	.+160    	; 0x1db8 <DIO_u8TogglePinData+0xf4>
	// toogle bit value depend on port and pin 
	case PORTA:
		Toggle_BIT(PORTA_REG, u8_PinNum);
    1d18:	ab e3       	ldi	r26, 0x3B	; 59
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	eb e3       	ldi	r30, 0x3B	; 59
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 2e       	mov	r0, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <DIO_u8TogglePinData+0x72>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <DIO_u8TogglePinData+0x6e>
    1d3a:	84 27       	eor	r24, r20
    1d3c:	8c 93       	st	X, r24
    1d3e:	3d c0       	rjmp	.+122    	; 0x1dba <DIO_u8TogglePinData+0xf6>
		break;
	case PORTB:
		Toggle_BIT(PORTB_REG, u8_PinNum);
    1d40:	a8 e3       	ldi	r26, 0x38	; 56
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e8 e3       	ldi	r30, 0x38	; 56
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	02 2e       	mov	r0, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <DIO_u8TogglePinData+0x9a>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	0a 94       	dec	r0
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <DIO_u8TogglePinData+0x96>
    1d62:	84 27       	eor	r24, r20
    1d64:	8c 93       	st	X, r24
    1d66:	29 c0       	rjmp	.+82     	; 0x1dba <DIO_u8TogglePinData+0xf6>
		break;
	case PORTC:
		Toggle_BIT(PORTC_REG, u8_PinNum);
    1d68:	a5 e3       	ldi	r26, 0x35	; 53
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e5 e3       	ldi	r30, 0x35	; 53
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	48 2f       	mov	r20, r24
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 2e       	mov	r0, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <DIO_u8TogglePinData+0xc2>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <DIO_u8TogglePinData+0xbe>
    1d8a:	84 27       	eor	r24, r20
    1d8c:	8c 93       	st	X, r24
    1d8e:	15 c0       	rjmp	.+42     	; 0x1dba <DIO_u8TogglePinData+0xf6>
		break;
	case PORTD:
		Toggle_BIT(PORTD_REG, u8_PinNum);
    1d90:	a2 e3       	ldi	r26, 0x32	; 50
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e2 e3       	ldi	r30, 0x32	; 50
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	48 2f       	mov	r20, r24
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 2e       	mov	r0, r18
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <DIO_u8TogglePinData+0xea>
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	0a 94       	dec	r0
    1db0:	e2 f7       	brpl	.-8      	; 0x1daa <DIO_u8TogglePinData+0xe6>
    1db2:	84 27       	eor	r24, r20
    1db4:	8c 93       	st	X, r24
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <DIO_u8TogglePinData+0xf6>
		break;
	default:
		// if input port is not one of the above cases return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    1db8:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <DIO_u8Set4BitsValue>:


uint8_t DIO_u8Set4BitsValue(uint8_t u8_PortName,uint8_t u8PortVal)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <DIO_u8Set4BitsValue+0x6>
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <DIO_u8Set4BitsValue+0x8>
    1dd4:	0f 92       	push	r0
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	8a 83       	std	Y+2, r24	; 0x02
    1ddc:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState= STD_TYPES_OK;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	89 83       	std	Y+1, r24	; 0x01
	switch (u8_PortName) {
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	3d 83       	std	Y+5, r19	; 0x05
    1dea:	2c 83       	std	Y+4, r18	; 0x04
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	9d 81       	ldd	r25, Y+5	; 0x05
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	91 05       	cpc	r25, r1
    1df4:	31 f1       	breq	.+76     	; 0x1e42 <DIO_u8Set4BitsValue+0x76>
    1df6:	2c 81       	ldd	r18, Y+4	; 0x04
    1df8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	2c f4       	brge	.+10     	; 0x1e0a <DIO_u8Set4BitsValue+0x3e>
    1e00:	8c 81       	ldd	r24, Y+4	; 0x04
    1e02:	9d 81       	ldd	r25, Y+5	; 0x05
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	61 f0       	breq	.+24     	; 0x1e20 <DIO_u8Set4BitsValue+0x54>
    1e08:	4f c0       	rjmp	.+158    	; 0x1ea8 <DIO_u8Set4BitsValue+0xdc>
    1e0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e0e:	22 30       	cpi	r18, 0x02	; 2
    1e10:	31 05       	cpc	r19, r1
    1e12:	41 f1       	breq	.+80     	; 0x1e64 <DIO_u8Set4BitsValue+0x98>
    1e14:	8c 81       	ldd	r24, Y+4	; 0x04
    1e16:	9d 81       	ldd	r25, Y+5	; 0x05
    1e18:	83 30       	cpi	r24, 0x03	; 3
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	a1 f1       	breq	.+104    	; 0x1e86 <DIO_u8Set4BitsValue+0xba>
    1e1e:	44 c0       	rjmp	.+136    	; 0x1ea8 <DIO_u8Set4BitsValue+0xdc>
	case PORTA:
		PORTA_REG &= 0b10000111;
    1e20:	ab e3       	ldi	r26, 0x3B	; 59
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	eb e3       	ldi	r30, 0x3B	; 59
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	87 78       	andi	r24, 0x87	; 135
    1e2c:	8c 93       	st	X, r24
		PORTA_REG |= (u8PortVal>>1);
    1e2e:	ab e3       	ldi	r26, 0x3B	; 59
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	eb e3       	ldi	r30, 0x3B	; 59
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	90 81       	ld	r25, Z
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	86 95       	lsr	r24
    1e3c:	89 2b       	or	r24, r25
    1e3e:	8c 93       	st	X, r24
    1e40:	34 c0       	rjmp	.+104    	; 0x1eaa <DIO_u8Set4BitsValue+0xde>
		break;
	case PORTB:
		PORTB_REG &= 0b10000111;
    1e42:	a8 e3       	ldi	r26, 0x38	; 56
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e8 e3       	ldi	r30, 0x38	; 56
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	87 78       	andi	r24, 0x87	; 135
    1e4e:	8c 93       	st	X, r24
		PORTB_REG |= (u8PortVal>>1);
    1e50:	a8 e3       	ldi	r26, 0x38	; 56
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e8 e3       	ldi	r30, 0x38	; 56
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	90 81       	ld	r25, Z
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	86 95       	lsr	r24
    1e5e:	89 2b       	or	r24, r25
    1e60:	8c 93       	st	X, r24
    1e62:	23 c0       	rjmp	.+70     	; 0x1eaa <DIO_u8Set4BitsValue+0xde>
		break;
	case PORTC:
		PORTC_REG &= 0b10000111;
    1e64:	a5 e3       	ldi	r26, 0x35	; 53
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e5 e3       	ldi	r30, 0x35	; 53
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	87 78       	andi	r24, 0x87	; 135
    1e70:	8c 93       	st	X, r24
		PORTC_REG |= (u8PortVal>>1);
    1e72:	a5 e3       	ldi	r26, 0x35	; 53
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e5 e3       	ldi	r30, 0x35	; 53
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	90 81       	ld	r25, Z
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	86 95       	lsr	r24
    1e80:	89 2b       	or	r24, r25
    1e82:	8c 93       	st	X, r24
    1e84:	12 c0       	rjmp	.+36     	; 0x1eaa <DIO_u8Set4BitsValue+0xde>
		break;
	case PORTD:
		PORTD_REG &= 0b10000111;
    1e86:	a2 e3       	ldi	r26, 0x32	; 50
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e2 e3       	ldi	r30, 0x32	; 50
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	87 78       	andi	r24, 0x87	; 135
    1e92:	8c 93       	st	X, r24
		PORTD_REG |= (u8PortVal>>1);
    1e94:	a2 e3       	ldi	r26, 0x32	; 50
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e2 e3       	ldi	r30, 0x32	; 50
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	90 81       	ld	r25, Z
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	86 95       	lsr	r24
    1ea2:	89 2b       	or	r24, r25
    1ea4:	8c 93       	st	X, r24
    1ea6:	01 c0       	rjmp	.+2      	; 0x1eaa <DIO_u8Set4BitsValue+0xde>
		break;
	default:
		u8ErrorState= STD_TYPES_NOK;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorState;
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <TIMER0_u8Init>:

/*
 * brief: This function is used to initialize Timer 0 to use CTC mode and 64 prescaler
 * return: (output) the Error state of the function 0 if an error happens and 1 otherwise
 */
uint8_t TIMER0_u8Init(void) {
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG = (1 << WGM01) | (1 << CS01) | (1 << CS00);
    1ec4:	e3 e5       	ldi	r30, 0x53	; 83
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	8b e0       	ldi	r24, 0x0B	; 11
    1eca:	80 83       	st	Z, r24
	return DELAY_OK;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
}
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <TIMER0_u8InterruptDelay>:
 * brief: This function is used to initialize an interrupt delay if the Timer isn't busy
 * param.: (input) the delay to be set in ms
 * param.: (input) a pointer to a function to be called when the delay is over
 * return: (output) the Error state of the function 0 if an error happens, 2 if the timer is busy and 1 otherwise
 */
uint8_t TIMER0_u8InterruptDelay(uint16_t delay, void (*fnCallBack)(void)) {
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <TIMER0_u8InterruptDelay+0x6>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <TIMER0_u8InterruptDelay+0x8>
    1edc:	0f 92       	push	r0
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	7c 83       	std	Y+4, r23	; 0x04
    1ee8:	6b 83       	std	Y+3, r22	; 0x03
	if (delay_stat == DELAY_BUSY) {
    1eea:	80 91 ee 00 	lds	r24, 0x00EE
    1eee:	82 30       	cpi	r24, 0x02	; 2
    1ef0:	21 f4       	brne	.+8      	; 0x1efa <TIMER0_u8InterruptDelay+0x26>
		return delay_stat;
    1ef2:	80 91 ee 00 	lds	r24, 0x00EE
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
    1ef8:	29 c0       	rjmp	.+82     	; 0x1f4c <TIMER0_u8InterruptDelay+0x78>
	}
	delay_stat = DELAY_BUSY;
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	80 93 ee 00 	sts	0x00EE, r24
	compare = delay;
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	9a 81       	ldd	r25, Y+2	; 0x02
    1f04:	90 93 fb 00 	sts	0x00FB, r25
    1f08:	80 93 fa 00 	sts	0x00FA, r24
	if (fnCallBack != NULL) {
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	d9 f0       	breq	.+54     	; 0x1f4a <TIMER0_u8InterruptDelay+0x76>
		delayCallBack = fnCallBack;
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	9c 81       	ldd	r25, Y+4	; 0x04
    1f18:	90 93 ff 00 	sts	0x00FF, r25
    1f1c:	80 93 fe 00 	sts	0x00FE, r24
		OCR0_REG = (F_CPU / PRESCALER);
    1f20:	ec e5       	ldi	r30, 0x5C	; 92
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	8d e7       	ldi	r24, 0x7D	; 125
    1f26:	80 83       	st	Z, r24
		SET_BIT(TIMSK_REG, OCIE0);
    1f28:	a9 e5       	ldi	r26, 0x59	; 89
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e9 e5       	ldi	r30, 0x59	; 89
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	82 60       	ori	r24, 0x02	; 2
    1f34:	8c 93       	st	X, r24
		SET_BIT(SREG_REG, I_BIT);
    1f36:	af e5       	ldi	r26, 0x5F	; 95
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	ef e5       	ldi	r30, 0x5F	; 95
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	80 68       	ori	r24, 0x80	; 128
    1f42:	8c 93       	st	X, r24
		return DELAY_OK;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	8d 83       	std	Y+5, r24	; 0x05
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <TIMER0_u8InterruptDelay+0x78>
	} else {
		return DELAY_ERR;
    1f4a:	1d 82       	std	Y+5, r1	; 0x05
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <TIMER0_u8PollingDelay>:
/*
 * brief: This function is used to initialize a polling delay if the Timer isn't busy
 * param.: (input) the delay to be set in ms
 * return: (output) the Error state of the function 0 if an error happens, 2 if the timer is busy and 1 otherwise
 */
uint8_t TIMER0_u8PollingDelay(uint16_t delay) {
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <TIMER0_u8PollingDelay+0x6>
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
	if (delay_stat == DELAY_BUSY) {
    1f6e:	80 91 ee 00 	lds	r24, 0x00EE
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	21 f4       	brne	.+8      	; 0x1f7e <TIMER0_u8PollingDelay+0x20>
		return delay_stat;
    1f76:	80 91 ee 00 	lds	r24, 0x00EE
    1f7a:	8b 83       	std	Y+3, r24	; 0x03
    1f7c:	3b c0       	rjmp	.+118    	; 0x1ff4 <TIMER0_u8PollingDelay+0x96>
	}
	delay_stat = DELAY_BUSY;
    1f7e:	82 e0       	ldi	r24, 0x02	; 2
    1f80:	80 93 ee 00 	sts	0x00EE, r24
	counter = 0;						// reset counter to 0
    1f84:	10 92 fd 00 	sts	0x00FD, r1
    1f88:	10 92 fc 00 	sts	0x00FC, r1
	compare = delay;
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	90 93 fb 00 	sts	0x00FB, r25
    1f94:	80 93 fa 00 	sts	0x00FA, r24
	TIMER0_u8Init();				// initialize timer0
    1f98:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <TIMER0_u8Init>
	TCNT0_REG = 0;
    1f9c:	e2 e5       	ldi	r30, 0x52	; 82
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	10 82       	st	Z, r1
	OCR0_REG = (F_CPU / PRESCALER);		// set OCR0_REG value
    1fa2:	ec e5       	ldi	r30, 0x5C	; 92
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	8d e7       	ldi	r24, 0x7D	; 125
    1fa8:	80 83       	st	Z, r24
	SET_BIT(TIMSK_REG, OCIE0);			// enable interrupt
    1faa:	a9 e5       	ldi	r26, 0x59	; 89
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e9 e5       	ldi	r30, 0x59	; 89
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	82 60       	ori	r24, 0x02	; 2
    1fb6:	8c 93       	st	X, r24
	SET_BIT(SREG_REG, I_BIT);
    1fb8:	af e5       	ldi	r26, 0x5F	; 95
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	ef e5       	ldi	r30, 0x5F	; 95
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	80 68       	ori	r24, 0x80	; 128
    1fc4:	8c 93       	st	X, r24
	while (counter <= compare)
    1fc6:	20 91 fc 00 	lds	r18, 0x00FC
    1fca:	30 91 fd 00 	lds	r19, 0x00FD
    1fce:	80 91 fa 00 	lds	r24, 0x00FA
    1fd2:	90 91 fb 00 	lds	r25, 0x00FB
    1fd6:	82 17       	cp	r24, r18
    1fd8:	93 07       	cpc	r25, r19
    1fda:	a8 f7       	brcc	.-22     	; 0x1fc6 <TIMER0_u8PollingDelay+0x68>
		;			// stop if delay not finished
	CLR_BIT(TIMSK_REG, OCIE0);
    1fdc:	a9 e5       	ldi	r26, 0x59	; 89
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e9 e5       	ldi	r30, 0x59	; 89
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	8d 7f       	andi	r24, 0xFD	; 253
    1fe8:	8c 93       	st	X, r24
	delay_stat = DELAY_OK;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	80 93 ee 00 	sts	0x00EE, r24
	return DELAY_OK;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <__vector_10>:
void __vector_10(void) {
    2002:	1f 92       	push	r1
    2004:	0f 92       	push	r0
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	0f 92       	push	r0
    200a:	11 24       	eor	r1, r1
    200c:	2f 93       	push	r18
    200e:	3f 93       	push	r19
    2010:	4f 93       	push	r20
    2012:	5f 93       	push	r21
    2014:	6f 93       	push	r22
    2016:	7f 93       	push	r23
    2018:	8f 93       	push	r24
    201a:	9f 93       	push	r25
    201c:	af 93       	push	r26
    201e:	bf 93       	push	r27
    2020:	ef 93       	push	r30
    2022:	ff 93       	push	r31
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
	counter++;
    202c:	80 91 fc 00 	lds	r24, 0x00FC
    2030:	90 91 fd 00 	lds	r25, 0x00FD
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	90 93 fd 00 	sts	0x00FD, r25
    203a:	80 93 fc 00 	sts	0x00FC, r24
	if (counter == compare && delayCallBack != NULL) {
    203e:	20 91 fc 00 	lds	r18, 0x00FC
    2042:	30 91 fd 00 	lds	r19, 0x00FD
    2046:	80 91 fa 00 	lds	r24, 0x00FA
    204a:	90 91 fb 00 	lds	r25, 0x00FB
    204e:	28 17       	cp	r18, r24
    2050:	39 07       	cpc	r19, r25
    2052:	c9 f4       	brne	.+50     	; 0x2086 <__vector_10+0x84>
    2054:	80 91 fe 00 	lds	r24, 0x00FE
    2058:	90 91 ff 00 	lds	r25, 0x00FF
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	99 f0       	breq	.+38     	; 0x2086 <__vector_10+0x84>
		counter = 0;
    2060:	10 92 fd 00 	sts	0x00FD, r1
    2064:	10 92 fc 00 	sts	0x00FC, r1
		CLR_BIT(TIMSK_REG, OCIE0);
    2068:	a9 e5       	ldi	r26, 0x59	; 89
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e9 e5       	ldi	r30, 0x59	; 89
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	8d 7f       	andi	r24, 0xFD	; 253
    2074:	8c 93       	st	X, r24
		delay_stat = DELAY_OK;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	80 93 ee 00 	sts	0x00EE, r24
		delayCallBack();
    207c:	e0 91 fe 00 	lds	r30, 0x00FE
    2080:	f0 91 ff 00 	lds	r31, 0x00FF
    2084:	09 95       	icall
	}
}
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	ff 91       	pop	r31
    208c:	ef 91       	pop	r30
    208e:	bf 91       	pop	r27
    2090:	af 91       	pop	r26
    2092:	9f 91       	pop	r25
    2094:	8f 91       	pop	r24
    2096:	7f 91       	pop	r23
    2098:	6f 91       	pop	r22
    209a:	5f 91       	pop	r21
    209c:	4f 91       	pop	r20
    209e:	3f 91       	pop	r19
    20a0:	2f 91       	pop	r18
    20a2:	0f 90       	pop	r0
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	0f 90       	pop	r0
    20a8:	1f 90       	pop	r1
    20aa:	18 95       	reti

000020ac <LED_u8Init>:
 */

#include "LED.h"

// function to initialize LED 
uint8_t LED_u8Init(LED_t* led) {
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <LED_u8Init+0x6>
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	9a 83       	std	Y+2, r25	; 0x02
    20b8:	89 83       	std	Y+1, r24	; 0x01
	// set direction of LED's pin to OUTPUT 
	return DIO_u8SetPinDirection(led->port, led->pin, DIO_OUTPUT);
    20ba:	e9 81       	ldd	r30, Y+1	; 0x01
    20bc:	fa 81       	ldd	r31, Y+2	; 0x02
    20be:	80 81       	ld	r24, Z
    20c0:	e9 81       	ldd	r30, Y+1	; 0x01
    20c2:	fa 81       	ldd	r31, Y+2	; 0x02
    20c4:	91 81       	ldd	r25, Z+1	; 0x01
    20c6:	69 2f       	mov	r22, r25
    20c8:	42 e0       	ldi	r20, 0x02	; 2
    20ca:	0e 94 aa 08 	call	0x1154	; 0x1154 <DIO_u8SetPinDirection>
}
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <LED_u8On>:

// function ta turn LED on
uint8_t LED_u8On(LED_t* led) {
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	00 d0       	rcall	.+0      	; 0x20de <LED_u8On+0x6>
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	89 83       	std	Y+1, r24	; 0x01
	// set LED's pin to HIGH 
	return DIO_u8SetPinData(led->port, led->pin, DIO_HIGH);
    20e6:	e9 81       	ldd	r30, Y+1	; 0x01
    20e8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ea:	80 81       	ld	r24, Z
    20ec:	e9 81       	ldd	r30, Y+1	; 0x01
    20ee:	fa 81       	ldd	r31, Y+2	; 0x02
    20f0:	91 81       	ldd	r25, Z+1	; 0x01
    20f2:	69 2f       	mov	r22, r25
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_u8SetPinData>
}
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <LED_u8Off>:

// function ta turn LED off
uint8_t LED_u8Off(LED_t* led) {
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	00 d0       	rcall	.+0      	; 0x210a <LED_u8Off+0x6>
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	9a 83       	std	Y+2, r25	; 0x02
    2110:	89 83       	std	Y+1, r24	; 0x01
	// set LED's pin to LOW
	return DIO_u8SetPinData(led->port, led->pin, DIO_LOW);
    2112:	e9 81       	ldd	r30, Y+1	; 0x01
    2114:	fa 81       	ldd	r31, Y+2	; 0x02
    2116:	80 81       	ld	r24, Z
    2118:	e9 81       	ldd	r30, Y+1	; 0x01
    211a:	fa 81       	ldd	r31, Y+2	; 0x02
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	69 2f       	mov	r22, r25
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <DIO_u8SetPinData>
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <LED_u8Toggle>:

// function to toggle LED state
uint8_t LED_u8Toggle(LED_t* led) {
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	00 d0       	rcall	.+0      	; 0x2136 <LED_u8Toggle+0x6>
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	9a 83       	std	Y+2, r25	; 0x02
    213c:	89 83       	std	Y+1, r24	; 0x01
	// toggle LED's pin state 
	return DIO_u8TogglePinData(led->port, led->pin);
    213e:	e9 81       	ldd	r30, Y+1	; 0x01
    2140:	fa 81       	ldd	r31, Y+2	; 0x02
    2142:	80 81       	ld	r24, Z
    2144:	e9 81       	ldd	r30, Y+1	; 0x01
    2146:	fa 81       	ldd	r31, Y+2	; 0x02
    2148:	91 81       	ldd	r25, Z+1	; 0x01
    214a:	69 2f       	mov	r22, r25
    214c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <DIO_u8TogglePinData>
}
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <EEPROM_Init>:
	uint8_t u8Bytes[4];
}Data_t;


void EEPROM_Init(void)
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
	I2C_u8Init();
    2162:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2C_u8Init>
}
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <EEPROM_u8WriteByteTo>:

uint8_t EEPROM_u8WriteByteTo(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint8_t u8Data)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	28 97       	sbiw	r28, 0x08	; 8
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	8c 83       	std	Y+4, r24	; 0x04
    2182:	7e 83       	std	Y+6, r23	; 0x06
    2184:	6d 83       	std	Y+5, r22	; 0x05
    2186:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t u8OperationAddress = (EEPROM_CONTROL_BYTE_HIGH_NIBBLE_MASK|(u8ChipAddress<<EEPROM_FIRST_CHIP_SELECT_BIT));
    2188:	8c 81       	ldd	r24, Y+4	; 0x04
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	88 0f       	add	r24, r24
    2190:	99 1f       	adc	r25, r25
    2192:	80 6a       	ori	r24, 0xA0	; 160
    2194:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ByteAddressHigh = (u16ByteAddress>>8);
    2196:	8d 81       	ldd	r24, Y+5	; 0x05
    2198:	9e 81       	ldd	r25, Y+6	; 0x06
    219a:	89 2f       	mov	r24, r25
    219c:	99 27       	eor	r25, r25
    219e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ByteAddressLow = u16ByteAddress;
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	89 83       	std	Y+1, r24	; 0x01

	I2C_u8MasterSendStart();
    21a4:	0e 94 71 07 	call	0xee2	; 0xee2 <I2C_u8MasterSendStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	0e 94 21 07 	call	0xe42	; 0xe42 <I2C_u8MasterSendSLA>
	I2C_u8MasterSendByte(u8ByteAddressHigh);
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	0e 94 52 07 	call	0xea4	; 0xea4 <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8ByteAddressLow);
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	0e 94 52 07 	call	0xea4	; 0xea4 <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8Data);
    21bc:	8f 81       	ldd	r24, Y+7	; 0x07
    21be:	0e 94 52 07 	call	0xea4	; 0xea4 <I2C_u8MasterSendByte>

	I2C_u8Stop();
    21c2:	0e 94 38 08 	call	0x1070	; 0x1070 <I2C_u8Stop>
}
    21c6:	28 96       	adiw	r28, 0x08	; 8
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	cf 91       	pop	r28
    21d4:	df 91       	pop	r29
    21d6:	08 95       	ret

000021d8 <EEPROM_u8RandonReadFrom>:


uint8_t EEPROM_u8RandonReadFrom(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint8_t* u8Data)
{
    21d8:	df 93       	push	r29
    21da:	cf 93       	push	r28
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	29 97       	sbiw	r28, 0x09	; 9
    21e2:	0f b6       	in	r0, 0x3f	; 63
    21e4:	f8 94       	cli
    21e6:	de bf       	out	0x3e, r29	; 62
    21e8:	0f be       	out	0x3f, r0	; 63
    21ea:	cd bf       	out	0x3d, r28	; 61
    21ec:	8c 83       	std	Y+4, r24	; 0x04
    21ee:	7e 83       	std	Y+6, r23	; 0x06
    21f0:	6d 83       	std	Y+5, r22	; 0x05
    21f2:	58 87       	std	Y+8, r21	; 0x08
    21f4:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t u8OperationAddress = (EEPROM_CONTROL_BYTE_HIGH_NIBBLE_MASK|(u8ChipAddress<<EEPROM_FIRST_CHIP_SELECT_BIT));
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	88 2f       	mov	r24, r24
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	80 6a       	ori	r24, 0xA0	; 160
    2202:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ByteAddressHigh = (u16ByteAddress>>8);
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	89 2f       	mov	r24, r25
    220a:	99 27       	eor	r25, r25
    220c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ByteAddressLow =u16ByteAddress;
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	89 83       	std	Y+1, r24	; 0x01


	I2C_u8MasterSendStart();
    2212:	0e 94 71 07 	call	0xee2	; 0xee2 <I2C_u8MasterSendStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	0e 94 21 07 	call	0xe42	; 0xe42 <I2C_u8MasterSendSLA>
	I2C_u8MasterSendByte(u8ByteAddressHigh);
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	0e 94 52 07 	call	0xea4	; 0xea4 <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8ByteAddressLow);
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	0e 94 52 07 	call	0xea4	; 0xea4 <I2C_u8MasterSendByte>
	I2C_u8SendRepeatedStart();
    222a:	0e 94 90 07 	call	0xf20	; 0xf20 <I2C_u8SendRepeatedStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_READ);
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	61 e0       	ldi	r22, 0x01	; 1
    2232:	0e 94 21 07 	call	0xe42	; 0xe42 <I2C_u8MasterSendSLA>
	I2C_u8MasterReceiveWithNAK(u8Data);
    2236:	8f 81       	ldd	r24, Y+7	; 0x07
    2238:	98 85       	ldd	r25, Y+8	; 0x08
    223a:	0e 94 f8 07 	call	0xff0	; 0xff0 <I2C_u8MasterReceiveWithNAK>
	I2C_u8Stop();
    223e:	0e 94 38 08 	call	0x1070	; 0x1070 <I2C_u8Stop>

}
    2242:	29 96       	adiw	r28, 0x09	; 9
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <EEPROM_u8WriteStringTo>:


uint8_t EEPROM_u8WriteStringTo(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint8_t* u8Data)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	2a 97       	sbiw	r28, 0x0a	; 10
    225e:	0f b6       	in	r0, 0x3f	; 63
    2260:	f8 94       	cli
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	0f be       	out	0x3f, r0	; 63
    2266:	cd bf       	out	0x3d, r28	; 61
    2268:	8d 83       	std	Y+5, r24	; 0x05
    226a:	7f 83       	std	Y+7, r23	; 0x07
    226c:	6e 83       	std	Y+6, r22	; 0x06
    226e:	59 87       	std	Y+9, r21	; 0x09
    2270:	48 87       	std	Y+8, r20	; 0x08
	uint8_t u8OperationAddress = (EEPROM_CONTROL_BYTE_HIGH_NIBBLE_MASK|(u8ChipAddress<<EEPROM_FIRST_CHIP_SELECT_BIT));
    2272:	8d 81       	ldd	r24, Y+5	; 0x05
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	80 6a       	ori	r24, 0xA0	; 160
    227e:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ByteAddressHigh = (u16ByteAddress>>8);
    2280:	8e 81       	ldd	r24, Y+6	; 0x06
    2282:	9f 81       	ldd	r25, Y+7	; 0x07
    2284:	89 2f       	mov	r24, r25
    2286:	99 27       	eor	r25, r25
    2288:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ByteAddressLow = u16ByteAddress;
    228a:	8e 81       	ldd	r24, Y+6	; 0x06
    228c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8BytesCounter=0;
    228e:	19 82       	std	Y+1, r1	; 0x01

	I2C_u8MasterSendStart();
    2290:	0e 94 71 07 	call	0xee2	; 0xee2 <I2C_u8MasterSendStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
    2294:	8c 81       	ldd	r24, Y+4	; 0x04
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	0e 94 21 07 	call	0xe42	; 0xe42 <I2C_u8MasterSendSLA>
	I2C_u8MasterSendByte(u8ByteAddressHigh);
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	0e 94 52 07 	call	0xea4	; 0xea4 <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8ByteAddressLow);
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	0e 94 52 07 	call	0xea4	; 0xea4 <I2C_u8MasterSendByte>
    22a8:	0e c0       	rjmp	.+28     	; 0x22c6 <EEPROM_u8WriteStringTo+0x72>
	while (u8Data[u8BytesCounter]!='\0' && u8BytesCounter!=63)
	{
		I2C_u8MasterSendByte(u8Data[u8BytesCounter]);
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	88 85       	ldd	r24, Y+8	; 0x08
    22b2:	99 85       	ldd	r25, Y+9	; 0x09
    22b4:	fc 01       	movw	r30, r24
    22b6:	e2 0f       	add	r30, r18
    22b8:	f3 1f       	adc	r31, r19
    22ba:	80 81       	ld	r24, Z
    22bc:	0e 94 52 07 	call	0xea4	; 0xea4 <I2C_u8MasterSendByte>
		u8BytesCounter++;
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	8f 5f       	subi	r24, 0xFF	; 255
    22c4:	89 83       	std	Y+1, r24	; 0x01

	I2C_u8MasterSendStart();
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
	I2C_u8MasterSendByte(u8ByteAddressHigh);
	I2C_u8MasterSendByte(u8ByteAddressLow);
	while (u8Data[u8BytesCounter]!='\0' && u8BytesCounter!=63)
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	88 85       	ldd	r24, Y+8	; 0x08
    22ce:	99 85       	ldd	r25, Y+9	; 0x09
    22d0:	fc 01       	movw	r30, r24
    22d2:	e2 0f       	add	r30, r18
    22d4:	f3 1f       	adc	r31, r19
    22d6:	80 81       	ld	r24, Z
    22d8:	88 23       	and	r24, r24
    22da:	19 f0       	breq	.+6      	; 0x22e2 <EEPROM_u8WriteStringTo+0x8e>
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	8f 33       	cpi	r24, 0x3F	; 63
    22e0:	21 f7       	brne	.-56     	; 0x22aa <EEPROM_u8WriteStringTo+0x56>
	{
		I2C_u8MasterSendByte(u8Data[u8BytesCounter]);
		u8BytesCounter++;
	}
	I2C_u8MasterSendByte('\0');
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	0e 94 52 07 	call	0xea4	; 0xea4 <I2C_u8MasterSendByte>

	I2C_u8Stop();
    22e8:	0e 94 38 08 	call	0x1070	; 0x1070 <I2C_u8Stop>

}
    22ec:	2a 96       	adiw	r28, 0x0a	; 10
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <EEPROM_u8ReadStringFrom>:

uint8_t EEPROM_u8ReadStringFrom(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint8_t* u8Data)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	2b 97       	sbiw	r28, 0x0b	; 11
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	8e 83       	std	Y+6, r24	; 0x06
    2314:	78 87       	std	Y+8, r23	; 0x08
    2316:	6f 83       	std	Y+7, r22	; 0x07
    2318:	5a 87       	std	Y+10, r21	; 0x0a
    231a:	49 87       	std	Y+9, r20	; 0x09
	uint8_t u8OperationAddress = (EEPROM_CONTROL_BYTE_HIGH_NIBBLE_MASK|(u8ChipAddress<<EEPROM_FIRST_CHIP_SELECT_BIT));
    231c:	8e 81       	ldd	r24, Y+6	; 0x06
    231e:	88 2f       	mov	r24, r24
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	80 6a       	ori	r24, 0xA0	; 160
    2328:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ByteAddressHigh = (u16ByteAddress>>8);
    232a:	8f 81       	ldd	r24, Y+7	; 0x07
    232c:	98 85       	ldd	r25, Y+8	; 0x08
    232e:	89 2f       	mov	r24, r25
    2330:	99 27       	eor	r25, r25
    2332:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ByteAddressLow =u16ByteAddress;
    2334:	8f 81       	ldd	r24, Y+7	; 0x07
    2336:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8BytesCounter=0;
    2338:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Flush;

	I2C_u8MasterSendStart();
    233a:	0e 94 71 07 	call	0xee2	; 0xee2 <I2C_u8MasterSendStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
    233e:	8c 81       	ldd	r24, Y+4	; 0x04
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	0e 94 21 07 	call	0xe42	; 0xe42 <I2C_u8MasterSendSLA>
	I2C_u8MasterSendByte(u8ByteAddressHigh);
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	0e 94 52 07 	call	0xea4	; 0xea4 <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8ByteAddressLow);
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	0e 94 52 07 	call	0xea4	; 0xea4 <I2C_u8MasterSendByte>
	I2C_u8SendRepeatedStart();
    2352:	0e 94 90 07 	call	0xf20	; 0xf20 <I2C_u8SendRepeatedStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_READ);
    2356:	8c 81       	ldd	r24, Y+4	; 0x04
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	0e 94 21 07 	call	0xe42	; 0xe42 <I2C_u8MasterSendSLA>
	do{
		I2C_u8MasterReceiveWithACK(&u8Data[u8BytesCounter]);
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	82 0f       	add	r24, r18
    236a:	93 1f       	adc	r25, r19
    236c:	0e 94 b4 07 	call	0xf68	; 0xf68 <I2C_u8MasterReceiveWithACK>
		u8BytesCounter++;
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	8f 5f       	subi	r24, 0xFF	; 255
    2374:	89 83       	std	Y+1, r24	; 0x01
	}while (u8Data[u8BytesCounter-1]!='\0');
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	88 2f       	mov	r24, r24
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9c 01       	movw	r18, r24
    237e:	21 50       	subi	r18, 0x01	; 1
    2380:	30 40       	sbci	r19, 0x00	; 0
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	9a 85       	ldd	r25, Y+10	; 0x0a
    2386:	fc 01       	movw	r30, r24
    2388:	e2 0f       	add	r30, r18
    238a:	f3 1f       	adc	r31, r19
    238c:	80 81       	ld	r24, Z
    238e:	88 23       	and	r24, r24
    2390:	31 f7       	brne	.-52     	; 0x235e <EEPROM_u8ReadStringFrom+0x60>
	I2C_u8MasterReceiveWithNAK(&u8Flush);
    2392:	ce 01       	movw	r24, r28
    2394:	05 96       	adiw	r24, 0x05	; 5
    2396:	0e 94 f8 07 	call	0xff0	; 0xff0 <I2C_u8MasterReceiveWithNAK>
	I2C_u8Stop();
    239a:	0e 94 38 08 	call	0x1070	; 0x1070 <I2C_u8Stop>

}
    239e:	2b 96       	adiw	r28, 0x0b	; 11
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <EEPROM_u8WriteIntTo>:

uint8_t EEPROM_u8WriteIntTo(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint32_t u8Data)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	2a 97       	sbiw	r28, 0x0a	; 10
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	7f 83       	std	Y+7, r23	; 0x07
    23c8:	6e 83       	std	Y+6, r22	; 0x06
    23ca:	59 87       	std	Y+9, r21	; 0x09
    23cc:	48 87       	std	Y+8, r20	; 0x08

	Data_t New;
	New.u32Data=u8Data;
    23ce:	88 85       	ldd	r24, Y+8	; 0x08
    23d0:	99 85       	ldd	r25, Y+9	; 0x09
    23d2:	9a 83       	std	Y+2, r25	; 0x02
    23d4:	89 83       	std	Y+1, r24	; 0x01
	EEPROM_u8WriteByteTo(u8ChipAddress,u16ByteAddress,New.u8Bytes[3]);
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	2e 81       	ldd	r18, Y+6	; 0x06
    23da:	3f 81       	ldd	r19, Y+7	; 0x07
    23dc:	8d 81       	ldd	r24, Y+5	; 0x05
    23de:	b9 01       	movw	r22, r18
    23e0:	49 2f       	mov	r20, r25
    23e2:	0e 94 b6 10 	call	0x216c	; 0x216c <EEPROM_u8WriteByteTo>
	TIMER0_u8PollingDelay(10);
    23e6:	8a e0       	ldi	r24, 0x0A	; 10
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <TIMER0_u8PollingDelay>
	EEPROM_u8WriteByteTo(u8ChipAddress,u16ByteAddress+1,New.u8Bytes[2]);
    23ee:	8e 81       	ldd	r24, Y+6	; 0x06
    23f0:	9f 81       	ldd	r25, Y+7	; 0x07
    23f2:	9c 01       	movw	r18, r24
    23f4:	2f 5f       	subi	r18, 0xFF	; 255
    23f6:	3f 4f       	sbci	r19, 0xFF	; 255
    23f8:	9b 81       	ldd	r25, Y+3	; 0x03
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	b9 01       	movw	r22, r18
    23fe:	49 2f       	mov	r20, r25
    2400:	0e 94 b6 10 	call	0x216c	; 0x216c <EEPROM_u8WriteByteTo>
	TIMER0_u8PollingDelay(10);
    2404:	8a e0       	ldi	r24, 0x0A	; 10
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <TIMER0_u8PollingDelay>
	EEPROM_u8WriteByteTo(u8ChipAddress,u16ByteAddress+2,New.u8Bytes[1]);
    240c:	8e 81       	ldd	r24, Y+6	; 0x06
    240e:	9f 81       	ldd	r25, Y+7	; 0x07
    2410:	9c 01       	movw	r18, r24
    2412:	2e 5f       	subi	r18, 0xFE	; 254
    2414:	3f 4f       	sbci	r19, 0xFF	; 255
    2416:	9a 81       	ldd	r25, Y+2	; 0x02
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	b9 01       	movw	r22, r18
    241c:	49 2f       	mov	r20, r25
    241e:	0e 94 b6 10 	call	0x216c	; 0x216c <EEPROM_u8WriteByteTo>
	TIMER0_u8PollingDelay(10);
    2422:	8a e0       	ldi	r24, 0x0A	; 10
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <TIMER0_u8PollingDelay>
	EEPROM_u8WriteByteTo(u8ChipAddress,u16ByteAddress+3,New.u8Bytes[0]);
    242a:	8e 81       	ldd	r24, Y+6	; 0x06
    242c:	9f 81       	ldd	r25, Y+7	; 0x07
    242e:	9c 01       	movw	r18, r24
    2430:	2d 5f       	subi	r18, 0xFD	; 253
    2432:	3f 4f       	sbci	r19, 0xFF	; 255
    2434:	99 81       	ldd	r25, Y+1	; 0x01
    2436:	8d 81       	ldd	r24, Y+5	; 0x05
    2438:	b9 01       	movw	r22, r18
    243a:	49 2f       	mov	r20, r25
    243c:	0e 94 b6 10 	call	0x216c	; 0x216c <EEPROM_u8WriteByteTo>
	TIMER0_u8PollingDelay(10);
    2440:	8a e0       	ldi	r24, 0x0A	; 10
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <TIMER0_u8PollingDelay>
}
    2448:	2a 96       	adiw	r28, 0x0a	; 10
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	08 95       	ret

0000245a <EEPROM_u8ReadIntFrom>:

uint8_t EEPROM_u8ReadIntFrom(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint32_t* u8Data)
{
    245a:	df 93       	push	r29
    245c:	cf 93       	push	r28
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	2e 97       	sbiw	r28, 0x0e	; 14
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
    246e:	89 87       	std	Y+9, r24	; 0x09
    2470:	7b 87       	std	Y+11, r23	; 0x0b
    2472:	6a 87       	std	Y+10, r22	; 0x0a
    2474:	5d 87       	std	Y+13, r21	; 0x0d
    2476:	4c 87       	std	Y+12, r20	; 0x0c
	uint8_t u8Byte2;
	uint8_t u8Byte3;
	uint8_t u8Byte4;

	Data_t Received;
	EEPROM_u8RandonReadFrom(u8ChipAddress,u16ByteAddress,&Received.u8Bytes[3]);
    2478:	4a 85       	ldd	r20, Y+10	; 0x0a
    247a:	5b 85       	ldd	r21, Y+11	; 0x0b
    247c:	ce 01       	movw	r24, r28
    247e:	05 96       	adiw	r24, 0x05	; 5
    2480:	9c 01       	movw	r18, r24
    2482:	2d 5f       	subi	r18, 0xFD	; 253
    2484:	3f 4f       	sbci	r19, 0xFF	; 255
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	ba 01       	movw	r22, r20
    248a:	a9 01       	movw	r20, r18
    248c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    2490:	8a e0       	ldi	r24, 0x0A	; 10
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <TIMER0_u8PollingDelay>
	//UART_u8SendByte(Received.u8Bytes[0]);
	EEPROM_u8RandonReadFrom(u8ChipAddress,u16ByteAddress+1,&Received.u8Bytes[2]);
    2498:	8a 85       	ldd	r24, Y+10	; 0x0a
    249a:	9b 85       	ldd	r25, Y+11	; 0x0b
    249c:	ac 01       	movw	r20, r24
    249e:	4f 5f       	subi	r20, 0xFF	; 255
    24a0:	5f 4f       	sbci	r21, 0xFF	; 255
    24a2:	ce 01       	movw	r24, r28
    24a4:	05 96       	adiw	r24, 0x05	; 5
    24a6:	9c 01       	movw	r18, r24
    24a8:	2e 5f       	subi	r18, 0xFE	; 254
    24aa:	3f 4f       	sbci	r19, 0xFF	; 255
    24ac:	89 85       	ldd	r24, Y+9	; 0x09
    24ae:	ba 01       	movw	r22, r20
    24b0:	a9 01       	movw	r20, r18
    24b2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    24b6:	8a e0       	ldi	r24, 0x0A	; 10
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <TIMER0_u8PollingDelay>
	//UART_u8SendByte(Received.u8Bytes[1]);
	EEPROM_u8RandonReadFrom(u8ChipAddress,u16ByteAddress+2,&Received.u8Bytes[1]);
    24be:	8a 85       	ldd	r24, Y+10	; 0x0a
    24c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    24c2:	ac 01       	movw	r20, r24
    24c4:	4e 5f       	subi	r20, 0xFE	; 254
    24c6:	5f 4f       	sbci	r21, 0xFF	; 255
    24c8:	ce 01       	movw	r24, r28
    24ca:	05 96       	adiw	r24, 0x05	; 5
    24cc:	9c 01       	movw	r18, r24
    24ce:	2f 5f       	subi	r18, 0xFF	; 255
    24d0:	3f 4f       	sbci	r19, 0xFF	; 255
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	ba 01       	movw	r22, r20
    24d6:	a9 01       	movw	r20, r18
    24d8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    24dc:	8a e0       	ldi	r24, 0x0A	; 10
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <TIMER0_u8PollingDelay>
	//UART_u8SendByte(Received.u8Bytes[2]);
	EEPROM_u8RandonReadFrom(u8ChipAddress,u16ByteAddress+3,&Received.u8Bytes[0]);
    24e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    24e8:	9c 01       	movw	r18, r24
    24ea:	2d 5f       	subi	r18, 0xFD	; 253
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	ae 01       	movw	r20, r28
    24f0:	4b 5f       	subi	r20, 0xFB	; 251
    24f2:	5f 4f       	sbci	r21, 0xFF	; 255
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	b9 01       	movw	r22, r18
    24f8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    24fc:	8a e0       	ldi	r24, 0x0A	; 10
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <TIMER0_u8PollingDelay>
	//UART_u8SendByte(Received.u8Bytes[3]);
	*u8Data = Received.u32Data;
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	9e 81       	ldd	r25, Y+6	; 0x06
    2508:	ec 85       	ldd	r30, Y+12	; 0x0c
    250a:	fd 85       	ldd	r31, Y+13	; 0x0d
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
}
    2510:	2e 96       	adiw	r28, 0x0e	; 14
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <main>:
#define NEW_LINE_CHAR		0x0D
#define UART_BAUDRATE		9600
#define EEPROM_ADDRESS		0x00

int main(void)
{
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	c2 58       	subi	r28, 0x82	; 130
    252c:	d0 40       	sbci	r29, 0x00	; 0
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8Command[10];
	uint8_t au8EEPROMAddress[18];
	uint8_t au8EEPROMData[100];
	uint16_t EEPROM_Data_Address;

	I2C_u8Init();
    2538:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2C_u8Init>
	UART_u8Init(UART_BAUDRATE);
    253c:	80 e8       	ldi	r24, 0x80	; 128
    253e:	95 e2       	ldi	r25, 0x25	; 37
    2540:	0e 94 09 01 	call	0x212	; 0x212 <UART_u8Init>
	while (1)
	{
		UART_u8SendString("Enter Your Command: ");
    2544:	80 e6       	ldi	r24, 0x60	; 96
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	0e 94 91 02 	call	0x522	; 0x522 <UART_u8SendString>
		UART_u8RecieveString(au8Command);
    254c:	ce 01       	movw	r24, r28
    254e:	03 96       	adiw	r24, 0x03	; 3
    2550:	0e 94 74 03 	call	0x6e8	; 0x6e8 <UART_u8RecieveString>

		if(STR_CMP(au8Command,(uint8_t*)"WRITE"))
    2554:	ce 01       	movw	r24, r28
    2556:	03 96       	adiw	r24, 0x03	; 3
    2558:	25 e7       	ldi	r18, 0x75	; 117
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	b9 01       	movw	r22, r18
    255e:	0e 94 49 00 	call	0x92	; 0x92 <STR_CMP>
    2562:	88 23       	and	r24, r24
    2564:	d1 f1       	breq	.+116    	; 0x25da <main+0xb8>
		{
			UART_u8SendString("Enter EEPROM Address\r\n");
    2566:	8b e7       	ldi	r24, 0x7B	; 123
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	0e 94 91 02 	call	0x522	; 0x522 <UART_u8SendString>
			UART_u8ReceiveCountedString(au8EEPROMAddress,16);
    256e:	ce 01       	movw	r24, r28
    2570:	0d 96       	adiw	r24, 0x0d	; 13
    2572:	60 e1       	ldi	r22, 0x10	; 16
    2574:	0e 94 ae 03 	call	0x75c	; 0x75c <UART_u8ReceiveCountedString>
			EEPROM_Data_Address= STR_BinToInt(au8EEPROMAddress);
    2578:	ce 01       	movw	r24, r28
    257a:	0d 96       	adiw	r24, 0x0d	; 13
    257c:	0e 94 ce 00 	call	0x19c	; 0x19c <STR_BinToInt>
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	89 83       	std	Y+1, r24	; 0x01
			UART_u8SendByte(0x0D);
    2584:	8d e0       	ldi	r24, 0x0D	; 13
    2586:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_u8SendByte>
			UART_u8SendString("OK Address is: ");
    258a:	82 e9       	ldi	r24, 0x92	; 146
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0e 94 91 02 	call	0x522	; 0x522 <UART_u8SendString>
			UART_u8SendInt(EEPROM_Data_Address);
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	0e 94 c2 01 	call	0x384	; 0x384 <UART_u8SendInt>
			UART_u8SendByte(0x0D);
    259a:	8d e0       	ldi	r24, 0x0D	; 13
    259c:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_u8SendByte>
			UART_u8SendString("Enter EEPROM Data\r\n");
    25a0:	82 ea       	ldi	r24, 0xA2	; 162
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 91 02 	call	0x522	; 0x522 <UART_u8SendString>
			UART_u8RecieveString(au8EEPROMData);
    25a8:	ce 01       	movw	r24, r28
    25aa:	4f 96       	adiw	r24, 0x1f	; 31
    25ac:	0e 94 74 03 	call	0x6e8	; 0x6e8 <UART_u8RecieveString>
			UART_u8SendString("OK Data is: ");
    25b0:	86 eb       	ldi	r24, 0xB6	; 182
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	0e 94 91 02 	call	0x522	; 0x522 <UART_u8SendString>
			UART_u8SendString(au8EEPROMData);
    25b8:	ce 01       	movw	r24, r28
    25ba:	4f 96       	adiw	r24, 0x1f	; 31
    25bc:	0e 94 91 02 	call	0x522	; 0x522 <UART_u8SendString>
			UART_u8SendByte(0x0D);
    25c0:	8d e0       	ldi	r24, 0x0D	; 13
    25c2:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_u8SendByte>
			EEPROM_u8WriteStringTo(EEPROM_ADDRESS,EEPROM_Data_Address,au8EEPROMData);
    25c6:	29 81       	ldd	r18, Y+1	; 0x01
    25c8:	3a 81       	ldd	r19, Y+2	; 0x02
    25ca:	ae 01       	movw	r20, r28
    25cc:	41 5e       	subi	r20, 0xE1	; 225
    25ce:	5f 4f       	sbci	r21, 0xFF	; 255
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	b9 01       	movw	r22, r18
    25d4:	0e 94 2a 11 	call	0x2254	; 0x2254 <EEPROM_u8WriteStringTo>
    25d8:	3f c0       	rjmp	.+126    	; 0x2658 <main+0x136>
		}else if (STR_CMP(au8Command,(uint8_t*)"READ"))
    25da:	ce 01       	movw	r24, r28
    25dc:	03 96       	adiw	r24, 0x03	; 3
    25de:	23 ec       	ldi	r18, 0xC3	; 195
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	b9 01       	movw	r22, r18
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <STR_CMP>
    25e8:	88 23       	and	r24, r24
    25ea:	91 f1       	breq	.+100    	; 0x2650 <main+0x12e>
		{
			UART_u8SendString("Enter EEPROM Address\r\n");
    25ec:	8b e7       	ldi	r24, 0x7B	; 123
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	0e 94 91 02 	call	0x522	; 0x522 <UART_u8SendString>
			UART_u8ReceiveCountedString(au8EEPROMAddress,16);
    25f4:	ce 01       	movw	r24, r28
    25f6:	0d 96       	adiw	r24, 0x0d	; 13
    25f8:	60 e1       	ldi	r22, 0x10	; 16
    25fa:	0e 94 ae 03 	call	0x75c	; 0x75c <UART_u8ReceiveCountedString>
			EEPROM_Data_Address= STR_BinToInt(au8EEPROMAddress);
    25fe:	ce 01       	movw	r24, r28
    2600:	0d 96       	adiw	r24, 0x0d	; 13
    2602:	0e 94 ce 00 	call	0x19c	; 0x19c <STR_BinToInt>
    2606:	9a 83       	std	Y+2, r25	; 0x02
    2608:	89 83       	std	Y+1, r24	; 0x01
			UART_u8SendByte(0x0D);
    260a:	8d e0       	ldi	r24, 0x0D	; 13
    260c:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_u8SendByte>
			UART_u8SendString("OK Address is: ");
    2610:	82 e9       	ldi	r24, 0x92	; 146
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	0e 94 91 02 	call	0x522	; 0x522 <UART_u8SendString>
			UART_u8SendInt(EEPROM_Data_Address);
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	9a 81       	ldd	r25, Y+2	; 0x02
    261c:	0e 94 c2 01 	call	0x384	; 0x384 <UART_u8SendInt>
			UART_u8SendByte(0x0D);
    2620:	8d e0       	ldi	r24, 0x0D	; 13
    2622:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_u8SendByte>
			EEPROM_u8ReadStringFrom(EEPROM_ADDRESS,EEPROM_Data_Address,au8EEPROMData);
    2626:	29 81       	ldd	r18, Y+1	; 0x01
    2628:	3a 81       	ldd	r19, Y+2	; 0x02
    262a:	ae 01       	movw	r20, r28
    262c:	41 5e       	subi	r20, 0xE1	; 225
    262e:	5f 4f       	sbci	r21, 0xFF	; 255
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	b9 01       	movw	r22, r18
    2634:	0e 94 7f 11 	call	0x22fe	; 0x22fe <EEPROM_u8ReadStringFrom>
			UART_u8SendString("The Data Stored is: ");
    2638:	88 ec       	ldi	r24, 0xC8	; 200
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 91 02 	call	0x522	; 0x522 <UART_u8SendString>
			UART_u8SendString(au8EEPROMData);
    2640:	ce 01       	movw	r24, r28
    2642:	4f 96       	adiw	r24, 0x1f	; 31
    2644:	0e 94 91 02 	call	0x522	; 0x522 <UART_u8SendString>
			UART_u8SendByte(0xD);
    2648:	8d e0       	ldi	r24, 0x0D	; 13
    264a:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_u8SendByte>
    264e:	04 c0       	rjmp	.+8      	; 0x2658 <main+0x136>
		}else
		{
			UART_u8SendString("Wrong Input");
    2650:	8d ed       	ldi	r24, 0xDD	; 221
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0e 94 91 02 	call	0x522	; 0x522 <UART_u8SendString>
		}
		I2C_u8Stop();
    2658:	0e 94 38 08 	call	0x1070	; 0x1070 <I2C_u8Stop>
    265c:	73 cf       	rjmp	.-282    	; 0x2544 <main+0x22>

0000265e <__udivmodhi4>:
    265e:	aa 1b       	sub	r26, r26
    2660:	bb 1b       	sub	r27, r27
    2662:	51 e1       	ldi	r21, 0x11	; 17
    2664:	07 c0       	rjmp	.+14     	; 0x2674 <__udivmodhi4_ep>

00002666 <__udivmodhi4_loop>:
    2666:	aa 1f       	adc	r26, r26
    2668:	bb 1f       	adc	r27, r27
    266a:	a6 17       	cp	r26, r22
    266c:	b7 07       	cpc	r27, r23
    266e:	10 f0       	brcs	.+4      	; 0x2674 <__udivmodhi4_ep>
    2670:	a6 1b       	sub	r26, r22
    2672:	b7 0b       	sbc	r27, r23

00002674 <__udivmodhi4_ep>:
    2674:	88 1f       	adc	r24, r24
    2676:	99 1f       	adc	r25, r25
    2678:	5a 95       	dec	r21
    267a:	a9 f7       	brne	.-22     	; 0x2666 <__udivmodhi4_loop>
    267c:	80 95       	com	r24
    267e:	90 95       	com	r25
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	08 95       	ret

00002686 <__udivmodsi4>:
    2686:	a1 e2       	ldi	r26, 0x21	; 33
    2688:	1a 2e       	mov	r1, r26
    268a:	aa 1b       	sub	r26, r26
    268c:	bb 1b       	sub	r27, r27
    268e:	fd 01       	movw	r30, r26
    2690:	0d c0       	rjmp	.+26     	; 0x26ac <__udivmodsi4_ep>

00002692 <__udivmodsi4_loop>:
    2692:	aa 1f       	adc	r26, r26
    2694:	bb 1f       	adc	r27, r27
    2696:	ee 1f       	adc	r30, r30
    2698:	ff 1f       	adc	r31, r31
    269a:	a2 17       	cp	r26, r18
    269c:	b3 07       	cpc	r27, r19
    269e:	e4 07       	cpc	r30, r20
    26a0:	f5 07       	cpc	r31, r21
    26a2:	20 f0       	brcs	.+8      	; 0x26ac <__udivmodsi4_ep>
    26a4:	a2 1b       	sub	r26, r18
    26a6:	b3 0b       	sbc	r27, r19
    26a8:	e4 0b       	sbc	r30, r20
    26aa:	f5 0b       	sbc	r31, r21

000026ac <__udivmodsi4_ep>:
    26ac:	66 1f       	adc	r22, r22
    26ae:	77 1f       	adc	r23, r23
    26b0:	88 1f       	adc	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	1a 94       	dec	r1
    26b6:	69 f7       	brne	.-38     	; 0x2692 <__udivmodsi4_loop>
    26b8:	60 95       	com	r22
    26ba:	70 95       	com	r23
    26bc:	80 95       	com	r24
    26be:	90 95       	com	r25
    26c0:	9b 01       	movw	r18, r22
    26c2:	ac 01       	movw	r20, r24
    26c4:	bd 01       	movw	r22, r26
    26c6:	cf 01       	movw	r24, r30
    26c8:	08 95       	ret

000026ca <_exit>:
    26ca:	f8 94       	cli

000026cc <__stop_program>:
    26cc:	ff cf       	rjmp	.-2      	; 0x26cc <__stop_program>
