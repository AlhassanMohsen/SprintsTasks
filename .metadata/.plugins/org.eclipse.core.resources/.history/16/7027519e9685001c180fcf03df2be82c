/*
 * ATM.c
 *
 *  Created on: Jan 28, 2022
 *      Author: Alhassan Mohsen
 */

#include "ATM_prv.h"
#include "ATM.h"

static volatile ATMModes_t gu8_ATMMode= ATM_START;
static volatile uint8_t LastAccountPtr;
static volatile uint8_t gu8_MaxAmount;
static CardElement_t gst_UserCard;
BTN_t CardBTN={PORTB,PIN0};


//static volatile uint8_t gu8_ATMPollingReadFlag = 0;

void ATM_Init(void)
{
	// DIO_u8SetPinDirection(PORTB, PIN4, DIO_OUTPUT);
	// DIO_u8SetPinDirection(PORTB, PIN5, DIO_OUTPUT);
	// DIO_u8SetPinDirection(PORTB, PIN6, DIO_INPUT);
	// DIO_u8SetPinDirection(PORTB, PIN7, DIO_OUTPUT);

	// configure the Interrupt pin that will be used to ask for the card data
	DIO_u8SetPinDirection(PORTB,PIN2,DIO_OUTPUT);
	DIO_u8SetPinData(PORTB, PIN2, DIO_LOW);
	//Initiate the SPI in slave mode where the terminal is asking for the data when needed through an Interrupt PIN
	SPI_u8Init(SPI_SLAVE);
	///TIMER0_u8PollingDelay(10);
	// Initiate UART communication between the ATM and the user through terminal
	UART_u8Init(ATM_UART_BAUDRATE);
	//Make the UART Update the Operating mode when the operation is interrupted by typing on the termincal
	UART_u8EnableRecievingInterrupt(ATM_UpdateMode);
	//Initiate the Communication with the EEPROM which acts as the Bank Servers
	EEPROM_Init();
	//Initiate the Communication with LCD and Keypad as User Interface
	LCD_u8Init();
	KEYPAD_u8Init();
	//Initiate Card Button which emulate the task of the card reader
	BTN_u8Init(CardBTN);


#ifdef EEPROM_RESET
	// if the EEPROM is in RESET mode Clear All the data saved on it by restoring the Data Pointer to its start location
	EEPROM_u8WriteStringTo(ATM_EEPROM_ADDRESS,ATM_EEPROM_PTR,ATM_DATA_START_ADDRESS);

#endif

	// Read the data from tha address ATM_EEPROM_FIRST_TIME_ADDRESS and check if it contain the ATM_EEPROM_FIRST_TIME_DATA
	//This mean that this EEPROM is used and initialized before so the user can fetch the data from it directly
	EEPROM_u8RandonReadFrom(ATM_EEPROM_ADDRESS,ATM_EEPROM_FIRST_TIME_ADDRESS,&LastAccountPtr);
	if (LastAccountPtr!=ATM_EEPROM_FIRST_TIME_DATA)
	{
		// if it doesn't contain ATM_EEPROM_FIRST_TIME_DATA Byte in this location then this is the first use

		//Write the ATM_EEPROM_FIRST_TIME_DATA to the address so it is flagged as used before
		EEPROM_u8WriteByteTo(ATM_EEPROM_ADDRESS,ATM_EEPROM_FIRST_TIME_ADDRESS,ATM_EEPROM_FIRST_TIME_DATA);
		// Let the Data Start Address is saved in a memory location of the Last Data saved Pointer so it points to the beginning of the EEPROM Data segment
		EEPROM_u8WriteByteTo(ATM_EEPROM_ADDRESS,ATM_EEPROM_PTR,ATM_DATA_START_ADDRESS);
	}else{

		//if it is used before then go and fetch the location of the last data address available
		EEPROM_u8RandonReadFrom(ATM_EEPROM_ADDRESS,ATM_EEPROM_PTR,&LastAccountPtr);

		//if the Last address available is the ATM_DATA_END_ADDRESS this means that ATM has reached it's maximum capacity and it will overrun
		if (LastAccountPtr>=ATM_DATA_END_ADDRESS)
		{
			UART_u8SendString("RESET");
			EEPROM_u8WriteByteTo(ATM_EEPROM_ADDRESS,ATM_EEPROM_PTR,ATM_DATA_START_ADDRESS);
			LastAccountPtr = ATM_DATA_START_ADDRESS;
		}
	}
	//Fetch the ATM ADMIN Mode password from the EEPROM
	EEPROM_u8WriteStringTo(ATM_EEPROM_ADDRESS,ATM_PASSWORD_LOCATION,ATM_ADMIN_PASSWORD);



}

void ATM_APP(void)
{
	uint8_t u8PasswordCheck;
	uint8_t u8UserInput;
	uint8_t au8CardPAN[9];
	uint32_t u32CardPAN;
	uint8_t au8CardPIN[4];
	uint8_t au8CardMode;
	uint32_t u32UserBalance;
	uint8_t u8CardServerAvailability;
	uint8_t Pass[5];
	uint32_t Ammount ;

	while (1)
	{
		switch (gu8_ATMMode)
		{
		case ATM_START:
			break;
		case ATM_PROGRAMMING_MODE:
			UART_u8DisableReceivingInterrupt();
			ATM_CheckPassword(&u8PasswordCheck);

			if (u8PasswordCheck==ATM_PASSWORD_OK)
			{

				do{
					UART_u8SendString((uint8_t*)"\r\n 1- Add Customer Data \n");
					UART_u8SendString((uint8_t*)"\r\n 2- Edit the Max Amount \n");
					UART_u8SendString((uint8_t*)"\r\n 3- Exit \r\n");
					UART_u8ReceiveByte(&u8UserInput);
					if (u8UserInput=='1')
					{
						ATM_AddNewAccount();

					}else if (u8UserInput=='2')
					{
						ATM_AddMaxAmount();
					}else if (u8UserInput=='3')
					{
						UART_u8SendString((uint8_t*)"\r\n Thank You!! \r\n");
						gu8_ATMMode=ATM_OPERATION_MODE;
					}
					else
					{
						UART_u8SendString((uint8_t*)"\r\n Wrong Input \r\n");
					}
				}while ((u8UserInput!='3'));

			}else if (u8PasswordCheck==ATM_PASSWORD_NOK){
				UART_u8SendString((uint8_t*)"\r\n Wrong Password \r\n");}

			gu8_ATMMode=ATM_START;
			UART_u8EnableRecievingInterrupt(ATM_UpdateMode);

			break;
		case ATM_OPERATION_MODE:

			UART_u8EnableRecievingInterrupt(ATM_UpdateMode);
			do{
				BTN_u8IsPressed(CardBTN,&u8UserInput);
			}while (u8UserInput);
			ATM_GetCardData(au8CardPAN);
			StringToInt(au8CardPAN,&u32CardPAN);
			UART_u8SendByte(0x0D);
			UART_u8SendInt(u32CardPAN);
			UART_u8SendByte(0x0D);

			ATM_GetBalance(u32CardPAN,&u32UserBalance,&u8CardServerAvailability);
			UART_u8SendByte(0x0D);
			UART_u8SendInt(u32UserBalance);
			UART_u8SendByte(0x0D);

			DIO_u8SetPinData(PORTB, PIN2, DIO_HIGH);
			SPI_u8ReceiveByte(&au8CardMode);
			UART_u8SendByte(0x0D);
			UART_u8SendInt(au8CardMode);
			UART_u8SendByte(0x0D);
			DIO_u8SetPinData(PORTB, PIN2, DIO_LOW);


			if (au8CardMode==CARD_ACCESSIBLE)
			{
				if(u8CardServerAvailability==1)
				{
					do{
						LCD_u8SendCommand(LCD_CLEAR);
						LCD_u8SendString((uint8_t*)"1- Insert Card");
						LCD_u8SetCursor(1,0);
						LCD_u8SendString((uint8_t*)"2- Get Temp");

						KEYPAD_u8GetPressedKey(&u8UserInput);
						if( u8UserInput == 1 )
						{
							LCD_u8SendCommand(LCD_CLEAR);
							LCD_u8SendString((uint8_t*)"Your Pass :");
							LCD_u8SetCursor(1,0);
							ATM_GetCardData(au8CardPIN);
							UART_u8SendByte(0x0D);
							UART_u8SendString(au8CardPIN);
							ATM_GetPass(au8CardPIN,&u8PasswordCheck);

							//UART_u8SendString(au8CardPIN);

							if (u8PasswordCheck==1)
							{
								//TIMER0_u8PollingDelay(1000);
								LCD_u8SendCommand(LCD_CLEAR);
								LCD_u8SendString((uint8_t*)"Your Amount : ");
								LCD_u8SetCursor(1,0);
								ATM_GetAmmount(&Ammount);
								UART_u8SendByte(0x0D);
								UART_u8SendInt(Ammount);
								UART_u8SendByte(0x0D);

								UART_u8SendByte(0x0D);
								UART_u8SendInt(u32UserBalance);
								UART_u8SendByte(0x0D);
								if(Ammount<=u32UserBalance)
								{
									LCD_u8SendCommand(LCD_CLEAR);
									LCD_u8SendString((uint8_t*)"Operation Done");
									TIMER0_u8PollingDelay(1000);

								}else
								{
									LCD_u8SendCommand(LCD_CLEAR);
									LCD_u8SendString((uint8_t*)"No Credit");
									TIMER0_u8PollingDelay(1000);
								}


							}else
							{
								LCD_u8SendCommand(LCD_CLEAR);
								LCD_u8SendString((uint8_t*)"Operation fail");
							}

						}
						KEYPAD_u8GetPressedKey(&u8UserInput);
					}while(u8UserInput==KEYPAD_NO_PRESSED_KEY);


				}else{
					UART_u8SendString((uint8_t*)"Card Expired");
				}
			}else
			{
				UART_u8SendString((uint8_t*)"Card Inaccessible");
			}
			//UART_u8EnableRecievingInterrupt(ATM_UpdateMode);
			break;
		case ATM_WRONG_MODE_INPUT:
			break;
		default:
			UART_u8SendString((uint8_t*)"Wrong Entry \r\n");

		}


	}
}


void ATM_GetCardData(uint8_t* pu8_DataPlace)
{
	UART_u8SendString("GetData");
	DIO_u8SetPinData(PORTB, PIN2, DIO_HIGH);
	SPI_u8ReceiveString(pu8_DataPlace);
	DIO_u8SetPinData(PORTB, PIN2, DIO_LOW);
}

void ATM_UpdateMode(void)
{

		uint8_t au8TerminalCommand[10];
		UART_u8RecieveString(au8TerminalCommand);
		UART_u8SendString("Interrupt HI");

		switch (au8TerminalCommand[0])
		{
		case 'A':
			gu8_ATMMode = ATM_PROGRAMMING_MODE;
			break;
		case 'U':
			gu8_ATMMode = ATM_OPERATION_MODE;
			break;
		default:
			gu8_ATMMode =ATM_WRONG_MODE_INPUT;
		}

}

void ATM_CheckPassword(uint8_t* pu8CheckResult)
{
	uint8_t au8UserPassword[4];
	uint8_t u8PasswordReading;
	uint8_t RightPasswordCounter=0;

	UART_u8SendString((uint8_t*)"Please Enter ADMIN Password: \r\n");
	for (uint8_t i=0;i<4;i++)
	{
		//gu8_ATMPollingReadFlag=1;
		UART_u8ReceiveByte(&au8UserPassword[i]);
		EEPROM_u8RandonReadFrom(ATM_EEPROM_ADDRESS,(ATM_PASSWORD_LOCATION+i),&u8PasswordReading);
		if (au8UserPassword[i]==u8PasswordReading)
		{
			RightPasswordCounter++;
		}else {
			//NOP
		}
	}
	if (RightPasswordCounter==4)
	{
		*pu8CheckResult=ATM_PASSWORD_OK;
	}else
	{
		*pu8CheckResult=ATM_PASSWORD_NOK;
	}
//	gu8_ATMPollingReadFlag=0;

}

void ATM_AddNewAccount()
{
	uint32_t u8customerData;
	uint8_t u8UserInput='y';
	while (u8UserInput!='n')
	{


		UART_u8SendString((uint8_t*)"\r\n Please Enter the PAN: \r\n");
		UART_u8ReceiveInt(&u8customerData);
		EEPROM_u8WriteIntTo(ATM_EEPROM_ADDRESS,LastAccountPtr,u8customerData);
		UART_u8SendByte(0x0D);
		UART_u8SendInt(LastAccountPtr);
		EEPROM_u8ReadIntFrom(ATM_EEPROM_ADDRESS,LastAccountPtr,&u8customerData);
		UART_u8SendByte(0x0D);
		UART_u8SendInt(u8customerData);
		LastAccountPtr+=4;



		UART_u8SendString((uint8_t*)"\r\n Please Enter the Balance: \r\n");
		UART_u8ReceiveInt(&u8customerData);
		EEPROM_u8WriteIntTo(ATM_EEPROM_ADDRESS,LastAccountPtr,u8customerData);
		EEPROM_u8ReadIntFrom(ATM_EEPROM_ADDRESS,LastAccountPtr,&u8customerData);
		UART_u8SendByte(0x0D);
		UART_u8SendInt(u8customerData);
		UART_u8SendByte(0x0D);
		LastAccountPtr+=4;


		UART_u8SendString((uint8_t*)"\r\n Enter new Account(y/n) \r\n");
		UART_u8ReceiveByte(&u8UserInput);
	}
	TIMER0_u8PollingDelay(10);
	EEPROM_u8WriteByteTo(ATM_EEPROM_ADDRESS,ATM_EEPROM_PTR,LastAccountPtr);

}

void ATM_AddMaxAmount()
{
	uint32_t u8UserInput;
	uint32_t u32MaxAmount;
	//uint8_t u8Counter=0;
	UART_u8SendString((uint8_t*)"\r\n Please Enter the Max Amount: \r\n");
	UART_u8ReceiveInt(&u32MaxAmount);
	EEPROM_u8WriteIntTo(ATM_EEPROM_ADDRESS,ATM_MAX_AMOUNT_LOCATION,u32MaxAmount);


	UART_u8SendString((uint8_t*)"\r\n The new Max Amount is : \r\n");
	EEPROM_u8ReadIntFrom(ATM_EEPROM_ADDRESS,ATM_MAX_AMOUNT_LOCATION,&u8UserInput);
	TIMER0_u8PollingDelay(30);
	EEPROM_u8WriteIntTo(ATM_EEPROM_ADDRESS,ATM_MAX_AMOUNT_LOCATION,u8UserInput);
	UART_u8SendInt(u8UserInput);
}


uint8_t ATM_GetPass(uint8_t * Pass_int,uint8_t* pu8PasswordCheck)
{
	uint8_t Pass [5] = {"7891"} ;
	uint8_t u8ErrorState = STD_TYPES_OK ;
	uint8_t index = 0 ;
	uint8_t u8PressedKey = KEYPAD_NO_PRESSED_KEY ;

	while( index < 4 )
	{
		u8PressedKey = KEYPAD_NO_PRESSED_KEY ;
		while ( u8PressedKey == KEYPAD_NO_PRESSED_KEY )
		{
			if ( KEYPAD_u8GetPressedKey(&u8PressedKey) != STD_TYPES_OK )
			{
				u8ErrorState = STD_TYPES_NOK ;
			}
			if ( ( u8PressedKey < 0 ) || ( u8PressedKey > 9 ) )
			{
				u8ErrorState = STD_TYPES_NOK ;
			}
			if ( ( u8PressedKey >= 0 ) && ( u8PressedKey <= 9 ) )
			{
				if (u8PressedKey+'0'==Pass_int[index])
				{
					index++;
				}else
				{
					LCD_u8SendString((uint8_t*)"Wrong PIN");
					index=255;
				}
				//Pass_int[index] = u8PressedKey ;


				if ( LCD_u8SendData('*') != STD_TYPES_OK )
				{
					u8ErrorState = STD_TYPES_NOK ;
				}

			 }
		  }
	}
	if ( index == 4 )
	{
		*pu8PasswordCheck=1;
		//Pass_int[index]= '\0' ;
		//*Pass_int = StringToInt( Pass ) ;
	}else{
		*pu8PasswordCheck=0;
	}
	return u8ErrorState ;
}

uint8_t ATM_GetAmmount( uint32_t * Ammount_int )
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	uint8_t Ammount[100] = {"50.5"} ;
	uint8_t index = 0 ;
	uint8_t u8PressedKey = KEYPAD_NO_PRESSED_KEY ;
	while ( u8PressedKey != 'E' )
	{
		if ( KEYPAD_u8GetPressedKey(&u8PressedKey) != STD_TYPES_OK )
		{
			u8ErrorState = STD_TYPES_NOK ;
		}
		if ( ( u8PressedKey < 0 ) || ( u8PressedKey > 9 ) )
		{
			u8ErrorState = STD_TYPES_NOK ;
		}
		if ( ( u8PressedKey >= 0 ) && ( u8PressedKey <= 9 ) )
		{
			Ammount[index] = u8PressedKey + '0' ;
			if ( LCD_u8SendData(Ammount[index]) != STD_TYPES_OK )
			{
				u8ErrorState = STD_TYPES_NOK ;
			}
			index++;
		}
	}
	Ammount[index] = '\0';
	StringToInt(Ammount,Ammount_int);
	//UART_u8SendString()

	return u8ErrorState ;
}

uint8_t ATM_GetBalance(uint32_t u32UserPAN,uint32_t* u32UserBalance, uint8_t* u8CardState)
{
	uint32_t u32CompareVal=0;
	uint16_t u32MemNav = ATM_DATA_START_ADDRESS;
	*u8CardState = 1;
	while (u32CompareVal!=u32UserPAN && u32MemNav!=ATM_DATA_END_ADDRESS)
	{
		EEPROM_u8ReadIntFrom(ATM_EEPROM_ADDRESS,u32MemNav,&u32CompareVal);
		u32MemNav+=4;
		EEPROM_u8ReadIntFrom(ATM_EEPROM_ADDRESS,u32MemNav,u32UserBalance);
		u32MemNav+=4;
	}
	if (u32MemNav==ATM_DATA_END_ADDRESS)
	{
		*u8CardState=0;
	}
}
