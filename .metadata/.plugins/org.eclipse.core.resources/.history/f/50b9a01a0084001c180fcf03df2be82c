/*
 * Card.c
 *
 * Created: 1/28/2022 2:29:22 PM
 *  Author: Khaled Ali
 */ 

#include "Card_prv.h"
#include "Card.h"

STATE u8State=USER;
Card_t card;
LED_t led_err = {PORTD, PIN7}; //Random Pin to be changed
uint8_t *HoldeName;
uint8_t *PAN;
uint8_t *PIN;
volatile uint8_t counter=0;

void Card_init()
{
	uint8_t u8FirstTimeCheck;
	//uint8_t test[10];
	TERMINAL_u8Init();
	INTERFACE_u8Init();
	EEPROM_Init();
	UART_u8EnableRecievingInterrupt(UART_callBack);
	//TERMINAL_u8DisableInterrupt();

	SET_BIT(SREG_REG,I_BIT);
	CLR_BIT(GICR_REG,INT2_BIT);
	SET_BIT(MCUCSR_REG,ISC2_BIT);
	SET_BIT(GICR_REG,INT2_BIT);

	EEPROM_u8RandonReadFrom(CARD_EEPROM_ADDRESS,CARD_EEPROM_FIRST_TIME_ADDRESS,&u8FirstTimeCheck);
	TIMER0_u8PollingDelay(10);

	if (u8FirstTimeCheck!=CARD_EEPROM_FIRST_TIME_DATA)
	{
		u8State = PROGRAMMING;
		card.MODE=CARD_PROGRAMMING_MODE;
		EEPROM_u8WriteByteTo(CARD_EEPROM_ADDRESS,CARD_EEPROM_FIRST_TIME_ADDRESS,CARD_EEPROM_FIRST_TIME_DATA);
	}else{

		//u8State = USER;
		EEPROM_u8ReadStringFrom(CARD_EEPROM_ADDRESS, CARD_HOLDER_NAME_ADDRESS,&card.NAME);
		EEPROM_u8ReadStringFrom(CARD_EEPROM_ADDRESS, CARD_PAN_ADDRESS, &card.PAN);
		UART_u8SendString(&card.PAN);
		EEPROM_u8ReadStringFrom(CARD_EEPROM_ADDRESS, CARD_PIN_ADDRESS, &card.PIN);

		//TERMINAL_u8EnableInterrupt(UART_callBack);
	}
	DIO_u8SetPinDirection(PORTB, PIN2, DIO_INPUT);


}



void Card_App(void){

	while(1){
		switch(u8State){
			case PROGRAMMING:
			//Enter Programming mode
				UART_u8DisableReceivingInterrupt();
				TERMINAL_u8Interface(&card);
				EEPROM_u8WriteStringTo(CARD_EEPROM_ADDRESS, CARD_HOLDER_NAME_ADDRESS, card.NAME);
				EEPROM_u8WriteStringTo(CARD_EEPROM_ADDRESS, CARD_PAN_ADDRESS, card.PAN);
				EEPROM_u8WriteStringTo(CARD_EEPROM_ADDRESS, CARD_PIN_ADDRESS, card.PIN);
				u8State = USER;
				UART_u8EnableRecievingInterrupt(UART_callBack);
			//TERMINAL_u8EnableInterrupt(UART_callBack);
			break;
			case USER:
				//UART_u8SendString("Hello");
				switch(counter)
				{
				case 0:
					HoldeName = card.PAN;
					//UART_u8SendInt(3);
					break;
				case 1:
					//UART_u8SendInt(1);
					break;
				case 2:
					HoldeName = card.PIN;
					//UART_u8SendInt(2);
					break;
				case 3:
					counter=0;
					//UART_u8SendInt(3);
					break;
				}

			//INTERFACE_u8SendData(&card.MODE);
			//INTERFACE_u8SendData(m);
			//INTERFACE_u8SendData(&card.PIN);

			break;
			default:
			break;
		}	
	}
}


void UART_callBack(void){

/*	uint8_t data[10];
	static uint8_t iter = 0;
	uint8_t* compared_value = "ADMIN";
	UART_u8RecieveString(data);
	UART_u8SendString(data);
	if(data[iter] == compared_value[iter]){
		iter++;
		UART_u8SendByte(iter);
		if(iter == 5){
			UART_u8SendString("HI");
			u8State = PROGRAMMING;
			TERMINAL_u8DisableInterrupt();
			iter = 0;
		}
	}else
	{
		UART_u8SendString("Wrong Input\r\n");
		iter = 0;
	}
*/
	uint8_t au8TerminalCommand[10];
	UART_u8RecieveString(au8TerminalCommand);
	UART_u8SendByte(au8TerminalCommand[0]);
	switch (au8TerminalCommand[0])
	{
	case 'A':
		UART_u8SendByte(au8TerminalCommand[0]);
		u8State = PROGRAMMING;
		break;
	case 'U':
		u8State = USER;
		break;
	default:
		u8State = USER;
	}


}


void __vector_3(void) __attribute__ ((signal, used));

void __vector_3(void)
{
	//UART_u8SendString(&card.NAME);
	switch(counter)
	{
	case 1:
		SPI_u8SendByte(u8State);
		break;
	default:
		SPI_u8SendString(HoldeName);
	}
	counter++;
	CLR_BIT(GIFR_REG,5);
}
