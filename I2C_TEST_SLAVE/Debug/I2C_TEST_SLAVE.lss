
I2C_TEST_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00002296  0000232a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800066  00800066  00002330  2**0
                  ALLOC
  3 .stab         00003a14  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022ea  00000000  00000000  00005d44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_10>
      2c:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 23 04 	jmp	0x846	; 0x846 <__vector_13>
      38:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 97 09 	jmp	0x132e	; 0x132e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 37       	cpi	r26, 0x75	; 117
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <main>
      8a:	0c 94 49 11 	jmp	0x2292	; 0x2292 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_u8Init>:
/**
 * @fn uint8_t UART_u8Init(uint32_t UART_u32BaudRate)
 * @brief This function is used to Initiate the UART Peripheral
 */
uint8_t UART_u8Init(uint32_t UART_u32BaudRate)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	6c 83       	std	Y+4, r22	; 0x04
      a8:	7d 83       	std	Y+5, r23	; 0x05
      aa:	8e 83       	std	Y+6, r24	; 0x06
      ac:	9f 83       	std	Y+7, r25	; 0x07

	uint8_t u8ErrorState = UART_OK;
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t u16UBBR;  /// A Temporary Variable used to hold the calculated value of the UBBR register depending on the Baudrate

	// Make the Access to UCSRC Register
	SET_BIT(UCSRC_REG,URSEL_BIT);
      b2:	a0 e4       	ldi	r26, 0x40	; 64
      b4:	b0 e0       	ldi	r27, 0x00	; 0
      b6:	e0 e4       	ldi	r30, 0x40	; 64
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	80 68       	ori	r24, 0x80	; 128
      be:	8c 93       	st	X, r24

	/*
	 * Set the operation mode of the UART Depending on the chosen UART_OPERATION_MODE Configuration
	 */
#if   UART_OPERATION_MODE == UART_ASYNC_NORMAL_SPEED
	CLR_BIT(UCSRC_REG,UMSEL_BIT);
      c0:	a0 e4       	ldi	r26, 0x40	; 64
      c2:	b0 e0       	ldi	r27, 0x00	; 0
      c4:	e0 e4       	ldi	r30, 0x40	; 64
      c6:	f0 e0       	ldi	r31, 0x00	; 0
      c8:	80 81       	ld	r24, Z
      ca:	8f 7b       	andi	r24, 0xBF	; 191
      cc:	8c 93       	st	X, r24
	CLR_BIT(UCSRA_REG,U2X_BIT);
      ce:	ab e2       	ldi	r26, 0x2B	; 43
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	eb e2       	ldi	r30, 0x2B	; 43
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	80 81       	ld	r24, Z
      d8:	8d 7f       	andi	r24, 0xFD	; 253
      da:	8c 93       	st	X, r24
	//Calculate the UBBR Value depending on the CPU frequency and the input desired baudrate
	// in the UART_ASYNC_NORMAL_SPEED the baudrate divisor is 16
	u16UBBR = (UART_F_CPU/(16UL*UART_u32BaudRate)-1);
      dc:	8c 81       	ldd	r24, Y+4	; 0x04
      de:	9d 81       	ldd	r25, Y+5	; 0x05
      e0:	ae 81       	ldd	r26, Y+6	; 0x06
      e2:	bf 81       	ldd	r27, Y+7	; 0x07
      e4:	88 0f       	add	r24, r24
      e6:	99 1f       	adc	r25, r25
      e8:	aa 1f       	adc	r26, r26
      ea:	bb 1f       	adc	r27, r27
      ec:	88 0f       	add	r24, r24
      ee:	99 1f       	adc	r25, r25
      f0:	aa 1f       	adc	r26, r26
      f2:	bb 1f       	adc	r27, r27
      f4:	88 0f       	add	r24, r24
      f6:	99 1f       	adc	r25, r25
      f8:	aa 1f       	adc	r26, r26
      fa:	bb 1f       	adc	r27, r27
      fc:	88 0f       	add	r24, r24
      fe:	99 1f       	adc	r25, r25
     100:	aa 1f       	adc	r26, r26
     102:	bb 1f       	adc	r27, r27
     104:	9c 01       	movw	r18, r24
     106:	ad 01       	movw	r20, r26
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	92 e1       	ldi	r25, 0x12	; 18
     10c:	aa e7       	ldi	r26, 0x7A	; 122
     10e:	b0 e0       	ldi	r27, 0x00	; 0
     110:	bc 01       	movw	r22, r24
     112:	cd 01       	movw	r24, r26
     114:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodsi4>
     118:	da 01       	movw	r26, r20
     11a:	c9 01       	movw	r24, r18
     11c:	01 97       	sbiw	r24, 0x01	; 1
     11e:	9a 83       	std	Y+2, r25	; 0x02
     120:	89 83       	std	Y+1, r24	; 0x01
#elif UART_CHARACTER_SIZE == UART_7_BIT_CHARACTER
	CLR_BIT(UCSRC_REG,UCSZ0_BIT);
	SET_BIT(UCSRC_REG,UCSZ1_BIT);
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
#elif UART_CHARACTER_SIZE == UART_8_BIT_CHARACTER
	SET_BIT(UCSRC_REG,UCSZ0_BIT);
     122:	a0 e4       	ldi	r26, 0x40	; 64
     124:	b0 e0       	ldi	r27, 0x00	; 0
     126:	e0 e4       	ldi	r30, 0x40	; 64
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	80 81       	ld	r24, Z
     12c:	82 60       	ori	r24, 0x02	; 2
     12e:	8c 93       	st	X, r24
	SET_BIT(UCSRC_REG,UCSZ1_BIT);
     130:	a0 e4       	ldi	r26, 0x40	; 64
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	e0 e4       	ldi	r30, 0x40	; 64
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	84 60       	ori	r24, 0x04	; 4
     13c:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
     13e:	aa e2       	ldi	r26, 0x2A	; 42
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	ea e2       	ldi	r30, 0x2A	; 42
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	8b 7f       	andi	r24, 0xFB	; 251
     14a:	8c 93       	st	X, r24

	/*
	 * Set the Parity mode of the UART Depending on the chosen UART_PARITY_MODE Configuration
	 */
#if UART_PARITY_MODE == UART_DISABLE_PARITY
	CLR_BIT(UCSRC_REG,UPM0_BIT);
     14c:	a0 e4       	ldi	r26, 0x40	; 64
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	e0 e4       	ldi	r30, 0x40	; 64
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	8f 7e       	andi	r24, 0xEF	; 239
     158:	8c 93       	st	X, r24
	CLR_BIT(UCSRC_REG,UPM1_BIT);
     15a:	a0 e4       	ldi	r26, 0x40	; 64
     15c:	b0 e0       	ldi	r27, 0x00	; 0
     15e:	e0 e4       	ldi	r30, 0x40	; 64
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	8f 7d       	andi	r24, 0xDF	; 223
     166:	8c 93       	st	X, r24

	/*
	 * Set the Stop bits number in the frame of the UART Depending on the chosen UART_STOP_BITS_NUMBER Configuration
	 */
#if UART_STOP_BITS_NUMBER == UART_1_STOP_BIT
	CLR_BIT(UCSRC_REG,USBS_BIT);
     168:	a0 e4       	ldi	r26, 0x40	; 64
     16a:	b0 e0       	ldi	r27, 0x00	; 0
     16c:	e0 e4       	ldi	r30, 0x40	; 64
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	87 7f       	andi	r24, 0xF7	; 247
     174:	8c 93       	st	X, r24
	// if the UART_STOP_BITS_NUMBER is not one of this values then update the Error state
	u8ErrorState = WRONG_STOP_BITS_CFG;
#endif

	// Set the UBRR Register to the calculated value to configure the input baudrate
	UBRRL_REG= u16UBBR;
     176:	e9 e2       	ldi	r30, 0x29	; 41
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	89 81       	ldd	r24, Y+1	; 0x01
     17c:	80 83       	st	Z, r24
	UBRRH_REG= (u16UBBR>>8);
     17e:	e0 e4       	ldi	r30, 0x40	; 64
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	9a 81       	ldd	r25, Y+2	; 0x02
     186:	89 2f       	mov	r24, r25
     188:	99 27       	eor	r25, r25
     18a:	80 83       	st	Z, r24
	//Enable the Receiving and Transmitting Capabilities in the UART
	SET_BIT(UCSRB_REG,RXEN_BIT);
     18c:	aa e2       	ldi	r26, 0x2A	; 42
     18e:	b0 e0       	ldi	r27, 0x00	; 0
     190:	ea e2       	ldi	r30, 0x2A	; 42
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	80 81       	ld	r24, Z
     196:	80 61       	ori	r24, 0x10	; 16
     198:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,TXEN_BIT);
     19a:	aa e2       	ldi	r26, 0x2A	; 42
     19c:	b0 e0       	ldi	r27, 0x00	; 0
     19e:	ea e2       	ldi	r30, 0x2A	; 42
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	88 60       	ori	r24, 0x08	; 8
     1a6:	8c 93       	st	X, r24
	if (u8ErrorState == UART_OK)
     1a8:	8b 81       	ldd	r24, Y+3	; 0x03
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	19 f4       	brne	.+6      	; 0x1b4 <UART_u8Init+0x122>
	{
		// if there is no errors happened the Rise the Initialization flag indicating that the Peripherals is Initialized Correctly
		gu8_IntializationFlag = UART_INITIALIZED;
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	80 93 66 00 	sts	0x0066, r24
	}else
	{
		//NOP
	}
	return u8ErrorState;
     1b4:	8b 81       	ldd	r24, Y+3	; 0x03
}
     1b6:	27 96       	adiw	r28, 0x07	; 7
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	f8 94       	cli
     1bc:	de bf       	out	0x3e, r29	; 62
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	cd bf       	out	0x3d, r28	; 61
     1c2:	cf 91       	pop	r28
     1c4:	df 91       	pop	r29
     1c6:	08 95       	ret

000001c8 <UART_u8SendByte>:
 * @fn uint8_t UART_u8SendByte(uint8_t u8Data)
 * @brief This function is used to Send a Byte by polling mechanism
 * @pre the UART must be initialized
 */
uint8_t UART_u8SendByte(uint8_t u8Data)
{
     1c8:	df 93       	push	r29
     1ca:	cf 93       	push	r28
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <UART_u8SendByte+0x6>
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState;
	if (gu8_IntializationFlag==UART_INITIALIZED) // Check if the UART is initialized
     1d4:	80 91 66 00 	lds	r24, 0x0066
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	89 f4       	brne	.+34     	; 0x1fe <UART_u8SendByte+0x36>
	{
		// Busy wait until the current UART Transmittion ends and the UDR register is Available
		while(!GET_BIT(UCSRA_REG,UDRE_BIT));
     1dc:	eb e2       	ldi	r30, 0x2B	; 43
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	82 95       	swap	r24
     1e4:	86 95       	lsr	r24
     1e6:	87 70       	andi	r24, 0x07	; 7
     1e8:	88 2f       	mov	r24, r24
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	81 70       	andi	r24, 0x01	; 1
     1ee:	90 70       	andi	r25, 0x00	; 0
     1f0:	00 97       	sbiw	r24, 0x00	; 0
     1f2:	a1 f3       	breq	.-24     	; 0x1dc <UART_u8SendByte+0x14>
		// After the Register is available Load it with the Data Desired to be sent to initiate a transmission
		UDR_REG = u8Data;
     1f4:	ec e2       	ldi	r30, 0x2C	; 44
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	8a 81       	ldd	r24, Y+2	; 0x02
     1fa:	80 83       	st	Z, r24
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <UART_u8SendByte+0x3a>
	}else{
		// if the UART is not initialized then update the Error State
		u8ErrorState=UART_INITIALIZATION_ERROR;
     1fe:	88 e0       	ldi	r24, 0x08	; 8
     200:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
     202:	89 81       	ldd	r24, Y+1	; 0x01
}
     204:	0f 90       	pop	r0
     206:	0f 90       	pop	r0
     208:	cf 91       	pop	r28
     20a:	df 91       	pop	r29
     20c:	08 95       	ret

0000020e <UART_u8SendInt>:


uint8_t UART_u8SendInt(uint32_t u32Data)
{
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	df 93       	push	r29
     214:	cf 93       	push	r28
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	ca 57       	subi	r28, 0x7A	; 122
     21c:	d0 40       	sbci	r29, 0x00	; 0
     21e:	0f b6       	in	r0, 0x3f	; 63
     220:	f8 94       	cli
     222:	de bf       	out	0x3e, r29	; 62
     224:	0f be       	out	0x3f, r0	; 63
     226:	cd bf       	out	0x3d, r28	; 61
     228:	fe 01       	movw	r30, r28
     22a:	ed 58       	subi	r30, 0x8D	; 141
     22c:	ff 4f       	sbci	r31, 0xFF	; 255
     22e:	60 83       	st	Z, r22
     230:	71 83       	std	Z+1, r23	; 0x01
     232:	82 83       	std	Z+2, r24	; 0x02
     234:	93 83       	std	Z+3, r25	; 0x03
	uint8_t au8Number[100]={0};
     236:	84 e6       	ldi	r24, 0x64	; 100
     238:	fe 01       	movw	r30, r28
     23a:	3f 96       	adiw	r30, 0x0f	; 15
     23c:	df 01       	movw	r26, r30
     23e:	28 2f       	mov	r18, r24
     240:	1d 92       	st	X+, r1
     242:	2a 95       	dec	r18
     244:	e9 f7       	brne	.-6      	; 0x240 <UART_u8SendInt+0x32>
	uint64_t u8Counter =1;
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	8f 83       	std	Y+7, r24	; 0x07
     24a:	18 86       	std	Y+8, r1	; 0x08
     24c:	19 86       	std	Y+9, r1	; 0x09
     24e:	1a 86       	std	Y+10, r1	; 0x0a
     250:	1b 86       	std	Y+11, r1	; 0x0b
     252:	1c 86       	std	Y+12, r1	; 0x0c
     254:	1d 86       	std	Y+13, r1	; 0x0d
     256:	1e 86       	std	Y+14, r1	; 0x0e
	uint8_t u8NumberASCII;

	    uint8_t i = 0;
     258:	1d 82       	std	Y+5, r1	; 0x05
	    /* Handle 0 explicitly, otherwise empty string is printed for 0 */
	    if (u32Data == 0)
     25a:	fe 01       	movw	r30, r28
     25c:	ed 58       	subi	r30, 0x8D	; 141
     25e:	ff 4f       	sbci	r31, 0xFF	; 255
     260:	80 81       	ld	r24, Z
     262:	91 81       	ldd	r25, Z+1	; 0x01
     264:	a2 81       	ldd	r26, Z+2	; 0x02
     266:	b3 81       	ldd	r27, Z+3	; 0x03
     268:	00 97       	sbiw	r24, 0x00	; 0
     26a:	a1 05       	cpc	r26, r1
     26c:	b1 05       	cpc	r27, r1
     26e:	09 f0       	breq	.+2      	; 0x272 <UART_u8SendInt+0x64>
     270:	5f c0       	rjmp	.+190    	; 0x330 <UART_u8SendInt+0x122>
	    {
	    	au8Number[i++] = '0';
     272:	8d 81       	ldd	r24, Y+5	; 0x05
     274:	28 2f       	mov	r18, r24
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	ce 01       	movw	r24, r28
     27a:	0f 96       	adiw	r24, 0x0f	; 15
     27c:	fc 01       	movw	r30, r24
     27e:	e2 0f       	add	r30, r18
     280:	f3 1f       	adc	r31, r19
     282:	80 e3       	ldi	r24, 0x30	; 48
     284:	80 83       	st	Z, r24
     286:	8d 81       	ldd	r24, Y+5	; 0x05
     288:	8f 5f       	subi	r24, 0xFF	; 255
     28a:	8d 83       	std	Y+5, r24	; 0x05
     28c:	51 c0       	rjmp	.+162    	; 0x330 <UART_u8SendInt+0x122>
	    // base 10. Otherwise numbers are considered unsigned.

	    // Process individual digits
	    while (u32Data != 0)
	    {
	    	uint8_t rem = u32Data % 10;
     28e:	fe 01       	movw	r30, r28
     290:	ed 58       	subi	r30, 0x8D	; 141
     292:	ff 4f       	sbci	r31, 0xFF	; 255
     294:	80 81       	ld	r24, Z
     296:	91 81       	ldd	r25, Z+1	; 0x01
     298:	a2 81       	ldd	r26, Z+2	; 0x02
     29a:	b3 81       	ldd	r27, Z+3	; 0x03
     29c:	2a e0       	ldi	r18, 0x0A	; 10
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	bc 01       	movw	r22, r24
     2a6:	cd 01       	movw	r24, r26
     2a8:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodsi4>
     2ac:	dc 01       	movw	r26, r24
     2ae:	cb 01       	movw	r24, r22
     2b0:	89 83       	std	Y+1, r24	; 0x01
	        au8Number[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
     2b2:	8d 81       	ldd	r24, Y+5	; 0x05
     2b4:	a8 2f       	mov	r26, r24
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	ea 96       	adiw	r28, 0x3a	; 58
     2ba:	bf af       	std	Y+63, r27	; 0x3f
     2bc:	ae af       	std	Y+62, r26	; 0x3e
     2be:	ea 97       	sbiw	r28, 0x3a	; 58
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	8a 30       	cpi	r24, 0x0A	; 10
     2c4:	38 f0       	brcs	.+14     	; 0x2d4 <UART_u8SendInt+0xc6>
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	b8 2f       	mov	r27, r24
     2ca:	b9 5a       	subi	r27, 0xA9	; 169
     2cc:	e8 96       	adiw	r28, 0x38	; 56
     2ce:	bf af       	std	Y+63, r27	; 0x3f
     2d0:	e8 97       	sbiw	r28, 0x38	; 56
     2d2:	06 c0       	rjmp	.+12     	; 0x2e0 <UART_u8SendInt+0xd2>
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	e8 2f       	mov	r30, r24
     2d8:	e0 5d       	subi	r30, 0xD0	; 208
     2da:	e8 96       	adiw	r28, 0x38	; 56
     2dc:	ef af       	std	Y+63, r30	; 0x3f
     2de:	e8 97       	sbiw	r28, 0x38	; 56
     2e0:	ce 01       	movw	r24, r28
     2e2:	0f 96       	adiw	r24, 0x0f	; 15
     2e4:	ea 96       	adiw	r28, 0x3a	; 58
     2e6:	ee ad       	ldd	r30, Y+62	; 0x3e
     2e8:	ff ad       	ldd	r31, Y+63	; 0x3f
     2ea:	ea 97       	sbiw	r28, 0x3a	; 58
     2ec:	e8 0f       	add	r30, r24
     2ee:	f9 1f       	adc	r31, r25
     2f0:	e8 96       	adiw	r28, 0x38	; 56
     2f2:	2f ad       	ldd	r18, Y+63	; 0x3f
     2f4:	e8 97       	sbiw	r28, 0x38	; 56
     2f6:	20 83       	st	Z, r18
     2f8:	8d 81       	ldd	r24, Y+5	; 0x05
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	8d 83       	std	Y+5, r24	; 0x05
	        u32Data = u32Data/10;
     2fe:	8e 01       	movw	r16, r28
     300:	0d 58       	subi	r16, 0x8D	; 141
     302:	1f 4f       	sbci	r17, 0xFF	; 255
     304:	fe 01       	movw	r30, r28
     306:	ed 58       	subi	r30, 0x8D	; 141
     308:	ff 4f       	sbci	r31, 0xFF	; 255
     30a:	80 81       	ld	r24, Z
     30c:	91 81       	ldd	r25, Z+1	; 0x01
     30e:	a2 81       	ldd	r26, Z+2	; 0x02
     310:	b3 81       	ldd	r27, Z+3	; 0x03
     312:	2a e0       	ldi	r18, 0x0A	; 10
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	bc 01       	movw	r22, r24
     31c:	cd 01       	movw	r24, r26
     31e:	0e 94 27 11 	call	0x224e	; 0x224e <__udivmodsi4>
     322:	da 01       	movw	r26, r20
     324:	c9 01       	movw	r24, r18
     326:	f8 01       	movw	r30, r16
     328:	80 83       	st	Z, r24
     32a:	91 83       	std	Z+1, r25	; 0x01
     32c:	a2 83       	std	Z+2, r26	; 0x02
     32e:	b3 83       	std	Z+3, r27	; 0x03

	    // In standard itoa(), negative numbers are handled only with
	    // base 10. Otherwise numbers are considered unsigned.

	    // Process individual digits
	    while (u32Data != 0)
     330:	fe 01       	movw	r30, r28
     332:	ed 58       	subi	r30, 0x8D	; 141
     334:	ff 4f       	sbci	r31, 0xFF	; 255
     336:	80 81       	ld	r24, Z
     338:	91 81       	ldd	r25, Z+1	; 0x01
     33a:	a2 81       	ldd	r26, Z+2	; 0x02
     33c:	b3 81       	ldd	r27, Z+3	; 0x03
     33e:	00 97       	sbiw	r24, 0x00	; 0
     340:	a1 05       	cpc	r26, r1
     342:	b1 05       	cpc	r27, r1
     344:	09 f0       	breq	.+2      	; 0x348 <UART_u8SendInt+0x13a>
     346:	a3 cf       	rjmp	.-186    	; 0x28e <UART_u8SendInt+0x80>
	        au8Number[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
	        u32Data = u32Data/10;
	    }


	    au8Number[i] = '\0'; // Append string terminator
     348:	8d 81       	ldd	r24, Y+5	; 0x05
     34a:	28 2f       	mov	r18, r24
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	ce 01       	movw	r24, r28
     350:	0f 96       	adiw	r24, 0x0f	; 15
     352:	fc 01       	movw	r30, r24
     354:	e2 0f       	add	r30, r18
     356:	f3 1f       	adc	r31, r19
     358:	10 82       	st	Z, r1

	    // Reverse the string
	    uint8_t start = 0;
     35a:	1c 82       	std	Y+4, r1	; 0x04
	    uint8_t end = i -1;
     35c:	8d 81       	ldd	r24, Y+5	; 0x05
     35e:	81 50       	subi	r24, 0x01	; 1
     360:	8b 83       	std	Y+3, r24	; 0x03
     362:	28 c0       	rjmp	.+80     	; 0x3b4 <UART_u8SendInt+0x1a6>
	    uint8_t temp;
	    while (start < end)
	    {
	    	temp =*(au8Number+start);
     364:	8c 81       	ldd	r24, Y+4	; 0x04
     366:	88 2f       	mov	r24, r24
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	fe 01       	movw	r30, r28
     36c:	3f 96       	adiw	r30, 0x0f	; 15
     36e:	e8 0f       	add	r30, r24
     370:	f9 1f       	adc	r31, r25
     372:	80 81       	ld	r24, Z
     374:	8a 83       	std	Y+2, r24	; 0x02
	    	*(au8Number+start) = *(au8Number+end);
     376:	8c 81       	ldd	r24, Y+4	; 0x04
     378:	88 2f       	mov	r24, r24
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	de 01       	movw	r26, r28
     37e:	1f 96       	adiw	r26, 0x0f	; 15
     380:	a8 0f       	add	r26, r24
     382:	b9 1f       	adc	r27, r25
     384:	8b 81       	ldd	r24, Y+3	; 0x03
     386:	88 2f       	mov	r24, r24
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	fe 01       	movw	r30, r28
     38c:	3f 96       	adiw	r30, 0x0f	; 15
     38e:	e8 0f       	add	r30, r24
     390:	f9 1f       	adc	r31, r25
     392:	80 81       	ld	r24, Z
     394:	8c 93       	st	X, r24
	    	*(au8Number+end) = temp;
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	88 2f       	mov	r24, r24
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	fe 01       	movw	r30, r28
     39e:	3f 96       	adiw	r30, 0x0f	; 15
     3a0:	e8 0f       	add	r30, r24
     3a2:	f9 1f       	adc	r31, r25
     3a4:	8a 81       	ldd	r24, Y+2	; 0x02
     3a6:	80 83       	st	Z, r24
	        start++;
     3a8:	8c 81       	ldd	r24, Y+4	; 0x04
     3aa:	8f 5f       	subi	r24, 0xFF	; 255
     3ac:	8c 83       	std	Y+4, r24	; 0x04
	        end--;
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	81 50       	subi	r24, 0x01	; 1
     3b2:	8b 83       	std	Y+3, r24	; 0x03

	    // Reverse the string
	    uint8_t start = 0;
	    uint8_t end = i -1;
	    uint8_t temp;
	    while (start < end)
     3b4:	9c 81       	ldd	r25, Y+4	; 0x04
     3b6:	8b 81       	ldd	r24, Y+3	; 0x03
     3b8:	98 17       	cp	r25, r24
     3ba:	a0 f2       	brcs	.-88     	; 0x364 <UART_u8SendInt+0x156>
	    	*(au8Number+start) = *(au8Number+end);
	    	*(au8Number+end) = temp;
	        start++;
	        end--;
	    }
	    UART_u8SendString(au8Number);
     3bc:	ce 01       	movw	r24, r28
     3be:	0f 96       	adiw	r24, 0x0f	; 15
     3c0:	0e 94 ee 01 	call	0x3dc	; 0x3dc <UART_u8SendString>
		UART_u8SendByte(u8NumberASCII);
		u8Counter=u8Counter/10;
	}

*/
}
     3c4:	c6 58       	subi	r28, 0x86	; 134
     3c6:	df 4f       	sbci	r29, 0xFF	; 255
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	cf 91       	pop	r28
     3d4:	df 91       	pop	r29
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	08 95       	ret

000003dc <UART_u8SendString>:
 * @brief This function is used to Send a String of data by polling mechanism
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */
uint8_t UART_u8SendString(uint8_t* pau8Data)
{
     3dc:	df 93       	push	r29
     3de:	cf 93       	push	r28
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <UART_u8SendString+0x6>
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <UART_u8SendString+0x8>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <UART_u8SendString+0xa>
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	9e 83       	std	Y+6, r25	; 0x06
     3ec:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8ErrorState = UART_OK;
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8LastByte; 			/// a variable used to temporarily hold the value of the last character sent
	uint16_t u16StringCounter=0; 	/// counter to navigate the string as array
     3f2:	1a 82       	std	Y+2, r1	; 0x02
     3f4:	19 82       	std	Y+1, r1	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED) // Check if the UART is initialized
     3f6:	80 91 66 00 	lds	r24, 0x0066
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	e1 f4       	brne	.+56     	; 0x436 <UART_u8SendString+0x5a>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8Data!=NULL)
     3fe:	8d 81       	ldd	r24, Y+5	; 0x05
     400:	9e 81       	ldd	r25, Y+6	; 0x06
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	a9 f0       	breq	.+42     	; 0x430 <UART_u8SendString+0x54>
		{
			// if not pointing to null
			do{
				//save the value of the character to a temporary variable
				u8LastByte=pau8Data[u16StringCounter];
     406:	2d 81       	ldd	r18, Y+5	; 0x05
     408:	3e 81       	ldd	r19, Y+6	; 0x06
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	9a 81       	ldd	r25, Y+2	; 0x02
     40e:	f9 01       	movw	r30, r18
     410:	e8 0f       	add	r30, r24
     412:	f9 1f       	adc	r31, r25
     414:	80 81       	ld	r24, Z
     416:	8b 83       	std	Y+3, r24	; 0x03
				// Send this character through UART
				UART_u8SendByte(u8LastByte);
     418:	8b 81       	ldd	r24, Y+3	; 0x03
     41a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <UART_u8SendByte>
				// increment the array navigator to get the next character
				u16StringCounter++;
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	9a 81       	ldd	r25, Y+2	; 0x02
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	9a 83       	std	Y+2, r25	; 0x02
     426:	89 83       	std	Y+1, r24	; 0x01

			}while(u8LastByte!=0x00);// do the same while the sent byte wasn't a new line
     428:	8b 81       	ldd	r24, Y+3	; 0x03
     42a:	88 23       	and	r24, r24
     42c:	61 f7       	brne	.-40     	; 0x406 <UART_u8SendString+0x2a>
     42e:	05 c0       	rjmp	.+10     	; 0x43a <UART_u8SendString+0x5e>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
     430:	87 e0       	ldi	r24, 0x07	; 7
     432:	8c 83       	std	Y+4, r24	; 0x04
     434:	02 c0       	rjmp	.+4      	; 0x43a <UART_u8SendString+0x5e>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
     436:	88 e0       	ldi	r24, 0x08	; 8
     438:	8c 83       	std	Y+4, r24	; 0x04
	}

	return u8ErrorState;
     43a:	8c 81       	ldd	r24, Y+4	; 0x04

}
     43c:	26 96       	adiw	r28, 0x06	; 6
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	de bf       	out	0x3e, r29	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	cd bf       	out	0x3d, r28	; 61
     448:	cf 91       	pop	r28
     44a:	df 91       	pop	r29
     44c:	08 95       	ret

0000044e <UART_u8ReceiveByte>:
 * @brief This function is used to Get the Received byte of data by polling mechanism
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */
uint8_t UART_u8ReceiveByte(uint8_t* pu8RecievedData)
{
     44e:	df 93       	push	r29
     450:	cf 93       	push	r28
     452:	00 d0       	rcall	.+0      	; 0x454 <UART_u8ReceiveByte+0x6>
     454:	0f 92       	push	r0
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	9b 83       	std	Y+3, r25	; 0x03
     45c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	89 83       	std	Y+1, r24	; 0x01
	// Check if the UART is Initialized
	if (gu8_IntializationFlag==UART_INITIALIZED)
     462:	80 91 66 00 	lds	r24, 0x0066
     466:	81 30       	cpi	r24, 0x01	; 1
     468:	99 f4       	brne	.+38     	; 0x490 <UART_u8ReceiveByte+0x42>
	{
		//if it is initialized then check that the pointer is not pointing to null
		if (pu8RecievedData!=NULL)
     46a:	8a 81       	ldd	r24, Y+2	; 0x02
     46c:	9b 81       	ldd	r25, Y+3	; 0x03
     46e:	00 97       	sbiw	r24, 0x00	; 0
     470:	61 f0       	breq	.+24     	; 0x48a <UART_u8ReceiveByte+0x3c>
		{
			//if not pointing to null
			// Busy wait until the UART Receive a byte
			while (!GET_BIT(UCSRA_REG,RXC_BIT));
     472:	eb e2       	ldi	r30, 0x2B	; 43
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	88 23       	and	r24, r24
     47a:	dc f7       	brge	.-10     	; 0x472 <UART_u8ReceiveByte+0x24>
			// Then Load the received byte from the UDR register and save it to the data location input
			*pu8RecievedData = UDR_REG;
     47c:	ec e2       	ldi	r30, 0x2C	; 44
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	ea 81       	ldd	r30, Y+2	; 0x02
     484:	fb 81       	ldd	r31, Y+3	; 0x03
     486:	80 83       	st	Z, r24
     488:	05 c0       	rjmp	.+10     	; 0x494 <UART_u8ReceiveByte+0x46>
		}else
		{
			// if the Pointer is pointing to NULL then update the Error State
			u8ErrorState = UART_NULL_INPUT;
     48a:	87 e0       	ldi	r24, 0x07	; 7
     48c:	89 83       	std	Y+1, r24	; 0x01
     48e:	02 c0       	rjmp	.+4      	; 0x494 <UART_u8ReceiveByte+0x46>
		}
	}else
	{
		// if the UART is not initialized then update the Error State
		u8ErrorState=UART_INITIALIZATION_ERROR;
     490:	88 e0       	ldi	r24, 0x08	; 8
     492:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
     494:	89 81       	ldd	r24, Y+1	; 0x01
}
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	cf 91       	pop	r28
     49e:	df 91       	pop	r29
     4a0:	08 95       	ret

000004a2 <UART_u8ReceiveInt>:


uint8_t UART_u8ReceiveInt(uint32_t* pu32ReceivedInt)
{
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	66 97       	sbiw	r28, 0x16	; 22
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	9d 8b       	std	Y+21, r25	; 0x15
     4c0:	8c 8b       	std	Y+20, r24	; 0x14
    uint8_t u8ArrayCounter=0;
     4c2:	18 86       	std	Y+8, r1	; 0x08
    uint32_t u8Multiplier=1;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	a0 e0       	ldi	r26, 0x00	; 0
     4ca:	b0 e0       	ldi	r27, 0x00	; 0
     4cc:	8c 83       	std	Y+4, r24	; 0x04
     4ce:	9d 83       	std	Y+5, r25	; 0x05
     4d0:	ae 83       	std	Y+6, r26	; 0x06
     4d2:	bf 83       	std	Y+7, r27	; 0x07
    uint8_t ReceivedStr[11];
    *pu32ReceivedInt=0;
     4d4:	ec 89       	ldd	r30, Y+20	; 0x14
     4d6:	fd 89       	ldd	r31, Y+21	; 0x15
     4d8:	10 82       	st	Z, r1
     4da:	11 82       	std	Z+1, r1	; 0x01
     4dc:	12 82       	std	Z+2, r1	; 0x02
     4de:	13 82       	std	Z+3, r1	; 0x03
    UART_u8RecieveString(ReceivedStr);
     4e0:	ce 01       	movw	r24, r28
     4e2:	09 96       	adiw	r24, 0x09	; 9
     4e4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <UART_u8RecieveString>
    uint8_t ArrayNav=0;
     4e8:	1b 82       	std	Y+3, r1	; 0x03
     4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <UART_u8ReceiveInt+0x50>
    //UART_u8SendString(ReceivedStr);
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    {
    	u8ArrayCounter++;
     4ec:	88 85       	ldd	r24, Y+8	; 0x08
     4ee:	8f 5f       	subi	r24, 0xFF	; 255
     4f0:	88 87       	std	Y+8, r24	; 0x08
    uint8_t ReceivedStr[11];
    *pu32ReceivedInt=0;
    UART_u8RecieveString(ReceivedStr);
    uint8_t ArrayNav=0;
    //UART_u8SendString(ReceivedStr);
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
     4f2:	88 85       	ldd	r24, Y+8	; 0x08
     4f4:	28 2f       	mov	r18, r24
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	ce 01       	movw	r24, r28
     4fa:	09 96       	adiw	r24, 0x09	; 9
     4fc:	fc 01       	movw	r30, r24
     4fe:	e2 0f       	add	r30, r18
     500:	f3 1f       	adc	r31, r19
     502:	80 81       	ld	r24, Z
     504:	8d 30       	cpi	r24, 0x0D	; 13
     506:	91 f7       	brne	.-28     	; 0x4ec <UART_u8ReceiveInt+0x4a>
    {
    	u8ArrayCounter++;
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
     508:	1a 82       	std	Y+2, r1	; 0x02
     50a:	58 c0       	rjmp	.+176    	; 0x5bc <UART_u8ReceiveInt+0x11a>
    {

        for(uint8_t multiplier=(u8ArrayCounter-1)-loopCounter;multiplier>0;multiplier--)
     50c:	98 85       	ldd	r25, Y+8	; 0x08
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	29 2f       	mov	r18, r25
     512:	28 1b       	sub	r18, r24
     514:	82 2f       	mov	r24, r18
     516:	81 50       	subi	r24, 0x01	; 1
     518:	89 83       	std	Y+1, r24	; 0x01
     51a:	15 c0       	rjmp	.+42     	; 0x546 <UART_u8ReceiveInt+0xa4>
        {
        	u8Multiplier=10*u8Multiplier;
     51c:	8c 81       	ldd	r24, Y+4	; 0x04
     51e:	9d 81       	ldd	r25, Y+5	; 0x05
     520:	ae 81       	ldd	r26, Y+6	; 0x06
     522:	bf 81       	ldd	r27, Y+7	; 0x07
     524:	2a e0       	ldi	r18, 0x0A	; 10
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	bc 01       	movw	r22, r24
     52e:	cd 01       	movw	r24, r26
     530:	0e 94 08 11 	call	0x2210	; 0x2210 <__mulsi3>
     534:	dc 01       	movw	r26, r24
     536:	cb 01       	movw	r24, r22
     538:	8c 83       	std	Y+4, r24	; 0x04
     53a:	9d 83       	std	Y+5, r25	; 0x05
     53c:	ae 83       	std	Y+6, r26	; 0x06
     53e:	bf 83       	std	Y+7, r27	; 0x07
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    {

        for(uint8_t multiplier=(u8ArrayCounter-1)-loopCounter;multiplier>0;multiplier--)
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	81 50       	subi	r24, 0x01	; 1
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	88 23       	and	r24, r24
     54a:	41 f7       	brne	.-48     	; 0x51c <UART_u8ReceiveInt+0x7a>
        {
        	u8Multiplier=10*u8Multiplier;
        }
        *pu32ReceivedInt = *pu32ReceivedInt + ((ReceivedStr[ArrayNav]-'0')*u8Multiplier);
     54c:	ec 89       	ldd	r30, Y+20	; 0x14
     54e:	fd 89       	ldd	r31, Y+21	; 0x15
     550:	e0 80       	ld	r14, Z
     552:	f1 80       	ldd	r15, Z+1	; 0x01
     554:	02 81       	ldd	r16, Z+2	; 0x02
     556:	13 81       	ldd	r17, Z+3	; 0x03
     558:	8b 81       	ldd	r24, Y+3	; 0x03
     55a:	28 2f       	mov	r18, r24
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	ce 01       	movw	r24, r28
     560:	09 96       	adiw	r24, 0x09	; 9
     562:	fc 01       	movw	r30, r24
     564:	e2 0f       	add	r30, r18
     566:	f3 1f       	adc	r31, r19
     568:	80 81       	ld	r24, Z
     56a:	88 2f       	mov	r24, r24
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	c0 97       	sbiw	r24, 0x30	; 48
     570:	aa 27       	eor	r26, r26
     572:	97 fd       	sbrc	r25, 7
     574:	a0 95       	com	r26
     576:	ba 2f       	mov	r27, r26
     578:	2c 81       	ldd	r18, Y+4	; 0x04
     57a:	3d 81       	ldd	r19, Y+5	; 0x05
     57c:	4e 81       	ldd	r20, Y+6	; 0x06
     57e:	5f 81       	ldd	r21, Y+7	; 0x07
     580:	bc 01       	movw	r22, r24
     582:	cd 01       	movw	r24, r26
     584:	0e 94 08 11 	call	0x2210	; 0x2210 <__mulsi3>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	8e 0d       	add	r24, r14
     58e:	9f 1d       	adc	r25, r15
     590:	a0 1f       	adc	r26, r16
     592:	b1 1f       	adc	r27, r17
     594:	ec 89       	ldd	r30, Y+20	; 0x14
     596:	fd 89       	ldd	r31, Y+21	; 0x15
     598:	80 83       	st	Z, r24
     59a:	91 83       	std	Z+1, r25	; 0x01
     59c:	a2 83       	std	Z+2, r26	; 0x02
     59e:	b3 83       	std	Z+3, r27	; 0x03
        ArrayNav++;
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	8f 5f       	subi	r24, 0xFF	; 255
     5a4:	8b 83       	std	Y+3, r24	; 0x03
        u8Multiplier=1;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	a0 e0       	ldi	r26, 0x00	; 0
     5ac:	b0 e0       	ldi	r27, 0x00	; 0
     5ae:	8c 83       	std	Y+4, r24	; 0x04
     5b0:	9d 83       	std	Y+5, r25	; 0x05
     5b2:	ae 83       	std	Y+6, r26	; 0x06
     5b4:	bf 83       	std	Y+7, r27	; 0x07
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    {
    	u8ArrayCounter++;
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
     5b6:	8a 81       	ldd	r24, Y+2	; 0x02
     5b8:	8f 5f       	subi	r24, 0xFF	; 255
     5ba:	8a 83       	std	Y+2, r24	; 0x02
     5bc:	9a 81       	ldd	r25, Y+2	; 0x02
     5be:	88 85       	ldd	r24, Y+8	; 0x08
     5c0:	98 17       	cp	r25, r24
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <UART_u8ReceiveInt+0x124>
     5c4:	a3 cf       	rjmp	.-186    	; 0x50c <UART_u8ReceiveInt+0x6a>
        *pu32ReceivedInt = *pu32ReceivedInt + ((ReceivedStr[ArrayNav]-'0')*u8Multiplier);
        ArrayNav++;
        u8Multiplier=1;
    }

}
     5c6:	66 96       	adiw	r28, 0x16	; 22
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	cf 91       	pop	r28
     5d4:	df 91       	pop	r29
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	08 95       	ret

000005e0 <UART_u8RecieveString>:
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */

uint8_t UART_u8RecieveString(uint8_t* pau8RecievedData)
{
     5e0:	df 93       	push	r29
     5e2:	cf 93       	push	r28
     5e4:	00 d0       	rcall	.+0      	; 0x5e6 <UART_u8RecieveString+0x6>
     5e6:	00 d0       	rcall	.+0      	; 0x5e8 <UART_u8RecieveString+0x8>
     5e8:	00 d0       	rcall	.+0      	; 0x5ea <UART_u8RecieveString+0xa>
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	9e 83       	std	Y+6, r25	; 0x06
     5f0:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8ErrorState = UART_OK;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8PreReading; 			/// a variable used to temporarily hold the value of the last character received
	uint8_t* Temp=pau8RecievedData; /// a temporarily pointer initialized with the place of the first character of the array to save the received string in
     5f6:	8d 81       	ldd	r24, Y+5	; 0x05
     5f8:	9e 81       	ldd	r25, Y+6	; 0x06
     5fa:	9a 83       	std	Y+2, r25	; 0x02
     5fc:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag == UART_INITIALIZED)// Check if the UART is initialized
     5fe:	80 91 66 00 	lds	r24, 0x0066
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	d9 f4       	brne	.+54     	; 0x63c <UART_u8RecieveString+0x5c>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8RecievedData!=NULL)
     606:	8d 81       	ldd	r24, Y+5	; 0x05
     608:	9e 81       	ldd	r25, Y+6	; 0x06
     60a:	00 97       	sbiw	r24, 0x00	; 0
     60c:	a1 f0       	breq	.+40     	; 0x636 <UART_u8RecieveString+0x56>
		{
			do{
				// Receive a character through UART
				UART_u8ReceiveByte(&u8PreReading);
     60e:	ce 01       	movw	r24, r28
     610:	04 96       	adiw	r24, 0x04	; 4
     612:	0e 94 27 02 	call	0x44e	; 0x44e <UART_u8ReceiveByte>
				//Save the received character to the last empty place in the array
				*Temp =u8PreReading;
     616:	8c 81       	ldd	r24, Y+4	; 0x04
     618:	e9 81       	ldd	r30, Y+1	; 0x01
     61a:	fa 81       	ldd	r31, Y+2	; 0x02
     61c:	80 83       	st	Z, r24
				//Update the last empty place in the array
				Temp++;
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	9a 81       	ldd	r25, Y+2	; 0x02
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	9a 83       	std	Y+2, r25	; 0x02
     626:	89 83       	std	Y+1, r24	; 0x01
			}while (u8PreReading!=0x0D); // do this while the received byte is not endline
     628:	8c 81       	ldd	r24, Y+4	; 0x04
     62a:	8d 30       	cpi	r24, 0x0D	; 13
     62c:	81 f7       	brne	.-32     	; 0x60e <UART_u8RecieveString+0x2e>
			*(Temp) ='\0';
     62e:	e9 81       	ldd	r30, Y+1	; 0x01
     630:	fa 81       	ldd	r31, Y+2	; 0x02
     632:	10 82       	st	Z, r1
     634:	05 c0       	rjmp	.+10     	; 0x640 <UART_u8RecieveString+0x60>

		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
     636:	87 e0       	ldi	r24, 0x07	; 7
     638:	8b 83       	std	Y+3, r24	; 0x03
     63a:	02 c0       	rjmp	.+4      	; 0x640 <UART_u8RecieveString+0x60>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState= UART_INITIALIZATION_ERROR;
     63c:	88 e0       	ldi	r24, 0x08	; 8
     63e:	8b 83       	std	Y+3, r24	; 0x03
	}

	return u8ErrorState;
     640:	8b 81       	ldd	r24, Y+3	; 0x03
}
     642:	26 96       	adiw	r28, 0x06	; 6
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	cf 91       	pop	r28
     650:	df 91       	pop	r29
     652:	08 95       	ret

00000654 <UART_u8ReceiveCountedString>:

uint8_t UART_u8ReceiveCountedString(uint8_t*pau8RecievedData,uint8_t Count)
{
     654:	df 93       	push	r29
     656:	cf 93       	push	r28
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	27 97       	sbiw	r28, 0x07	; 7
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	9e 83       	std	Y+6, r25	; 0x06
     66a:	8d 83       	std	Y+5, r24	; 0x05
     66c:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t u8ErrorState = UART_OK;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8PreReading; 			/// a variable used to temporarily hold the value of the last character received
	uint8_t* Temp=pau8RecievedData; /// a temporarily pointer initialized with the place of the first character of the array to save the received string in
     672:	8d 81       	ldd	r24, Y+5	; 0x05
     674:	9e 81       	ldd	r25, Y+6	; 0x06
     676:	9a 83       	std	Y+2, r25	; 0x02
     678:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag == UART_INITIALIZED)// Check if the UART is initialized
     67a:	80 91 66 00 	lds	r24, 0x0066
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	f1 f4       	brne	.+60     	; 0x6be <UART_u8ReceiveCountedString+0x6a>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8RecievedData!=NULL)
     682:	8d 81       	ldd	r24, Y+5	; 0x05
     684:	9e 81       	ldd	r25, Y+6	; 0x06
     686:	00 97       	sbiw	r24, 0x00	; 0
     688:	b9 f0       	breq	.+46     	; 0x6b8 <UART_u8ReceiveCountedString+0x64>
		{
			do{
				// Receive a character through UART
				UART_u8ReceiveByte(&u8PreReading);
     68a:	ce 01       	movw	r24, r28
     68c:	04 96       	adiw	r24, 0x04	; 4
     68e:	0e 94 27 02 	call	0x44e	; 0x44e <UART_u8ReceiveByte>
				//Save the received character to the last empty place in the array
				*Temp =u8PreReading;
     692:	8c 81       	ldd	r24, Y+4	; 0x04
     694:	e9 81       	ldd	r30, Y+1	; 0x01
     696:	fa 81       	ldd	r31, Y+2	; 0x02
     698:	80 83       	st	Z, r24
				//Update the last empty place in the array
				Temp++;
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	9a 81       	ldd	r25, Y+2	; 0x02
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	9a 83       	std	Y+2, r25	; 0x02
     6a2:	89 83       	std	Y+1, r24	; 0x01
				Count--;
     6a4:	8f 81       	ldd	r24, Y+7	; 0x07
     6a6:	81 50       	subi	r24, 0x01	; 1
     6a8:	8f 83       	std	Y+7, r24	; 0x07
			}while (u8PreReading!=0x0D&&Count!=0); // do this while the received byte is not endline
     6aa:	8c 81       	ldd	r24, Y+4	; 0x04
     6ac:	8d 30       	cpi	r24, 0x0D	; 13
     6ae:	49 f0       	breq	.+18     	; 0x6c2 <UART_u8ReceiveCountedString+0x6e>
     6b0:	8f 81       	ldd	r24, Y+7	; 0x07
     6b2:	88 23       	and	r24, r24
     6b4:	51 f7       	brne	.-44     	; 0x68a <UART_u8ReceiveCountedString+0x36>
     6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <UART_u8ReceiveCountedString+0x6e>

		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
     6b8:	87 e0       	ldi	r24, 0x07	; 7
     6ba:	8b 83       	std	Y+3, r24	; 0x03
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <UART_u8ReceiveCountedString+0x6e>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState= UART_INITIALIZATION_ERROR;
     6be:	88 e0       	ldi	r24, 0x08	; 8
     6c0:	8b 83       	std	Y+3, r24	; 0x03
	}

	return u8ErrorState;
     6c2:	8b 81       	ldd	r24, Y+3	; 0x03
}
     6c4:	27 96       	adiw	r28, 0x07	; 7
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	cf 91       	pop	r28
     6d2:	df 91       	pop	r29
     6d4:	08 95       	ret

000006d6 <UART_u8EnableRecievingInterrupt>:
 * @brief This function is called to enable the Receiving complete Interrupt
 * @pre - the UART must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t UART_u8EnableRecievingInterrupt(void (*pfnCallBack)(void))
{
     6d6:	df 93       	push	r29
     6d8:	cf 93       	push	r28
     6da:	00 d0       	rcall	.+0      	; 0x6dc <UART_u8EnableRecievingInterrupt+0x6>
     6dc:	0f 92       	push	r0
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	9b 83       	std	Y+3, r25	; 0x03
     6e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED)// Check if the UART is initialized
     6ea:	80 91 66 00 	lds	r24, 0x0066
     6ee:	81 30       	cpi	r24, 0x01	; 1
     6f0:	e1 f4       	brne	.+56     	; 0x72a <UART_u8EnableRecievingInterrupt+0x54>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pfnCallBack!=NULL)
     6f2:	8a 81       	ldd	r24, Y+2	; 0x02
     6f4:	9b 81       	ldd	r25, Y+3	; 0x03
     6f6:	00 97       	sbiw	r24, 0x00	; 0
     6f8:	a9 f0       	breq	.+42     	; 0x724 <UART_u8EnableRecievingInterrupt+0x4e>
		{
			//update the pointer of the CallBack function with the passed address of function
			gpf_RecieveCallBack = pfnCallBack;
     6fa:	8a 81       	ldd	r24, Y+2	; 0x02
     6fc:	9b 81       	ldd	r25, Y+3	; 0x03
     6fe:	90 93 68 00 	sts	0x0068, r25
     702:	80 93 67 00 	sts	0x0067, r24
			//Enable the Receiving Interrupt
			SET_BIT(UCSRB_REG,RXCIE_BIT);
     706:	aa e2       	ldi	r26, 0x2A	; 42
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	ea e2       	ldi	r30, 0x2A	; 42
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	80 68       	ori	r24, 0x80	; 128
     712:	8c 93       	st	X, r24
			//Enable the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
     714:	af e5       	ldi	r26, 0x5F	; 95
     716:	b0 e0       	ldi	r27, 0x00	; 0
     718:	ef e5       	ldi	r30, 0x5F	; 95
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
     71e:	80 68       	ori	r24, 0x80	; 128
     720:	8c 93       	st	X, r24
     722:	05 c0       	rjmp	.+10     	; 0x72e <UART_u8EnableRecievingInterrupt+0x58>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
     724:	87 e0       	ldi	r24, 0x07	; 7
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	02 c0       	rjmp	.+4      	; 0x72e <UART_u8EnableRecievingInterrupt+0x58>
		}

	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
     72a:	88 e0       	ldi	r24, 0x08	; 8
     72c:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
     72e:	89 81       	ldd	r24, Y+1	; 0x01
}
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	cf 91       	pop	r28
     738:	df 91       	pop	r29
     73a:	08 95       	ret

0000073c <UART_u8EnableSendingInterrupt>:
 * @brief This function is called to enable the Sending complete Interrupt
 * @pre - the UART must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t UART_u8EnableSendingInterrupt(void (*pfnCallBack)(void))
{
     73c:	df 93       	push	r29
     73e:	cf 93       	push	r28
     740:	00 d0       	rcall	.+0      	; 0x742 <UART_u8EnableSendingInterrupt+0x6>
     742:	0f 92       	push	r0
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	9b 83       	std	Y+3, r25	; 0x03
     74a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED)// Check if the UART is initialized
     750:	80 91 66 00 	lds	r24, 0x0066
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	e1 f4       	brne	.+56     	; 0x790 <UART_u8EnableSendingInterrupt+0x54>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pfnCallBack!=NULL)
     758:	8a 81       	ldd	r24, Y+2	; 0x02
     75a:	9b 81       	ldd	r25, Y+3	; 0x03
     75c:	00 97       	sbiw	r24, 0x00	; 0
     75e:	a9 f0       	breq	.+42     	; 0x78a <UART_u8EnableSendingInterrupt+0x4e>
		{
			//update the pointer of the CallBack function with the passed address of function
			gpf_TransmitCallBack = pfnCallBack;
     760:	8a 81       	ldd	r24, Y+2	; 0x02
     762:	9b 81       	ldd	r25, Y+3	; 0x03
     764:	90 93 6a 00 	sts	0x006A, r25
     768:	80 93 69 00 	sts	0x0069, r24
			//Enable the Receiving Interrupt
			SET_BIT(UCSRB_REG,TXCIE_BIT);
     76c:	aa e2       	ldi	r26, 0x2A	; 42
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	ea e2       	ldi	r30, 0x2A	; 42
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	80 64       	ori	r24, 0x40	; 64
     778:	8c 93       	st	X, r24
			//Enable the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
     77a:	af e5       	ldi	r26, 0x5F	; 95
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	ef e5       	ldi	r30, 0x5F	; 95
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	80 68       	ori	r24, 0x80	; 128
     786:	8c 93       	st	X, r24
     788:	05 c0       	rjmp	.+10     	; 0x794 <UART_u8EnableSendingInterrupt+0x58>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
     78a:	87 e0       	ldi	r24, 0x07	; 7
     78c:	89 83       	std	Y+1, r24	; 0x01
     78e:	02 c0       	rjmp	.+4      	; 0x794 <UART_u8EnableSendingInterrupt+0x58>
		}

	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
     790:	88 e0       	ldi	r24, 0x08	; 8
     792:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
     794:	89 81       	ldd	r24, Y+1	; 0x01

}
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	cf 91       	pop	r28
     79e:	df 91       	pop	r29
     7a0:	08 95       	ret

000007a2 <UART_u8DisableReceivingInterrupt>:
/**
 * @fn UART_u8DisableRecievingInterrupt(void)
 * @brief This function is called to disable the Receiving complete Interrupt
 */
void UART_u8DisableReceivingInterrupt(void)
{
     7a2:	df 93       	push	r29
     7a4:	cf 93       	push	r28
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
	//Reset the pointer to the callback function to NULL
	gpf_RecieveCallBack = NULL;
     7aa:	10 92 68 00 	sts	0x0068, r1
     7ae:	10 92 67 00 	sts	0x0067, r1
	// Clear the Enable bit of the receiving Interrupt
	CLR_BIT(UCSRB_REG,RXCIE_BIT);
     7b2:	aa e2       	ldi	r26, 0x2A	; 42
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ea e2       	ldi	r30, 0x2A	; 42
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	8f 77       	andi	r24, 0x7F	; 127
     7be:	8c 93       	st	X, r24
}
     7c0:	cf 91       	pop	r28
     7c2:	df 91       	pop	r29
     7c4:	08 95       	ret

000007c6 <UART_u8DisableTransmittionInterrupt>:
/**
 * @fn UART_u8DisableTransmittionInterrupt(void)
 * @brief This function is called to disable the Transmission complete Interrupt
 */
void UART_u8DisableTransmittionInterrupt(void)
{
     7c6:	df 93       	push	r29
     7c8:	cf 93       	push	r28
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
	//Reset the pointer to the callback function to NULL
	gpf_TransmitCallBack = NULL;
     7ce:	10 92 6a 00 	sts	0x006A, r1
     7d2:	10 92 69 00 	sts	0x0069, r1
	// Clear the Enable bit of the transmittion complete Interrupt
	CLR_BIT(UCSRB_REG,TXCIE_BIT);
     7d6:	aa e2       	ldi	r26, 0x2A	; 42
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	ea e2       	ldi	r30, 0x2A	; 42
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 81       	ld	r24, Z
     7e0:	8f 7b       	andi	r24, 0xBF	; 191
     7e2:	8c 93       	st	X, r24
}
     7e4:	cf 91       	pop	r28
     7e6:	df 91       	pop	r29
     7e8:	08 95       	ret

000007ea <UART_u8Deinit>:
/**
 * @fn UART_u8Deinit(void)
 * @brief This function is called to Stop the UART Peripheral and De-initialize it
 */
void UART_u8Deinit(void)
{
     7ea:	df 93       	push	r29
     7ec:	cf 93       	push	r28
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
	// Disable the UART capabilities of Receiving and transmitting
	CLR_BIT(UCSRB_REG,RXEN_BIT);
     7f2:	aa e2       	ldi	r26, 0x2A	; 42
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	ea e2       	ldi	r30, 0x2A	; 42
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8f 7e       	andi	r24, 0xEF	; 239
     7fe:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG,TXEN_BIT);
     800:	aa e2       	ldi	r26, 0x2A	; 42
     802:	b0 e0       	ldi	r27, 0x00	; 0
     804:	ea e2       	ldi	r30, 0x2A	; 42
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	80 81       	ld	r24, Z
     80a:	87 7f       	andi	r24, 0xF7	; 247
     80c:	8c 93       	st	X, r24
	//Reset the pointer to the transmittion callback function to NULL
	gpf_TransmitCallBack = NULL;
     80e:	10 92 6a 00 	sts	0x006A, r1
     812:	10 92 69 00 	sts	0x0069, r1
	//Reset the pointer to the Receiving callback function to NULL
	gpf_RecieveCallBack = NULL;
     816:	10 92 68 00 	sts	0x0068, r1
     81a:	10 92 67 00 	sts	0x0067, r1
	// Clear the Enable bit of the receiving Interrupt
	CLR_BIT(UCSRB_REG,RXCIE_BIT);
     81e:	aa e2       	ldi	r26, 0x2A	; 42
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	ea e2       	ldi	r30, 0x2A	; 42
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	80 81       	ld	r24, Z
     828:	8f 77       	andi	r24, 0x7F	; 127
     82a:	8c 93       	st	X, r24
	// Clear the Enable bit of the transmittion complete Interrupt
	CLR_BIT(UCSRB_REG,TXCIE_BIT);
     82c:	aa e2       	ldi	r26, 0x2A	; 42
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	ea e2       	ldi	r30, 0x2A	; 42
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	8f 7b       	andi	r24, 0xBF	; 191
     838:	8c 93       	st	X, r24
	// Reset the Initialization flag indicating that the UART is not initialized anymore
	gu8_IntializationFlag = UART_INITIALIZED;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 66 00 	sts	0x0066, r24

}
     840:	cf 91       	pop	r28
     842:	df 91       	pop	r29
     844:	08 95       	ret

00000846 <__vector_13>:

/**
 * @brief the Receiving Interrupt ISR
 */
void __vector_13(void) {
     846:	1f 92       	push	r1
     848:	0f 92       	push	r0
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	0f 92       	push	r0
     84e:	11 24       	eor	r1, r1
     850:	2f 93       	push	r18
     852:	3f 93       	push	r19
     854:	4f 93       	push	r20
     856:	5f 93       	push	r21
     858:	6f 93       	push	r22
     85a:	7f 93       	push	r23
     85c:	8f 93       	push	r24
     85e:	9f 93       	push	r25
     860:	af 93       	push	r26
     862:	bf 93       	push	r27
     864:	ef 93       	push	r30
     866:	ff 93       	push	r31
     868:	df 93       	push	r29
     86a:	cf 93       	push	r28
     86c:	0f 92       	push	r0
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62

	uint8_t UDRFlush; // this is a temporary variable used to read the UDR to clear the receive Complete flag
	if (gpf_RecieveCallBack!=NULL) // check if the pointer to the Callback is pointing to NULL
     872:	80 91 67 00 	lds	r24, 0x0067
     876:	90 91 68 00 	lds	r25, 0x0068
     87a:	00 97       	sbiw	r24, 0x00	; 0
     87c:	31 f0       	breq	.+12     	; 0x88a <__stack+0x2b>
	{
		//if not then call the function pointing to it
		gpf_RecieveCallBack();
     87e:	e0 91 67 00 	lds	r30, 0x0067
     882:	f0 91 68 00 	lds	r31, 0x0068
     886:	09 95       	icall
     888:	04 c0       	rjmp	.+8      	; 0x892 <__stack+0x33>
	}else
	{
		// if it is the just flush the UDR
		UDRFlush = UDR_REG;
     88a:	ec e2       	ldi	r30, 0x2C	; 44
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
     890:	89 83       	std	Y+1, r24	; 0x01
	}
}
     892:	0f 90       	pop	r0
     894:	cf 91       	pop	r28
     896:	df 91       	pop	r29
     898:	ff 91       	pop	r31
     89a:	ef 91       	pop	r30
     89c:	bf 91       	pop	r27
     89e:	af 91       	pop	r26
     8a0:	9f 91       	pop	r25
     8a2:	8f 91       	pop	r24
     8a4:	7f 91       	pop	r23
     8a6:	6f 91       	pop	r22
     8a8:	5f 91       	pop	r21
     8aa:	4f 91       	pop	r20
     8ac:	3f 91       	pop	r19
     8ae:	2f 91       	pop	r18
     8b0:	0f 90       	pop	r0
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	0f 90       	pop	r0
     8b6:	1f 90       	pop	r1
     8b8:	18 95       	reti

000008ba <__vector_14>:

/**
 * @brief the Transmission Interrupt ISR
 */
void __vector_14(void) {
     8ba:	1f 92       	push	r1
     8bc:	0f 92       	push	r0
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	0f 92       	push	r0
     8c2:	11 24       	eor	r1, r1
     8c4:	2f 93       	push	r18
     8c6:	3f 93       	push	r19
     8c8:	4f 93       	push	r20
     8ca:	5f 93       	push	r21
     8cc:	6f 93       	push	r22
     8ce:	7f 93       	push	r23
     8d0:	8f 93       	push	r24
     8d2:	9f 93       	push	r25
     8d4:	af 93       	push	r26
     8d6:	bf 93       	push	r27
     8d8:	ef 93       	push	r30
     8da:	ff 93       	push	r31
     8dc:	df 93       	push	r29
     8de:	cf 93       	push	r28
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
	if (gpf_TransmitCallBack!=NULL)// check if the pointer to the Callback is pointing to NULL
     8e4:	80 91 69 00 	lds	r24, 0x0069
     8e8:	90 91 6a 00 	lds	r25, 0x006A
     8ec:	00 97       	sbiw	r24, 0x00	; 0
     8ee:	29 f0       	breq	.+10     	; 0x8fa <__vector_14+0x40>
	{
		//if not then call the function pointing to it
		gpf_TransmitCallBack();
     8f0:	e0 91 69 00 	lds	r30, 0x0069
     8f4:	f0 91 6a 00 	lds	r31, 0x006A
     8f8:	09 95       	icall
	}
}
     8fa:	cf 91       	pop	r28
     8fc:	df 91       	pop	r29
     8fe:	ff 91       	pop	r31
     900:	ef 91       	pop	r30
     902:	bf 91       	pop	r27
     904:	af 91       	pop	r26
     906:	9f 91       	pop	r25
     908:	8f 91       	pop	r24
     90a:	7f 91       	pop	r23
     90c:	6f 91       	pop	r22
     90e:	5f 91       	pop	r21
     910:	4f 91       	pop	r20
     912:	3f 91       	pop	r19
     914:	2f 91       	pop	r18
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	1f 90       	pop	r1
     91e:	18 95       	reti

00000920 <TIM0_u8Init>:
void (*gv_OVFCallBackFun)(void)=NULL;
void (*gv_OC0CallBackFun)(void)=NULL;


ErrorState_t TIM0_u8Init(TIM0_Config_t * pst_TIMConfig)
{
     920:	df 93       	push	r29
     922:	cf 93       	push	r28
     924:	00 d0       	rcall	.+0      	; 0x926 <TIM0_u8Init+0x6>
     926:	00 d0       	rcall	.+0      	; 0x928 <TIM0_u8Init+0x8>
     928:	0f 92       	push	r0
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	9b 83       	std	Y+3, r25	; 0x03
     930:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState=TIM0_OK;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	89 83       	std	Y+1, r24	; 0x01

	//check if the input pointer is not a pointer to null first
	if (pst_TIMConfig != NULL)
     936:	8a 81       	ldd	r24, Y+2	; 0x02
     938:	9b 81       	ldd	r25, Y+3	; 0x03
     93a:	00 97       	sbiw	r24, 0x00	; 0
     93c:	09 f4       	brne	.+2      	; 0x940 <TIM0_u8Init+0x20>
     93e:	cc c0       	rjmp	.+408    	; 0xad8 <TIM0_u8Init+0x1b8>
	{
		// Set the global timer configuration to the input configuration to be used in the other timer functions
		gst_TIM0Config = pst_TIMConfig;
     940:	8a 81       	ldd	r24, Y+2	; 0x02
     942:	9b 81       	ldd	r25, Y+3	; 0x03
     944:	90 93 6c 00 	sts	0x006C, r25
     948:	80 93 6b 00 	sts	0x006B, r24

		//Define the mode of the timer
		switch(pst_TIMConfig->mode)
     94c:	ea 81       	ldd	r30, Y+2	; 0x02
     94e:	fb 81       	ldd	r31, Y+3	; 0x03
     950:	80 81       	ld	r24, Z
     952:	28 2f       	mov	r18, r24
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	3d 83       	std	Y+5, r19	; 0x05
     958:	2c 83       	std	Y+4, r18	; 0x04
     95a:	8c 81       	ldd	r24, Y+4	; 0x04
     95c:	9d 81       	ldd	r25, Y+5	; 0x05
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	91 05       	cpc	r25, r1
     962:	09 f4       	brne	.+2      	; 0x966 <TIM0_u8Init+0x46>
     964:	5c c0       	rjmp	.+184    	; 0xa1e <TIM0_u8Init+0xfe>
     966:	2c 81       	ldd	r18, Y+4	; 0x04
     968:	3d 81       	ldd	r19, Y+5	; 0x05
     96a:	23 30       	cpi	r18, 0x03	; 3
     96c:	31 05       	cpc	r19, r1
     96e:	54 f4       	brge	.+20     	; 0x984 <TIM0_u8Init+0x64>
     970:	8c 81       	ldd	r24, Y+4	; 0x04
     972:	9d 81       	ldd	r25, Y+5	; 0x05
     974:	00 97       	sbiw	r24, 0x00	; 0
     976:	c1 f0       	breq	.+48     	; 0x9a8 <TIM0_u8Init+0x88>
     978:	2c 81       	ldd	r18, Y+4	; 0x04
     97a:	3d 81       	ldd	r19, Y+5	; 0x05
     97c:	21 30       	cpi	r18, 0x01	; 1
     97e:	31 05       	cpc	r19, r1
     980:	11 f1       	breq	.+68     	; 0x9c6 <TIM0_u8Init+0xa6>
     982:	a4 c0       	rjmp	.+328    	; 0xacc <TIM0_u8Init+0x1ac>
     984:	8c 81       	ldd	r24, Y+4	; 0x04
     986:	9d 81       	ldd	r25, Y+5	; 0x05
     988:	84 30       	cpi	r24, 0x04	; 4
     98a:	91 05       	cpc	r25, r1
     98c:	09 f4       	brne	.+2      	; 0x990 <TIM0_u8Init+0x70>
     98e:	81 c0       	rjmp	.+258    	; 0xa92 <TIM0_u8Init+0x172>
     990:	2c 81       	ldd	r18, Y+4	; 0x04
     992:	3d 81       	ldd	r19, Y+5	; 0x05
     994:	24 30       	cpi	r18, 0x04	; 4
     996:	31 05       	cpc	r19, r1
     998:	2c f1       	brlt	.+74     	; 0x9e4 <TIM0_u8Init+0xc4>
     99a:	8c 81       	ldd	r24, Y+4	; 0x04
     99c:	9d 81       	ldd	r25, Y+5	; 0x05
     99e:	85 30       	cpi	r24, 0x05	; 5
     9a0:	91 05       	cpc	r25, r1
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <TIM0_u8Init+0x86>
     9a4:	59 c0       	rjmp	.+178    	; 0xa58 <TIM0_u8Init+0x138>
     9a6:	92 c0       	rjmp	.+292    	; 0xacc <TIM0_u8Init+0x1ac>
		{
		case TIM0_NORMAL:	// if timer mode is selected to be Normal then set the WGM(0:1) bits to 0
			CLR_BIT(TCCR0_REG,WGM00_BIT);
     9a8:	a3 e5       	ldi	r26, 0x53	; 83
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	e3 e5       	ldi	r30, 0x53	; 83
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	8f 7b       	andi	r24, 0xBF	; 191
     9b4:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG,WGM01_BIT);
     9b6:	a3 e5       	ldi	r26, 0x53	; 83
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	e3 e5       	ldi	r30, 0x53	; 83
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
     9c0:	87 7f       	andi	r24, 0xF7	; 247
     9c2:	8c 93       	st	X, r24
     9c4:	85 c0       	rjmp	.+266    	; 0xad0 <TIM0_u8Init+0x1b0>
			break;
		case TIM0_CTC:	// if timer mode is selected to be CTC then set the WGM(0:1) bits to 2
			CLR_BIT(TCCR0_REG,WGM00_BIT);
     9c6:	a3 e5       	ldi	r26, 0x53	; 83
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e3 e5       	ldi	r30, 0x53	; 83
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	8f 7b       	andi	r24, 0xBF	; 191
     9d2:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG,WGM01_BIT);
     9d4:	a3 e5       	ldi	r26, 0x53	; 83
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e3 e5       	ldi	r30, 0x53	; 83
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	88 60       	ori	r24, 0x08	; 8
     9e0:	8c 93       	st	X, r24
     9e2:	76 c0       	rjmp	.+236    	; 0xad0 <TIM0_u8Init+0x1b0>
			break;
		case TIM0_FPWM_INVERTING:
			// if timer mode is selected to be FAST PWM INVERTED then set the WGM(0:1) bits to 3 and COM(0:1)Bits to 3
			SET_BIT(TCCR0_REG,WGM00_BIT);
     9e4:	a3 e5       	ldi	r26, 0x53	; 83
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	e3 e5       	ldi	r30, 0x53	; 83
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	80 64       	ori	r24, 0x40	; 64
     9f0:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG,WGM01_BIT);
     9f2:	a3 e5       	ldi	r26, 0x53	; 83
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	e3 e5       	ldi	r30, 0x53	; 83
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	88 60       	ori	r24, 0x08	; 8
     9fe:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG,COM00_BIT);
     a00:	a3 e5       	ldi	r26, 0x53	; 83
     a02:	b0 e0       	ldi	r27, 0x00	; 0
     a04:	e3 e5       	ldi	r30, 0x53	; 83
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	80 61       	ori	r24, 0x10	; 16
     a0c:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG,COM01_BIT);
     a0e:	a3 e5       	ldi	r26, 0x53	; 83
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	e3 e5       	ldi	r30, 0x53	; 83
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	80 62       	ori	r24, 0x20	; 32
     a1a:	8c 93       	st	X, r24
     a1c:	59 c0       	rjmp	.+178    	; 0xad0 <TIM0_u8Init+0x1b0>
			break;
		case TIM0_FPWM_NON_INVERTING:
			// if timer mode is selected to be FAST PWM NON INVERTED then set the WGM(0:1) bits to 3 and COM(0:1)Bits to 2
			SET_BIT(TCCR0_REG,WGM00_BIT);
     a1e:	a3 e5       	ldi	r26, 0x53	; 83
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	e3 e5       	ldi	r30, 0x53	; 83
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	80 64       	ori	r24, 0x40	; 64
     a2a:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG,WGM01_BIT);
     a2c:	a3 e5       	ldi	r26, 0x53	; 83
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	e3 e5       	ldi	r30, 0x53	; 83
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	88 60       	ori	r24, 0x08	; 8
     a38:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG,COM00_BIT);
     a3a:	a3 e5       	ldi	r26, 0x53	; 83
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	e3 e5       	ldi	r30, 0x53	; 83
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	80 81       	ld	r24, Z
     a44:	8f 7e       	andi	r24, 0xEF	; 239
     a46:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG,COM01_BIT);
     a48:	a3 e5       	ldi	r26, 0x53	; 83
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	e3 e5       	ldi	r30, 0x53	; 83
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	80 62       	ori	r24, 0x20	; 32
     a54:	8c 93       	st	X, r24
     a56:	3c c0       	rjmp	.+120    	; 0xad0 <TIM0_u8Init+0x1b0>
			break;
		case TIM0_PCPWM_INVERTING:
			// if timer mode is selected to be PHASE CORRECT PWM INVERTED then set the WGM(0:1) bits to 1 and COM(0:1)Bits to 3
			SET_BIT(TCCR0_REG,WGM00_BIT);
     a58:	a3 e5       	ldi	r26, 0x53	; 83
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	e3 e5       	ldi	r30, 0x53	; 83
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	80 64       	ori	r24, 0x40	; 64
     a64:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG,WGM01_BIT);
     a66:	a3 e5       	ldi	r26, 0x53	; 83
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e3 e5       	ldi	r30, 0x53	; 83
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	87 7f       	andi	r24, 0xF7	; 247
     a72:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG,COM00_BIT);
     a74:	a3 e5       	ldi	r26, 0x53	; 83
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	e3 e5       	ldi	r30, 0x53	; 83
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	80 61       	ori	r24, 0x10	; 16
     a80:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG,COM01_BIT);
     a82:	a3 e5       	ldi	r26, 0x53	; 83
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e3 e5       	ldi	r30, 0x53	; 83
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	80 62       	ori	r24, 0x20	; 32
     a8e:	8c 93       	st	X, r24
     a90:	1f c0       	rjmp	.+62     	; 0xad0 <TIM0_u8Init+0x1b0>
			break;
		case TIM0_PCPWM_NON_INVERTING:
			// if timer mode is selected to be PHASE CORRECT PWM non INVERTED then set the WGM(0:1) bits to 1 and COM(0:1)Bits to 2
			SET_BIT(TCCR0_REG,WGM00_BIT);
     a92:	a3 e5       	ldi	r26, 0x53	; 83
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	e3 e5       	ldi	r30, 0x53	; 83
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	80 64       	ori	r24, 0x40	; 64
     a9e:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG,WGM01_BIT);
     aa0:	a3 e5       	ldi	r26, 0x53	; 83
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	e3 e5       	ldi	r30, 0x53	; 83
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	87 7f       	andi	r24, 0xF7	; 247
     aac:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG,COM00_BIT);
     aae:	a3 e5       	ldi	r26, 0x53	; 83
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	e3 e5       	ldi	r30, 0x53	; 83
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	8f 7e       	andi	r24, 0xEF	; 239
     aba:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG,COM01_BIT);
     abc:	a3 e5       	ldi	r26, 0x53	; 83
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e3 e5       	ldi	r30, 0x53	; 83
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	80 62       	ori	r24, 0x20	; 32
     ac8:	8c 93       	st	X, r24
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <TIM0_u8Init+0x1b0>
			break;
		default:
			// if the input mode is something else return error state TIM0_WRONG_MODE
			u8ErrorState = TIM0_WRONG_MODE;
     acc:	8d ef       	ldi	r24, 0xFD	; 253
     ace:	89 83       	std	Y+1, r24	; 0x01
		}

		// Set the starting of counter to initial value  defined in the configuration file
		TCNT0_REG = TIMER0_INITIAL_START;
     ad0:	e2 e5       	ldi	r30, 0x52	; 82
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	10 82       	st	Z, r1
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <TIM0_u8Init+0x1bc>
	}
	else{
		// if the input pointer to configuration structure is pointing to null then return error TIM0_NULL_INPUT
		u8ErrorState= TIM0_NULL_INPUT;
     ad8:	8c ef       	ldi	r24, 0xFC	; 252
     ada:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
     adc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ade:	0f 90       	pop	r0
     ae0:	0f 90       	pop	r0
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	cf 91       	pop	r28
     aea:	df 91       	pop	r29
     aec:	08 95       	ret

00000aee <TIM0_u8SetStart>:
ErrorState_t TIM0_u8SetStart(uint8_t u8StartingPoint)
{
     aee:	df 93       	push	r29
     af0:	cf 93       	push	r28
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <TIM0_u8SetStart+0x6>
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState= TIM0_OK;
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	89 83       	std	Y+1, r24	; 0x01

	// take the input value and initialize the counter with it
	TCNT0_REG = u8StartingPoint;
     afe:	e2 e5       	ldi	r30, 0x52	; 82
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	80 83       	st	Z, r24

	return u8ErrorState;
     b06:	89 81       	ldd	r24, Y+1	; 0x01
}
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	cf 91       	pop	r28
     b0e:	df 91       	pop	r29
     b10:	08 95       	ret

00000b12 <TIM0_u8GetCounts>:
ErrorState_t TIM0_u8GetCounts(uint8_t* pu8_ReturnedCounts)
{
     b12:	df 93       	push	r29
     b14:	cf 93       	push	r28
     b16:	00 d0       	rcall	.+0      	; 0xb18 <TIM0_u8GetCounts+0x6>
     b18:	0f 92       	push	r0
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	9b 83       	std	Y+3, r25	; 0x03
     b20:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState= TIM0_OK;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	89 83       	std	Y+1, r24	; 0x01


	if (pu8_ReturnedCounts != NULL) // check that the pointer is not wild pointer
     b26:	8a 81       	ldd	r24, Y+2	; 0x02
     b28:	9b 81       	ldd	r25, Y+3	; 0x03
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	39 f0       	breq	.+14     	; 0xb3c <TIM0_u8GetCounts+0x2a>
	{
		// if not get the value of the TCNT0 register containing the number of counts
		*pu8_ReturnedCounts = TCNT0_REG;
     b2e:	e2 e5       	ldi	r30, 0x52	; 82
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	ea 81       	ldd	r30, Y+2	; 0x02
     b36:	fb 81       	ldd	r31, Y+3	; 0x03
     b38:	80 83       	st	Z, r24
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <TIM0_u8GetCounts+0x2e>
	}
	else {
		// if it is a wild pointer return error TIM0_NULL_INPUT
		u8ErrorState = TIM0_NULL_INPUT;
     b3c:	8c ef       	ldi	r24, 0xFC	; 252
     b3e:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
     b40:	89 81       	ldd	r24, Y+1	; 0x01

}
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	08 95       	ret

00000b4e <TIM0_u8SetCompareValue>:
ErrorState_t TIM0_u8SetCompareValue(uint8_t u8SetCompareValue)
{
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	00 d0       	rcall	.+0      	; 0xb54 <TIM0_u8SetCompareValue+0x6>
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = TIM0_OK;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	89 83       	std	Y+1, r24	; 0x01
	{
		// if the global Timer structure is null the return error TIM0_NOT_INITILIZED
		u8ErrorState = TIM0_NOT_INITILIZED;
	}
	*/
	OCR0_REG = u8SetCompareValue;
     b5e:	ec e5       	ldi	r30, 0x5C	; 92
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	80 83       	st	Z, r24
	return u8ErrorState;
     b66:	89 81       	ldd	r24, Y+1	; 0x01
}
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <TIM0_u8EnableOVFInterrupt>:
ErrorState_t TIM0_u8EnableOVFInterrupt(void (*vCallBackFun)(void))
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	00 d0       	rcall	.+0      	; 0xb78 <TIM0_u8EnableOVFInterrupt+0x6>
     b78:	0f 92       	push	r0
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	9b 83       	std	Y+3, r25	; 0x03
     b80:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = TIM0_OK;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	89 83       	std	Y+1, r24	; 0x01

	if (vCallBackFun != NULL) // check if the pointer is wild
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	9b 81       	ldd	r25, Y+3	; 0x03
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	a9 f0       	breq	.+42     	; 0xbb8 <TIM0_u8EnableOVFInterrupt+0x46>
	{
		//if not set the call back function and enable the global interrupt then enable the OVF interrupt
		gv_OVFCallBackFun = vCallBackFun;
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	9b 81       	ldd	r25, Y+3	; 0x03
     b92:	90 93 6e 00 	sts	0x006E, r25
     b96:	80 93 6d 00 	sts	0x006D, r24
		SET_BIT(SREG_REG,I_BIT);
     b9a:	af e5       	ldi	r26, 0x5F	; 95
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	ef e5       	ldi	r30, 0x5F	; 95
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	80 68       	ori	r24, 0x80	; 128
     ba6:	8c 93       	st	X, r24
		SET_BIT(TIMSK_REG,TOIE0_BIT);
     ba8:	a9 e5       	ldi	r26, 0x59	; 89
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e9 e5       	ldi	r30, 0x59	; 89
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	81 60       	ori	r24, 0x01	; 1
     bb4:	8c 93       	st	X, r24
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <TIM0_u8EnableOVFInterrupt+0x4a>
	}else
	{
		u8ErrorState = TIM0_NULL_INPUT;
     bb8:	8c ef       	ldi	r24, 0xFC	; 252
     bba:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <TIM0_u8EnableOCInterrupt>:
ErrorState_t TIM0_u8EnableOCInterrupt (void (*vCallBackFun)(void))
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <TIM0_u8EnableOCInterrupt+0x6>
     bd0:	0f 92       	push	r0
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	9b 83       	std	Y+3, r25	; 0x03
     bd8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = TIM0_OK;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	89 83       	std	Y+1, r24	; 0x01

	if (vCallBackFun != NULL) // check if the pointer is wild
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	9b 81       	ldd	r25, Y+3	; 0x03
     be2:	00 97       	sbiw	r24, 0x00	; 0
     be4:	a9 f0       	breq	.+42     	; 0xc10 <TIM0_u8EnableOCInterrupt+0x46>
	{
		//if not set the call back function and enable the global interrupt then enable the OVF interrupt
		gv_OC0CallBackFun = vCallBackFun;
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	9b 81       	ldd	r25, Y+3	; 0x03
     bea:	90 93 70 00 	sts	0x0070, r25
     bee:	80 93 6f 00 	sts	0x006F, r24
		SET_BIT(SREG_REG,I_BIT);
     bf2:	af e5       	ldi	r26, 0x5F	; 95
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	ef e5       	ldi	r30, 0x5F	; 95
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	8c 93       	st	X, r24
		SET_BIT(TIMSK_REG,OCIE0_BIT);
     c00:	a9 e5       	ldi	r26, 0x59	; 89
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e9 e5       	ldi	r30, 0x59	; 89
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	82 60       	ori	r24, 0x02	; 2
     c0c:	8c 93       	st	X, r24
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <TIM0_u8EnableOCInterrupt+0x4a>
	}else
	{
		u8ErrorState = TIM0_NULL_INPUT;
     c10:	8c ef       	ldi	r24, 0xFC	; 252
     c12:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
     c14:	89 81       	ldd	r24, Y+1	; 0x01
}
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	08 95       	ret

00000c22 <TIM0_u8TimerStart>:
ErrorState_t TIM0_u8TimerStart(void)
{
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	00 d0       	rcall	.+0      	; 0xc28 <TIM0_u8TimerStart+0x6>
     c28:	0f 92       	push	r0
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = TIM0_OK;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	89 83       	std	Y+1, r24	; 0x01
	if (gst_TIM0Config != NULL)
     c32:	80 91 6b 00 	lds	r24, 0x006B
     c36:	90 91 6c 00 	lds	r25, 0x006C
     c3a:	00 97       	sbiw	r24, 0x00	; 0
     c3c:	09 f4       	brne	.+2      	; 0xc40 <TIM0_u8TimerStart+0x1e>
     c3e:	f0 c0       	rjmp	.+480    	; 0xe20 <TIM0_u8TimerStart+0x1fe>
	{
		//check if the timer is initialized
		// if yes then start the counter by setting the clock source to a non zero value depending on the timer configuration
		switch (gst_TIM0Config->clkSource)
     c40:	e0 91 6b 00 	lds	r30, 0x006B
     c44:	f0 91 6c 00 	lds	r31, 0x006C
     c48:	81 81       	ldd	r24, Z+1	; 0x01
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	3b 83       	std	Y+3, r19	; 0x03
     c50:	2a 83       	std	Y+2, r18	; 0x02
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	9b 81       	ldd	r25, Y+3	; 0x03
     c56:	83 30       	cpi	r24, 0x03	; 3
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <TIM0_u8TimerStart+0x3c>
     c5c:	70 c0       	rjmp	.+224    	; 0xd3e <TIM0_u8TimerStart+0x11c>
     c5e:	2a 81       	ldd	r18, Y+2	; 0x02
     c60:	3b 81       	ldd	r19, Y+3	; 0x03
     c62:	24 30       	cpi	r18, 0x04	; 4
     c64:	31 05       	cpc	r19, r1
     c66:	84 f4       	brge	.+32     	; 0xc88 <TIM0_u8TimerStart+0x66>
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	9b 81       	ldd	r25, Y+3	; 0x03
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	91 05       	cpc	r25, r1
     c70:	d1 f1       	breq	.+116    	; 0xce6 <TIM0_u8TimerStart+0xc4>
     c72:	2a 81       	ldd	r18, Y+2	; 0x02
     c74:	3b 81       	ldd	r19, Y+3	; 0x03
     c76:	22 30       	cpi	r18, 0x02	; 2
     c78:	31 05       	cpc	r19, r1
     c7a:	0c f0       	brlt	.+2      	; 0xc7e <TIM0_u8TimerStart+0x5c>
     c7c:	4a c0       	rjmp	.+148    	; 0xd12 <TIM0_u8TimerStart+0xf0>
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	d1 f0       	breq	.+52     	; 0xcba <TIM0_u8TimerStart+0x98>
     c86:	c9 c0       	rjmp	.+402    	; 0xe1a <TIM0_u8TimerStart+0x1f8>
     c88:	2a 81       	ldd	r18, Y+2	; 0x02
     c8a:	3b 81       	ldd	r19, Y+3	; 0x03
     c8c:	25 30       	cpi	r18, 0x05	; 5
     c8e:	31 05       	cpc	r19, r1
     c90:	09 f4       	brne	.+2      	; 0xc94 <TIM0_u8TimerStart+0x72>
     c92:	81 c0       	rjmp	.+258    	; 0xd96 <TIM0_u8TimerStart+0x174>
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	9b 81       	ldd	r25, Y+3	; 0x03
     c98:	85 30       	cpi	r24, 0x05	; 5
     c9a:	91 05       	cpc	r25, r1
     c9c:	0c f4       	brge	.+2      	; 0xca0 <TIM0_u8TimerStart+0x7e>
     c9e:	65 c0       	rjmp	.+202    	; 0xd6a <TIM0_u8TimerStart+0x148>
     ca0:	2a 81       	ldd	r18, Y+2	; 0x02
     ca2:	3b 81       	ldd	r19, Y+3	; 0x03
     ca4:	26 30       	cpi	r18, 0x06	; 6
     ca6:	31 05       	cpc	r19, r1
     ca8:	09 f4       	brne	.+2      	; 0xcac <TIM0_u8TimerStart+0x8a>
     caa:	8b c0       	rjmp	.+278    	; 0xdc2 <TIM0_u8TimerStart+0x1a0>
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	9b 81       	ldd	r25, Y+3	; 0x03
     cb0:	87 30       	cpi	r24, 0x07	; 7
     cb2:	91 05       	cpc	r25, r1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <TIM0_u8TimerStart+0x96>
     cb6:	9b c0       	rjmp	.+310    	; 0xdee <TIM0_u8TimerStart+0x1cc>
     cb8:	b0 c0       	rjmp	.+352    	; 0xe1a <TIM0_u8TimerStart+0x1f8>
		{
		case NO_CLK: // if the clock mode is chosen as NO_CLk we set the CS(0:2) BITS to 0
			CLR_BIT(TCCR0_REG, CS00_BIT);
     cba:	a3 e5       	ldi	r26, 0x53	; 83
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e3 e5       	ldi	r30, 0x53	; 83
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	8e 7f       	andi	r24, 0xFE	; 254
     cc6:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG, CS01_BIT);
     cc8:	a3 e5       	ldi	r26, 0x53	; 83
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e3 e5       	ldi	r30, 0x53	; 83
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8d 7f       	andi	r24, 0xFD	; 253
     cd4:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG, CS02_BIT);
     cd6:	a3 e5       	ldi	r26, 0x53	; 83
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e3 e5       	ldi	r30, 0x53	; 83
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	8b 7f       	andi	r24, 0xFB	; 251
     ce2:	8c 93       	st	X, r24
     ce4:	9f c0       	rjmp	.+318    	; 0xe24 <TIM0_u8TimerStart+0x202>
			break;
		case NO_PRESCALAR:// if the clock mode is chosen as NO_PRESCALAR we set the CS(0:2) BITS to 1
			SET_BIT(TCCR0_REG, CS00_BIT);
     ce6:	a3 e5       	ldi	r26, 0x53	; 83
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e3 e5       	ldi	r30, 0x53	; 83
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	81 60       	ori	r24, 0x01	; 1
     cf2:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG, CS01_BIT);
     cf4:	a3 e5       	ldi	r26, 0x53	; 83
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e3 e5       	ldi	r30, 0x53	; 83
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	8d 7f       	andi	r24, 0xFD	; 253
     d00:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG, CS02_BIT);
     d02:	a3 e5       	ldi	r26, 0x53	; 83
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e3 e5       	ldi	r30, 0x53	; 83
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8b 7f       	andi	r24, 0xFB	; 251
     d0e:	8c 93       	st	X, r24
     d10:	89 c0       	rjmp	.+274    	; 0xe24 <TIM0_u8TimerStart+0x202>
			break;
		case PRESCALAR_8:// if the clock mode is chosen as PRESCALAR_8 we set the CS(0:2) BITS to 2
			CLR_BIT(TCCR0_REG, CS00_BIT);
     d12:	a3 e5       	ldi	r26, 0x53	; 83
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e3 e5       	ldi	r30, 0x53	; 83
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8e 7f       	andi	r24, 0xFE	; 254
     d1e:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, CS01_BIT);
     d20:	a3 e5       	ldi	r26, 0x53	; 83
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e3 e5       	ldi	r30, 0x53	; 83
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	82 60       	ori	r24, 0x02	; 2
     d2c:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG, CS02_BIT);
     d2e:	a3 e5       	ldi	r26, 0x53	; 83
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e3 e5       	ldi	r30, 0x53	; 83
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8b 7f       	andi	r24, 0xFB	; 251
     d3a:	8c 93       	st	X, r24
     d3c:	73 c0       	rjmp	.+230    	; 0xe24 <TIM0_u8TimerStart+0x202>
			break;
		case PRESCALAR_64:// if the clock mode is chosen as PRESCALAR_64 we set the CS(0:2) BITS to 3
			SET_BIT(TCCR0_REG, CS00_BIT);
     d3e:	a3 e5       	ldi	r26, 0x53	; 83
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e3 e5       	ldi	r30, 0x53	; 83
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	81 60       	ori	r24, 0x01	; 1
     d4a:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, CS01_BIT);
     d4c:	a3 e5       	ldi	r26, 0x53	; 83
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e3 e5       	ldi	r30, 0x53	; 83
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	82 60       	ori	r24, 0x02	; 2
     d58:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG, CS02_BIT);
     d5a:	a3 e5       	ldi	r26, 0x53	; 83
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e3 e5       	ldi	r30, 0x53	; 83
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8b 7f       	andi	r24, 0xFB	; 251
     d66:	8c 93       	st	X, r24
     d68:	5d c0       	rjmp	.+186    	; 0xe24 <TIM0_u8TimerStart+0x202>
			break;
		case PRESCALAR_256:// if the clock mode is chosen as PRESCALAR_256 we set the CS(0:2) BITS to 4
			CLR_BIT(TCCR0_REG, CS00_BIT);
     d6a:	a3 e5       	ldi	r26, 0x53	; 83
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e3 e5       	ldi	r30, 0x53	; 83
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8e 7f       	andi	r24, 0xFE	; 254
     d76:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG, CS01_BIT);
     d78:	a3 e5       	ldi	r26, 0x53	; 83
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e3 e5       	ldi	r30, 0x53	; 83
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	8d 7f       	andi	r24, 0xFD	; 253
     d84:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, CS02_BIT);
     d86:	a3 e5       	ldi	r26, 0x53	; 83
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e3 e5       	ldi	r30, 0x53	; 83
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	84 60       	ori	r24, 0x04	; 4
     d92:	8c 93       	st	X, r24
     d94:	47 c0       	rjmp	.+142    	; 0xe24 <TIM0_u8TimerStart+0x202>
			break;
		case PRESCALAR_1024:// if the clock mode is chosen as PRESCALAR_1024 we set the CS(0:2) BITS to 5
			SET_BIT(TCCR0_REG, CS00_BIT);
     d96:	a3 e5       	ldi	r26, 0x53	; 83
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e3 e5       	ldi	r30, 0x53	; 83
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	81 60       	ori	r24, 0x01	; 1
     da2:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_REG, CS01_BIT);
     da4:	a3 e5       	ldi	r26, 0x53	; 83
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e3 e5       	ldi	r30, 0x53	; 83
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	8d 7f       	andi	r24, 0xFD	; 253
     db0:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, CS02_BIT);
     db2:	a3 e5       	ldi	r26, 0x53	; 83
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e3 e5       	ldi	r30, 0x53	; 83
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	84 60       	ori	r24, 0x04	; 4
     dbe:	8c 93       	st	X, r24
     dc0:	31 c0       	rjmp	.+98     	; 0xe24 <TIM0_u8TimerStart+0x202>
			break;
		case EXT_FALLING:// if the clock mode is chosen as EXT_FALLING we set the CS(0:2) BITS to 6
			CLR_BIT(TCCR0_REG, CS00_BIT);
     dc2:	a3 e5       	ldi	r26, 0x53	; 83
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e3 e5       	ldi	r30, 0x53	; 83
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8e 7f       	andi	r24, 0xFE	; 254
     dce:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, CS01_BIT);
     dd0:	a3 e5       	ldi	r26, 0x53	; 83
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e3 e5       	ldi	r30, 0x53	; 83
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	82 60       	ori	r24, 0x02	; 2
     ddc:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, CS02_BIT);
     dde:	a3 e5       	ldi	r26, 0x53	; 83
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e3 e5       	ldi	r30, 0x53	; 83
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	84 60       	ori	r24, 0x04	; 4
     dea:	8c 93       	st	X, r24
     dec:	1b c0       	rjmp	.+54     	; 0xe24 <TIM0_u8TimerStart+0x202>
			break;
		case EXT_RISING:// if the clock mode is chosen as EXT_RISING we set the CS(0:2) BITS to 7
			SET_BIT(TCCR0_REG, CS00_BIT);
     dee:	a3 e5       	ldi	r26, 0x53	; 83
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e3 e5       	ldi	r30, 0x53	; 83
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, CS01_BIT);
     dfc:	a3 e5       	ldi	r26, 0x53	; 83
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e3 e5       	ldi	r30, 0x53	; 83
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	82 60       	ori	r24, 0x02	; 2
     e08:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, CS02_BIT);
     e0a:	a3 e5       	ldi	r26, 0x53	; 83
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e3 e5       	ldi	r30, 0x53	; 83
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	84 60       	ori	r24, 0x04	; 4
     e16:	8c 93       	st	X, r24
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <TIM0_u8TimerStart+0x202>
			break;
		default:
			u8ErrorState = TIM0_UNDEFINED_CLK_STATE;
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <TIM0_u8TimerStart+0x202>
		}

	}else{

		u8ErrorState = TIM0_NOT_INITILIZED;
     e20:	8e ef       	ldi	r24, 0xFE	; 254
     e22:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
}
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <TIM0_u8TimerStop>:
ErrorState_t TIM0_u8TimerStop(void)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	0f 92       	push	r0
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = TIM0_OK;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	89 83       	std	Y+1, r24	; 0x01

	if (gst_TIM0Config != NULL ) // check the timer is initialized
     e40:	80 91 6b 00 	lds	r24, 0x006B
     e44:	90 91 6c 00 	lds	r25, 0x006C
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	b1 f0       	breq	.+44     	; 0xe78 <TIM0_u8TimerStop+0x46>
	{
		// Stop the timer without de-initialize  it by setting the clock source bits to 0 choosing no clock mode
		CLR_BIT(TCCR0_REG, CS00_BIT);
     e4c:	a3 e5       	ldi	r26, 0x53	; 83
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e3 e5       	ldi	r30, 0x53	; 83
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	8e 7f       	andi	r24, 0xFE	; 254
     e58:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, CS01_BIT);
     e5a:	a3 e5       	ldi	r26, 0x53	; 83
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e3 e5       	ldi	r30, 0x53	; 83
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	8d 7f       	andi	r24, 0xFD	; 253
     e66:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, CS02_BIT);
     e68:	a3 e5       	ldi	r26, 0x53	; 83
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e3 e5       	ldi	r30, 0x53	; 83
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	8b 7f       	andi	r24, 0xFB	; 251
     e74:	8c 93       	st	X, r24
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <TIM0_u8TimerStop+0x4a>
	}
	else{
		u8ErrorState = TIM0_NOT_INITILIZED;
     e78:	8e ef       	ldi	r24, 0xFE	; 254
     e7a:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7e:	0f 90       	pop	r0
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <TIM0_u8DisableOVFInterrupt>:
ErrorState_t TIM0_u8DisableOVFInterrupt()
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = TIM0_OK;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	89 83       	std	Y+1, r24	; 0x01
	gv_OVFCallBackFun = NULL;
     e94:	10 92 6e 00 	sts	0x006E, r1
     e98:	10 92 6d 00 	sts	0x006D, r1
	CLR_BIT(TIMSK_REG,TOIE0_BIT);
     e9c:	a9 e5       	ldi	r26, 0x59	; 89
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e9 e5       	ldi	r30, 0x59	; 89
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8e 7f       	andi	r24, 0xFE	; 254
     ea8:	8c 93       	st	X, r24
	return u8ErrorState;
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
}
     eac:	0f 90       	pop	r0
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <TIM0_u8DisableOCInterrupt>:
ErrorState_t TIM0_u8DisableOCInterrupt ()
{
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	0f 92       	push	r0
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = TIM0_OK;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	89 83       	std	Y+1, r24	; 0x01
	gv_OC0CallBackFun = NULL;
     ec2:	10 92 70 00 	sts	0x0070, r1
     ec6:	10 92 6f 00 	sts	0x006F, r1
	CLR_BIT(TIMSK_REG,OCIE0_BIT);
     eca:	a9 e5       	ldi	r26, 0x59	; 89
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e9 e5       	ldi	r30, 0x59	; 89
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	8d 7f       	andi	r24, 0xFD	; 253
     ed6:	8c 93       	st	X, r24
	return u8ErrorState;
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <__vector_10>:


void __vector_10(void){
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62

	if (gv_OC0CallBackFun != NULL)
     f0c:	80 91 6f 00 	lds	r24, 0x006F
     f10:	90 91 70 00 	lds	r25, 0x0070
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	29 f0       	breq	.+10     	; 0xf22 <__vector_10+0x40>
	{
		gv_OC0CallBackFun();
     f18:	e0 91 6f 00 	lds	r30, 0x006F
     f1c:	f0 91 70 00 	lds	r31, 0x0070
     f20:	09 95       	icall
	}
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	bf 91       	pop	r27
     f2c:	af 91       	pop	r26
     f2e:	9f 91       	pop	r25
     f30:	8f 91       	pop	r24
     f32:	7f 91       	pop	r23
     f34:	6f 91       	pop	r22
     f36:	5f 91       	pop	r21
     f38:	4f 91       	pop	r20
     f3a:	3f 91       	pop	r19
     f3c:	2f 91       	pop	r18
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	0f 90       	pop	r0
     f44:	1f 90       	pop	r1
     f46:	18 95       	reti

00000f48 <__vector_11>:

void __vector_11(void){
     f48:	1f 92       	push	r1
     f4a:	0f 92       	push	r0
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	0f 92       	push	r0
     f50:	11 24       	eor	r1, r1
     f52:	2f 93       	push	r18
     f54:	3f 93       	push	r19
     f56:	4f 93       	push	r20
     f58:	5f 93       	push	r21
     f5a:	6f 93       	push	r22
     f5c:	7f 93       	push	r23
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	af 93       	push	r26
     f64:	bf 93       	push	r27
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62

	if (gv_OVFCallBackFun != NULL)
     f72:	80 91 6d 00 	lds	r24, 0x006D
     f76:	90 91 6e 00 	lds	r25, 0x006E
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	29 f0       	breq	.+10     	; 0xf88 <__vector_11+0x40>
	{
		gv_OVFCallBackFun();
     f7e:	e0 91 6d 00 	lds	r30, 0x006D
     f82:	f0 91 6e 00 	lds	r31, 0x006E
     f86:	09 95       	icall
	}
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	ff 91       	pop	r31
     f8e:	ef 91       	pop	r30
     f90:	bf 91       	pop	r27
     f92:	af 91       	pop	r26
     f94:	9f 91       	pop	r25
     f96:	8f 91       	pop	r24
     f98:	7f 91       	pop	r23
     f9a:	6f 91       	pop	r22
     f9c:	5f 91       	pop	r21
     f9e:	4f 91       	pop	r20
     fa0:	3f 91       	pop	r19
     fa2:	2f 91       	pop	r18
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <TIM0_u8Deinit>:

ErrorState_t TIM0_u8Deinit(void)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	ErrorState_t u8ErrorState = TIM0_OK;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
	if (gst_TIM0Config != NULL)
     fbc:	80 91 6b 00 	lds	r24, 0x006B
     fc0:	90 91 6c 00 	lds	r25, 0x006C
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	41 f0       	breq	.+16     	; 0xfd8 <TIM0_u8Deinit+0x2a>
	{
		// Setting the control register of the timer to its reset value which stop the timer and deintialize it
		TCCR0_REG = 0;
     fc8:	e3 e5       	ldi	r30, 0x53	; 83
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	10 82       	st	Z, r1
		// making the TIM0 config pointing to NULL indicating that there no configuration active for this timer
		gst_TIM0Config = NULL;
     fce:	10 92 6c 00 	sts	0x006C, r1
     fd2:	10 92 6b 00 	sts	0x006B, r1
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <TIM0_u8Deinit+0x2e>
	}else
	{
		u8ErrorState = TIM0_NOT_INITILIZED;
     fd8:	8e ef       	ldi	r24, 0xFE	; 254
     fda:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
}
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <I2C_u8Init>:
static volatile uint8_t gu8_I2CState= I2C_NO_INFO;



uint8_t I2C_u8Init()
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = I2C_OK;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	89 83       	std	Y+1, r24	; 0x01

	//Set the clock rate of the I2C bus
	TWBR_REG = I2C_400KHZ;
     ff4:	e0 e2       	ldi	r30, 0x20	; 32
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	88 e4       	ldi	r24, 0x48	; 72
     ffa:	80 83       	st	Z, r24
	//Set the slave address which it will respond to
	TWAR_REG =I2C_OWN_SLAVE_ADDRESS;
     ffc:	e2 e2       	ldi	r30, 0x22	; 34
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	80 83       	st	Z, r24
	//Enable the ACK
	SET_BIT(TWCR_REG,TWEA_BIT);
    1004:	a6 e5       	ldi	r26, 0x56	; 86
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e6 e5       	ldi	r30, 0x56	; 86
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 64       	ori	r24, 0x40	; 64
    1010:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWIE_BIT);
    1012:	a6 e5       	ldi	r26, 0x56	; 86
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e6 e5       	ldi	r30, 0x56	; 86
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	81 60       	ori	r24, 0x01	; 1
    101e:	8c 93       	st	X, r24
	SET_BIT(SREG_REG,I_BIT);
    1020:	af e5       	ldi	r26, 0x5F	; 95
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ef e5       	ldi	r30, 0x5F	; 95
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	80 68       	ori	r24, 0x80	; 128
    102c:	8c 93       	st	X, r24
	//Enable the I2C Peripheral
	SET_BIT(TWCR_REG,TWEN_BIT);
    102e:	a6 e5       	ldi	r26, 0x56	; 86
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e6 e5       	ldi	r30, 0x56	; 86
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	84 60       	ori	r24, 0x04	; 4
    103a:	8c 93       	st	X, r24


	return u8ErrorState;
    103c:	89 81       	ldd	r24, Y+1	; 0x01
}
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <I2C_u8GetStatus>:


uint8_t I2C_u8GetStatus(void)
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
	return TWSR_REG & I2C_PRESCALAR_MASK;
    104e:	e1 e2       	ldi	r30, 0x21	; 33
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	88 7f       	andi	r24, 0xF8	; 248
}
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <I2C_u8MasterSendSLA>:

uint8_t I2C_u8MasterSendSLA(uint8_t u8SlaveAddress,uint8_t u8MasterOperation)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <I2C_u8MasterSendSLA+0x6>
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	8a 83       	std	Y+2, r24	; 0x02
    106a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState= I2C_OK;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	89 83       	std	Y+1, r24	; 0x01
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    1070:	e6 e5       	ldi	r30, 0x56	; 86
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	88 23       	and	r24, r24
    1078:	dc f7       	brge	.-10     	; 0x1070 <I2C_u8MasterSendSLA+0x14>
		if (gu8_I2CState==I2C_MT_START_TRANSMITTED||gu8_I2CState==I2C_MT_REPEATED_START_TRANSMITTED)
    107a:	80 91 64 00 	lds	r24, 0x0064
    107e:	88 30       	cpi	r24, 0x08	; 8
    1080:	21 f0       	breq	.+8      	; 0x108a <I2C_u8MasterSendSLA+0x2e>
    1082:	80 91 64 00 	lds	r24, 0x0064
    1086:	80 31       	cpi	r24, 0x10	; 16
    1088:	71 f4       	brne	.+28     	; 0x10a6 <I2C_u8MasterSendSLA+0x4a>
		{//if it is state that the start condition is successfully sent then load the slave address in the data register and set the mode to write
			TWDR_REG = (u8SlaveAddress|u8MasterOperation);
    108a:	e3 e2       	ldi	r30, 0x23	; 35
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	89 2b       	or	r24, r25
    1094:	80 83       	st	Z, r24
			// Clear the interrupt flag to start the next action by the peripheral
			ASSIGN_HIGH_NIB(TWCR_REG,I2C_CLR_INTERRUPT_FLAG);
    1096:	a6 e5       	ldi	r26, 0x56	; 86
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e6 e5       	ldi	r30, 0x56	; 86
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8f 70       	andi	r24, 0x0F	; 15
    10a2:	80 68       	ori	r24, 0x80	; 128
    10a4:	8c 93       	st	X, r24
		}
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    10a6:	e6 e5       	ldi	r30, 0x56	; 86
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	88 23       	and	r24, r24
    10ae:	dc f7       	brge	.-10     	; 0x10a6 <I2C_u8MasterSendSLA+0x4a>

	return u8ErrorState;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <I2C_u8MasterSendByte>:


uint8_t I2C_u8MasterSendByte(uint8_t u8Data)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <I2C_u8MasterSendByte+0x6>
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = I2C_OK;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	89 83       	std	Y+1, r24	; 0x01

	//Load the data in the I2C Data Register
	TWDR_REG= u8Data;
    10ce:	e3 e2       	ldi	r30, 0x23	; 35
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	80 83       	st	Z, r24
	// Clear the interrupt flag to start the next action by the peripheral
	ASSIGN_HIGH_NIB(TWCR_REG,I2C_CLR_INTERRUPT_FLAG);
    10d6:	a6 e5       	ldi	r26, 0x56	; 86
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e6 e5       	ldi	r30, 0x56	; 86
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8f 70       	andi	r24, 0x0F	; 15
    10e2:	80 68       	ori	r24, 0x80	; 128
    10e4:	8c 93       	st	X, r24
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    10e6:	e6 e5       	ldi	r30, 0x56	; 86
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	88 23       	and	r24, r24
    10ee:	dc f7       	brge	.-10     	; 0x10e6 <I2C_u8MasterSendByte+0x28>
	//wait until the byte is sent
	return u8ErrorState;
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <I2C_u8MasterSendStart>:

uint8_t I2C_u8MasterSendStart(void)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	0f 92       	push	r0
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState=I2C_OK;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01
	if (gu8_I2CState==I2C_NO_INFO)
    110a:	80 91 64 00 	lds	r24, 0x0064
    110e:	88 3f       	cpi	r24, 0xF8	; 248
    1110:	69 f4       	brne	.+26     	; 0x112c <I2C_u8MasterSendStart+0x30>
	{// if it is the first communication or after stop condition

		//Send the Start Condition
		SET_BIT(TWCR_REG,TWSTA_BIT);
    1112:	a6 e5       	ldi	r26, 0x56	; 86
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e6 e5       	ldi	r30, 0x56	; 86
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	80 62       	ori	r24, 0x20	; 32
    111e:	8c 93       	st	X, r24
		//Wait until it is sent
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    1120:	e6 e5       	ldi	r30, 0x56	; 86
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	88 23       	and	r24, r24
    1128:	dc f7       	brge	.-10     	; 0x1120 <I2C_u8MasterSendStart+0x24>
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <I2C_u8MasterSendStart+0x34>

	}else
	{
		u8ErrorState= I2C_ILLEGAL_START;
    112c:	86 e0       	ldi	r24, 0x06	; 6
    112e:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
}
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <I2C_u8SendRepeatedStart>:

uint8_t I2C_u8SendRepeatedStart(void)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	0f 92       	push	r0
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = I2C_OK;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	89 83       	std	Y+1, r24	; 0x01
//	uint8_t u8I2CState= I2C_u8GetStatus();
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    1148:	e6 e5       	ldi	r30, 0x56	; 86
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	88 23       	and	r24, r24
    1150:	dc f7       	brge	.-10     	; 0x1148 <I2C_u8SendRepeatedStart+0xe>

	if (gu8_I2CState==I2C_MT_DATA_TRANSMITTED_ACK || gu8_I2CState==I2C_MT_DATA_TRANSMITTED_NACK)
    1152:	80 91 64 00 	lds	r24, 0x0064
    1156:	88 32       	cpi	r24, 0x28	; 40
    1158:	21 f0       	breq	.+8      	; 0x1162 <I2C_u8SendRepeatedStart+0x28>
    115a:	80 91 64 00 	lds	r24, 0x0064
    115e:	80 33       	cpi	r24, 0x30	; 48
    1160:	49 f4       	brne	.+18     	; 0x1174 <I2C_u8SendRepeatedStart+0x3a>
	{// if the current state is the data byte is sent
		//Then send the Repeated start condition and clear the interrupt flag to send it
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_START_CONDITION);
    1162:	a6 e5       	ldi	r26, 0x56	; 86
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e6 e5       	ldi	r30, 0x56	; 86
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	8f 70       	andi	r24, 0x0F	; 15
    116e:	80 6a       	ori	r24, 0xA0	; 160
    1170:	8c 93       	st	X, r24
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <I2C_u8SendRepeatedStart+0x3e>
	}else
	{
		// if not update the error state to indicate that the start condition can not be send here
		u8ErrorState = I2C_START_WRONG_PLACE;
    1174:	85 e0       	ldi	r24, 0x05	; 5
    1176:	89 83       	std	Y+1, r24	; 0x01
	}


	return u8ErrorState;
    1178:	89 81       	ldd	r24, Y+1	; 0x01
}
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <I2C_u8MasterReceiveWithACK>:


uint8_t I2C_u8MasterReceiveWithACK(uint8_t* pu8Data)
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <I2C_u8MasterReceiveWithACK+0x6>
    1188:	0f 92       	push	r0
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	9b 83       	std	Y+3, r25	; 0x03
    1190:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState=I2C_OK;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	89 83       	std	Y+1, r24	; 0x01
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    1196:	e6 e5       	ldi	r30, 0x56	; 86
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	88 23       	and	r24, r24
    119e:	dc f7       	brge	.-10     	; 0x1196 <I2C_u8MasterReceiveWithACK+0x14>
	if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_ACK||gu8_I2CState==I2C_MR_DATA_RECEIVED_ACK)
    11a0:	80 91 64 00 	lds	r24, 0x0064
    11a4:	80 34       	cpi	r24, 0x40	; 64
    11a6:	21 f0       	breq	.+8      	; 0x11b0 <I2C_u8MasterReceiveWithACK+0x2e>
    11a8:	80 91 64 00 	lds	r24, 0x0064
    11ac:	80 35       	cpi	r24, 0x50	; 80
    11ae:	a1 f4       	brne	.+40     	; 0x11d8 <I2C_u8MasterReceiveWithACK+0x56>
	{
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_RECEIVE_WITH_ACK);
    11b0:	a6 e5       	ldi	r26, 0x56	; 86
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e6 e5       	ldi	r30, 0x56	; 86
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	8f 70       	andi	r24, 0x0F	; 15
    11bc:	80 6c       	ori	r24, 0xC0	; 192
    11be:	8c 93       	st	X, r24
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    11c0:	e6 e5       	ldi	r30, 0x56	; 86
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	88 23       	and	r24, r24
    11c8:	dc f7       	brge	.-10     	; 0x11c0 <I2C_u8MasterReceiveWithACK+0x3e>
		*pu8Data=TWDR_REG;
    11ca:	e3 e2       	ldi	r30, 0x23	; 35
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	ea 81       	ldd	r30, Y+2	; 0x02
    11d2:	fb 81       	ldd	r31, Y+3	; 0x03
    11d4:	80 83       	st	Z, r24
    11d6:	0e c0       	rjmp	.+28     	; 0x11f4 <I2C_u8MasterReceiveWithACK+0x72>

	}else if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_NACK)
    11d8:	80 91 64 00 	lds	r24, 0x0064
    11dc:	88 34       	cpi	r24, 0x48	; 72
    11de:	51 f4       	brne	.+20     	; 0x11f4 <I2C_u8MasterReceiveWithACK+0x72>
	{
		u8ErrorState= I2C_SLAVE_NOT_AVLBL;
    11e0:	87 e0       	ldi	r24, 0x07	; 7
    11e2:	89 83       	std	Y+1, r24	; 0x01
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_STOP_CONDITION);
    11e4:	a6 e5       	ldi	r26, 0x56	; 86
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e6 e5       	ldi	r30, 0x56	; 86
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	8f 70       	andi	r24, 0x0F	; 15
    11f0:	80 69       	ori	r24, 0x90	; 144
    11f2:	8c 93       	st	X, r24
	}
	return u8ErrorState;
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <I2C_u8MasterReceiveWithNAK>:

uint8_t I2C_u8MasterReceiveWithNAK(uint8_t* pu8Data)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <I2C_u8MasterReceiveWithNAK+0x6>
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	9b 83       	std	Y+3, r25	; 0x03
    1210:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState=I2C_OK;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	89 83       	std	Y+1, r24	; 0x01
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    1216:	e6 e5       	ldi	r30, 0x56	; 86
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	88 23       	and	r24, r24
    121e:	dc f7       	brge	.-10     	; 0x1216 <I2C_u8MasterReceiveWithNAK+0x14>
	if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_ACK||gu8_I2CState==I2C_MR_DATA_RECEIVED_ACK)
    1220:	80 91 64 00 	lds	r24, 0x0064
    1224:	80 34       	cpi	r24, 0x40	; 64
    1226:	21 f0       	breq	.+8      	; 0x1230 <I2C_u8MasterReceiveWithNAK+0x2e>
    1228:	80 91 64 00 	lds	r24, 0x0064
    122c:	80 35       	cpi	r24, 0x50	; 80
    122e:	a1 f4       	brne	.+40     	; 0x1258 <I2C_u8MasterReceiveWithNAK+0x56>
	{
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_CLR_INTERRUPT_FLAG);
    1230:	a6 e5       	ldi	r26, 0x56	; 86
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e6 e5       	ldi	r30, 0x56	; 86
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8f 70       	andi	r24, 0x0F	; 15
    123c:	80 68       	ori	r24, 0x80	; 128
    123e:	8c 93       	st	X, r24
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    1240:	e6 e5       	ldi	r30, 0x56	; 86
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	88 23       	and	r24, r24
    1248:	dc f7       	brge	.-10     	; 0x1240 <I2C_u8MasterReceiveWithNAK+0x3e>
		*pu8Data=TWDR_REG;
    124a:	e3 e2       	ldi	r30, 0x23	; 35
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	ea 81       	ldd	r30, Y+2	; 0x02
    1252:	fb 81       	ldd	r31, Y+3	; 0x03
    1254:	80 83       	st	Z, r24
    1256:	0e c0       	rjmp	.+28     	; 0x1274 <I2C_u8MasterReceiveWithNAK+0x72>

	}else if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_NACK)
    1258:	80 91 64 00 	lds	r24, 0x0064
    125c:	88 34       	cpi	r24, 0x48	; 72
    125e:	51 f4       	brne	.+20     	; 0x1274 <I2C_u8MasterReceiveWithNAK+0x72>
	{
		u8ErrorState= I2C_SLAVE_NOT_AVLBL;
    1260:	87 e0       	ldi	r24, 0x07	; 7
    1262:	89 83       	std	Y+1, r24	; 0x01
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_STOP_CONDITION);
    1264:	a6 e5       	ldi	r26, 0x56	; 86
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e6 e5       	ldi	r30, 0x56	; 86
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8f 70       	andi	r24, 0x0F	; 15
    1270:	80 69       	ori	r24, 0x90	; 144
    1272:	8c 93       	st	X, r24
	}

	return u8ErrorState;
    1274:	89 81       	ldd	r24, Y+1	; 0x01
}
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <I2C_u8Stop>:

uint8_t I2C_u8Stop(void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	0f 92       	push	r0
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = I2C_OK;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	89 83       	std	Y+1, r24	; 0x01
	//uint8_t u8I2CState= I2C_u8GetStatus();

	if (gu8_I2CState!=I2C_MT_START_TRANSMITTED || gu8_I2CState==I2C_MT_REPEATED_START_TRANSMITTED)
    1290:	80 91 64 00 	lds	r24, 0x0064
    1294:	88 30       	cpi	r24, 0x08	; 8
    1296:	21 f4       	brne	.+8      	; 0x12a0 <I2C_u8Stop+0x1e>
    1298:	80 91 64 00 	lds	r24, 0x0064
    129c:	80 31       	cpi	r24, 0x10	; 16
    129e:	49 f4       	brne	.+18     	; 0x12b2 <I2C_u8Stop+0x30>
	{// if the current state is not after a start condition

		//Then send the stop condition and clear the interrupt flag to send it
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_STOP_CONDITION);
    12a0:	a6 e5       	ldi	r26, 0x56	; 86
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e6 e5       	ldi	r30, 0x56	; 86
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 70       	andi	r24, 0x0F	; 15
    12ac:	80 69       	ori	r24, 0x90	; 144
    12ae:	8c 93       	st	X, r24
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <I2C_u8Stop+0x34>
	}else
	{
		// if not update the error state to indicate that the start condition can not be send here
		u8ErrorState = I2C_START_WRONG_PLACE;
    12b2:	85 e0       	ldi	r24, 0x05	; 5
    12b4:	89 83       	std	Y+1, r24	; 0x01
	}
	gu8_I2CState=I2C_NO_INFO;
    12b6:	88 ef       	ldi	r24, 0xF8	; 248
    12b8:	80 93 64 00 	sts	0x0064, r24


	return u8ErrorState;
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <I2C_u8SlaveGetByte>:

uint8_t I2C_u8SlaveGetByte(uint8_t* pu8Reading)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <I2C_u8SlaveGetByte+0x6>
    12cc:	0f 92       	push	r0
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until the Device is addressed*/
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    12d6:	e6 e5       	ldi	r30, 0x56	; 86
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	88 23       	and	r24, r24
    12de:	dc f7       	brge	.-10     	; 0x12d6 <I2C_u8SlaveGetByte+0x10>
	/*Assign the high nibble of the I2C control register with value that will make it send a NACK after receiving data*/
	ASSIGN_HIGH_NIB(TWCR_REG,I2C_RECEIVE_WITH_ACK);
    12e0:	a6 e5       	ldi	r26, 0x56	; 86
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e6 e5       	ldi	r30, 0x56	; 86
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	8f 70       	andi	r24, 0x0F	; 15
    12ec:	80 6c       	ori	r24, 0xC0	; 192
    12ee:	8c 93       	st	X, r24
	while (!(gu8_I2CState==I2C_SR_DATA_RECIEVED ||gu8_I2CState==I2C_SR_LAST_BYTE_RECIEVED ) );
    12f0:	80 91 64 00 	lds	r24, 0x0064
    12f4:	80 38       	cpi	r24, 0x80	; 128
    12f6:	21 f0       	breq	.+8      	; 0x1300 <I2C_u8SlaveGetByte+0x3a>
    12f8:	80 91 64 00 	lds	r24, 0x0064
    12fc:	88 38       	cpi	r24, 0x88	; 136
    12fe:	c1 f7       	brne	.-16     	; 0x12f0 <I2C_u8SlaveGetByte+0x2a>
	ASSIGN_HIGH_NIB(TWCR_REG,I2C_RECOGNIZE_SLA_WITH_ACK);
    1300:	a6 e5       	ldi	r26, 0x56	; 86
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e6 e5       	ldi	r30, 0x56	; 86
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8f 70       	andi	r24, 0x0F	; 15
    130c:	80 6c       	ori	r24, 0xC0	; 192
    130e:	8c 93       	st	X, r24
	gu8_I2CState=I2C_NO_INFO;
    1310:	88 ef       	ldi	r24, 0xF8	; 248
    1312:	80 93 64 00 	sts	0x0064, r24
	*pu8Reading= TWDR_REG;
    1316:	e3 e2       	ldi	r30, 0x23	; 35
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	e9 81       	ldd	r30, Y+1	; 0x01
    131e:	fa 81       	ldd	r31, Y+2	; 0x02
    1320:	80 83       	st	Z, r24
}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <__vector_19>:



void __vector_19(void) {
    132e:	1f 92       	push	r1
    1330:	0f 92       	push	r0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	0f 92       	push	r0
    1336:	11 24       	eor	r1, r1
    1338:	8f 93       	push	r24
    133a:	ef 93       	push	r30
    133c:	ff 93       	push	r31
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
	gu8_I2CState=TWSR_REG & I2C_PRESCALAR_MASK;
    1346:	e1 e2       	ldi	r30, 0x21	; 33
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	88 7f       	andi	r24, 0xF8	; 248
    134e:	80 93 64 00 	sts	0x0064, r24
}
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	ff 91       	pop	r31
    1358:	ef 91       	pop	r30
    135a:	8f 91       	pop	r24
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	0f 90       	pop	r0
    1362:	1f 90       	pop	r1
    1364:	18 95       	reti

00001366 <DIO_u8SetPinDirection>:
 *  255 : Wrong PIN Number
 *  254 : Wrong PORT Number
 *  253:  Wrong Direction
 */
DIO_ErrorState_t DIO_u8SetPinDirection(DIOPort_t u8_PortName,DIOPin_t u8_PinNum,DIODir_t u8_PinDir)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	2e 97       	sbiw	r28, 0x0e	; 14
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	8a 83       	std	Y+2, r24	; 0x02
    137c:	6b 83       	std	Y+3, r22	; 0x03
    137e:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorState_t u8ErrorState= DIO_OK;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	89 83       	std	Y+1, r24	; 0x01

	/*Check if the inputs are in the right range*/
	if (u8_PinNum<DIO_PINS_NUMBER)
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	88 30       	cpi	r24, 0x08	; 8
    1388:	08 f0       	brcs	.+2      	; 0x138c <DIO_u8SetPinDirection+0x26>
    138a:	2d c2       	rjmp	.+1114   	; 0x17e6 <DIO_u8SetPinDirection+0x480>
	{
		/*Check which port */
		switch (u8_PortName)
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	3e 87       	std	Y+14, r19	; 0x0e
    1394:	2d 87       	std	Y+13, r18	; 0x0d
    1396:	8d 85       	ldd	r24, Y+13	; 0x0d
    1398:	9e 85       	ldd	r25, Y+14	; 0x0e
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <DIO_u8SetPinDirection+0x3c>
    13a0:	99 c0       	rjmp	.+306    	; 0x14d4 <DIO_u8SetPinDirection+0x16e>
    13a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    13a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    13a6:	22 30       	cpi	r18, 0x02	; 2
    13a8:	31 05       	cpc	r19, r1
    13aa:	2c f4       	brge	.+10     	; 0x13b6 <DIO_u8SetPinDirection+0x50>
    13ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	71 f0       	breq	.+28     	; 0x13d0 <DIO_u8SetPinDirection+0x6a>
    13b4:	15 c2       	rjmp	.+1066   	; 0x17e0 <DIO_u8SetPinDirection+0x47a>
    13b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    13b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <DIO_u8SetPinDirection+0x5c>
    13c0:	0b c1       	rjmp	.+534    	; 0x15d8 <DIO_u8SetPinDirection+0x272>
    13c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <DIO_u8SetPinDirection+0x68>
    13cc:	87 c1       	rjmp	.+782    	; 0x16dc <DIO_u8SetPinDirection+0x376>
    13ce:	08 c2       	rjmp	.+1040   	; 0x17e0 <DIO_u8SetPinDirection+0x47a>
		{
			case PORTA:
				/*Check which Direction the user wants the pin to be in */
				switch (u8_PinDir)
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3c 87       	std	Y+12, r19	; 0x0c
    13d8:	2b 87       	std	Y+11, r18	; 0x0b
    13da:	8b 85       	ldd	r24, Y+11	; 0x0b
    13dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	99 f1       	breq	.+102    	; 0x144a <DIO_u8SetPinDirection+0xe4>
    13e4:	2b 85       	ldd	r18, Y+11	; 0x0b
    13e6:	3c 85       	ldd	r19, Y+12	; 0x0c
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <DIO_u8SetPinDirection+0x8a>
    13ee:	5b c0       	rjmp	.+182    	; 0x14a6 <DIO_u8SetPinDirection+0x140>
    13f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	09 f0       	breq	.+2      	; 0x13fa <DIO_u8SetPinDirection+0x94>
    13f8:	6a c0       	rjmp	.+212    	; 0x14ce <DIO_u8SetPinDirection+0x168>
				{
				case DIO_INPUT:
					// for input tristate mode ({DDxn, PORTxn} = 0b00)
					CLR_BIT(DDRA_REG,u8_PinNum);
    13fa:	aa e3       	ldi	r26, 0x3A	; 58
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	ea e3       	ldi	r30, 0x3A	; 58
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_u8SetPinDirection+0xb0>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	2a 95       	dec	r18
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_u8SetPinDirection+0xac>
    141a:	80 95       	com	r24
    141c:	84 23       	and	r24, r20
    141e:	8c 93       	st	X, r24
					CLR_BIT(PORTA_REG,u8_PinNum);
    1420:	ab e3       	ldi	r26, 0x3B	; 59
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	eb e3       	ldi	r30, 0x3B	; 59
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_u8SetPinDirection+0xd8>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_u8SetPinDirection+0xd4>
    1442:	80 95       	com	r24
    1444:	84 23       	and	r24, r20
    1446:	8c 93       	st	X, r24
    1448:	d0 c1       	rjmp	.+928    	; 0x17ea <DIO_u8SetPinDirection+0x484>
					break;
				case DIO_INPUT_PULLUP:
					// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
					CLR_BIT(SFIOR_REG,PUD_BIT);
    144a:	a0 e5       	ldi	r26, 0x50	; 80
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e0 e5       	ldi	r30, 0x50	; 80
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	8b 7f       	andi	r24, 0xFB	; 251
    1456:	8c 93       	st	X, r24
					CLR_BIT(DDRA_REG,u8_PinNum);
    1458:	aa e3       	ldi	r26, 0x3A	; 58
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ea e3       	ldi	r30, 0x3A	; 58
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_u8SetPinDirection+0x10e>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	2a 95       	dec	r18
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_u8SetPinDirection+0x10a>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
					SET_BIT(PORTA_REG,u8_PinNum);
    147e:	ab e3       	ldi	r26, 0x3B	; 59
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	eb e3       	ldi	r30, 0x3B	; 59
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_u8SetPinDirection+0x136>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_u8SetPinDirection+0x132>
    14a0:	84 2b       	or	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	a2 c1       	rjmp	.+836    	; 0x17ea <DIO_u8SetPinDirection+0x484>
					break;
				case DIO_OUTPUT:
					// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
					SET_BIT(DDRA_REG,u8_PinNum);
    14a6:	aa e3       	ldi	r26, 0x3A	; 58
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ea e3       	ldi	r30, 0x3A	; 58
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_u8SetPinDirection+0x15e>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_u8SetPinDirection+0x15a>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	8e c1       	rjmp	.+796    	; 0x17ea <DIO_u8SetPinDirection+0x484>
					break;
				default:
					// If the input state is not one of the above cases return error state NOK
					u8ErrorState= WRONG_DIR;
    14ce:	8d ef       	ldi	r24, 0xFD	; 253
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	8b c1       	rjmp	.+790    	; 0x17ea <DIO_u8SetPinDirection+0x484>
				}
				break;
			case PORTB:
				/*Check if the inputs are in the right range*/
				switch (u8_PinDir)
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	3a 87       	std	Y+10, r19	; 0x0a
    14dc:	29 87       	std	Y+9, r18	; 0x09
    14de:	89 85       	ldd	r24, Y+9	; 0x09
    14e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	91 05       	cpc	r25, r1
    14e6:	99 f1       	breq	.+102    	; 0x154e <DIO_u8SetPinDirection+0x1e8>
    14e8:	29 85       	ldd	r18, Y+9	; 0x09
    14ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <DIO_u8SetPinDirection+0x18e>
    14f2:	5b c0       	rjmp	.+182    	; 0x15aa <DIO_u8SetPinDirection+0x244>
    14f4:	89 85       	ldd	r24, Y+9	; 0x09
    14f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	09 f0       	breq	.+2      	; 0x14fe <DIO_u8SetPinDirection+0x198>
    14fc:	6a c0       	rjmp	.+212    	; 0x15d2 <DIO_u8SetPinDirection+0x26c>
				{
				case DIO_INPUT:
					// for input tristate mode ({DDxn, PORTxn} = 0b00)
					CLR_BIT(DDRB_REG,u8_PinNum);
    14fe:	a7 e3       	ldi	r26, 0x37	; 55
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e7 e3       	ldi	r30, 0x37	; 55
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_u8SetPinDirection+0x1b4>
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	2a 95       	dec	r18
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_u8SetPinDirection+0x1b0>
    151e:	80 95       	com	r24
    1520:	84 23       	and	r24, r20
    1522:	8c 93       	st	X, r24
					CLR_BIT(PORTB_REG,u8_PinNum);
    1524:	a8 e3       	ldi	r26, 0x38	; 56
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e8 e3       	ldi	r30, 0x38	; 56
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_u8SetPinDirection+0x1dc>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DIO_u8SetPinDirection+0x1d8>
    1546:	80 95       	com	r24
    1548:	84 23       	and	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	4e c1       	rjmp	.+668    	; 0x17ea <DIO_u8SetPinDirection+0x484>
					break;
				case DIO_INPUT_PULLUP:
					// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
					CLR_BIT(SFIOR_REG,PUD_BIT);
    154e:	a0 e5       	ldi	r26, 0x50	; 80
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e0 e5       	ldi	r30, 0x50	; 80
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	8b 7f       	andi	r24, 0xFB	; 251
    155a:	8c 93       	st	X, r24
					CLR_BIT(DDRB_REG,u8_PinNum);
    155c:	a7 e3       	ldi	r26, 0x37	; 55
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e7 e3       	ldi	r30, 0x37	; 55
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <DIO_u8SetPinDirection+0x212>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	2a 95       	dec	r18
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <DIO_u8SetPinDirection+0x20e>
    157c:	80 95       	com	r24
    157e:	84 23       	and	r24, r20
    1580:	8c 93       	st	X, r24
					SET_BIT(PORTB_REG,u8_PinNum);
    1582:	a8 e3       	ldi	r26, 0x38	; 56
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e8 e3       	ldi	r30, 0x38	; 56
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_u8SetPinDirection+0x23a>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_u8SetPinDirection+0x236>
    15a4:	84 2b       	or	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	20 c1       	rjmp	.+576    	; 0x17ea <DIO_u8SetPinDirection+0x484>
					break;
				case DIO_OUTPUT:
					// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
					SET_BIT(DDRB_REG,u8_PinNum);
    15aa:	a7 e3       	ldi	r26, 0x37	; 55
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e7 e3       	ldi	r30, 0x37	; 55
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_u8SetPinDirection+0x262>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_u8SetPinDirection+0x25e>
    15cc:	84 2b       	or	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	0c c1       	rjmp	.+536    	; 0x17ea <DIO_u8SetPinDirection+0x484>
					break;
				default:
					// If the input state is not one of the above cases return error state NOK
					u8ErrorState= WRONG_DIR;
    15d2:	8d ef       	ldi	r24, 0xFD	; 253
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	09 c1       	rjmp	.+530    	; 0x17ea <DIO_u8SetPinDirection+0x484>
				}
				break;
			case PORTC:
				switch (u8_PinDir)
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	38 87       	std	Y+8, r19	; 0x08
    15e0:	2f 83       	std	Y+7, r18	; 0x07
    15e2:	8f 81       	ldd	r24, Y+7	; 0x07
    15e4:	98 85       	ldd	r25, Y+8	; 0x08
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	91 05       	cpc	r25, r1
    15ea:	99 f1       	breq	.+102    	; 0x1652 <DIO_u8SetPinDirection+0x2ec>
    15ec:	2f 81       	ldd	r18, Y+7	; 0x07
    15ee:	38 85       	ldd	r19, Y+8	; 0x08
    15f0:	22 30       	cpi	r18, 0x02	; 2
    15f2:	31 05       	cpc	r19, r1
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <DIO_u8SetPinDirection+0x292>
    15f6:	5b c0       	rjmp	.+182    	; 0x16ae <DIO_u8SetPinDirection+0x348>
    15f8:	8f 81       	ldd	r24, Y+7	; 0x07
    15fa:	98 85       	ldd	r25, Y+8	; 0x08
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	09 f0       	breq	.+2      	; 0x1602 <DIO_u8SetPinDirection+0x29c>
    1600:	6a c0       	rjmp	.+212    	; 0x16d6 <DIO_u8SetPinDirection+0x370>
				{
				case DIO_INPUT:
					// for input tristate mode ({DDxn, PORTxn} = 0b00)
					CLR_BIT(DDRC_REG,u8_PinNum);
    1602:	a4 e3       	ldi	r26, 0x34	; 52
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e4 e3       	ldi	r30, 0x34	; 52
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 c0       	rjmp	.+4      	; 0x161e <DIO_u8SetPinDirection+0x2b8>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	2a 95       	dec	r18
    1620:	e2 f7       	brpl	.-8      	; 0x161a <DIO_u8SetPinDirection+0x2b4>
    1622:	80 95       	com	r24
    1624:	84 23       	and	r24, r20
    1626:	8c 93       	st	X, r24
					CLR_BIT(PORTC_REG,u8_PinNum);
    1628:	a5 e3       	ldi	r26, 0x35	; 53
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e5 e3       	ldi	r30, 0x35	; 53
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_u8SetPinDirection+0x2e0>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DIO_u8SetPinDirection+0x2dc>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	cc c0       	rjmp	.+408    	; 0x17ea <DIO_u8SetPinDirection+0x484>
					break;
				case DIO_INPUT_PULLUP:
					// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
					CLR_BIT(SFIOR_REG,PUD_BIT);
    1652:	a0 e5       	ldi	r26, 0x50	; 80
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e0 e5       	ldi	r30, 0x50	; 80
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	8b 7f       	andi	r24, 0xFB	; 251
    165e:	8c 93       	st	X, r24
					CLR_BIT(DDRC_REG,u8_PinNum);
    1660:	a4 e3       	ldi	r26, 0x34	; 52
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e4 e3       	ldi	r30, 0x34	; 52
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	48 2f       	mov	r20, r24
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 c0       	rjmp	.+4      	; 0x167c <DIO_u8SetPinDirection+0x316>
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	2a 95       	dec	r18
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <DIO_u8SetPinDirection+0x312>
    1680:	80 95       	com	r24
    1682:	84 23       	and	r24, r20
    1684:	8c 93       	st	X, r24
					SET_BIT(PORTC_REG,u8_PinNum);
    1686:	a5 e3       	ldi	r26, 0x35	; 53
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e5 e3       	ldi	r30, 0x35	; 53
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	48 2f       	mov	r20, r24
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 2e       	mov	r0, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <DIO_u8SetPinDirection+0x33e>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	0a 94       	dec	r0
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <DIO_u8SetPinDirection+0x33a>
    16a8:	84 2b       	or	r24, r20
    16aa:	8c 93       	st	X, r24
    16ac:	9e c0       	rjmp	.+316    	; 0x17ea <DIO_u8SetPinDirection+0x484>
					break;
				case DIO_OUTPUT:
					// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
					SET_BIT(DDRC_REG,u8_PinNum);
    16ae:	a4 e3       	ldi	r26, 0x34	; 52
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e4 e3       	ldi	r30, 0x34	; 52
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <DIO_u8SetPinDirection+0x366>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <DIO_u8SetPinDirection+0x362>
    16d0:	84 2b       	or	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	8a c0       	rjmp	.+276    	; 0x17ea <DIO_u8SetPinDirection+0x484>
					break;
				default:
					// If the input state is not one of the above cases return error state NOK
					u8ErrorState= WRONG_DIR;
    16d6:	8d ef       	ldi	r24, 0xFD	; 253
    16d8:	89 83       	std	Y+1, r24	; 0x01
    16da:	87 c0       	rjmp	.+270    	; 0x17ea <DIO_u8SetPinDirection+0x484>
				}
				break;
			case PORTD:
				switch (u8_PinDir)
    16dc:	8c 81       	ldd	r24, Y+4	; 0x04
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	3e 83       	std	Y+6, r19	; 0x06
    16e4:	2d 83       	std	Y+5, r18	; 0x05
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	91 05       	cpc	r25, r1
    16ee:	99 f1       	breq	.+102    	; 0x1756 <DIO_u8SetPinDirection+0x3f0>
    16f0:	2d 81       	ldd	r18, Y+5	; 0x05
    16f2:	3e 81       	ldd	r19, Y+6	; 0x06
    16f4:	22 30       	cpi	r18, 0x02	; 2
    16f6:	31 05       	cpc	r19, r1
    16f8:	09 f4       	brne	.+2      	; 0x16fc <DIO_u8SetPinDirection+0x396>
    16fa:	5b c0       	rjmp	.+182    	; 0x17b2 <DIO_u8SetPinDirection+0x44c>
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	09 f0       	breq	.+2      	; 0x1706 <DIO_u8SetPinDirection+0x3a0>
    1704:	6a c0       	rjmp	.+212    	; 0x17da <DIO_u8SetPinDirection+0x474>
				{
				case DIO_INPUT:
					// for input tristate mode ({DDxn, PORTxn} = 0b00)
					CLR_BIT(DDRD_REG,u8_PinNum);
    1706:	a1 e3       	ldi	r26, 0x31	; 49
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e1 e3       	ldi	r30, 0x31	; 49
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_u8SetPinDirection+0x3bc>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	2a 95       	dec	r18
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_u8SetPinDirection+0x3b8>
    1726:	80 95       	com	r24
    1728:	84 23       	and	r24, r20
    172a:	8c 93       	st	X, r24
					CLR_BIT(PORTA_REG,u8_PinNum);
    172c:	ab e3       	ldi	r26, 0x3B	; 59
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	eb e3       	ldi	r30, 0x3B	; 59
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_u8SetPinDirection+0x3e4>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <DIO_u8SetPinDirection+0x3e0>
    174e:	80 95       	com	r24
    1750:	84 23       	and	r24, r20
    1752:	8c 93       	st	X, r24
    1754:	4a c0       	rjmp	.+148    	; 0x17ea <DIO_u8SetPinDirection+0x484>
					break;
				case DIO_INPUT_PULLUP:
					// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
					CLR_BIT(SFIOR_REG,PUD_BIT);
    1756:	a0 e5       	ldi	r26, 0x50	; 80
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e0 e5       	ldi	r30, 0x50	; 80
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8b 7f       	andi	r24, 0xFB	; 251
    1762:	8c 93       	st	X, r24
					CLR_BIT(DDRD_REG,u8_PinNum);
    1764:	a1 e3       	ldi	r26, 0x31	; 49
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e1 e3       	ldi	r30, 0x31	; 49
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_u8SetPinDirection+0x41a>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	2a 95       	dec	r18
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_u8SetPinDirection+0x416>
    1784:	80 95       	com	r24
    1786:	84 23       	and	r24, r20
    1788:	8c 93       	st	X, r24
					SET_BIT(PORTD_REG,u8_PinNum);
    178a:	a2 e3       	ldi	r26, 0x32	; 50
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e2 e3       	ldi	r30, 0x32	; 50
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	48 2f       	mov	r20, r24
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 2e       	mov	r0, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <DIO_u8SetPinDirection+0x442>
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	0a 94       	dec	r0
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <DIO_u8SetPinDirection+0x43e>
    17ac:	84 2b       	or	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	1c c0       	rjmp	.+56     	; 0x17ea <DIO_u8SetPinDirection+0x484>
					break;
				case DIO_OUTPUT:
					// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
					SET_BIT(DDRD_REG,u8_PinNum);
    17b2:	a1 e3       	ldi	r26, 0x31	; 49
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e1 e3       	ldi	r30, 0x31	; 49
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <DIO_u8SetPinDirection+0x46a>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <DIO_u8SetPinDirection+0x466>
    17d4:	84 2b       	or	r24, r20
    17d6:	8c 93       	st	X, r24
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <DIO_u8SetPinDirection+0x484>
					break;
				default:
					// If the input state is not one of the above cases return error state NOK
					u8ErrorState= WRONG_DIR;
    17da:	8d ef       	ldi	r24, 0xFD	; 253
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <DIO_u8SetPinDirection+0x484>
				}
				break;
			default:
				// If the input port is not one of the above cases return error state NOK
				u8ErrorState= WRONG_PORT;
    17e0:	8e ef       	ldi	r24, 0xFE	; 254
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <DIO_u8SetPinDirection+0x484>
		}
	}else{
		// If the input port or input pin is not suitable return error state NOK
		u8ErrorState= WRONG_PIN;
    17e6:	8f ef       	ldi	r24, 0xFF	; 255
    17e8:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ec:	2e 96       	adiw	r28, 0x0e	; 14
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <DIO_u8SetPinData>:
 *  255 : Wrong PIN Number
 *  254 : Wrong PORT Number
 *  251:  Wrong Value
 */
DIO_ErrorState_t DIO_u8SetPinData (DIOPort_t u8_PortName,DIOPin_t u8_PinNum,uint8_t u8_PinValue)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	2e 97       	sbiw	r28, 0x0e	; 14
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	8a 83       	std	Y+2, r24	; 0x02
    1814:	6b 83       	std	Y+3, r22	; 0x03
    1816:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorState_t u8ErrorState = DIO_OK;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	89 83       	std	Y+1, r24	; 0x01
	if (u8_PinNum < DIO_PINS_NUMBER)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	88 30       	cpi	r24, 0x08	; 8
    1820:	08 f0       	brcs	.+2      	; 0x1824 <DIO_u8SetPinData+0x26>
    1822:	0d c1       	rjmp	.+538    	; 0x1a3e <DIO_u8SetPinData+0x240>
	{
		/*Check which port */
		switch(u8_PortName)
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	3e 87       	std	Y+14, r19	; 0x0e
    182c:	2d 87       	std	Y+13, r18	; 0x0d
    182e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1830:	9e 85       	ldd	r25, Y+14	; 0x0e
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	91 05       	cpc	r25, r1
    1836:	09 f4       	brne	.+2      	; 0x183a <DIO_u8SetPinData+0x3c>
    1838:	51 c0       	rjmp	.+162    	; 0x18dc <DIO_u8SetPinData+0xde>
    183a:	2d 85       	ldd	r18, Y+13	; 0x0d
    183c:	3e 85       	ldd	r19, Y+14	; 0x0e
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	2c f4       	brge	.+10     	; 0x184e <DIO_u8SetPinData+0x50>
    1844:	8d 85       	ldd	r24, Y+13	; 0x0d
    1846:	9e 85       	ldd	r25, Y+14	; 0x0e
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	71 f0       	breq	.+28     	; 0x1868 <DIO_u8SetPinData+0x6a>
    184c:	f5 c0       	rjmp	.+490    	; 0x1a38 <DIO_u8SetPinData+0x23a>
    184e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1850:	3e 85       	ldd	r19, Y+14	; 0x0e
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	09 f4       	brne	.+2      	; 0x185a <DIO_u8SetPinData+0x5c>
    1858:	7b c0       	rjmp	.+246    	; 0x1950 <DIO_u8SetPinData+0x152>
    185a:	8d 85       	ldd	r24, Y+13	; 0x0d
    185c:	9e 85       	ldd	r25, Y+14	; 0x0e
    185e:	83 30       	cpi	r24, 0x03	; 3
    1860:	91 05       	cpc	r25, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <DIO_u8SetPinData+0x68>
    1864:	af c0       	rjmp	.+350    	; 0x19c4 <DIO_u8SetPinData+0x1c6>
    1866:	e8 c0       	rjmp	.+464    	; 0x1a38 <DIO_u8SetPinData+0x23a>
		{
		case PORTA:
			switch(u8_PinValue)
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	3c 87       	std	Y+12, r19	; 0x0c
    1870:	2b 87       	std	Y+11, r18	; 0x0b
    1872:	8b 85       	ldd	r24, Y+11	; 0x0b
    1874:	9c 85       	ldd	r25, Y+12	; 0x0c
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	c9 f0       	breq	.+50     	; 0x18ac <DIO_u8SetPinData+0xae>
    187a:	2b 85       	ldd	r18, Y+11	; 0x0b
    187c:	3c 85       	ldd	r19, Y+12	; 0x0c
    187e:	21 30       	cpi	r18, 0x01	; 1
    1880:	31 05       	cpc	r19, r1
    1882:	49 f5       	brne	.+82     	; 0x18d6 <DIO_u8SetPinData+0xd8>
			{
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTA_REG,u8_PinNum);
    1884:	ab e3       	ldi	r26, 0x3B	; 59
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	eb e3       	ldi	r30, 0x3B	; 59
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_u8SetPinData+0xa4>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <DIO_u8SetPinData+0xa0>
    18a6:	84 2b       	or	r24, r20
    18a8:	8c 93       	st	X, r24
    18aa:	cb c0       	rjmp	.+406    	; 0x1a42 <DIO_u8SetPinData+0x244>
				break;
			case DIO_LOW:
				CLR_BIT(PORTA_REG,u8_PinNum);
    18ac:	ab e3       	ldi	r26, 0x3B	; 59
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	eb e3       	ldi	r30, 0x3B	; 59
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <DIO_u8SetPinData+0xcc>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <DIO_u8SetPinData+0xc8>
    18ce:	80 95       	com	r24
    18d0:	84 23       	and	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	b6 c0       	rjmp	.+364    	; 0x1a42 <DIO_u8SetPinData+0x244>
				break;
			default:
				// If not HIGH or LOW return error state WRONG_VALUE
				u8ErrorState = WRONG_VALUE;
    18d6:	8b ef       	ldi	r24, 0xFB	; 251
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	b3 c0       	rjmp	.+358    	; 0x1a42 <DIO_u8SetPinData+0x244>
			}
			break;
		case PORTB:
			switch(u8_PinValue)
    18dc:	8c 81       	ldd	r24, Y+4	; 0x04
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	3a 87       	std	Y+10, r19	; 0x0a
    18e4:	29 87       	std	Y+9, r18	; 0x09
    18e6:	89 85       	ldd	r24, Y+9	; 0x09
    18e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	c9 f0       	breq	.+50     	; 0x1920 <DIO_u8SetPinData+0x122>
    18ee:	29 85       	ldd	r18, Y+9	; 0x09
    18f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    18f2:	21 30       	cpi	r18, 0x01	; 1
    18f4:	31 05       	cpc	r19, r1
    18f6:	49 f5       	brne	.+82     	; 0x194a <DIO_u8SetPinData+0x14c>
			{
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTB_REG,u8_PinNum);
    18f8:	a8 e3       	ldi	r26, 0x38	; 56
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e8 e3       	ldi	r30, 0x38	; 56
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_u8SetPinData+0x118>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_u8SetPinData+0x114>
    191a:	84 2b       	or	r24, r20
    191c:	8c 93       	st	X, r24
    191e:	91 c0       	rjmp	.+290    	; 0x1a42 <DIO_u8SetPinData+0x244>
				break;
			case DIO_LOW:
				CLR_BIT(PORTB_REG,u8_PinNum);
    1920:	a8 e3       	ldi	r26, 0x38	; 56
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e8 e3       	ldi	r30, 0x38	; 56
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <DIO_u8SetPinData+0x140>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <DIO_u8SetPinData+0x13c>
    1942:	80 95       	com	r24
    1944:	84 23       	and	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	7c c0       	rjmp	.+248    	; 0x1a42 <DIO_u8SetPinData+0x244>
				break;
			default:
				// If not HIGH or LOW return error state WRONG_VALUE
				u8ErrorState = WRONG_VALUE;
    194a:	8b ef       	ldi	r24, 0xFB	; 251
    194c:	89 83       	std	Y+1, r24	; 0x01
    194e:	79 c0       	rjmp	.+242    	; 0x1a42 <DIO_u8SetPinData+0x244>
			}
			break;
		case PORTC:
			switch(u8_PinValue)
    1950:	8c 81       	ldd	r24, Y+4	; 0x04
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	38 87       	std	Y+8, r19	; 0x08
    1958:	2f 83       	std	Y+7, r18	; 0x07
    195a:	8f 81       	ldd	r24, Y+7	; 0x07
    195c:	98 85       	ldd	r25, Y+8	; 0x08
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	c9 f0       	breq	.+50     	; 0x1994 <DIO_u8SetPinData+0x196>
    1962:	2f 81       	ldd	r18, Y+7	; 0x07
    1964:	38 85       	ldd	r19, Y+8	; 0x08
    1966:	21 30       	cpi	r18, 0x01	; 1
    1968:	31 05       	cpc	r19, r1
    196a:	49 f5       	brne	.+82     	; 0x19be <DIO_u8SetPinData+0x1c0>
			{
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTC_REG,u8_PinNum);
    196c:	a5 e3       	ldi	r26, 0x35	; 53
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e5 e3       	ldi	r30, 0x35	; 53
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_u8SetPinData+0x18c>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_u8SetPinData+0x188>
    198e:	84 2b       	or	r24, r20
    1990:	8c 93       	st	X, r24
    1992:	57 c0       	rjmp	.+174    	; 0x1a42 <DIO_u8SetPinData+0x244>
				break;
			case DIO_LOW:
				CLR_BIT(PORTC_REG,u8_PinNum);
    1994:	a5 e3       	ldi	r26, 0x35	; 53
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e5 e3       	ldi	r30, 0x35	; 53
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	48 2f       	mov	r20, r24
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 2e       	mov	r0, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <DIO_u8SetPinData+0x1b4>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	0a 94       	dec	r0
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <DIO_u8SetPinData+0x1b0>
    19b6:	80 95       	com	r24
    19b8:	84 23       	and	r24, r20
    19ba:	8c 93       	st	X, r24
    19bc:	42 c0       	rjmp	.+132    	; 0x1a42 <DIO_u8SetPinData+0x244>
				break;
			default:
				// If not HIGH or LOW return error state WRONG_VALUE
				u8ErrorState = WRONG_VALUE;
    19be:	8b ef       	ldi	r24, 0xFB	; 251
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	3f c0       	rjmp	.+126    	; 0x1a42 <DIO_u8SetPinData+0x244>
			}
			break;
		case PORTD:
			switch(u8_PinValue)
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	3e 83       	std	Y+6, r19	; 0x06
    19cc:	2d 83       	std	Y+5, r18	; 0x05
    19ce:	8d 81       	ldd	r24, Y+5	; 0x05
    19d0:	9e 81       	ldd	r25, Y+6	; 0x06
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	c9 f0       	breq	.+50     	; 0x1a08 <DIO_u8SetPinData+0x20a>
    19d6:	2d 81       	ldd	r18, Y+5	; 0x05
    19d8:	3e 81       	ldd	r19, Y+6	; 0x06
    19da:	21 30       	cpi	r18, 0x01	; 1
    19dc:	31 05       	cpc	r19, r1
    19de:	49 f5       	brne	.+82     	; 0x1a32 <DIO_u8SetPinData+0x234>
			{
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTD_REG,u8_PinNum);
    19e0:	a2 e3       	ldi	r26, 0x32	; 50
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e2 e3       	ldi	r30, 0x32	; 50
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 2e       	mov	r0, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <DIO_u8SetPinData+0x200>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	0a 94       	dec	r0
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <DIO_u8SetPinData+0x1fc>
    1a02:	84 2b       	or	r24, r20
    1a04:	8c 93       	st	X, r24
    1a06:	1d c0       	rjmp	.+58     	; 0x1a42 <DIO_u8SetPinData+0x244>
				break;
			case DIO_LOW:
				CLR_BIT(PORTD_REG,u8_PinNum);
    1a08:	a2 e3       	ldi	r26, 0x32	; 50
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e2 e3       	ldi	r30, 0x32	; 50
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_u8SetPinData+0x228>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_u8SetPinData+0x224>
    1a2a:	80 95       	com	r24
    1a2c:	84 23       	and	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	08 c0       	rjmp	.+16     	; 0x1a42 <DIO_u8SetPinData+0x244>
				break;
			default:
			 	// If not HIGH or LOW return error state WRONG_VALUE
				u8ErrorState = WRONG_VALUE;
    1a32:	8b ef       	ldi	r24, 0xFB	; 251
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <DIO_u8SetPinData+0x244>
			}
			break;
		default :
			// if the input port is not one of the previous return the Error State WRONG_PORT
			u8ErrorState = WRONG_PORT;
    1a38:	8e ef       	ldi	r24, 0xFE	; 254
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <DIO_u8SetPinData+0x244>
		}
	}else
	{
		// if not suitable pin state return error state WRONG_PIN
		u8ErrorState = WRONG_PIN;
    1a3e:	8f ef       	ldi	r24, 0xFF	; 255
    1a40:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a44:	2e 96       	adiw	r28, 0x0e	; 14
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <DIO_u8GetPinData>:
 *  255 : Wrong PIN Number
 *  254 : Wrong PORT Number
 *  252 : The input pointer is not pointing to a valid memory place
 */
DIO_ErrorState_t DIO_u8GetPinData (DIOPort_t u8_PortName,DIOPin_t u8_PinNum,uint8_t* pu8_ReturnVar)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	27 97       	sbiw	r28, 0x07	; 7
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	8a 83       	std	Y+2, r24	; 0x02
    1a6c:	6b 83       	std	Y+3, r22	; 0x03
    1a6e:	5d 83       	std	Y+5, r21	; 0x05
    1a70:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorState_t u8ErrorState=DIO_OK;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	89 83       	std	Y+1, r24	; 0x01

	if (u8_PinNum < DIO_PINS_NUMBER && pu8_ReturnVar != NULL )
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	88 30       	cpi	r24, 0x08	; 8
    1a7a:	08 f0       	brcs	.+2      	; 0x1a7e <DIO_u8GetPinData+0x28>
    1a7c:	80 c0       	rjmp	.+256    	; 0x1b7e <DIO_u8GetPinData+0x128>
    1a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a80:	9d 81       	ldd	r25, Y+5	; 0x05
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <DIO_u8GetPinData+0x32>
    1a86:	7b c0       	rjmp	.+246    	; 0x1b7e <DIO_u8GetPinData+0x128>
	{
		if (u8_PinNum < DIO_PINS_NUMBER)
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	88 30       	cpi	r24, 0x08	; 8
    1a8c:	08 f0       	brcs	.+2      	; 0x1a90 <DIO_u8GetPinData+0x3a>
    1a8e:	74 c0       	rjmp	.+232    	; 0x1b78 <DIO_u8GetPinData+0x122>
		{
			switch (u8_PortName)
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	3f 83       	std	Y+7, r19	; 0x07
    1a98:	2e 83       	std	Y+6, r18	; 0x06
    1a9a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a9c:	5f 81       	ldd	r21, Y+7	; 0x07
    1a9e:	41 30       	cpi	r20, 0x01	; 1
    1aa0:	51 05       	cpc	r21, r1
    1aa2:	59 f1       	breq	.+86     	; 0x1afa <DIO_u8GetPinData+0xa4>
    1aa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa6:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	91 05       	cpc	r25, r1
    1aac:	34 f4       	brge	.+12     	; 0x1aba <DIO_u8GetPinData+0x64>
    1aae:	2e 81       	ldd	r18, Y+6	; 0x06
    1ab0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ab2:	21 15       	cp	r18, r1
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	69 f0       	breq	.+26     	; 0x1ad2 <DIO_u8GetPinData+0x7c>
    1ab8:	5c c0       	rjmp	.+184    	; 0x1b72 <DIO_u8GetPinData+0x11c>
    1aba:	4e 81       	ldd	r20, Y+6	; 0x06
    1abc:	5f 81       	ldd	r21, Y+7	; 0x07
    1abe:	42 30       	cpi	r20, 0x02	; 2
    1ac0:	51 05       	cpc	r21, r1
    1ac2:	79 f1       	breq	.+94     	; 0x1b22 <DIO_u8GetPinData+0xcc>
    1ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac8:	83 30       	cpi	r24, 0x03	; 3
    1aca:	91 05       	cpc	r25, r1
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <DIO_u8GetPinData+0x7a>
    1ace:	3d c0       	rjmp	.+122    	; 0x1b4a <DIO_u8GetPinData+0xf4>
    1ad0:	50 c0       	rjmp	.+160    	; 0x1b72 <DIO_u8GetPinData+0x11c>
			{
			// get bit value in register to variable depend on port and pin
			case PORTA:
				*pu8_ReturnVar = GET_BIT(PINA_REG,u8_PinNum);
    1ad2:	e9 e3       	ldi	r30, 0x39	; 57
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	88 2f       	mov	r24, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a9 01       	movw	r20, r18
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <DIO_u8GetPinData+0x94>
    1ae6:	55 95       	asr	r21
    1ae8:	47 95       	ror	r20
    1aea:	8a 95       	dec	r24
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <DIO_u8GetPinData+0x90>
    1aee:	ca 01       	movw	r24, r20
    1af0:	81 70       	andi	r24, 0x01	; 1
    1af2:	ec 81       	ldd	r30, Y+4	; 0x04
    1af4:	fd 81       	ldd	r31, Y+5	; 0x05
    1af6:	80 83       	st	Z, r24
    1af8:	44 c0       	rjmp	.+136    	; 0x1b82 <DIO_u8GetPinData+0x12c>
				break;
			case PORTB:
				*pu8_ReturnVar = GET_BIT(PINB_REG,u8_PinNum);
    1afa:	e6 e3       	ldi	r30, 0x36	; 54
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	a9 01       	movw	r20, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <DIO_u8GetPinData+0xbc>
    1b0e:	55 95       	asr	r21
    1b10:	47 95       	ror	r20
    1b12:	8a 95       	dec	r24
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <DIO_u8GetPinData+0xb8>
    1b16:	ca 01       	movw	r24, r20
    1b18:	81 70       	andi	r24, 0x01	; 1
    1b1a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b1c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b1e:	80 83       	st	Z, r24
    1b20:	30 c0       	rjmp	.+96     	; 0x1b82 <DIO_u8GetPinData+0x12c>
				break;
			case PORTC:
				*pu8_ReturnVar = GET_BIT(PINC_REG,u8_PinNum);
    1b22:	e3 e3       	ldi	r30, 0x33	; 51
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	a9 01       	movw	r20, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DIO_u8GetPinData+0xe4>
    1b36:	55 95       	asr	r21
    1b38:	47 95       	ror	r20
    1b3a:	8a 95       	dec	r24
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DIO_u8GetPinData+0xe0>
    1b3e:	ca 01       	movw	r24, r20
    1b40:	81 70       	andi	r24, 0x01	; 1
    1b42:	ec 81       	ldd	r30, Y+4	; 0x04
    1b44:	fd 81       	ldd	r31, Y+5	; 0x05
    1b46:	80 83       	st	Z, r24
    1b48:	1c c0       	rjmp	.+56     	; 0x1b82 <DIO_u8GetPinData+0x12c>
				break;
			case PORTD:
				*pu8_ReturnVar=GET_BIT(PIND_REG,u8_PinNum);
    1b4a:	e0 e3       	ldi	r30, 0x30	; 48
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a9 01       	movw	r20, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_u8GetPinData+0x10c>
    1b5e:	55 95       	asr	r21
    1b60:	47 95       	ror	r20
    1b62:	8a 95       	dec	r24
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_u8GetPinData+0x108>
    1b66:	ca 01       	movw	r24, r20
    1b68:	81 70       	andi	r24, 0x01	; 1
    1b6a:	ec 81       	ldd	r30, Y+4	; 0x04
    1b6c:	fd 81       	ldd	r31, Y+5	; 0x05
    1b6e:	80 83       	st	Z, r24
    1b70:	08 c0       	rjmp	.+16     	; 0x1b82 <DIO_u8GetPinData+0x12c>
				break;
			default:
				// if not suitable port return error state NOK
				u8ErrorState=WRONG_PORT;
    1b72:	8e ef       	ldi	r24, 0xFE	; 254
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	05 c0       	rjmp	.+10     	; 0x1b82 <DIO_u8GetPinData+0x12c>
			}
		}else{
			// if the PIN chosen is out of range return the Error state as WRONG_PIN
			u8ErrorState=WRONG_PIN;
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <DIO_u8GetPinData+0x12c>
		}

	}else
	{
		// if return address not passed return error state NULL_PTR
		u8ErrorState=NULL_PTR;
    1b7e:	8c ef       	ldi	r24, 0xFC	; 252
    1b80:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b84:	27 96       	adiw	r28, 0x07	; 7
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <DIO_u8SetPortDirection>:
 * @return return a number between 0 - 255 represent the Error State
 *  254 : Wrong PORT Number
 *  253:  Wrong Direction
 */
DIO_ErrorState_t DIO_u8SetPortDirection(DIOPort_t u8_PortName,DIODir_t u8_Dir)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	2d 97       	sbiw	r28, 0x0d	; 13
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	8a 83       	std	Y+2, r24	; 0x02
    1bac:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorState_t u8ErrorState=DIO_OK;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	89 83       	std	Y+1, r24	; 0x01
	switch (u8_PortName)
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	3d 87       	std	Y+13, r19	; 0x0d
    1bba:	2c 87       	std	Y+12, r18	; 0x0c
    1bbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <DIO_u8SetPortDirection+0x32>
    1bc6:	4c c0       	rjmp	.+152    	; 0x1c60 <DIO_u8SetPortDirection+0xca>
    1bc8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bca:	3d 85       	ldd	r19, Y+13	; 0x0d
    1bcc:	22 30       	cpi	r18, 0x02	; 2
    1bce:	31 05       	cpc	r19, r1
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <DIO_u8SetPortDirection+0x46>
    1bd2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bd4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	71 f0       	breq	.+28     	; 0x1bf6 <DIO_u8SetPortDirection+0x60>
    1bda:	e1 c0       	rjmp	.+450    	; 0x1d9e <DIO_u8SetPortDirection+0x208>
    1bdc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bde:	3d 85       	ldd	r19, Y+13	; 0x0d
    1be0:	22 30       	cpi	r18, 0x02	; 2
    1be2:	31 05       	cpc	r19, r1
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <DIO_u8SetPortDirection+0x52>
    1be6:	71 c0       	rjmp	.+226    	; 0x1cca <DIO_u8SetPortDirection+0x134>
    1be8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bea:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	91 05       	cpc	r25, r1
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <DIO_u8SetPortDirection+0x5e>
    1bf2:	a0 c0       	rjmp	.+320    	; 0x1d34 <DIO_u8SetPortDirection+0x19e>
    1bf4:	d4 c0       	rjmp	.+424    	; 0x1d9e <DIO_u8SetPortDirection+0x208>
	{
	case PORTA:
		switch (u8_Dir)
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	3b 87       	std	Y+11, r19	; 0x0b
    1bfe:	2a 87       	std	Y+10, r18	; 0x0a
    1c00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c02:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	91 05       	cpc	r25, r1
    1c08:	a1 f0       	breq	.+40     	; 0x1c32 <DIO_u8SetPortDirection+0x9c>
    1c0a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c0c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c0e:	22 30       	cpi	r18, 0x02	; 2
    1c10:	31 05       	cpc	r19, r1
    1c12:	f1 f0       	breq	.+60     	; 0x1c50 <DIO_u8SetPortDirection+0xba>
    1c14:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c16:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	f9 f4       	brne	.+62     	; 0x1c5a <DIO_u8SetPortDirection+0xc4>
		{
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRA_REG = DIO_PORT_LOW;
    1c1c:	ea e3       	ldi	r30, 0x3A	; 58
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG,PUD_BIT);
    1c22:	a0 e5       	ldi	r26, 0x50	; 80
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e0 e5       	ldi	r30, 0x50	; 80
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	84 60       	ori	r24, 0x04	; 4
    1c2e:	8c 93       	st	X, r24
    1c30:	b8 c0       	rjmp	.+368    	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG,PUD_BIT);
    1c32:	a0 e5       	ldi	r26, 0x50	; 80
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e0 e5       	ldi	r30, 0x50	; 80
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	8b 7f       	andi	r24, 0xFB	; 251
    1c3e:	8c 93       	st	X, r24
			DDRA_REG =  DIO_PORT_LOW;
    1c40:	ea e3       	ldi	r30, 0x3A	; 58
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	10 82       	st	Z, r1
			PORTA_REG = DIO_PORT_HIGH;
    1c46:	eb e3       	ldi	r30, 0x3B	; 59
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	8f ef       	ldi	r24, 0xFF	; 255
    1c4c:	80 83       	st	Z, r24
    1c4e:	a9 c0       	rjmp	.+338    	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRA_REG = DIO_PORT_HIGH;
    1c50:	ea e3       	ldi	r30, 0x3A	; 58
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	8f ef       	ldi	r24, 0xFF	; 255
    1c56:	80 83       	st	Z, r24
    1c58:	a4 c0       	rjmp	.+328    	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
			break;
		default:
			// If the input state is not one of the above cases return error state WRONG_DIR
			u8ErrorState=WRONG_DIR;
    1c5a:	8d ef       	ldi	r24, 0xFD	; 253
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	a1 c0       	rjmp	.+322    	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
		}
		break;
	case PORTB:
		switch (u8_Dir)
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	39 87       	std	Y+9, r19	; 0x09
    1c68:	28 87       	std	Y+8, r18	; 0x08
    1c6a:	88 85       	ldd	r24, Y+8	; 0x08
    1c6c:	99 85       	ldd	r25, Y+9	; 0x09
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	91 05       	cpc	r25, r1
    1c72:	a1 f0       	breq	.+40     	; 0x1c9c <DIO_u8SetPortDirection+0x106>
    1c74:	28 85       	ldd	r18, Y+8	; 0x08
    1c76:	39 85       	ldd	r19, Y+9	; 0x09
    1c78:	22 30       	cpi	r18, 0x02	; 2
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	f1 f0       	breq	.+60     	; 0x1cba <DIO_u8SetPortDirection+0x124>
    1c7e:	88 85       	ldd	r24, Y+8	; 0x08
    1c80:	99 85       	ldd	r25, Y+9	; 0x09
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	f9 f4       	brne	.+62     	; 0x1cc4 <DIO_u8SetPortDirection+0x12e>
		{
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRB_REG = DIO_PORT_LOW;
    1c86:	e7 e3       	ldi	r30, 0x37	; 55
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG,PUD_BIT);
    1c8c:	a0 e5       	ldi	r26, 0x50	; 80
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e0 e5       	ldi	r30, 0x50	; 80
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	84 60       	ori	r24, 0x04	; 4
    1c98:	8c 93       	st	X, r24
    1c9a:	83 c0       	rjmp	.+262    	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG,PUD_BIT);
    1c9c:	a0 e5       	ldi	r26, 0x50	; 80
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e0 e5       	ldi	r30, 0x50	; 80
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	8b 7f       	andi	r24, 0xFB	; 251
    1ca8:	8c 93       	st	X, r24
			DDRB_REG =  DIO_PORT_LOW;
    1caa:	e7 e3       	ldi	r30, 0x37	; 55
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	10 82       	st	Z, r1
			PORTB_REG = DIO_PORT_HIGH;
    1cb0:	e8 e3       	ldi	r30, 0x38	; 56
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	8f ef       	ldi	r24, 0xFF	; 255
    1cb6:	80 83       	st	Z, r24
    1cb8:	74 c0       	rjmp	.+232    	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRB_REG = DIO_PORT_HIGH;
    1cba:	e7 e3       	ldi	r30, 0x37	; 55
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255
    1cc0:	80 83       	st	Z, r24
    1cc2:	6f c0       	rjmp	.+222    	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
			break;
		default:
			// If the input state is not one of the above cases return error state WRONG_DIR
			u8ErrorState=WRONG_DIR;
    1cc4:	8d ef       	ldi	r24, 0xFD	; 253
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	6c c0       	rjmp	.+216    	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
		}
		break;
	case PORTC:
		switch (u8_Dir)
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	3f 83       	std	Y+7, r19	; 0x07
    1cd2:	2e 83       	std	Y+6, r18	; 0x06
    1cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	91 05       	cpc	r25, r1
    1cdc:	a1 f0       	breq	.+40     	; 0x1d06 <DIO_u8SetPortDirection+0x170>
    1cde:	2e 81       	ldd	r18, Y+6	; 0x06
    1ce0:	3f 81       	ldd	r19, Y+7	; 0x07
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	f1 f0       	breq	.+60     	; 0x1d24 <DIO_u8SetPortDirection+0x18e>
    1ce8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cea:	9f 81       	ldd	r25, Y+7	; 0x07
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	f9 f4       	brne	.+62     	; 0x1d2e <DIO_u8SetPortDirection+0x198>
		{
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRC_REG = DIO_PORT_LOW;
    1cf0:	e4 e3       	ldi	r30, 0x34	; 52
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG,PUD_BIT);
    1cf6:	a0 e5       	ldi	r26, 0x50	; 80
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e0 e5       	ldi	r30, 0x50	; 80
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	84 60       	ori	r24, 0x04	; 4
    1d02:	8c 93       	st	X, r24
    1d04:	4e c0       	rjmp	.+156    	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG,PUD_BIT);
    1d06:	a0 e5       	ldi	r26, 0x50	; 80
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e0 e5       	ldi	r30, 0x50	; 80
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	8b 7f       	andi	r24, 0xFB	; 251
    1d12:	8c 93       	st	X, r24
			DDRC_REG =  DIO_PORT_LOW;
    1d14:	e4 e3       	ldi	r30, 0x34	; 52
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	10 82       	st	Z, r1
			PORTC_REG = DIO_PORT_HIGH;
    1d1a:	e5 e3       	ldi	r30, 0x35	; 53
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	8f ef       	ldi	r24, 0xFF	; 255
    1d20:	80 83       	st	Z, r24
    1d22:	3f c0       	rjmp	.+126    	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRC_REG = DIO_PORT_HIGH;
    1d24:	e4 e3       	ldi	r30, 0x34	; 52
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	8f ef       	ldi	r24, 0xFF	; 255
    1d2a:	80 83       	st	Z, r24
    1d2c:	3a c0       	rjmp	.+116    	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
			break;
		default:
			// If the input state is not one of the above cases return error state WRONG_DIR
			u8ErrorState=WRONG_DIR;
    1d2e:	8d ef       	ldi	r24, 0xFD	; 253
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	37 c0       	rjmp	.+110    	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
		}
		break;
	case PORTD:
		switch (u8_Dir)
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	3d 83       	std	Y+5, r19	; 0x05
    1d3c:	2c 83       	std	Y+4, r18	; 0x04
    1d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d40:	9d 81       	ldd	r25, Y+5	; 0x05
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	91 05       	cpc	r25, r1
    1d46:	a1 f0       	breq	.+40     	; 0x1d70 <DIO_u8SetPortDirection+0x1da>
    1d48:	2c 81       	ldd	r18, Y+4	; 0x04
    1d4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	31 05       	cpc	r19, r1
    1d50:	f1 f0       	breq	.+60     	; 0x1d8e <DIO_u8SetPortDirection+0x1f8>
    1d52:	8c 81       	ldd	r24, Y+4	; 0x04
    1d54:	9d 81       	ldd	r25, Y+5	; 0x05
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	f9 f4       	brne	.+62     	; 0x1d98 <DIO_u8SetPortDirection+0x202>
		{
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRD_REG = DIO_PORT_LOW;
    1d5a:	e1 e3       	ldi	r30, 0x31	; 49
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG,PUD_BIT);
    1d60:	a0 e5       	ldi	r26, 0x50	; 80
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e0 e5       	ldi	r30, 0x50	; 80
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	84 60       	ori	r24, 0x04	; 4
    1d6c:	8c 93       	st	X, r24
    1d6e:	19 c0       	rjmp	.+50     	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG,PUD_BIT);
    1d70:	a0 e5       	ldi	r26, 0x50	; 80
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e0 e5       	ldi	r30, 0x50	; 80
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	8b 7f       	andi	r24, 0xFB	; 251
    1d7c:	8c 93       	st	X, r24
			DDRD_REG =  DIO_PORT_LOW;
    1d7e:	e1 e3       	ldi	r30, 0x31	; 49
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	10 82       	st	Z, r1
			PORTD_REG = DIO_PORT_HIGH;
    1d84:	e2 e3       	ldi	r30, 0x32	; 50
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	8f ef       	ldi	r24, 0xFF	; 255
    1d8a:	80 83       	st	Z, r24
    1d8c:	0a c0       	rjmp	.+20     	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRD_REG = DIO_PORT_HIGH;
    1d8e:	e1 e3       	ldi	r30, 0x31	; 49
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	80 83       	st	Z, r24
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
			break;
		default:
			// If the input state is not one of the above cases return error state WRONG_DIR
			u8ErrorState=WRONG_DIR;
    1d98:	8d ef       	ldi	r24, 0xFD	; 253
    1d9a:	89 83       	std	Y+1, r24	; 0x01
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <DIO_u8SetPortDirection+0x20c>
		}
		break;
	default:
		// If the input port is not one of the above cases return error state WRONG_PORT
		u8ErrorState=WRONG_PORT;
    1d9e:	8e ef       	ldi	r24, 0xFE	; 254
    1da0:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da4:	2d 96       	adiw	r28, 0x0d	; 13
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <DIO_u8SetPortData>:
 * @param u8_Value a number between from 0 - 255
 * @return return a number between 0 - 255 represent the Error State
 *  254 : WRONG Port
 */
DIO_ErrorState_t DIO_u8SetPortData(DIOPort_t u8_PortName,uint8_t u8_Value)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <DIO_u8SetPortData+0x6>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <DIO_u8SetPortData+0x8>
    1dbe:	0f 92       	push	r0
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	8a 83       	std	Y+2, r24	; 0x02
    1dc6:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorState_t u8ErrorState=DIO_OK;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	89 83       	std	Y+1, r24	; 0x01

		switch (u8_PortName)
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3d 83       	std	Y+5, r19	; 0x05
    1dd4:	2c 83       	std	Y+4, r18	; 0x04
    1dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	d1 f0       	breq	.+52     	; 0x1e14 <DIO_u8SetPortData+0x5e>
    1de0:	2c 81       	ldd	r18, Y+4	; 0x04
    1de2:	3d 81       	ldd	r19, Y+5	; 0x05
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <DIO_u8SetPortData+0x3e>
    1dea:	8c 81       	ldd	r24, Y+4	; 0x04
    1dec:	9d 81       	ldd	r25, Y+5	; 0x05
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	61 f0       	breq	.+24     	; 0x1e0a <DIO_u8SetPortData+0x54>
    1df2:	1f c0       	rjmp	.+62     	; 0x1e32 <DIO_u8SetPortData+0x7c>
    1df4:	2c 81       	ldd	r18, Y+4	; 0x04
    1df6:	3d 81       	ldd	r19, Y+5	; 0x05
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	81 f0       	breq	.+32     	; 0x1e1e <DIO_u8SetPortData+0x68>
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	83 30       	cpi	r24, 0x03	; 3
    1e04:	91 05       	cpc	r25, r1
    1e06:	81 f0       	breq	.+32     	; 0x1e28 <DIO_u8SetPortData+0x72>
    1e08:	14 c0       	rjmp	.+40     	; 0x1e32 <DIO_u8SetPortData+0x7c>
		{
		case PORTA:
			PORTA_REG = u8_Value;
    1e0a:	eb e3       	ldi	r30, 0x3B	; 59
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	80 83       	st	Z, r24
    1e12:	11 c0       	rjmp	.+34     	; 0x1e36 <DIO_u8SetPortData+0x80>
			break;
		case PORTB:
			PORTB_REG = u8_Value;
    1e14:	e8 e3       	ldi	r30, 0x38	; 56
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	80 83       	st	Z, r24
    1e1c:	0c c0       	rjmp	.+24     	; 0x1e36 <DIO_u8SetPortData+0x80>
			break;
		case PORTC:
			PORTC_REG=u8_Value;
    1e1e:	e5 e3       	ldi	r30, 0x35	; 53
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	80 83       	st	Z, r24
    1e26:	07 c0       	rjmp	.+14     	; 0x1e36 <DIO_u8SetPortData+0x80>
			break;
		case PORTD:
			PORTD_REG=u8_Value;
    1e28:	e2 e3       	ldi	r30, 0x32	; 50
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	80 83       	st	Z, r24
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <DIO_u8SetPortData+0x80>
			break;
		default:
			// if input port is not one of the above cases return error state WRONG_PORT
			u8ErrorState=WRONG_PORT;
    1e32:	8e ef       	ldi	r24, 0xFE	; 254
    1e34:	89 83       	std	Y+1, r24	; 0x01
		}

	return u8ErrorState;
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <DIO_u8GetPortData>:
 * @return return a number between 0 - 255 represent the Error State
 *  254 : WRONG Port
 *  252 : The input pointer is not pointing to a valid memory place
 */
DIO_ErrorState_t DIO_u8GetPortData (DIOPort_t u8_PortName,uint8_t* pu8_ReturnVar)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <DIO_u8GetPortData+0x6>
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <DIO_u8GetPortData+0x8>
    1e50:	00 d0       	rcall	.+0      	; 0x1e52 <DIO_u8GetPortData+0xa>
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	8a 83       	std	Y+2, r24	; 0x02
    1e58:	7c 83       	std	Y+4, r23	; 0x04
    1e5a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorState_t u8ErrorState = DIO_OK;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	89 83       	std	Y+1, r24	; 0x01
	if (pu8_ReturnVar!=NULL)
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <DIO_u8GetPortData+0x22>
    1e68:	3e c0       	rjmp	.+124    	; 0x1ee6 <DIO_u8GetPortData+0x9e>
	{
		// get port value in register to variable depend on port and pin 
		switch(u8_PortName)
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	3e 83       	std	Y+6, r19	; 0x06
    1e72:	2d 83       	std	Y+5, r18	; 0x05
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	e1 f0       	breq	.+56     	; 0x1eb6 <DIO_u8GetPortData+0x6e>
    1e7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e80:	3e 81       	ldd	r19, Y+6	; 0x06
    1e82:	22 30       	cpi	r18, 0x02	; 2
    1e84:	31 05       	cpc	r19, r1
    1e86:	2c f4       	brge	.+10     	; 0x1e92 <DIO_u8GetPortData+0x4a>
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	61 f0       	breq	.+24     	; 0x1ea8 <DIO_u8GetPortData+0x60>
    1e90:	27 c0       	rjmp	.+78     	; 0x1ee0 <DIO_u8GetPortData+0x98>
    1e92:	2d 81       	ldd	r18, Y+5	; 0x05
    1e94:	3e 81       	ldd	r19, Y+6	; 0x06
    1e96:	22 30       	cpi	r18, 0x02	; 2
    1e98:	31 05       	cpc	r19, r1
    1e9a:	a1 f0       	breq	.+40     	; 0x1ec4 <DIO_u8GetPortData+0x7c>
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	83 30       	cpi	r24, 0x03	; 3
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	b1 f0       	breq	.+44     	; 0x1ed2 <DIO_u8GetPortData+0x8a>
    1ea6:	1c c0       	rjmp	.+56     	; 0x1ee0 <DIO_u8GetPortData+0x98>
		{
		case PORTA:
			*pu8_ReturnVar= PORTA_REG;
    1ea8:	eb e3       	ldi	r30, 0x3B	; 59
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	eb 81       	ldd	r30, Y+3	; 0x03
    1eb0:	fc 81       	ldd	r31, Y+4	; 0x04
    1eb2:	80 83       	st	Z, r24
    1eb4:	1a c0       	rjmp	.+52     	; 0x1eea <DIO_u8GetPortData+0xa2>
			break;
		case PORTB:
			*pu8_ReturnVar= PORTB_REG;
    1eb6:	e8 e3       	ldi	r30, 0x38	; 56
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	eb 81       	ldd	r30, Y+3	; 0x03
    1ebe:	fc 81       	ldd	r31, Y+4	; 0x04
    1ec0:	80 83       	st	Z, r24
    1ec2:	13 c0       	rjmp	.+38     	; 0x1eea <DIO_u8GetPortData+0xa2>
			break;
		case PORTC:
			*pu8_ReturnVar= PORTC_REG;
    1ec4:	e5 e3       	ldi	r30, 0x35	; 53
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	eb 81       	ldd	r30, Y+3	; 0x03
    1ecc:	fc 81       	ldd	r31, Y+4	; 0x04
    1ece:	80 83       	st	Z, r24
    1ed0:	0c c0       	rjmp	.+24     	; 0x1eea <DIO_u8GetPortData+0xa2>
			break;
		case PORTD:
			*pu8_ReturnVar= PORTD_REG;
    1ed2:	e2 e3       	ldi	r30, 0x32	; 50
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eda:	fc 81       	ldd	r31, Y+4	; 0x04
    1edc:	80 83       	st	Z, r24
    1ede:	05 c0       	rjmp	.+10     	; 0x1eea <DIO_u8GetPortData+0xa2>
			break;
		default:
			// if not suitable port return error state WRONG_PORT
			u8ErrorState=WRONG_PORT;
    1ee0:	8e ef       	ldi	r24, 0xFE	; 254
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <DIO_u8GetPortData+0xa2>
		}
	}else{
		// if no address passed to function return error state NULL_PTR
		u8ErrorState=NULL_PTR;
    1ee6:	8c ef       	ldi	r24, 0xFC	; 252
    1ee8:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eec:	26 96       	adiw	r28, 0x06	; 6
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <DIO_u8TogglePinData>:
 * PIN7
 * @return returns a number from 0 - 255 represent the Error State
 *  255 : Wrong PIN Number
 *  254 : Wrong PORT Number
 */
DIO_ErrorState_t DIO_u8TogglePinData(DIOPort_t u8_PortName,DIOPin_t u8_PinNum){
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <DIO_u8TogglePinData+0x6>
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <DIO_u8TogglePinData+0x8>
    1f06:	0f 92       	push	r0
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	8a 83       	std	Y+2, r24	; 0x02
    1f0e:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorState_t u8ErrorState = DIO_OK;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	89 83       	std	Y+1, r24	; 0x01
	if (u8_PinNum < DIO_PINS_NUMBER)
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	88 30       	cpi	r24, 0x08	; 8
    1f18:	08 f0       	brcs	.+2      	; 0x1f1c <DIO_u8TogglePinData+0x1e>
    1f1a:	72 c0       	rjmp	.+228    	; 0x2000 <DIO_u8TogglePinData+0x102>
	{
		switch(u8_PortName){
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	3d 83       	std	Y+5, r19	; 0x05
    1f24:	2c 83       	std	Y+4, r18	; 0x04
    1f26:	8c 81       	ldd	r24, Y+4	; 0x04
    1f28:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	49 f1       	breq	.+82     	; 0x1f82 <DIO_u8TogglePinData+0x84>
    1f30:	2c 81       	ldd	r18, Y+4	; 0x04
    1f32:	3d 81       	ldd	r19, Y+5	; 0x05
    1f34:	22 30       	cpi	r18, 0x02	; 2
    1f36:	31 05       	cpc	r19, r1
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <DIO_u8TogglePinData+0x46>
    1f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	61 f0       	breq	.+24     	; 0x1f5a <DIO_u8TogglePinData+0x5c>
    1f42:	5b c0       	rjmp	.+182    	; 0x1ffa <DIO_u8TogglePinData+0xfc>
    1f44:	2c 81       	ldd	r18, Y+4	; 0x04
    1f46:	3d 81       	ldd	r19, Y+5	; 0x05
    1f48:	22 30       	cpi	r18, 0x02	; 2
    1f4a:	31 05       	cpc	r19, r1
    1f4c:	71 f1       	breq	.+92     	; 0x1faa <DIO_u8TogglePinData+0xac>
    1f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f50:	9d 81       	ldd	r25, Y+5	; 0x05
    1f52:	83 30       	cpi	r24, 0x03	; 3
    1f54:	91 05       	cpc	r25, r1
    1f56:	e9 f1       	breq	.+122    	; 0x1fd2 <DIO_u8TogglePinData+0xd4>
    1f58:	50 c0       	rjmp	.+160    	; 0x1ffa <DIO_u8TogglePinData+0xfc>
		// toogle bit value depend on port and pin
		case PORTA:
			Toggle_BIT(PORTA_REG, u8_PinNum);
    1f5a:	ab e3       	ldi	r26, 0x3B	; 59
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	eb e3       	ldi	r30, 0x3B	; 59
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	48 2f       	mov	r20, r24
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	02 2e       	mov	r0, r18
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <DIO_u8TogglePinData+0x7a>
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	0a 94       	dec	r0
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <DIO_u8TogglePinData+0x76>
    1f7c:	84 27       	eor	r24, r20
    1f7e:	8c 93       	st	X, r24
    1f80:	41 c0       	rjmp	.+130    	; 0x2004 <DIO_u8TogglePinData+0x106>
			break;
		case PORTB:
			Toggle_BIT(PORTB_REG, u8_PinNum);
    1f82:	a8 e3       	ldi	r26, 0x38	; 56
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e8 e3       	ldi	r30, 0x38	; 56
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	48 2f       	mov	r20, r24
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	02 2e       	mov	r0, r18
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <DIO_u8TogglePinData+0xa2>
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	0a 94       	dec	r0
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <DIO_u8TogglePinData+0x9e>
    1fa4:	84 27       	eor	r24, r20
    1fa6:	8c 93       	st	X, r24
    1fa8:	2d c0       	rjmp	.+90     	; 0x2004 <DIO_u8TogglePinData+0x106>
			break;
		case PORTC:
			Toggle_BIT(PORTC_REG, u8_PinNum);
    1faa:	a5 e3       	ldi	r26, 0x35	; 53
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e5 e3       	ldi	r30, 0x35	; 53
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	48 2f       	mov	r20, r24
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	02 2e       	mov	r0, r18
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <DIO_u8TogglePinData+0xca>
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	0a 94       	dec	r0
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <DIO_u8TogglePinData+0xc6>
    1fcc:	84 27       	eor	r24, r20
    1fce:	8c 93       	st	X, r24
    1fd0:	19 c0       	rjmp	.+50     	; 0x2004 <DIO_u8TogglePinData+0x106>
			break;
		case PORTD:
			Toggle_BIT(PORTD_REG, u8_PinNum);
    1fd2:	a2 e3       	ldi	r26, 0x32	; 50
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e2 e3       	ldi	r30, 0x32	; 50
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	48 2f       	mov	r20, r24
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	02 2e       	mov	r0, r18
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <DIO_u8TogglePinData+0xf2>
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	0a 94       	dec	r0
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <DIO_u8TogglePinData+0xee>
    1ff4:	84 27       	eor	r24, r20
    1ff6:	8c 93       	st	X, r24
    1ff8:	05 c0       	rjmp	.+10     	; 0x2004 <DIO_u8TogglePinData+0x106>
			break;
		default:
			// if input port is not one of the above cases return error state WRONG_PORT
			u8ErrorState = WRONG_PORT;
    1ffa:	8e ef       	ldi	r24, 0xFE	; 254
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <DIO_u8TogglePinData+0x106>
		}
	}else{
		u8ErrorState = WRONG_PIN;
    2000:	8f ef       	ldi	r24, 0xFF	; 255
    2002:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    2004:	89 81       	ldd	r24, Y+1	; 0x01
}
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <DELAY_ms>:

static volatile uint16_t msDelayCounter ;


DelayErrorState_t DELAY_ms(uint16_t u8MsDelay)
{
    2016:	df 93       	push	r29
    2018:	cf 93       	push	r28
    201a:	00 d0       	rcall	.+0      	; 0x201c <DELAY_ms+0x6>
    201c:	00 d0       	rcall	.+0      	; 0x201e <DELAY_ms+0x8>
    201e:	0f 92       	push	r0
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	9d 83       	std	Y+5, r25	; 0x05
    2026:	8c 83       	std	Y+4, r24	; 0x04
	msDelayCounter = 0;
    2028:	10 92 74 00 	sts	0x0074, r1
    202c:	10 92 73 00 	sts	0x0073, r1
	uint8_t u8ErrorState = DELAY_OK;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	89 83       	std	Y+1, r24	; 0x01
	TIM0_Config_t DelayConfig = {TIM0_CTC,DELAY_TIMER_PRESCALAR};
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	8a 83       	std	Y+2, r24	; 0x02
    2038:	83 e0       	ldi	r24, 0x03	; 3
    203a:	8b 83       	std	Y+3, r24	; 0x03


	// initiate the timer in CTC Mode with system clock pre-scaled by 64
	u8ErrorState = TIM0_u8Init(&DelayConfig);
    203c:	ce 01       	movw	r24, r28
    203e:	02 96       	adiw	r24, 0x02	; 2
    2040:	0e 94 90 04 	call	0x920	; 0x920 <TIM0_u8Init>
    2044:	89 83       	std	Y+1, r24	; 0x01

	if (u8ErrorState == TIM0_OK)
    2046:	89 81       	ldd	r24, Y+1	; 0x01
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	29 f4       	brne	.+10     	; 0x2056 <DELAY_ms+0x40>
	{
		// set the compare value with DELAY_MS_COMPARE_COUNTS to ensure an interrupt every 1 ms
		u8ErrorState = TIM0_u8SetCompareValue(DELAY_MS_COMPARE_COUNTS);
    204c:	8c e7       	ldi	r24, 0x7C	; 124
    204e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <TIM0_u8SetCompareValue>
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	02 c0       	rjmp	.+4      	; 0x205a <DELAY_ms+0x44>
	}else{
		u8ErrorState = DELAY_TMER_RETURN_ERROR;
    2056:	8f ef       	ldi	r24, 0xFF	; 255
    2058:	89 83       	std	Y+1, r24	; 0x01
	}
	if (u8ErrorState == TIM0_OK)
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	81 30       	cpi	r24, 0x01	; 1
    205e:	31 f4       	brne	.+12     	; 0x206c <DELAY_ms+0x56>
	{
		// Enable the Compare match interrupt and use the DELAY_vMsCallBackFun as a call back function
		u8ErrorState = TIM0_u8EnableOCInterrupt(DELAY_vMsCallBackFun);
    2060:	85 e5       	ldi	r24, 0x55	; 85
    2062:	90 e1       	ldi	r25, 0x10	; 16
    2064:	0e 94 e5 05 	call	0xbca	; 0xbca <TIM0_u8EnableOCInterrupt>
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <DELAY_ms+0x5a>
	}else{
		u8ErrorState = DELAY_TMER_RETURN_ERROR;
    206c:	8f ef       	ldi	r24, 0xFF	; 255
    206e:	89 83       	std	Y+1, r24	; 0x01
	}
	if (u8ErrorState == TIM0_OK)
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	21 f4       	brne	.+8      	; 0x207e <DELAY_ms+0x68>
	{
		// After setting the timer configurations Start The Timer
		u8ErrorState = TIM0_u8TimerStart();
    2076:	0e 94 11 06 	call	0xc22	; 0xc22 <TIM0_u8TimerStart>
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <DELAY_ms+0x6c>
	}else{
		u8ErrorState = DELAY_TMER_RETURN_ERROR;
    207e:	8f ef       	ldi	r24, 0xFF	; 255
    2080:	89 83       	std	Y+1, r24	; 0x01
	}

	// Loop until the Counter equal to the desired delay (the counter is updated every 1 ms)
	while (msDelayCounter <= u8MsDelay);
    2082:	20 91 73 00 	lds	r18, 0x0073
    2086:	30 91 74 00 	lds	r19, 0x0074
    208a:	8c 81       	ldd	r24, Y+4	; 0x04
    208c:	9d 81       	ldd	r25, Y+5	; 0x05
    208e:	82 17       	cp	r24, r18
    2090:	93 07       	cpc	r25, r19
    2092:	b8 f7       	brcc	.-18     	; 0x2082 <DELAY_ms+0x6c>

	// After finish Disable Interrupts
	TIM0_u8DisableOCInterrupt();
    2094:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <TIM0_u8DisableOCInterrupt>
	return u8ErrorState;
    2098:	89 81       	ldd	r24, Y+1	; 0x01
}
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <DELAY_vMsCallBackFun>:


void DELAY_vMsCallBackFun(void)
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
	msDelayCounter++;
    20b2:	80 91 73 00 	lds	r24, 0x0073
    20b6:	90 91 74 00 	lds	r25, 0x0074
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	90 93 74 00 	sts	0x0074, r25
    20c0:	80 93 73 00 	sts	0x0073, r24
}
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <LED_u8Init>:

#include "LED.h"

// function to initialize LED 
uint8_t LED_u8Init ( LED_t led )
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <LED_u8Init+0x6>
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	9a 83       	std	Y+2, r25	; 0x02
    20d6:	89 83       	std	Y+1, r24	; 0x01
	// set direction of LED's pin to OUTPUT 
	return DIO_u8SetPinDirection(led.port,led.pin,DIO_OUTPUT);
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	9a 81       	ldd	r25, Y+2	; 0x02
    20dc:	69 2f       	mov	r22, r25
    20de:	42 e0       	ldi	r20, 0x02	; 2
    20e0:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_u8SetPinDirection>
}
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <LED_u8On>:

// function ta turn LED on
uint8_t LED_u8On ( LED_t led )
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <LED_u8On+0x6>
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
	// set LED's pin to HIGH 
	return DIO_u8SetPinData(led.port,led.pin,DIO_HIGH);
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	69 2f       	mov	r22, r25
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <DIO_u8SetPinData>
}
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	cf 91       	pop	r28
    210e:	df 91       	pop	r29
    2110:	08 95       	ret

00002112 <LED_u8Off>:

// function ta turn LED off
uint8_t LED_u8Off ( LED_t led )
{
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	00 d0       	rcall	.+0      	; 0x2118 <LED_u8Off+0x6>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
	// set LED's pin to LOW
	return DIO_u8SetPinData(led.port,led.pin,DIO_LOW);
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	9a 81       	ldd	r25, Y+2	; 0x02
    2124:	69 2f       	mov	r22, r25
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <DIO_u8SetPinData>
}
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <LED_u8Toggle>:

// function to toggle LED state
uint8_t LED_u8Toggle ( LED_t led )
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <LED_u8Toggle+0x6>
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
	// toggle LED's pin state 
	return DIO_u8TogglePinData(led.port,led.pin);
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	69 2f       	mov	r22, r25
    214a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <DIO_u8TogglePinData>
}
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <BTN_u8Init>:


#include "Button.h"

uint8_t BTN_u8Init ( BTN_t button )
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	00 d0       	rcall	.+0      	; 0x215e <BTN_u8Init+0x6>
    215e:	0f 92       	push	r0
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	9b 83       	std	Y+3, r25	; 0x03
    2166:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = STD_TYPES_OK;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	89 83       	std	Y+1, r24	; 0x01
	u8ErrorState= DIO_u8SetPinDirection(button.port,button.pin,DIO_INPUT);
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	9b 81       	ldd	r25, Y+3	; 0x03
    2170:	69 2f       	mov	r22, r25
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_u8SetPinDirection>
    2178:	89 83       	std	Y+1, r24	; 0x01
	return u8ErrorState;
    217a:	89 81       	ldd	r24, Y+1	; 0x01
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <BTN_u8IsPressed>:

uint8_t BTN_u8IsPressed ( BTN_t button , uint8_t * pressed )
{	
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	28 97       	sbiw	r28, 0x08	; 8
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	9e 83       	std	Y+6, r25	; 0x06
    219e:	8d 83       	std	Y+5, r24	; 0x05
    21a0:	78 87       	std	Y+8, r23	; 0x08
    21a2:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t u8ErrorState = STD_TYPES_OK;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8DebounceDetectorHigh =0 , u8DebounceDetectorLow=0, u8BTNState;
    21a8:	1a 82       	std	Y+2, r1	; 0x02
    21aa:	19 82       	std	Y+1, r1	; 0x01
	if (pressed!= NULL)
    21ac:	8f 81       	ldd	r24, Y+7	; 0x07
    21ae:	98 85       	ldd	r25, Y+8	; 0x08
    21b0:	00 97       	sbiw	r24, 0x00	; 0
    21b2:	71 f0       	breq	.+28     	; 0x21d0 <BTN_u8IsPressed+0x48>
	{
		DIO_u8GetPinData(button.port,button.pin,&u8BTNState );
    21b4:	8d 81       	ldd	r24, Y+5	; 0x05
    21b6:	9e 81       	ldd	r25, Y+6	; 0x06
    21b8:	9e 01       	movw	r18, r28
    21ba:	2c 5f       	subi	r18, 0xFC	; 252
    21bc:	3f 4f       	sbci	r19, 0xFF	; 255
    21be:	69 2f       	mov	r22, r25
    21c0:	a9 01       	movw	r20, r18
    21c2:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8GetPinData>
		DELAY_ms(10);
    21c6:	8a e0       	ldi	r24, 0x0A	; 10
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	0e 94 0b 10 	call	0x2016	; 0x2016 <DELAY_ms>
    21ce:	01 c0       	rjmp	.+2      	; 0x21d2 <BTN_u8IsPressed+0x4a>
	}else{
		u8ErrorState = STD_TYPES_NOK;
    21d0:	1b 82       	std	Y+3, r1	; 0x03
	}

	return u8ErrorState;
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    21d4:	28 96       	adiw	r28, 0x08	; 8
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <main>:
#include "../LIB/BIT_Math.h"
#include "../MCAL/DELAY/DELAY_interface.h"
#include "../MCAL/DIO/DIO_interface.h"
#include "../MCAL/I2C/I2C_interface.h"
int main()
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	0f 92       	push	r0
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ReceivedByte;
	DIO_u8SetPortDirection(PORTA,DIO_OUTPUT);
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	62 e0       	ldi	r22, 0x02	; 2
    21f4:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <DIO_u8SetPortDirection>
	I2C_u8Init();
    21f8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <I2C_u8Init>

	I2C_u8SlaveGetByte(&u8ReceivedByte);
    21fc:	ce 01       	movw	r24, r28
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	0e 94 63 09 	call	0x12c6	; 0x12c6 <I2C_u8SlaveGetByte>
	DIO_u8SetPortData(PORTA,u8ReceivedByte);
    2204:	99 81       	ldd	r25, Y+1	; 0x01
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	69 2f       	mov	r22, r25
    220a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <DIO_u8SetPortData>
    220e:	ff cf       	rjmp	.-2      	; 0x220e <main+0x28>

00002210 <__mulsi3>:
    2210:	62 9f       	mul	r22, r18
    2212:	d0 01       	movw	r26, r0
    2214:	73 9f       	mul	r23, r19
    2216:	f0 01       	movw	r30, r0
    2218:	82 9f       	mul	r24, r18
    221a:	e0 0d       	add	r30, r0
    221c:	f1 1d       	adc	r31, r1
    221e:	64 9f       	mul	r22, r20
    2220:	e0 0d       	add	r30, r0
    2222:	f1 1d       	adc	r31, r1
    2224:	92 9f       	mul	r25, r18
    2226:	f0 0d       	add	r31, r0
    2228:	83 9f       	mul	r24, r19
    222a:	f0 0d       	add	r31, r0
    222c:	74 9f       	mul	r23, r20
    222e:	f0 0d       	add	r31, r0
    2230:	65 9f       	mul	r22, r21
    2232:	f0 0d       	add	r31, r0
    2234:	99 27       	eor	r25, r25
    2236:	72 9f       	mul	r23, r18
    2238:	b0 0d       	add	r27, r0
    223a:	e1 1d       	adc	r30, r1
    223c:	f9 1f       	adc	r31, r25
    223e:	63 9f       	mul	r22, r19
    2240:	b0 0d       	add	r27, r0
    2242:	e1 1d       	adc	r30, r1
    2244:	f9 1f       	adc	r31, r25
    2246:	bd 01       	movw	r22, r26
    2248:	cf 01       	movw	r24, r30
    224a:	11 24       	eor	r1, r1
    224c:	08 95       	ret

0000224e <__udivmodsi4>:
    224e:	a1 e2       	ldi	r26, 0x21	; 33
    2250:	1a 2e       	mov	r1, r26
    2252:	aa 1b       	sub	r26, r26
    2254:	bb 1b       	sub	r27, r27
    2256:	fd 01       	movw	r30, r26
    2258:	0d c0       	rjmp	.+26     	; 0x2274 <__udivmodsi4_ep>

0000225a <__udivmodsi4_loop>:
    225a:	aa 1f       	adc	r26, r26
    225c:	bb 1f       	adc	r27, r27
    225e:	ee 1f       	adc	r30, r30
    2260:	ff 1f       	adc	r31, r31
    2262:	a2 17       	cp	r26, r18
    2264:	b3 07       	cpc	r27, r19
    2266:	e4 07       	cpc	r30, r20
    2268:	f5 07       	cpc	r31, r21
    226a:	20 f0       	brcs	.+8      	; 0x2274 <__udivmodsi4_ep>
    226c:	a2 1b       	sub	r26, r18
    226e:	b3 0b       	sbc	r27, r19
    2270:	e4 0b       	sbc	r30, r20
    2272:	f5 0b       	sbc	r31, r21

00002274 <__udivmodsi4_ep>:
    2274:	66 1f       	adc	r22, r22
    2276:	77 1f       	adc	r23, r23
    2278:	88 1f       	adc	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	1a 94       	dec	r1
    227e:	69 f7       	brne	.-38     	; 0x225a <__udivmodsi4_loop>
    2280:	60 95       	com	r22
    2282:	70 95       	com	r23
    2284:	80 95       	com	r24
    2286:	90 95       	com	r25
    2288:	9b 01       	movw	r18, r22
    228a:	ac 01       	movw	r20, r24
    228c:	bd 01       	movw	r22, r26
    228e:	cf 01       	movw	r24, r30
    2290:	08 95       	ret

00002292 <_exit>:
    2292:	f8 94       	cli

00002294 <__stop_program>:
    2294:	ff cf       	rjmp	.-2      	; 0x2294 <__stop_program>
