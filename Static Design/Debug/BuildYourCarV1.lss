
BuildYourCarV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  000028d6  0000296a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800184  00800184  00002a8e  2**0
                  ALLOC
  3 .stab         000032f4  00000000  00000000  00002a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018e8  00000000  00000000  00005d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000766c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  000077cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00007982  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000988f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000a961  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b994  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000bb14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000bdfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_7>
      20:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_8>
      24:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__vector_9>
      28:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <main>
      8a:	0c 94 69 14 	jmp	0x28d2	; 0x28d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <UI_Init>:
LED_t Mode_B = {PORTB, PIN5};
LED_t Mode_C = {PORTB, PIN6};
LED_t Mode_D = {PORTB, PIN7};

uint8_t UI_Init()
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	0f 92       	push	r0
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = STD_TYPES_OK;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	89 83       	std	Y+1, r24	; 0x01

	LED_u8Init(Mode_A);
     d7c:	80 91 68 01 	lds	r24, 0x0168
     d80:	90 91 69 01 	lds	r25, 0x0169
     d84:	0e 94 72 12 	call	0x24e4	; 0x24e4 <LED_u8Init>
	LED_u8Init(Mode_B);
     d88:	80 91 6a 01 	lds	r24, 0x016A
     d8c:	90 91 6b 01 	lds	r25, 0x016B
     d90:	0e 94 72 12 	call	0x24e4	; 0x24e4 <LED_u8Init>
	LED_u8Init(Mode_C);
     d94:	80 91 6c 01 	lds	r24, 0x016C
     d98:	90 91 6d 01 	lds	r25, 0x016D
     d9c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <LED_u8Init>
	LED_u8Init(Mode_D);
     da0:	80 91 6e 01 	lds	r24, 0x016E
     da4:	90 91 6f 01 	lds	r25, 0x016F
     da8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <LED_u8Init>


	KEYPAD_u8Init();
     dac:	0e 94 b9 12 	call	0x2572	; 0x2572 <KEYPAD_u8Init>
	return u8ErrorState;
     db0:	89 81       	ldd	r24, Y+1	; 0x01
}
     db2:	0f 90       	pop	r0
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <UI_GetKeyPressed>:

uint8_t UI_GetKeyPressed(uint8_t* UI_keyModuleReturn)
{
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <UI_GetKeyPressed+0x6>
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	9b 83       	std	Y+3, r25	; 0x03
     dc8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState= STD_TYPES_OK;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	89 83       	std	Y+1, r24	; 0x01
	u8ErrorState= KEYPAD_u8GetPressedKey(UI_keyModuleReturn);
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	9b 81       	ldd	r25, Y+3	; 0x03
     dd2:	0e 94 ef 12 	call	0x25de	; 0x25de <KEYPAD_u8GetPressedKey>
     dd6:	89 83       	std	Y+1, r24	; 0x01
	return u8ErrorState;
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <UI_SetLedModuleState>:

uint8_t UI_SetLedModuleState(uint8_t UI_LEDModuleState)
{
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	00 d0       	rcall	.+0      	; 0xdec <UI_SetLedModuleState+0x6>
     dec:	00 d0       	rcall	.+0      	; 0xdee <UI_SetLedModuleState+0x8>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState= STD_TYPES_OK;
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	89 83       	std	Y+1, r24	; 0x01
	LED_u8Off(Mode_A);
     df8:	80 91 68 01 	lds	r24, 0x0168
     dfc:	90 91 69 01 	lds	r25, 0x0169
     e00:	0e 94 96 12 	call	0x252c	; 0x252c <LED_u8Off>
	LED_u8Off(Mode_B);
     e04:	80 91 6a 01 	lds	r24, 0x016A
     e08:	90 91 6b 01 	lds	r25, 0x016B
     e0c:	0e 94 96 12 	call	0x252c	; 0x252c <LED_u8Off>
	LED_u8Off(Mode_C);
     e10:	80 91 6c 01 	lds	r24, 0x016C
     e14:	90 91 6d 01 	lds	r25, 0x016D
     e18:	0e 94 96 12 	call	0x252c	; 0x252c <LED_u8Off>
	LED_u8Off(Mode_D);
     e1c:	80 91 6e 01 	lds	r24, 0x016E
     e20:	90 91 6f 01 	lds	r25, 0x016F
     e24:	0e 94 96 12 	call	0x252c	; 0x252c <LED_u8Off>

	switch (UI_LEDModuleState)
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	3c 83       	std	Y+4, r19	; 0x04
     e30:	2b 83       	std	Y+3, r18	; 0x03
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	9c 81       	ldd	r25, Y+4	; 0x04
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	91 05       	cpc	r25, r1
     e3a:	09 f1       	breq	.+66     	; 0xe7e <UI_SetLedModuleState+0x98>
     e3c:	2b 81       	ldd	r18, Y+3	; 0x03
     e3e:	3c 81       	ldd	r19, Y+4	; 0x04
     e40:	23 30       	cpi	r18, 0x03	; 3
     e42:	31 05       	cpc	r19, r1
     e44:	54 f4       	brge	.+20     	; 0xe5a <UI_SetLedModuleState+0x74>
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	69 f1       	breq	.+90     	; 0xea8 <UI_SetLedModuleState+0xc2>
     e4e:	2b 81       	ldd	r18, Y+3	; 0x03
     e50:	3c 81       	ldd	r19, Y+4	; 0x04
     e52:	21 30       	cpi	r18, 0x01	; 1
     e54:	31 05       	cpc	r19, r1
     e56:	61 f0       	breq	.+24     	; 0xe70 <UI_SetLedModuleState+0x8a>
     e58:	40 c0       	rjmp	.+128    	; 0xeda <UI_SetLedModuleState+0xf4>
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	9c 81       	ldd	r25, Y+4	; 0x04
     e5e:	83 30       	cpi	r24, 0x03	; 3
     e60:	91 05       	cpc	r25, r1
     e62:	a1 f0       	breq	.+40     	; 0xe8c <UI_SetLedModuleState+0xa6>
     e64:	2b 81       	ldd	r18, Y+3	; 0x03
     e66:	3c 81       	ldd	r19, Y+4	; 0x04
     e68:	24 30       	cpi	r18, 0x04	; 4
     e6a:	31 05       	cpc	r19, r1
     e6c:	b1 f0       	breq	.+44     	; 0xe9a <UI_SetLedModuleState+0xb4>
     e6e:	35 c0       	rjmp	.+106    	; 0xeda <UI_SetLedModuleState+0xf4>
	{

	case MODE1_ON:
		LED_u8On(Mode_A);
     e70:	80 91 68 01 	lds	r24, 0x0168
     e74:	90 91 69 01 	lds	r25, 0x0169
     e78:	0e 94 84 12 	call	0x2508	; 0x2508 <LED_u8On>
     e7c:	2f c0       	rjmp	.+94     	; 0xedc <UI_SetLedModuleState+0xf6>
		break;
	case MODE2_ON:
		LED_u8On(Mode_B);
     e7e:	80 91 6a 01 	lds	r24, 0x016A
     e82:	90 91 6b 01 	lds	r25, 0x016B
     e86:	0e 94 84 12 	call	0x2508	; 0x2508 <LED_u8On>
     e8a:	28 c0       	rjmp	.+80     	; 0xedc <UI_SetLedModuleState+0xf6>
		break;
	case MODE3_ON:
		LED_u8On(Mode_C);
     e8c:	80 91 6c 01 	lds	r24, 0x016C
     e90:	90 91 6d 01 	lds	r25, 0x016D
     e94:	0e 94 84 12 	call	0x2508	; 0x2508 <LED_u8On>
     e98:	21 c0       	rjmp	.+66     	; 0xedc <UI_SetLedModuleState+0xf6>
		break;
	case MODE4_ON:
		LED_u8On(Mode_D);
     e9a:	80 91 6e 01 	lds	r24, 0x016E
     e9e:	90 91 6f 01 	lds	r25, 0x016F
     ea2:	0e 94 84 12 	call	0x2508	; 0x2508 <LED_u8On>
     ea6:	1a c0       	rjmp	.+52     	; 0xedc <UI_SetLedModuleState+0xf6>
		break;
	case ALL_ON:
		LED_u8On(Mode_A);
     ea8:	80 91 68 01 	lds	r24, 0x0168
     eac:	90 91 69 01 	lds	r25, 0x0169
     eb0:	0e 94 84 12 	call	0x2508	; 0x2508 <LED_u8On>
		LED_u8On(Mode_B);
     eb4:	80 91 6a 01 	lds	r24, 0x016A
     eb8:	90 91 6b 01 	lds	r25, 0x016B
     ebc:	0e 94 84 12 	call	0x2508	; 0x2508 <LED_u8On>
		LED_u8On(Mode_C);
     ec0:	80 91 6c 01 	lds	r24, 0x016C
     ec4:	90 91 6d 01 	lds	r25, 0x016D
     ec8:	0e 94 84 12 	call	0x2508	; 0x2508 <LED_u8On>
		LED_u8On(Mode_D);
     ecc:	80 91 6e 01 	lds	r24, 0x016E
     ed0:	90 91 6f 01 	lds	r25, 0x016F
     ed4:	0e 94 84 12 	call	0x2508	; 0x2508 <LED_u8On>
     ed8:	01 c0       	rjmp	.+2      	; 0xedc <UI_SetLedModuleState+0xf6>
		break;
	default:
		u8ErrorState  = STD_TYPES_NOK;
     eda:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	return u8ErrorState;
     edc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <DRIVE_u8Init>:

MotorDef_t Right_Motors = { PORTD , PIN2 ,PIN3 , PIN4,CHANNELA };
MotorDef_t Left_Motors = { PORTD , PIN6 ,PIN7 , PIN5, CHANNELB};

uint8_t DRIVE_u8Init ( void )
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <DRIVE_u8Init+0x6>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	uint8_t Error_State = STD_TYPES_OK ;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	89 83       	std	Y+1, r24	; 0x01
 	Error_State = MOTOR_init( &Right_Motors );
     efa:	80 e7       	ldi	r24, 0x70	; 112
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	0e 94 84 11 	call	0x2308	; 0x2308 <MOTOR_init>
     f02:	89 83       	std	Y+1, r24	; 0x01
	if ( Error_State == STD_TYPES_NOK )
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	88 23       	and	r24, r24
     f08:	19 f4       	brne	.+6      	; 0xf10 <DRIVE_u8Init+0x24>
	{
		return Error_State ;
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	8a 83       	std	Y+2, r24	; 0x02
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <DRIVE_u8Init+0x3e>
	}
	Error_State = MOTOR_init( &Left_Motors );
     f10:	85 e7       	ldi	r24, 0x75	; 117
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	0e 94 84 11 	call	0x2308	; 0x2308 <MOTOR_init>
     f18:	89 83       	std	Y+1, r24	; 0x01
	if ( Error_State == STD_TYPES_NOK )
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	88 23       	and	r24, r24
     f1e:	19 f4       	brne	.+6      	; 0xf26 <DRIVE_u8Init+0x3a>
	{
		return Error_State ;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	8a 83       	std	Y+2, r24	; 0x02
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DRIVE_u8Init+0x3e>
	}	
	return STD_TYPES_OK ;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	8a 83       	std	Y+2, r24	; 0x02
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <DRIVE_u8Right>:

uint8_t DRIVE_u8Right ( void )
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <DRIVE_u8Right+0x6>
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
	uint8_t Error_State = STD_TYPES_OK ;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	89 83       	std	Y+1, r24	; 0x01
	Error_State = MOTOR_Move( &Right_Motors , SLOW , ANTI_CLOCKWISE ) ;
     f44:	80 e7       	ldi	r24, 0x70	; 112
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	6e e1       	ldi	r22, 0x1E	; 30
     f4a:	41 e0       	ldi	r20, 0x01	; 1
     f4c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <MOTOR_Move>
     f50:	89 83       	std	Y+1, r24	; 0x01
	if ( Error_State == STD_TYPES_NOK )
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	88 23       	and	r24, r24
     f56:	19 f4       	brne	.+6      	; 0xf5e <DRIVE_u8Right+0x28>
	{
		return Error_State ;
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	8a 83       	std	Y+2, r24	; 0x02
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <DRIVE_u8Right+0x46>
	}
	Error_State = MOTOR_Move( &Left_Motors , SLOW , CLOCKWISE ) ;
     f5e:	85 e7       	ldi	r24, 0x75	; 117
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	6e e1       	ldi	r22, 0x1E	; 30
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <MOTOR_Move>
     f6a:	89 83       	std	Y+1, r24	; 0x01
	if ( Error_State == STD_TYPES_NOK )
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	88 23       	and	r24, r24
     f70:	19 f4       	brne	.+6      	; 0xf78 <DRIVE_u8Right+0x42>
	{
		return Error_State ;
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DRIVE_u8Right+0x46>
	}
	return STD_TYPES_OK ;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	8a 83       	std	Y+2, r24	; 0x02
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <DRIVE_u8Left>:

uint8_t DRIVE_u8Left ( void )
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <DRIVE_u8Left+0x6>
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
	uint8_t Error_State = STD_TYPES_OK ;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	89 83       	std	Y+1, r24	; 0x01
	Error_State = MOTOR_Move( &Left_Motors , SLOW , ANTI_CLOCKWISE ) ;
     f96:	85 e7       	ldi	r24, 0x75	; 117
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	6e e1       	ldi	r22, 0x1E	; 30
     f9c:	41 e0       	ldi	r20, 0x01	; 1
     f9e:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <MOTOR_Move>
     fa2:	89 83       	std	Y+1, r24	; 0x01
	if ( Error_State == STD_TYPES_NOK )
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	88 23       	and	r24, r24
     fa8:	19 f4       	brne	.+6      	; 0xfb0 <DRIVE_u8Left+0x28>
	{
		return Error_State ;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	8a 83       	std	Y+2, r24	; 0x02
     fae:	0f c0       	rjmp	.+30     	; 0xfce <DRIVE_u8Left+0x46>
	}
	Error_State = MOTOR_Move( &Right_Motors , SLOW , CLOCKWISE ) ;
     fb0:	80 e7       	ldi	r24, 0x70	; 112
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	6e e1       	ldi	r22, 0x1E	; 30
     fb6:	40 e0       	ldi	r20, 0x00	; 0
     fb8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <MOTOR_Move>
     fbc:	89 83       	std	Y+1, r24	; 0x01
	if ( Error_State == STD_TYPES_NOK )
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	88 23       	and	r24, r24
     fc2:	19 f4       	brne	.+6      	; 0xfca <DRIVE_u8Left+0x42>
	{
		return Error_State ;
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	8a 83       	std	Y+2, r24	; 0x02
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DRIVE_u8Left+0x46>
	}
	return STD_TYPES_OK ;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	8a 83       	std	Y+2, r24	; 0x02
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <DRIVE_u8Mode>:

uint8_t DRIVE_u8Mode ( uint8_t mode )
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <DRIVE_u8Mode+0x6>
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <DRIVE_u8Mode+0x8>
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <DRIVE_u8Mode+0xa>
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Error_State = STD_TYPES_OK ;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	89 83       	std	Y+1, r24	; 0x01
	switch ( mode )
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	3d 83       	std	Y+5, r19	; 0x05
     ff6:	2c 83       	std	Y+4, r18	; 0x04
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	91 05       	cpc	r25, r1
    1000:	09 f4       	brne	.+2      	; 0x1004 <DRIVE_u8Mode+0x2a>
    1002:	4e c0       	rjmp	.+156    	; 0x10a0 <DRIVE_u8Mode+0xc6>
    1004:	2c 81       	ldd	r18, Y+4	; 0x04
    1006:	3d 81       	ldd	r19, Y+5	; 0x05
    1008:	23 30       	cpi	r18, 0x03	; 3
    100a:	31 05       	cpc	r19, r1
    100c:	54 f4       	brge	.+20     	; 0x1022 <DRIVE_u8Mode+0x48>
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	9d 81       	ldd	r25, Y+5	; 0x05
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	99 f0       	breq	.+38     	; 0x103c <DRIVE_u8Mode+0x62>
    1016:	2c 81       	ldd	r18, Y+4	; 0x04
    1018:	3d 81       	ldd	r19, Y+5	; 0x05
    101a:	21 30       	cpi	r18, 0x01	; 1
    101c:	31 05       	cpc	r19, r1
    101e:	29 f1       	breq	.+74     	; 0x106a <DRIVE_u8Mode+0x90>
    1020:	8d c0       	rjmp	.+282    	; 0x113c <DRIVE_u8Mode+0x162>
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	83 30       	cpi	r24, 0x03	; 3
    1028:	91 05       	cpc	r25, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <DRIVE_u8Mode+0x54>
    102c:	53 c0       	rjmp	.+166    	; 0x10d4 <DRIVE_u8Mode+0xfa>
    102e:	2c 81       	ldd	r18, Y+4	; 0x04
    1030:	3d 81       	ldd	r19, Y+5	; 0x05
    1032:	24 30       	cpi	r18, 0x04	; 4
    1034:	31 05       	cpc	r19, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <DRIVE_u8Mode+0x60>
    1038:	67 c0       	rjmp	.+206    	; 0x1108 <DRIVE_u8Mode+0x12e>
    103a:	80 c0       	rjmp	.+256    	; 0x113c <DRIVE_u8Mode+0x162>
	{
		case MODE1 :
			Error_State = MOTOR_Stop( &Left_Motors ) ;
    103c:	85 e7       	ldi	r24, 0x75	; 117
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0e 94 47 12 	call	0x248e	; 0x248e <MOTOR_Stop>
    1044:	89 83       	std	Y+1, r24	; 0x01
			if ( Error_State == STD_TYPES_NOK )
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	88 23       	and	r24, r24
    104a:	19 f4       	brne	.+6      	; 0x1052 <DRIVE_u8Mode+0x78>
			{
				return Error_State ;
    104c:	39 81       	ldd	r19, Y+1	; 0x01
    104e:	3b 83       	std	Y+3, r19	; 0x03
    1050:	76 c0       	rjmp	.+236    	; 0x113e <DRIVE_u8Mode+0x164>
			}		
			Error_State = MOTOR_Stop( &Right_Motors ) ;
    1052:	80 e7       	ldi	r24, 0x70	; 112
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	0e 94 47 12 	call	0x248e	; 0x248e <MOTOR_Stop>
    105a:	89 83       	std	Y+1, r24	; 0x01
			if ( Error_State == STD_TYPES_NOK )
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	88 23       	and	r24, r24
    1060:	09 f0       	breq	.+2      	; 0x1064 <DRIVE_u8Mode+0x8a>
    1062:	6c c0       	rjmp	.+216    	; 0x113c <DRIVE_u8Mode+0x162>
			{
				return Error_State ;
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	6a c0       	rjmp	.+212    	; 0x113e <DRIVE_u8Mode+0x164>
			}
			break ;	
			
		case MODE2 :
			Error_State = MOTOR_Move( &Left_Motors , SLOW , CLOCKWISE ) ;
    106a:	85 e7       	ldi	r24, 0x75	; 117
    106c:	91 e0       	ldi	r25, 0x01	; 1
    106e:	6e e1       	ldi	r22, 0x1E	; 30
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <MOTOR_Move>
    1076:	89 83       	std	Y+1, r24	; 0x01
			if ( Error_State == STD_TYPES_NOK )
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	88 23       	and	r24, r24
    107c:	19 f4       	brne	.+6      	; 0x1084 <DRIVE_u8Mode+0xaa>
			{
				return Error_State ;
    107e:	99 81       	ldd	r25, Y+1	; 0x01
    1080:	9b 83       	std	Y+3, r25	; 0x03
    1082:	5d c0       	rjmp	.+186    	; 0x113e <DRIVE_u8Mode+0x164>
			}		
			Error_State = MOTOR_Move( &Right_Motors , SLOW , CLOCKWISE ) ;
    1084:	80 e7       	ldi	r24, 0x70	; 112
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	6e e1       	ldi	r22, 0x1E	; 30
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <MOTOR_Move>
    1090:	89 83       	std	Y+1, r24	; 0x01
			if ( Error_State == STD_TYPES_NOK )
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	88 23       	and	r24, r24
    1096:	09 f0       	breq	.+2      	; 0x109a <DRIVE_u8Mode+0xc0>
    1098:	51 c0       	rjmp	.+162    	; 0x113c <DRIVE_u8Mode+0x162>
			{
				return Error_State ;
    109a:	29 81       	ldd	r18, Y+1	; 0x01
    109c:	2b 83       	std	Y+3, r18	; 0x03
    109e:	4f c0       	rjmp	.+158    	; 0x113e <DRIVE_u8Mode+0x164>
			}
			break ;	
			
		case MODE3 :
			Error_State = MOTOR_Move( &Left_Motors , MIDIUM , CLOCKWISE ) ;
    10a0:	85 e7       	ldi	r24, 0x75	; 117
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	6c e3       	ldi	r22, 0x3C	; 60
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <MOTOR_Move>
    10ac:	89 83       	std	Y+1, r24	; 0x01
			if ( Error_State == STD_TYPES_NOK )
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	88 23       	and	r24, r24
    10b2:	19 f4       	brne	.+6      	; 0x10ba <DRIVE_u8Mode+0xe0>
			{
				return Error_State ;
    10b4:	39 81       	ldd	r19, Y+1	; 0x01
    10b6:	3b 83       	std	Y+3, r19	; 0x03
    10b8:	42 c0       	rjmp	.+132    	; 0x113e <DRIVE_u8Mode+0x164>
			}		
			Error_State = MOTOR_Move( &Right_Motors , MIDIUM , CLOCKWISE ) ;
    10ba:	80 e7       	ldi	r24, 0x70	; 112
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	6c e3       	ldi	r22, 0x3C	; 60
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <MOTOR_Move>
    10c6:	89 83       	std	Y+1, r24	; 0x01
			if ( Error_State == STD_TYPES_NOK )
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	88 23       	and	r24, r24
    10cc:	b9 f5       	brne	.+110    	; 0x113c <DRIVE_u8Mode+0x162>
			{
				return Error_State ;
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	8b 83       	std	Y+3, r24	; 0x03
    10d2:	35 c0       	rjmp	.+106    	; 0x113e <DRIVE_u8Mode+0x164>
			}
			break ;	
		
		case MODE4 :
			Error_State = MOTOR_Move( &Left_Motors , FAST , CLOCKWISE ) ;
    10d4:	85 e7       	ldi	r24, 0x75	; 117
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	6a e5       	ldi	r22, 0x5A	; 90
    10da:	40 e0       	ldi	r20, 0x00	; 0
    10dc:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <MOTOR_Move>
    10e0:	89 83       	std	Y+1, r24	; 0x01
			if ( Error_State == STD_TYPES_NOK )
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	88 23       	and	r24, r24
    10e6:	19 f4       	brne	.+6      	; 0x10ee <DRIVE_u8Mode+0x114>
			{
				return Error_State ;
    10e8:	99 81       	ldd	r25, Y+1	; 0x01
    10ea:	9b 83       	std	Y+3, r25	; 0x03
    10ec:	28 c0       	rjmp	.+80     	; 0x113e <DRIVE_u8Mode+0x164>
			}		
			Error_State = MOTOR_Move( &Right_Motors , FAST , CLOCKWISE ) ;
    10ee:	80 e7       	ldi	r24, 0x70	; 112
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	6a e5       	ldi	r22, 0x5A	; 90
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <MOTOR_Move>
    10fa:	89 83       	std	Y+1, r24	; 0x01
			if ( Error_State == STD_TYPES_NOK )
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	88 23       	and	r24, r24
    1100:	e9 f4       	brne	.+58     	; 0x113c <DRIVE_u8Mode+0x162>
			{
				return Error_State ;
    1102:	29 81       	ldd	r18, Y+1	; 0x01
    1104:	2b 83       	std	Y+3, r18	; 0x03
    1106:	1b c0       	rjmp	.+54     	; 0x113e <DRIVE_u8Mode+0x164>
			}
			break ;
				
		case MODE5 :
			Error_State = MOTOR_Move( &Left_Motors , SLOW , ANTI_CLOCKWISE ) ;
    1108:	85 e7       	ldi	r24, 0x75	; 117
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	6e e1       	ldi	r22, 0x1E	; 30
    110e:	41 e0       	ldi	r20, 0x01	; 1
    1110:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <MOTOR_Move>
    1114:	89 83       	std	Y+1, r24	; 0x01
			if ( Error_State == STD_TYPES_NOK )
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	88 23       	and	r24, r24
    111a:	19 f4       	brne	.+6      	; 0x1122 <DRIVE_u8Mode+0x148>
			{
				return Error_State ;
    111c:	39 81       	ldd	r19, Y+1	; 0x01
    111e:	3b 83       	std	Y+3, r19	; 0x03
    1120:	0e c0       	rjmp	.+28     	; 0x113e <DRIVE_u8Mode+0x164>
			}		
			Error_State = MOTOR_Move( &Right_Motors , SLOW , ANTI_CLOCKWISE ) ;
    1122:	80 e7       	ldi	r24, 0x70	; 112
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	6e e1       	ldi	r22, 0x1E	; 30
    1128:	41 e0       	ldi	r20, 0x01	; 1
    112a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <MOTOR_Move>
    112e:	89 83       	std	Y+1, r24	; 0x01
			if ( Error_State == STD_TYPES_NOK )
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	88 23       	and	r24, r24
    1134:	19 f4       	brne	.+6      	; 0x113c <DRIVE_u8Mode+0x162>
			{
				return Error_State ;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	8b 83       	std	Y+3, r24	; 0x03
    113a:	01 c0       	rjmp	.+2      	; 0x113e <DRIVE_u8Mode+0x164>
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DRIVE_u8Mode+0x168>
			break ;
				
		default :
			break ;
	}
}
    113e:	9b 81       	ldd	r25, Y+3	; 0x03
    1140:	9e 83       	std	Y+6, r25	; 0x06
    1142:	8e 81       	ldd	r24, Y+6	; 0x06
    1144:	26 96       	adiw	r28, 0x06	; 6
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <TIMER1_u8Init>:
static void (*COMPA_callBack)(void);
static void (*COMPB_callBack)(void);

uint16_t volatile counter = 0;

uint8_t TIMER1_u8Init(void){
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A_REG = 0;
    115e:	ef e4       	ldi	r30, 0x4F	; 79
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	10 82       	st	Z, r1
	TCCR1B_REG = 0;
    1164:	ee e4       	ldi	r30, 0x4E	; 78
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	10 82       	st	Z, r1
	return 1;
    116a:	81 e0       	ldi	r24, 0x01	; 1
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <TIMER1_u8Start>:

uint8_t TIMER1_u8Start(void){
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
	
	TCCR1B_REG |= (1 << CS10) | (1 << CS11);
    117a:	ae e4       	ldi	r26, 0x4E	; 78
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	ee e4       	ldi	r30, 0x4E	; 78
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	83 60       	ori	r24, 0x03	; 3
    1186:	8c 93       	st	X, r24
	TCNT1_REG = INIT_TIME;
    1188:	ec e4       	ldi	r30, 0x4C	; 76
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	9f ef       	ldi	r25, 0xFF	; 255
    1190:	91 83       	std	Z+1, r25	; 0x01
    1192:	80 83       	st	Z, r24
	return 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
}
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <TIMER1_u8SetComapre>:

uint8_t TIMER1_u8SetComapre(CHANNEL channel,uint16_t compareValue){
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <TIMER1_u8SetComapre+0x6>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <TIMER1_u8SetComapre+0x8>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <TIMER1_u8SetComapre+0xa>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	7b 83       	std	Y+3, r23	; 0x03
    11ae:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel){
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	3e 83       	std	Y+6, r19	; 0x06
    11b8:	2d 83       	std	Y+5, r18	; 0x05
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	31 f0       	breq	.+12     	; 0x11ce <TIMER1_u8SetComapre+0x32>
    11c2:	2d 81       	ldd	r18, Y+5	; 0x05
    11c4:	3e 81       	ldd	r19, Y+6	; 0x06
    11c6:	21 30       	cpi	r18, 0x01	; 1
    11c8:	31 05       	cpc	r19, r1
    11ca:	51 f0       	breq	.+20     	; 0x11e0 <TIMER1_u8SetComapre+0x44>
    11cc:	12 c0       	rjmp	.+36     	; 0x11f2 <TIMER1_u8SetComapre+0x56>
		case CHANNELA:
		OCR1A_REG = compareValue + INIT_TIME;
    11ce:	ea e4       	ldi	r30, 0x4A	; 74
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	9b 81       	ldd	r25, Y+3	; 0x03
    11d6:	80 50       	subi	r24, 0x00	; 0
    11d8:	91 40       	sbci	r25, 0x01	; 1
    11da:	91 83       	std	Z+1, r25	; 0x01
    11dc:	80 83       	st	Z, r24
    11de:	0b c0       	rjmp	.+22     	; 0x11f6 <TIMER1_u8SetComapre+0x5a>
		break;
		case CHANNELB:
		OCR1B_REG = compareValue + INIT_TIME;
    11e0:	e8 e4       	ldi	r30, 0x48	; 72
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	9b 81       	ldd	r25, Y+3	; 0x03
    11e8:	80 50       	subi	r24, 0x00	; 0
    11ea:	91 40       	sbci	r25, 0x01	; 1
    11ec:	91 83       	std	Z+1, r25	; 0x01
    11ee:	80 83       	st	Z, r24
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <TIMER1_u8SetComapre+0x5a>
		break;
		default:
		return 0;
    11f2:	1c 82       	std	Y+4, r1	; 0x04
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <TIMER1_u8SetComapre+0x5e>
	}
	return 1;
    11f6:	31 e0       	ldi	r19, 0x01	; 1
    11f8:	3c 83       	std	Y+4, r19	; 0x04
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
}
    11fc:	26 96       	adiw	r28, 0x06	; 6
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <TIMER1_u8SetChannelInterrupt>:
uint8_t TIMER1_u8SetChannelInterrupt(CHANNEL channel, void (*fnCallBack)(void)){
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	00 d0       	rcall	.+0      	; 0x1214 <TIMER1_u8SetChannelInterrupt+0x6>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <TIMER1_u8SetChannelInterrupt+0x8>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <TIMER1_u8SetChannelInterrupt+0xa>
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	7b 83       	std	Y+3, r23	; 0x03
    1220:	6a 83       	std	Y+2, r22	; 0x02
	if(fnCallBack == NULL){
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	9b 81       	ldd	r25, Y+3	; 0x03
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	11 f4       	brne	.+4      	; 0x122e <TIMER1_u8SetChannelInterrupt+0x20>
		return 0;
    122a:	1e 82       	std	Y+6, r1	; 0x06
    122c:	3d c0       	rjmp	.+122    	; 0x12a8 <TIMER1_u8SetChannelInterrupt+0x9a>
	}
	switch(channel){
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	3d 83       	std	Y+5, r19	; 0x05
    1236:	2c 83       	std	Y+4, r18	; 0x04
    1238:	8c 81       	ldd	r24, Y+4	; 0x04
    123a:	9d 81       	ldd	r25, Y+5	; 0x05
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	31 f0       	breq	.+12     	; 0x124c <TIMER1_u8SetChannelInterrupt+0x3e>
    1240:	2c 81       	ldd	r18, Y+4	; 0x04
    1242:	3d 81       	ldd	r19, Y+5	; 0x05
    1244:	21 30       	cpi	r18, 0x01	; 1
    1246:	31 05       	cpc	r19, r1
    1248:	79 f0       	breq	.+30     	; 0x1268 <TIMER1_u8SetChannelInterrupt+0x5a>
    124a:	1c c0       	rjmp	.+56     	; 0x1284 <TIMER1_u8SetChannelInterrupt+0x76>
		case CHANNELA:
			SET_BIT(TIMSK_REG, OCIE1A);
    124c:	a9 e5       	ldi	r26, 0x59	; 89
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e9 e5       	ldi	r30, 0x59	; 89
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	80 61       	ori	r24, 0x10	; 16
    1258:	8c 93       	st	X, r24
			COMPA_callBack = fnCallBack;
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	9b 81       	ldd	r25, Y+3	; 0x03
    125e:	90 93 87 01 	sts	0x0187, r25
    1262:	80 93 86 01 	sts	0x0186, r24
    1266:	10 c0       	rjmp	.+32     	; 0x1288 <TIMER1_u8SetChannelInterrupt+0x7a>
		break;
		case CHANNELB:
			SET_BIT(TIMSK_REG, OCIE1B);
    1268:	a9 e5       	ldi	r26, 0x59	; 89
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e9 e5       	ldi	r30, 0x59	; 89
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	88 60       	ori	r24, 0x08	; 8
    1274:	8c 93       	st	X, r24
			COMPB_callBack = fnCallBack;
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	9b 81       	ldd	r25, Y+3	; 0x03
    127a:	90 93 89 01 	sts	0x0189, r25
    127e:	80 93 88 01 	sts	0x0188, r24
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <TIMER1_u8SetChannelInterrupt+0x7a>
		break;
		default:
		return 0;
    1284:	1e 82       	std	Y+6, r1	; 0x06
    1286:	10 c0       	rjmp	.+32     	; 0x12a8 <TIMER1_u8SetChannelInterrupt+0x9a>
	}
	SET_BIT(TIMSK_REG, TOIE1);
    1288:	a9 e5       	ldi	r26, 0x59	; 89
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e9 e5       	ldi	r30, 0x59	; 89
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	84 60       	ori	r24, 0x04	; 4
    1294:	8c 93       	st	X, r24
	SET_BIT(SREG_REG, I_BIT);
    1296:	af e5       	ldi	r26, 0x5F	; 95
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	ef e5       	ldi	r30, 0x5F	; 95
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	80 68       	ori	r24, 0x80	; 128
    12a2:	8c 93       	st	X, r24
	return 1;	
    12a4:	31 e0       	ldi	r19, 0x01	; 1
    12a6:	3e 83       	std	Y+6, r19	; 0x06
    12a8:	8e 81       	ldd	r24, Y+6	; 0x06
}
    12aa:	26 96       	adiw	r28, 0x06	; 6
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <TIMER1_u8StopChannel>:
uint8_t TIMER1_u8StopChannel(CHANNEL channel){
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <TIMER1_u8StopChannel+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <TIMER1_u8StopChannel+0x8>
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	89 83       	std	Y+1, r24	; 0x01
	
	switch(channel){
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3c 83       	std	Y+4, r19	; 0x04
    12d2:	2b 83       	std	Y+3, r18	; 0x03
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	31 f0       	breq	.+12     	; 0x12e8 <TIMER1_u8StopChannel+0x2c>
    12dc:	2b 81       	ldd	r18, Y+3	; 0x03
    12de:	3c 81       	ldd	r19, Y+4	; 0x04
    12e0:	21 30       	cpi	r18, 0x01	; 1
    12e2:	31 05       	cpc	r19, r1
    12e4:	69 f0       	breq	.+26     	; 0x1300 <TIMER1_u8StopChannel+0x44>
    12e6:	18 c0       	rjmp	.+48     	; 0x1318 <TIMER1_u8StopChannel+0x5c>
		case CHANNELA:
			CLR_BIT(TIMSK_REG, OCIE1A);
    12e8:	a9 e5       	ldi	r26, 0x59	; 89
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e9 e5       	ldi	r30, 0x59	; 89
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	8f 7e       	andi	r24, 0xEF	; 239
    12f4:	8c 93       	st	X, r24
			COMPA_callBack = NULL;
    12f6:	10 92 87 01 	sts	0x0187, r1
    12fa:	10 92 86 01 	sts	0x0186, r1
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <TIMER1_u8StopChannel+0x60>
			break;
		case CHANNELB:
			CLR_BIT(TIMSK_REG, OCIE1B);
    1300:	a9 e5       	ldi	r26, 0x59	; 89
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e9 e5       	ldi	r30, 0x59	; 89
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	87 7f       	andi	r24, 0xF7	; 247
    130c:	8c 93       	st	X, r24
			COMPB_callBack = NULL;
    130e:	10 92 89 01 	sts	0x0189, r1
    1312:	10 92 88 01 	sts	0x0188, r1
    1316:	02 c0       	rjmp	.+4      	; 0x131c <TIMER1_u8StopChannel+0x60>
			break;
		default:
		return 0;	
    1318:	1a 82       	std	Y+2, r1	; 0x02
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <TIMER1_u8StopChannel+0x64>
	}
	return 1;
    131c:	31 e0       	ldi	r19, 0x01	; 1
    131e:	3a 83       	std	Y+2, r19	; 0x02
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <__vector_7>:

//TIMER1 COMPA
void __vector_7(void){
    1330:	1f 92       	push	r1
    1332:	0f 92       	push	r0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	2f 93       	push	r18
    133c:	3f 93       	push	r19
    133e:	4f 93       	push	r20
    1340:	5f 93       	push	r21
    1342:	6f 93       	push	r22
    1344:	7f 93       	push	r23
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	af 93       	push	r26
    134c:	bf 93       	push	r27
    134e:	ef 93       	push	r30
    1350:	ff 93       	push	r31
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
	if(COMPA_callBack != NULL){
    135a:	80 91 86 01 	lds	r24, 0x0186
    135e:	90 91 87 01 	lds	r25, 0x0187
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	29 f0       	breq	.+10     	; 0x1370 <__vector_7+0x40>
		COMPA_callBack();
    1366:	e0 91 86 01 	lds	r30, 0x0186
    136a:	f0 91 87 01 	lds	r31, 0x0187
    136e:	09 95       	icall
	}
}
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	7f 91       	pop	r23
    1382:	6f 91       	pop	r22
    1384:	5f 91       	pop	r21
    1386:	4f 91       	pop	r20
    1388:	3f 91       	pop	r19
    138a:	2f 91       	pop	r18
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	1f 90       	pop	r1
    1394:	18 95       	reti

00001396 <__vector_8>:
//TIMER1 COMPB
void __vector_8(void){
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	2f 93       	push	r18
    13a2:	3f 93       	push	r19
    13a4:	4f 93       	push	r20
    13a6:	5f 93       	push	r21
    13a8:	6f 93       	push	r22
    13aa:	7f 93       	push	r23
    13ac:	8f 93       	push	r24
    13ae:	9f 93       	push	r25
    13b0:	af 93       	push	r26
    13b2:	bf 93       	push	r27
    13b4:	ef 93       	push	r30
    13b6:	ff 93       	push	r31
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
	if(COMPB_callBack != NULL){
    13c0:	80 91 88 01 	lds	r24, 0x0188
    13c4:	90 91 89 01 	lds	r25, 0x0189
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	29 f0       	breq	.+10     	; 0x13d6 <__vector_8+0x40>
		COMPB_callBack();
    13cc:	e0 91 88 01 	lds	r30, 0x0188
    13d0:	f0 91 89 01 	lds	r31, 0x0189
    13d4:	09 95       	icall
	}
}
    13d6:	cf 91       	pop	r28
    13d8:	df 91       	pop	r29
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <__vector_9>:
//TIMER1 OVF
void __vector_9(void){
    13fc:	1f 92       	push	r1
    13fe:	0f 92       	push	r0
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	0f 92       	push	r0
    1404:	11 24       	eor	r1, r1
    1406:	2f 93       	push	r18
    1408:	3f 93       	push	r19
    140a:	4f 93       	push	r20
    140c:	5f 93       	push	r21
    140e:	6f 93       	push	r22
    1410:	7f 93       	push	r23
    1412:	8f 93       	push	r24
    1414:	9f 93       	push	r25
    1416:	af 93       	push	r26
    1418:	bf 93       	push	r27
    141a:	ef 93       	push	r30
    141c:	ff 93       	push	r31
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG = INIT_TIME;
    1426:	ec e4       	ldi	r30, 0x4C	; 76
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	9f ef       	ldi	r25, 0xFF	; 255
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	80 83       	st	Z, r24
	if(COMPA_callBack != NULL){
    1432:	80 91 86 01 	lds	r24, 0x0186
    1436:	90 91 87 01 	lds	r25, 0x0187
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	29 f0       	breq	.+10     	; 0x1448 <__vector_9+0x4c>
		COMPA_callBack();
    143e:	e0 91 86 01 	lds	r30, 0x0186
    1442:	f0 91 87 01 	lds	r31, 0x0187
    1446:	09 95       	icall
	}
	if(COMPB_callBack != NULL){
    1448:	80 91 88 01 	lds	r24, 0x0188
    144c:	90 91 89 01 	lds	r25, 0x0189
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	29 f0       	breq	.+10     	; 0x145e <__vector_9+0x62>
		COMPB_callBack();
    1454:	e0 91 88 01 	lds	r30, 0x0188
    1458:	f0 91 89 01 	lds	r31, 0x0189
    145c:	09 95       	icall
	}		
}
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	ff 91       	pop	r31
    1464:	ef 91       	pop	r30
    1466:	bf 91       	pop	r27
    1468:	af 91       	pop	r26
    146a:	9f 91       	pop	r25
    146c:	8f 91       	pop	r24
    146e:	7f 91       	pop	r23
    1470:	6f 91       	pop	r22
    1472:	5f 91       	pop	r21
    1474:	4f 91       	pop	r20
    1476:	3f 91       	pop	r19
    1478:	2f 91       	pop	r18
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	0f 90       	pop	r0
    1480:	1f 90       	pop	r1
    1482:	18 95       	reti

00001484 <channelA_callBack>:

#include "PWM.h"
static PWMPin_t PWM1;
static PWMPin_t PWM2;

void channelA_callBack(void){	
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8TogglePinData(PWM1.port, PWM1.pin);
    148c:	80 91 8a 01 	lds	r24, 0x018A
    1490:	90 91 8b 01 	lds	r25, 0x018B
    1494:	69 2f       	mov	r22, r25
    1496:	0e 94 99 10 	call	0x2132	; 0x2132 <DIO_u8TogglePinData>
}
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <channelB_callBack>:
void channelB_callBack(void){
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8TogglePinData(PWM2.port, PWM2.pin);
    14a8:	80 91 8c 01 	lds	r24, 0x018C
    14ac:	90 91 8d 01 	lds	r25, 0x018D
    14b0:	69 2f       	mov	r22, r25
    14b2:	0e 94 99 10 	call	0x2132	; 0x2132 <DIO_u8TogglePinData>
}
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <PWM_u8Init>:

uint8_t PWM_u8Init(CHANNEL channel,PWMPin_t* pwm){
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <PWM_u8Init+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <PWM_u8Init+0x8>
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <PWM_u8Init+0xa>
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	7b 83       	std	Y+3, r23	; 0x03
    14ce:	6a 83       	std	Y+2, r22	; 0x02
	switch(channel){
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	3e 83       	std	Y+6, r19	; 0x06
    14d8:	2d 83       	std	Y+5, r18	; 0x05
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	31 f0       	breq	.+12     	; 0x14ee <PWM_u8Init+0x32>
    14e2:	2d 81       	ldd	r18, Y+5	; 0x05
    14e4:	3e 81       	ldd	r19, Y+6	; 0x06
    14e6:	21 30       	cpi	r18, 0x01	; 1
    14e8:	31 05       	cpc	r19, r1
    14ea:	51 f0       	breq	.+20     	; 0x1500 <PWM_u8Init+0x44>
    14ec:	12 c0       	rjmp	.+36     	; 0x1512 <PWM_u8Init+0x56>
		case CHANNELA:
			PWM1 = *pwm;
    14ee:	ea 81       	ldd	r30, Y+2	; 0x02
    14f0:	fb 81       	ldd	r31, Y+3	; 0x03
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	90 93 8b 01 	sts	0x018B, r25
    14fa:	80 93 8a 01 	sts	0x018A, r24
    14fe:	0b c0       	rjmp	.+22     	; 0x1516 <PWM_u8Init+0x5a>
			break;
		case CHANNELB:
			PWM2 = *pwm;
    1500:	ea 81       	ldd	r30, Y+2	; 0x02
    1502:	fb 81       	ldd	r31, Y+3	; 0x03
    1504:	80 81       	ld	r24, Z
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	90 93 8d 01 	sts	0x018D, r25
    150c:	80 93 8c 01 	sts	0x018C, r24
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <PWM_u8Init+0x5a>
			break;
		default:
			return 0;
    1512:	1c 82       	std	Y+4, r1	; 0x04
    1514:	03 c0       	rjmp	.+6      	; 0x151c <PWM_u8Init+0x60>
	}
	return TIMER1_u8Init();
    1516:	0e 94 ab 08 	call	0x1156	; 0x1156 <TIMER1_u8Init>
    151a:	8c 83       	std	Y+4, r24	; 0x04
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    151e:	26 96       	adiw	r28, 0x06	; 6
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <PWM_u8DutyCycle>:

uint8_t PWM_u8DutyCycle(CHANNEL channel, uint32_t dutyCycle){
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	28 97       	sbiw	r28, 0x08	; 8
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	8b 83       	std	Y+3, r24	; 0x03
    1546:	7d 83       	std	Y+5, r23	; 0x05
    1548:	6c 83       	std	Y+4, r22	; 0x04

	uint32_t dutyValue = ((float) dutyCycle * MAX_VALUE) / MAX_DUTY;
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	9d 81       	ldd	r25, Y+5	; 0x05
    154e:	cc 01       	movw	r24, r24
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	bc 01       	movw	r22, r24
    1562:	cd 01       	movw	r24, r26
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	40 e8       	ldi	r20, 0x80	; 128
    156a:	53 e4       	ldi	r21, 0x43	; 67
    156c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	bc 01       	movw	r22, r24
    1576:	cd 01       	movw	r24, r26
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	48 ec       	ldi	r20, 0xC8	; 200
    157e:	52 e4       	ldi	r21, 0x42	; 66
    1580:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01
	switch(channel){
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	38 87       	std	Y+8, r19	; 0x08
    15a0:	2f 83       	std	Y+7, r18	; 0x07
    15a2:	8f 81       	ldd	r24, Y+7	; 0x07
    15a4:	98 85       	ldd	r25, Y+8	; 0x08
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	31 f0       	breq	.+12     	; 0x15b6 <PWM_u8DutyCycle+0x86>
    15aa:	2f 81       	ldd	r18, Y+7	; 0x07
    15ac:	38 85       	ldd	r19, Y+8	; 0x08
    15ae:	21 30       	cpi	r18, 0x01	; 1
    15b0:	31 05       	cpc	r19, r1
    15b2:	c9 f0       	breq	.+50     	; 0x15e6 <PWM_u8DutyCycle+0xb6>
    15b4:	30 c0       	rjmp	.+96     	; 0x1616 <PWM_u8DutyCycle+0xe6>
		case CHANNELA:
			DIO_u8SetPinData(PWM1.port, PWM1.pin, DIO_HIGH);
    15b6:	80 91 8a 01 	lds	r24, 0x018A
    15ba:	90 91 8b 01 	lds	r25, 0x018B
    15be:	69 2f       	mov	r22, r25
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
			TIMER1_u8StopChannel(channel);
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <TIMER1_u8StopChannel>
			TIMER1_u8SetComapre(channel, (uint16_t) dutyValue);
    15cc:	29 81       	ldd	r18, Y+1	; 0x01
    15ce:	3a 81       	ldd	r19, Y+2	; 0x02
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	b9 01       	movw	r22, r18
    15d4:	0e 94 ce 08 	call	0x119c	; 0x119c <TIMER1_u8SetComapre>
			TIMER1_u8SetChannelInterrupt(channel, channelA_callBack);
    15d8:	22 e4       	ldi	r18, 0x42	; 66
    15da:	3a e0       	ldi	r19, 0x0A	; 10
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	b9 01       	movw	r22, r18
    15e0:	0e 94 07 09 	call	0x120e	; 0x120e <TIMER1_u8SetChannelInterrupt>
    15e4:	1a c0       	rjmp	.+52     	; 0x161a <PWM_u8DutyCycle+0xea>
			break;
		case CHANNELB:
			DIO_u8SetPinData(PWM2.port, PWM2.pin, DIO_HIGH);
    15e6:	80 91 8c 01 	lds	r24, 0x018C
    15ea:	90 91 8d 01 	lds	r25, 0x018D
    15ee:	69 2f       	mov	r22, r25
    15f0:	41 e0       	ldi	r20, 0x01	; 1
    15f2:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
			TIMER1_u8StopChannel(channel);
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <TIMER1_u8StopChannel>
			TIMER1_u8SetComapre(channel, (uint16_t) dutyValue);
    15fc:	29 81       	ldd	r18, Y+1	; 0x01
    15fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	b9 01       	movw	r22, r18
    1604:	0e 94 ce 08 	call	0x119c	; 0x119c <TIMER1_u8SetComapre>
			TIMER1_u8SetChannelInterrupt(channel, channelB_callBack);
    1608:	20 e5       	ldi	r18, 0x50	; 80
    160a:	3a e0       	ldi	r19, 0x0A	; 10
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	b9 01       	movw	r22, r18
    1610:	0e 94 07 09 	call	0x120e	; 0x120e <TIMER1_u8SetChannelInterrupt>
    1614:	02 c0       	rjmp	.+4      	; 0x161a <PWM_u8DutyCycle+0xea>
			break;
		default:
			return 0;
    1616:	1e 82       	std	Y+6, r1	; 0x06
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <PWM_u8DutyCycle+0xf0>
	}
	return TIMER1_u8Start();
    161a:	0e 94 b9 08 	call	0x1172	; 0x1172 <TIMER1_u8Start>
    161e:	8e 83       	std	Y+6, r24	; 0x06
    1620:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1622:	28 96       	adiw	r28, 0x08	; 8
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <DIO_u8SetPinDirection>:
#include "../../LIB/BIT_Math.h"
#include "../../LIB/atmega32.h"
#include "DIO_interface.h"

uint8_t DIO_u8SetPinDirection(DIOPort_t u8_PortName,DIOPin_t u8_PinNum,DIODir_t u8_PinDir)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	2e 97       	sbiw	r28, 0x0e	; 14
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	8a 83       	std	Y+2, r24	; 0x02
    164a:	6b 83       	std	Y+3, r22	; 0x03
    164c:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState= STD_TYPES_OK;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	89 83       	std	Y+1, r24	; 0x01

	/*Check if the inputs are in the right range*/
	if (u8_PinNum<DIO_PINS_NUMBER && u8_PortName<DIO_PORTS_NUMBER)
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	88 30       	cpi	r24, 0x08	; 8
    1656:	08 f0       	brcs	.+2      	; 0x165a <DIO_u8SetPinDirection+0x26>
    1658:	f3 c1       	rjmp	.+998    	; 0x1a40 <DIO_u8SetPinDirection+0x40c>
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	84 30       	cpi	r24, 0x04	; 4
    165e:	08 f0       	brcs	.+2      	; 0x1662 <DIO_u8SetPinDirection+0x2e>
    1660:	ef c1       	rjmp	.+990    	; 0x1a40 <DIO_u8SetPinDirection+0x40c>
	{
		/*Check which port */
		switch (u8_PortName)
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3e 87       	std	Y+14, r19	; 0x0e
    166a:	2d 87       	std	Y+13, r18	; 0x0d
    166c:	8d 85       	ldd	r24, Y+13	; 0x0d
    166e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	91 05       	cpc	r25, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <DIO_u8SetPinDirection+0x44>
    1676:	98 c0       	rjmp	.+304    	; 0x17a8 <DIO_u8SetPinDirection+0x174>
    1678:	2d 85       	ldd	r18, Y+13	; 0x0d
    167a:	3e 85       	ldd	r19, Y+14	; 0x0e
    167c:	22 30       	cpi	r18, 0x02	; 2
    167e:	31 05       	cpc	r19, r1
    1680:	2c f4       	brge	.+10     	; 0x168c <DIO_u8SetPinDirection+0x58>
    1682:	8d 85       	ldd	r24, Y+13	; 0x0d
    1684:	9e 85       	ldd	r25, Y+14	; 0x0e
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	71 f0       	breq	.+28     	; 0x16a6 <DIO_u8SetPinDirection+0x72>
    168a:	d8 c1       	rjmp	.+944    	; 0x1a3c <DIO_u8SetPinDirection+0x408>
    168c:	2d 85       	ldd	r18, Y+13	; 0x0d
    168e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1690:	22 30       	cpi	r18, 0x02	; 2
    1692:	31 05       	cpc	r19, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <DIO_u8SetPinDirection+0x64>
    1696:	f6 c0       	rjmp	.+492    	; 0x1884 <DIO_u8SetPinDirection+0x250>
    1698:	8d 85       	ldd	r24, Y+13	; 0x0d
    169a:	9e 85       	ldd	r25, Y+14	; 0x0e
    169c:	83 30       	cpi	r24, 0x03	; 3
    169e:	91 05       	cpc	r25, r1
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <DIO_u8SetPinDirection+0x70>
    16a2:	5e c1       	rjmp	.+700    	; 0x1960 <DIO_u8SetPinDirection+0x32c>
    16a4:	cb c1       	rjmp	.+918    	; 0x1a3c <DIO_u8SetPinDirection+0x408>
		{
			case PORTA:
				/*Check which Direction the user wants the pin to be in */
				switch (u8_PinDir)
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	3c 87       	std	Y+12, r19	; 0x0c
    16ae:	2b 87       	std	Y+11, r18	; 0x0b
    16b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    16b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	91 05       	cpc	r25, r1
    16b8:	99 f1       	breq	.+102    	; 0x1720 <DIO_u8SetPinDirection+0xec>
    16ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    16bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    16be:	22 30       	cpi	r18, 0x02	; 2
    16c0:	31 05       	cpc	r19, r1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <DIO_u8SetPinDirection+0x92>
    16c4:	5b c0       	rjmp	.+182    	; 0x177c <DIO_u8SetPinDirection+0x148>
    16c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    16c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    16ca:	00 97       	sbiw	r24, 0x00	; 0
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <DIO_u8SetPinDirection+0x9c>
    16ce:	6a c0       	rjmp	.+212    	; 0x17a4 <DIO_u8SetPinDirection+0x170>
				{

				case DIO_INPUT:
					// for input tristate mode ({DDxn, PORTxn} = 0b00)
					CLR_BIT(DDRA_REG,u8_PinNum);
    16d0:	aa e3       	ldi	r26, 0x3A	; 58
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	ea e3       	ldi	r30, 0x3A	; 58
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	48 2f       	mov	r20, r24
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_u8SetPinDirection+0xb8>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	2a 95       	dec	r18
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_u8SetPinDirection+0xb4>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
					CLR_BIT(PORTA_REG,u8_PinNum);
    16f6:	ab e3       	ldi	r26, 0x3B	; 59
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	eb e3       	ldi	r30, 0x3B	; 59
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_u8SetPinDirection+0xe0>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_u8SetPinDirection+0xdc>
    1718:	80 95       	com	r24
    171a:	84 23       	and	r24, r20
    171c:	8c 93       	st	X, r24
    171e:	91 c1       	rjmp	.+802    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
					break;
				case DIO_INPUT_PULLUP:
					// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
					CLR_BIT(SFIOR_REG,PUD_BIT);
    1720:	a0 e5       	ldi	r26, 0x50	; 80
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	e0 e5       	ldi	r30, 0x50	; 80
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8b 7f       	andi	r24, 0xFB	; 251
    172c:	8c 93       	st	X, r24
					CLR_BIT(DDRA_REG,u8_PinNum);
    172e:	aa e3       	ldi	r26, 0x3A	; 58
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ea e3       	ldi	r30, 0x3A	; 58
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_u8SetPinDirection+0x116>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	2a 95       	dec	r18
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <DIO_u8SetPinDirection+0x112>
    174e:	80 95       	com	r24
    1750:	84 23       	and	r24, r20
    1752:	8c 93       	st	X, r24
					SET_BIT(PORTA_REG,u8_PinNum);
    1754:	ab e3       	ldi	r26, 0x3B	; 59
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	eb e3       	ldi	r30, 0x3B	; 59
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_u8SetPinDirection+0x13e>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_u8SetPinDirection+0x13a>
    1776:	84 2b       	or	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	63 c1       	rjmp	.+710    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
					break;
				case DIO_OUTPUT:
					// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
					SET_BIT(DDRA_REG,u8_PinNum);
    177c:	aa e3       	ldi	r26, 0x3A	; 58
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	ea e3       	ldi	r30, 0x3A	; 58
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <DIO_u8SetPinDirection+0x166>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <DIO_u8SetPinDirection+0x162>
    179e:	84 2b       	or	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	4f c1       	rjmp	.+670    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
					break;
				default:
					// If the input state is not one of the above cases return error state NOK
					u8ErrorState= STD_TYPES_NOK;
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	4d c1       	rjmp	.+666    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
				}
				break;
			case PORTB:
				switch (u8_PinDir)
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	3a 87       	std	Y+10, r19	; 0x0a
    17b0:	29 87       	std	Y+9, r18	; 0x09
    17b2:	89 85       	ldd	r24, Y+9	; 0x09
    17b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	91 05       	cpc	r25, r1
    17ba:	01 f1       	breq	.+64     	; 0x17fc <DIO_u8SetPinDirection+0x1c8>
    17bc:	29 85       	ldd	r18, Y+9	; 0x09
    17be:	3a 85       	ldd	r19, Y+10	; 0x0a
    17c0:	22 30       	cpi	r18, 0x02	; 2
    17c2:	31 05       	cpc	r19, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <DIO_u8SetPinDirection+0x194>
    17c6:	48 c0       	rjmp	.+144    	; 0x1858 <DIO_u8SetPinDirection+0x224>
    17c8:	89 85       	ldd	r24, Y+9	; 0x09
    17ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <DIO_u8SetPinDirection+0x19e>
    17d0:	57 c0       	rjmp	.+174    	; 0x1880 <DIO_u8SetPinDirection+0x24c>
				{
				case DIO_INPUT:
					CLR_BIT(DDRB_REG,u8_PinNum);
    17d2:	a7 e3       	ldi	r26, 0x37	; 55
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e7 e3       	ldi	r30, 0x37	; 55
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_u8SetPinDirection+0x1bc>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_u8SetPinDirection+0x1b8>
    17f4:	80 95       	com	r24
    17f6:	84 23       	and	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	23 c1       	rjmp	.+582    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
					break;
				case DIO_INPUT_PULLUP:
					CLR_BIT(SFIOR_REG,PUD_BIT);
    17fc:	a0 e5       	ldi	r26, 0x50	; 80
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e0 e5       	ldi	r30, 0x50	; 80
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8b 7f       	andi	r24, 0xFB	; 251
    1808:	8c 93       	st	X, r24
					CLR_BIT(DDRB_REG,u8_PinNum);
    180a:	a7 e3       	ldi	r26, 0x37	; 55
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e7 e3       	ldi	r30, 0x37	; 55
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_u8SetPinDirection+0x1f2>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	2a 95       	dec	r18
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_u8SetPinDirection+0x1ee>
    182a:	80 95       	com	r24
    182c:	84 23       	and	r24, r20
    182e:	8c 93       	st	X, r24
					SET_BIT(PORTB_REG,u8_PinNum);
    1830:	a8 e3       	ldi	r26, 0x38	; 56
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e8 e3       	ldi	r30, 0x38	; 56
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	48 2f       	mov	r20, r24
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	02 2e       	mov	r0, r18
    1848:	02 c0       	rjmp	.+4      	; 0x184e <DIO_u8SetPinDirection+0x21a>
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	0a 94       	dec	r0
    1850:	e2 f7       	brpl	.-8      	; 0x184a <DIO_u8SetPinDirection+0x216>
    1852:	84 2b       	or	r24, r20
    1854:	8c 93       	st	X, r24
    1856:	f5 c0       	rjmp	.+490    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
					break;
				case DIO_OUTPUT:
					SET_BIT(DDRB_REG,u8_PinNum);
    1858:	a7 e3       	ldi	r26, 0x37	; 55
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e7 e3       	ldi	r30, 0x37	; 55
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <DIO_u8SetPinDirection+0x242>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <DIO_u8SetPinDirection+0x23e>
    187a:	84 2b       	or	r24, r20
    187c:	8c 93       	st	X, r24
    187e:	e1 c0       	rjmp	.+450    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
					break;
				default:
					u8ErrorState= STD_TYPES_NOK;
    1880:	19 82       	std	Y+1, r1	; 0x01
    1882:	df c0       	rjmp	.+446    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
				}
				break;
			case PORTC:
				switch (u8_PinDir)
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	38 87       	std	Y+8, r19	; 0x08
    188c:	2f 83       	std	Y+7, r18	; 0x07
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	91 05       	cpc	r25, r1
    1896:	01 f1       	breq	.+64     	; 0x18d8 <DIO_u8SetPinDirection+0x2a4>
    1898:	2f 81       	ldd	r18, Y+7	; 0x07
    189a:	38 85       	ldd	r19, Y+8	; 0x08
    189c:	22 30       	cpi	r18, 0x02	; 2
    189e:	31 05       	cpc	r19, r1
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <DIO_u8SetPinDirection+0x270>
    18a2:	48 c0       	rjmp	.+144    	; 0x1934 <DIO_u8SetPinDirection+0x300>
    18a4:	8f 81       	ldd	r24, Y+7	; 0x07
    18a6:	98 85       	ldd	r25, Y+8	; 0x08
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	09 f0       	breq	.+2      	; 0x18ae <DIO_u8SetPinDirection+0x27a>
    18ac:	57 c0       	rjmp	.+174    	; 0x195c <DIO_u8SetPinDirection+0x328>
				{
				case DIO_INPUT:
					CLR_BIT(DDRC_REG,u8_PinNum);
    18ae:	a4 e3       	ldi	r26, 0x34	; 52
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	e4 e3       	ldi	r30, 0x34	; 52
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	48 2f       	mov	r20, r24
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 2e       	mov	r0, r18
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <DIO_u8SetPinDirection+0x298>
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	0a 94       	dec	r0
    18ce:	e2 f7       	brpl	.-8      	; 0x18c8 <DIO_u8SetPinDirection+0x294>
    18d0:	80 95       	com	r24
    18d2:	84 23       	and	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	b5 c0       	rjmp	.+362    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
					break;
				case DIO_INPUT_PULLUP:
					CLR_BIT(SFIOR_REG,PUD_BIT);
    18d8:	a0 e5       	ldi	r26, 0x50	; 80
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e0 e5       	ldi	r30, 0x50	; 80
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8b 7f       	andi	r24, 0xFB	; 251
    18e4:	8c 93       	st	X, r24
					CLR_BIT(DDRC_REG,u8_PinNum);
    18e6:	a4 e3       	ldi	r26, 0x34	; 52
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e4 e3       	ldi	r30, 0x34	; 52
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <DIO_u8SetPinDirection+0x2ce>
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	2a 95       	dec	r18
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <DIO_u8SetPinDirection+0x2ca>
    1906:	80 95       	com	r24
    1908:	84 23       	and	r24, r20
    190a:	8c 93       	st	X, r24
					SET_BIT(PORTC_REG,u8_PinNum);
    190c:	a5 e3       	ldi	r26, 0x35	; 53
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e5 e3       	ldi	r30, 0x35	; 53
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	48 2f       	mov	r20, r24
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 2e       	mov	r0, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <DIO_u8SetPinDirection+0x2f6>
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	0a 94       	dec	r0
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <DIO_u8SetPinDirection+0x2f2>
    192e:	84 2b       	or	r24, r20
    1930:	8c 93       	st	X, r24
    1932:	87 c0       	rjmp	.+270    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
					break;
				case DIO_OUTPUT:
					SET_BIT(DDRC_REG,u8_PinNum);
    1934:	a4 e3       	ldi	r26, 0x34	; 52
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e4 e3       	ldi	r30, 0x34	; 52
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	48 2f       	mov	r20, r24
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	02 2e       	mov	r0, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <DIO_u8SetPinDirection+0x31e>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <DIO_u8SetPinDirection+0x31a>
    1956:	84 2b       	or	r24, r20
    1958:	8c 93       	st	X, r24
    195a:	73 c0       	rjmp	.+230    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
					break;
				default:
					u8ErrorState= STD_TYPES_NOK;
    195c:	19 82       	std	Y+1, r1	; 0x01
    195e:	71 c0       	rjmp	.+226    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
				}
				break;
			case PORTD:
				switch (u8_PinDir)
    1960:	8c 81       	ldd	r24, Y+4	; 0x04
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	3e 83       	std	Y+6, r19	; 0x06
    1968:	2d 83       	std	Y+5, r18	; 0x05
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	81 30       	cpi	r24, 0x01	; 1
    1970:	91 05       	cpc	r25, r1
    1972:	01 f1       	breq	.+64     	; 0x19b4 <DIO_u8SetPinDirection+0x380>
    1974:	2d 81       	ldd	r18, Y+5	; 0x05
    1976:	3e 81       	ldd	r19, Y+6	; 0x06
    1978:	22 30       	cpi	r18, 0x02	; 2
    197a:	31 05       	cpc	r19, r1
    197c:	09 f4       	brne	.+2      	; 0x1980 <DIO_u8SetPinDirection+0x34c>
    197e:	48 c0       	rjmp	.+144    	; 0x1a10 <DIO_u8SetPinDirection+0x3dc>
    1980:	8d 81       	ldd	r24, Y+5	; 0x05
    1982:	9e 81       	ldd	r25, Y+6	; 0x06
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	09 f0       	breq	.+2      	; 0x198a <DIO_u8SetPinDirection+0x356>
    1988:	57 c0       	rjmp	.+174    	; 0x1a38 <DIO_u8SetPinDirection+0x404>
				{
				case DIO_INPUT:
					CLR_BIT(DDRD_REG,u8_PinNum);
    198a:	a1 e3       	ldi	r26, 0x31	; 49
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e1 e3       	ldi	r30, 0x31	; 49
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_u8SetPinDirection+0x374>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <DIO_u8SetPinDirection+0x370>
    19ac:	80 95       	com	r24
    19ae:	84 23       	and	r24, r20
    19b0:	8c 93       	st	X, r24
    19b2:	47 c0       	rjmp	.+142    	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
					break;
				case DIO_INPUT_PULLUP:
					CLR_BIT(SFIOR_REG,PUD_BIT);
    19b4:	a0 e5       	ldi	r26, 0x50	; 80
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	e0 e5       	ldi	r30, 0x50	; 80
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	8b 7f       	andi	r24, 0xFB	; 251
    19c0:	8c 93       	st	X, r24
					CLR_BIT(DDRD_REG,u8_PinNum);
    19c2:	a1 e3       	ldi	r26, 0x31	; 49
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e1 e3       	ldi	r30, 0x31	; 49
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	48 2f       	mov	r20, r24
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <DIO_u8SetPinDirection+0x3aa>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	2a 95       	dec	r18
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <DIO_u8SetPinDirection+0x3a6>
    19e2:	80 95       	com	r24
    19e4:	84 23       	and	r24, r20
    19e6:	8c 93       	st	X, r24
					SET_BIT(PORTD_REG,u8_PinNum);
    19e8:	a2 e3       	ldi	r26, 0x32	; 50
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e2 e3       	ldi	r30, 0x32	; 50
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <DIO_u8SetPinDirection+0x3d2>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <DIO_u8SetPinDirection+0x3ce>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	19 c0       	rjmp	.+50     	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
					break;
				case DIO_OUTPUT:
					SET_BIT(DDRD_REG,u8_PinNum);
    1a10:	a1 e3       	ldi	r26, 0x31	; 49
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e1 e3       	ldi	r30, 0x31	; 49
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <DIO_u8SetPinDirection+0x3fa>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <DIO_u8SetPinDirection+0x3f6>
    1a32:	84 2b       	or	r24, r20
    1a34:	8c 93       	st	X, r24
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
					break;
				default:
					u8ErrorState= STD_TYPES_NOK;
    1a38:	19 82       	std	Y+1, r1	; 0x01
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
				}
				break;
			default:
				u8ErrorState= STD_TYPES_NOK;
    1a3c:	19 82       	std	Y+1, r1	; 0x01
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <DIO_u8SetPinDirection+0x40e>
		}
	}else{
		u8ErrorState= STD_TYPES_NOK;
    1a40:	19 82       	std	Y+1, r1	; 0x01
	}


	return u8ErrorState;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a44:	2e 96       	adiw	r28, 0x0e	; 14
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <DIO_u8SetPinData>:

uint8_t DIO_u8SetPinData    (DIOPort_t u8_PortName,DIOPin_t u8_PinNum,DIODir_t u8_PinValue)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	2e 97       	sbiw	r28, 0x0e	; 14
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	8a 83       	std	Y+2, r24	; 0x02
    1a6c:	6b 83       	std	Y+3, r22	; 0x03
    1a6e:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	89 83       	std	Y+1, r24	; 0x01
	if (u8_PinNum < DIO_PINS_NUMBER)
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	88 30       	cpi	r24, 0x08	; 8
    1a78:	08 f0       	brcs	.+2      	; 0x1a7c <DIO_u8SetPinData+0x26>
    1a7a:	06 c1       	rjmp	.+524    	; 0x1c88 <DIO_u8SetPinData+0x232>
	{
		switch(u8_PortName)
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	3e 87       	std	Y+14, r19	; 0x0e
    1a84:	2d 87       	std	Y+13, r18	; 0x0d
    1a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <DIO_u8SetPinData+0x3c>
    1a90:	50 c0       	rjmp	.+160    	; 0x1b32 <DIO_u8SetPinData+0xdc>
    1a92:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a94:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <DIO_u8SetPinData+0x50>
    1a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	71 f0       	breq	.+28     	; 0x1ac0 <DIO_u8SetPinData+0x6a>
    1aa4:	f2 c0       	rjmp	.+484    	; 0x1c8a <DIO_u8SetPinData+0x234>
    1aa6:	2d 85       	ldd	r18, Y+13	; 0x0d
    1aa8:	3e 85       	ldd	r19, Y+14	; 0x0e
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <DIO_u8SetPinData+0x5c>
    1ab0:	79 c0       	rjmp	.+242    	; 0x1ba4 <DIO_u8SetPinData+0x14e>
    1ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	91 05       	cpc	r25, r1
    1aba:	09 f4       	brne	.+2      	; 0x1abe <DIO_u8SetPinData+0x68>
    1abc:	ac c0       	rjmp	.+344    	; 0x1c16 <DIO_u8SetPinData+0x1c0>
    1abe:	e5 c0       	rjmp	.+458    	; 0x1c8a <DIO_u8SetPinData+0x234>
		{
		case PORTA:
			switch(u8_PinValue)
    1ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	3c 87       	std	Y+12, r19	; 0x0c
    1ac8:	2b 87       	std	Y+11, r18	; 0x0b
    1aca:	8b 85       	ldd	r24, Y+11	; 0x0b
    1acc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	c9 f0       	breq	.+50     	; 0x1b04 <DIO_u8SetPinData+0xae>
    1ad2:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ad4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ad6:	21 30       	cpi	r18, 0x01	; 1
    1ad8:	31 05       	cpc	r19, r1
    1ada:	49 f5       	brne	.+82     	; 0x1b2e <DIO_u8SetPinData+0xd8>
			{
			case DIO_HIGH:
				SET_BIT(PORTA_REG,u8_PinNum);
    1adc:	ab e3       	ldi	r26, 0x3B	; 59
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	eb e3       	ldi	r30, 0x3B	; 59
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <DIO_u8SetPinData+0xa4>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <DIO_u8SetPinData+0xa0>
    1afe:	84 2b       	or	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	c3 c0       	rjmp	.+390    	; 0x1c8a <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTA_REG,u8_PinNum);
    1b04:	ab e3       	ldi	r26, 0x3B	; 59
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	eb e3       	ldi	r30, 0x3B	; 59
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <DIO_u8SetPinData+0xcc>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <DIO_u8SetPinData+0xc8>
    1b26:	80 95       	com	r24
    1b28:	84 23       	and	r24, r20
    1b2a:	8c 93       	st	X, r24
    1b2c:	ae c0       	rjmp	.+348    	; 0x1c8a <DIO_u8SetPinData+0x234>
				break;
			default:
				u8ErrorState = STD_TYPES_NOK;
    1b2e:	19 82       	std	Y+1, r1	; 0x01
    1b30:	ac c0       	rjmp	.+344    	; 0x1c8a <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTB:
			switch(u8_PinValue)
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	3a 87       	std	Y+10, r19	; 0x0a
    1b3a:	29 87       	std	Y+9, r18	; 0x09
    1b3c:	89 85       	ldd	r24, Y+9	; 0x09
    1b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	c9 f0       	breq	.+50     	; 0x1b76 <DIO_u8SetPinData+0x120>
    1b44:	29 85       	ldd	r18, Y+9	; 0x09
    1b46:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b48:	21 30       	cpi	r18, 0x01	; 1
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	49 f5       	brne	.+82     	; 0x1ba0 <DIO_u8SetPinData+0x14a>
			{
			case DIO_HIGH:
				SET_BIT(PORTB_REG,u8_PinNum);
    1b4e:	a8 e3       	ldi	r26, 0x38	; 56
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e8 e3       	ldi	r30, 0x38	; 56
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_u8SetPinData+0x116>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <DIO_u8SetPinData+0x112>
    1b70:	84 2b       	or	r24, r20
    1b72:	8c 93       	st	X, r24
    1b74:	8a c0       	rjmp	.+276    	; 0x1c8a <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTB_REG,u8_PinNum);
    1b76:	a8 e3       	ldi	r26, 0x38	; 56
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e8 e3       	ldi	r30, 0x38	; 56
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 2f       	mov	r20, r24
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 2e       	mov	r0, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <DIO_u8SetPinData+0x13e>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	0a 94       	dec	r0
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <DIO_u8SetPinData+0x13a>
    1b98:	80 95       	com	r24
    1b9a:	84 23       	and	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	75 c0       	rjmp	.+234    	; 0x1c8a <DIO_u8SetPinData+0x234>
				break;
			default:
				u8ErrorState = STD_TYPES_NOK;
    1ba0:	19 82       	std	Y+1, r1	; 0x01
    1ba2:	73 c0       	rjmp	.+230    	; 0x1c8a <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTC:
			switch(u8_PinValue)
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	38 87       	std	Y+8, r19	; 0x08
    1bac:	2f 83       	std	Y+7, r18	; 0x07
    1bae:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb0:	98 85       	ldd	r25, Y+8	; 0x08
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	c9 f0       	breq	.+50     	; 0x1be8 <DIO_u8SetPinData+0x192>
    1bb6:	2f 81       	ldd	r18, Y+7	; 0x07
    1bb8:	38 85       	ldd	r19, Y+8	; 0x08
    1bba:	21 30       	cpi	r18, 0x01	; 1
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	49 f5       	brne	.+82     	; 0x1c12 <DIO_u8SetPinData+0x1bc>
			{
			case DIO_HIGH:
				SET_BIT(PORTC_REG,u8_PinNum);
    1bc0:	a5 e3       	ldi	r26, 0x35	; 53
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e5 e3       	ldi	r30, 0x35	; 53
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <DIO_u8SetPinData+0x188>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <DIO_u8SetPinData+0x184>
    1be2:	84 2b       	or	r24, r20
    1be4:	8c 93       	st	X, r24
    1be6:	51 c0       	rjmp	.+162    	; 0x1c8a <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTC_REG,u8_PinNum);
    1be8:	a5 e3       	ldi	r26, 0x35	; 53
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e5 e3       	ldi	r30, 0x35	; 53
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_u8SetPinData+0x1b0>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <DIO_u8SetPinData+0x1ac>
    1c0a:	80 95       	com	r24
    1c0c:	84 23       	and	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	3c c0       	rjmp	.+120    	; 0x1c8a <DIO_u8SetPinData+0x234>
				break;
			default:
				u8ErrorState = STD_TYPES_NOK;
    1c12:	19 82       	std	Y+1, r1	; 0x01
    1c14:	3a c0       	rjmp	.+116    	; 0x1c8a <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTD:
			switch(u8_PinValue)
    1c16:	8c 81       	ldd	r24, Y+4	; 0x04
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	3e 83       	std	Y+6, r19	; 0x06
    1c1e:	2d 83       	std	Y+5, r18	; 0x05
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	c9 f0       	breq	.+50     	; 0x1c5a <DIO_u8SetPinData+0x204>
    1c28:	2d 81       	ldd	r18, Y+5	; 0x05
    1c2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1c2c:	21 30       	cpi	r18, 0x01	; 1
    1c2e:	31 05       	cpc	r19, r1
    1c30:	49 f5       	brne	.+82     	; 0x1c84 <DIO_u8SetPinData+0x22e>
			{
			case DIO_HIGH:
				SET_BIT(PORTD_REG,u8_PinNum);
    1c32:	a2 e3       	ldi	r26, 0x32	; 50
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e2 e3       	ldi	r30, 0x32	; 50
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	48 2f       	mov	r20, r24
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	28 2f       	mov	r18, r24
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	02 2e       	mov	r0, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <DIO_u8SetPinData+0x1fa>
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	0a 94       	dec	r0
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <DIO_u8SetPinData+0x1f6>
    1c54:	84 2b       	or	r24, r20
    1c56:	8c 93       	st	X, r24
    1c58:	18 c0       	rjmp	.+48     	; 0x1c8a <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTD_REG,u8_PinNum);
    1c5a:	a2 e3       	ldi	r26, 0x32	; 50
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e2 e3       	ldi	r30, 0x32	; 50
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	48 2f       	mov	r20, r24
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	02 2e       	mov	r0, r18
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <DIO_u8SetPinData+0x222>
    1c74:	88 0f       	add	r24, r24
    1c76:	99 1f       	adc	r25, r25
    1c78:	0a 94       	dec	r0
    1c7a:	e2 f7       	brpl	.-8      	; 0x1c74 <DIO_u8SetPinData+0x21e>
    1c7c:	80 95       	com	r24
    1c7e:	84 23       	and	r24, r20
    1c80:	8c 93       	st	X, r24
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <DIO_u8SetPinData+0x234>
				break;
			default:
				u8ErrorState = STD_TYPES_NOK;
    1c84:	19 82       	std	Y+1, r1	; 0x01
    1c86:	01 c0       	rjmp	.+2      	; 0x1c8a <DIO_u8SetPinData+0x234>
			}
			break;
		}
	}else
	{
		u8ErrorState = STD_TYPES_NOK;
    1c88:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8c:	2e 96       	adiw	r28, 0x0e	; 14
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <DIO_u8GetPinData>:
uint8_t DIO_u8GetPinData    (DIOPort_t u8_PortName,DIOPin_t u8_PinNum,uint8_t* pu8_ReturnVar)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	27 97       	sbiw	r28, 0x07	; 7
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	8a 83       	std	Y+2, r24	; 0x02
    1cb4:	6b 83       	std	Y+3, r22	; 0x03
    1cb6:	5d 83       	std	Y+5, r21	; 0x05
    1cb8:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState=STD_TYPES_OK;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	89 83       	std	Y+1, r24	; 0x01

	if (u8_PinNum < DIO_PINS_NUMBER && pu8_ReturnVar != NULL )
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	88 30       	cpi	r24, 0x08	; 8
    1cc2:	08 f0       	brcs	.+2      	; 0x1cc6 <DIO_u8GetPinData+0x28>
    1cc4:	78 c0       	rjmp	.+240    	; 0x1db6 <DIO_u8GetPinData+0x118>
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <DIO_u8GetPinData+0x32>
    1cce:	73 c0       	rjmp	.+230    	; 0x1db6 <DIO_u8GetPinData+0x118>
	{
		switch (u8_PortName)
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	3f 83       	std	Y+7, r19	; 0x07
    1cd8:	2e 83       	std	Y+6, r18	; 0x06
    1cda:	4e 81       	ldd	r20, Y+6	; 0x06
    1cdc:	5f 81       	ldd	r21, Y+7	; 0x07
    1cde:	41 30       	cpi	r20, 0x01	; 1
    1ce0:	51 05       	cpc	r21, r1
    1ce2:	59 f1       	breq	.+86     	; 0x1d3a <DIO_u8GetPinData+0x9c>
    1ce4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce8:	82 30       	cpi	r24, 0x02	; 2
    1cea:	91 05       	cpc	r25, r1
    1cec:	34 f4       	brge	.+12     	; 0x1cfa <DIO_u8GetPinData+0x5c>
    1cee:	2e 81       	ldd	r18, Y+6	; 0x06
    1cf0:	3f 81       	ldd	r19, Y+7	; 0x07
    1cf2:	21 15       	cp	r18, r1
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	69 f0       	breq	.+26     	; 0x1d12 <DIO_u8GetPinData+0x74>
    1cf8:	5c c0       	rjmp	.+184    	; 0x1db2 <DIO_u8GetPinData+0x114>
    1cfa:	4e 81       	ldd	r20, Y+6	; 0x06
    1cfc:	5f 81       	ldd	r21, Y+7	; 0x07
    1cfe:	42 30       	cpi	r20, 0x02	; 2
    1d00:	51 05       	cpc	r21, r1
    1d02:	79 f1       	breq	.+94     	; 0x1d62 <DIO_u8GetPinData+0xc4>
    1d04:	8e 81       	ldd	r24, Y+6	; 0x06
    1d06:	9f 81       	ldd	r25, Y+7	; 0x07
    1d08:	83 30       	cpi	r24, 0x03	; 3
    1d0a:	91 05       	cpc	r25, r1
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <DIO_u8GetPinData+0x72>
    1d0e:	3d c0       	rjmp	.+122    	; 0x1d8a <DIO_u8GetPinData+0xec>
    1d10:	50 c0       	rjmp	.+160    	; 0x1db2 <DIO_u8GetPinData+0x114>
		{
		case PORTA:
			*pu8_ReturnVar = GET_BIT(PINA_REG,u8_PinNum);
    1d12:	e9 e3       	ldi	r30, 0x39	; 57
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	88 2f       	mov	r24, r24
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	a9 01       	movw	r20, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <DIO_u8GetPinData+0x8c>
    1d26:	55 95       	asr	r21
    1d28:	47 95       	ror	r20
    1d2a:	8a 95       	dec	r24
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <DIO_u8GetPinData+0x88>
    1d2e:	ca 01       	movw	r24, r20
    1d30:	81 70       	andi	r24, 0x01	; 1
    1d32:	ec 81       	ldd	r30, Y+4	; 0x04
    1d34:	fd 81       	ldd	r31, Y+5	; 0x05
    1d36:	80 83       	st	Z, r24
    1d38:	3f c0       	rjmp	.+126    	; 0x1db8 <DIO_u8GetPinData+0x11a>
			break;
		case PORTB:
			*pu8_ReturnVar = GET_BIT(PINB_REG,u8_PinNum);
    1d3a:	e6 e3       	ldi	r30, 0x36	; 54
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a9 01       	movw	r20, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <DIO_u8GetPinData+0xb4>
    1d4e:	55 95       	asr	r21
    1d50:	47 95       	ror	r20
    1d52:	8a 95       	dec	r24
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <DIO_u8GetPinData+0xb0>
    1d56:	ca 01       	movw	r24, r20
    1d58:	81 70       	andi	r24, 0x01	; 1
    1d5a:	ec 81       	ldd	r30, Y+4	; 0x04
    1d5c:	fd 81       	ldd	r31, Y+5	; 0x05
    1d5e:	80 83       	st	Z, r24
    1d60:	2b c0       	rjmp	.+86     	; 0x1db8 <DIO_u8GetPinData+0x11a>
			break;
		case PORTC:
			*pu8_ReturnVar = GET_BIT(PINC_REG,u8_PinNum);
    1d62:	e3 e3       	ldi	r30, 0x33	; 51
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	88 2f       	mov	r24, r24
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	a9 01       	movw	r20, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <DIO_u8GetPinData+0xdc>
    1d76:	55 95       	asr	r21
    1d78:	47 95       	ror	r20
    1d7a:	8a 95       	dec	r24
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <DIO_u8GetPinData+0xd8>
    1d7e:	ca 01       	movw	r24, r20
    1d80:	81 70       	andi	r24, 0x01	; 1
    1d82:	ec 81       	ldd	r30, Y+4	; 0x04
    1d84:	fd 81       	ldd	r31, Y+5	; 0x05
    1d86:	80 83       	st	Z, r24
    1d88:	17 c0       	rjmp	.+46     	; 0x1db8 <DIO_u8GetPinData+0x11a>
			break;
		case PORTD:
			*pu8_ReturnVar=GET_BIT(PIND_REG,u8_PinNum);
    1d8a:	e0 e3       	ldi	r30, 0x30	; 48
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	88 2f       	mov	r24, r24
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a9 01       	movw	r20, r18
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <DIO_u8GetPinData+0x104>
    1d9e:	55 95       	asr	r21
    1da0:	47 95       	ror	r20
    1da2:	8a 95       	dec	r24
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <DIO_u8GetPinData+0x100>
    1da6:	ca 01       	movw	r24, r20
    1da8:	81 70       	andi	r24, 0x01	; 1
    1daa:	ec 81       	ldd	r30, Y+4	; 0x04
    1dac:	fd 81       	ldd	r31, Y+5	; 0x05
    1dae:	80 83       	st	Z, r24
    1db0:	03 c0       	rjmp	.+6      	; 0x1db8 <DIO_u8GetPinData+0x11a>
			break;
		default:
			u8ErrorState=STD_TYPES_NOK;
    1db2:	19 82       	std	Y+1, r1	; 0x01
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <DIO_u8GetPinData+0x11a>
		}
	}else
	{
		u8ErrorState=STD_TYPES_NOK;
    1db6:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dba:	27 96       	adiw	r28, 0x07	; 7
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <DIO_u8SetPortDirection>:
uint8_t DIO_u8SetPortDirection(DIOPort_t u8_PortName,DIODir_t u8_Dir)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	2d 97       	sbiw	r28, 0x0d	; 13
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	8a 83       	std	Y+2, r24	; 0x02
    1de2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState=STD_TYPES_OK;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	89 83       	std	Y+1, r24	; 0x01
	switch (u8_PortName)
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	3d 87       	std	Y+13, r19	; 0x0d
    1df0:	2c 87       	std	Y+12, r18	; 0x0c
    1df2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1df4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	91 05       	cpc	r25, r1
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <DIO_u8SetPortDirection+0x32>
    1dfc:	4b c0       	rjmp	.+150    	; 0x1e94 <DIO_u8SetPortDirection+0xc8>
    1dfe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e00:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e02:	22 30       	cpi	r18, 0x02	; 2
    1e04:	31 05       	cpc	r19, r1
    1e06:	2c f4       	brge	.+10     	; 0x1e12 <DIO_u8SetPortDirection+0x46>
    1e08:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	71 f0       	breq	.+28     	; 0x1e2c <DIO_u8SetPortDirection+0x60>
    1e10:	dd c0       	rjmp	.+442    	; 0x1fcc <DIO_u8SetPortDirection+0x200>
    1e12:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e14:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e16:	22 30       	cpi	r18, 0x02	; 2
    1e18:	31 05       	cpc	r19, r1
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <DIO_u8SetPortDirection+0x52>
    1e1c:	6f c0       	rjmp	.+222    	; 0x1efc <DIO_u8SetPortDirection+0x130>
    1e1e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e20:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e22:	83 30       	cpi	r24, 0x03	; 3
    1e24:	91 05       	cpc	r25, r1
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <DIO_u8SetPortDirection+0x5e>
    1e28:	9d c0       	rjmp	.+314    	; 0x1f64 <DIO_u8SetPortDirection+0x198>
    1e2a:	d0 c0       	rjmp	.+416    	; 0x1fcc <DIO_u8SetPortDirection+0x200>
	{
	case PORTA:
		switch (u8_Dir)
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	3b 87       	std	Y+11, r19	; 0x0b
    1e34:	2a 87       	std	Y+10, r18	; 0x0a
    1e36:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e38:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	a1 f0       	breq	.+40     	; 0x1e68 <DIO_u8SetPortDirection+0x9c>
    1e40:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e42:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e44:	22 30       	cpi	r18, 0x02	; 2
    1e46:	31 05       	cpc	r19, r1
    1e48:	f1 f0       	breq	.+60     	; 0x1e86 <DIO_u8SetPortDirection+0xba>
    1e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	f9 f4       	brne	.+62     	; 0x1e90 <DIO_u8SetPortDirection+0xc4>
		{
		case DIO_INPUT:
			DDRA_REG = DIO_PORT_LOW;
    1e52:	ea e3       	ldi	r30, 0x3A	; 58
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG,PUD_BIT);
    1e58:	a0 e5       	ldi	r26, 0x50	; 80
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e0 e5       	ldi	r30, 0x50	; 80
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	84 60       	ori	r24, 0x04	; 4
    1e64:	8c 93       	st	X, r24
    1e66:	b3 c0       	rjmp	.+358    	; 0x1fce <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			CLR_BIT(SFIOR_REG,PUD_BIT);
    1e68:	a0 e5       	ldi	r26, 0x50	; 80
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e0 e5       	ldi	r30, 0x50	; 80
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	8b 7f       	andi	r24, 0xFB	; 251
    1e74:	8c 93       	st	X, r24
			DDRA_REG =  DIO_PORT_LOW;
    1e76:	ea e3       	ldi	r30, 0x3A	; 58
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	10 82       	st	Z, r1
			PORTA_REG = DIO_PORT_HIGH;
    1e7c:	eb e3       	ldi	r30, 0x3B	; 59
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	8f ef       	ldi	r24, 0xFF	; 255
    1e82:	80 83       	st	Z, r24
    1e84:	a4 c0       	rjmp	.+328    	; 0x1fce <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			DDRA_REG = DIO_PORT_HIGH;
    1e86:	ea e3       	ldi	r30, 0x3A	; 58
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	8f ef       	ldi	r24, 0xFF	; 255
    1e8c:	80 83       	st	Z, r24
    1e8e:	9f c0       	rjmp	.+318    	; 0x1fce <DIO_u8SetPortDirection+0x202>
			break;
		default:
			u8ErrorState=STD_TYPES_NOK;
    1e90:	19 82       	std	Y+1, r1	; 0x01
    1e92:	9d c0       	rjmp	.+314    	; 0x1fce <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTB:
		switch (u8_Dir)
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	39 87       	std	Y+9, r19	; 0x09
    1e9c:	28 87       	std	Y+8, r18	; 0x08
    1e9e:	88 85       	ldd	r24, Y+8	; 0x08
    1ea0:	99 85       	ldd	r25, Y+9	; 0x09
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	a1 f0       	breq	.+40     	; 0x1ed0 <DIO_u8SetPortDirection+0x104>
    1ea8:	28 85       	ldd	r18, Y+8	; 0x08
    1eaa:	39 85       	ldd	r19, Y+9	; 0x09
    1eac:	22 30       	cpi	r18, 0x02	; 2
    1eae:	31 05       	cpc	r19, r1
    1eb0:	f1 f0       	breq	.+60     	; 0x1eee <DIO_u8SetPortDirection+0x122>
    1eb2:	88 85       	ldd	r24, Y+8	; 0x08
    1eb4:	99 85       	ldd	r25, Y+9	; 0x09
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	f9 f4       	brne	.+62     	; 0x1ef8 <DIO_u8SetPortDirection+0x12c>
		{
		case DIO_INPUT:
			DDRB_REG = DIO_PORT_LOW;
    1eba:	e7 e3       	ldi	r30, 0x37	; 55
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG,PUD_BIT);
    1ec0:	a0 e5       	ldi	r26, 0x50	; 80
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e0 e5       	ldi	r30, 0x50	; 80
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	84 60       	ori	r24, 0x04	; 4
    1ecc:	8c 93       	st	X, r24
    1ece:	7f c0       	rjmp	.+254    	; 0x1fce <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			CLR_BIT(SFIOR_REG,PUD_BIT);
    1ed0:	a0 e5       	ldi	r26, 0x50	; 80
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e0 e5       	ldi	r30, 0x50	; 80
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	8b 7f       	andi	r24, 0xFB	; 251
    1edc:	8c 93       	st	X, r24
			DDRB_REG =  DIO_PORT_LOW;
    1ede:	e7 e3       	ldi	r30, 0x37	; 55
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	10 82       	st	Z, r1
			PORTB_REG = DIO_PORT_HIGH;
    1ee4:	e8 e3       	ldi	r30, 0x38	; 56
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	8f ef       	ldi	r24, 0xFF	; 255
    1eea:	80 83       	st	Z, r24
    1eec:	70 c0       	rjmp	.+224    	; 0x1fce <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			DDRB_REG = DIO_PORT_HIGH;
    1eee:	e7 e3       	ldi	r30, 0x37	; 55
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	8f ef       	ldi	r24, 0xFF	; 255
    1ef4:	80 83       	st	Z, r24
    1ef6:	6b c0       	rjmp	.+214    	; 0x1fce <DIO_u8SetPortDirection+0x202>
			break;
		default:
			u8ErrorState=STD_TYPES_NOK;
    1ef8:	19 82       	std	Y+1, r1	; 0x01
    1efa:	69 c0       	rjmp	.+210    	; 0x1fce <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTC:
		switch (u8_Dir)
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	3f 83       	std	Y+7, r19	; 0x07
    1f04:	2e 83       	std	Y+6, r18	; 0x06
    1f06:	8e 81       	ldd	r24, Y+6	; 0x06
    1f08:	9f 81       	ldd	r25, Y+7	; 0x07
    1f0a:	81 30       	cpi	r24, 0x01	; 1
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	a1 f0       	breq	.+40     	; 0x1f38 <DIO_u8SetPortDirection+0x16c>
    1f10:	2e 81       	ldd	r18, Y+6	; 0x06
    1f12:	3f 81       	ldd	r19, Y+7	; 0x07
    1f14:	22 30       	cpi	r18, 0x02	; 2
    1f16:	31 05       	cpc	r19, r1
    1f18:	f1 f0       	breq	.+60     	; 0x1f56 <DIO_u8SetPortDirection+0x18a>
    1f1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	f9 f4       	brne	.+62     	; 0x1f60 <DIO_u8SetPortDirection+0x194>
		{
		case DIO_INPUT:
			DDRC_REG = DIO_PORT_LOW;
    1f22:	e4 e3       	ldi	r30, 0x34	; 52
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG,PUD_BIT);
    1f28:	a0 e5       	ldi	r26, 0x50	; 80
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e0 e5       	ldi	r30, 0x50	; 80
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	84 60       	ori	r24, 0x04	; 4
    1f34:	8c 93       	st	X, r24
    1f36:	4b c0       	rjmp	.+150    	; 0x1fce <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			CLR_BIT(SFIOR_REG,PUD_BIT);
    1f38:	a0 e5       	ldi	r26, 0x50	; 80
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e0 e5       	ldi	r30, 0x50	; 80
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	8b 7f       	andi	r24, 0xFB	; 251
    1f44:	8c 93       	st	X, r24
			DDRC_REG =  DIO_PORT_LOW;
    1f46:	e4 e3       	ldi	r30, 0x34	; 52
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	10 82       	st	Z, r1
			PORTC_REG = DIO_PORT_HIGH;
    1f4c:	e5 e3       	ldi	r30, 0x35	; 53
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	8f ef       	ldi	r24, 0xFF	; 255
    1f52:	80 83       	st	Z, r24
    1f54:	3c c0       	rjmp	.+120    	; 0x1fce <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			DDRC_REG = DIO_PORT_HIGH;
    1f56:	e4 e3       	ldi	r30, 0x34	; 52
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	8f ef       	ldi	r24, 0xFF	; 255
    1f5c:	80 83       	st	Z, r24
    1f5e:	37 c0       	rjmp	.+110    	; 0x1fce <DIO_u8SetPortDirection+0x202>
			break;
		default:
			u8ErrorState=STD_TYPES_NOK;
    1f60:	19 82       	std	Y+1, r1	; 0x01
    1f62:	35 c0       	rjmp	.+106    	; 0x1fce <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTD:
		switch (u8_Dir)
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	3d 83       	std	Y+5, r19	; 0x05
    1f6c:	2c 83       	std	Y+4, r18	; 0x04
    1f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f70:	9d 81       	ldd	r25, Y+5	; 0x05
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	91 05       	cpc	r25, r1
    1f76:	a1 f0       	breq	.+40     	; 0x1fa0 <DIO_u8SetPortDirection+0x1d4>
    1f78:	2c 81       	ldd	r18, Y+4	; 0x04
    1f7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f7c:	22 30       	cpi	r18, 0x02	; 2
    1f7e:	31 05       	cpc	r19, r1
    1f80:	f1 f0       	breq	.+60     	; 0x1fbe <DIO_u8SetPortDirection+0x1f2>
    1f82:	8c 81       	ldd	r24, Y+4	; 0x04
    1f84:	9d 81       	ldd	r25, Y+5	; 0x05
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	f9 f4       	brne	.+62     	; 0x1fc8 <DIO_u8SetPortDirection+0x1fc>
		{
		case DIO_INPUT:
			DDRD_REG = DIO_PORT_LOW;
    1f8a:	e1 e3       	ldi	r30, 0x31	; 49
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG,PUD_BIT);
    1f90:	a0 e5       	ldi	r26, 0x50	; 80
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e0 e5       	ldi	r30, 0x50	; 80
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	84 60       	ori	r24, 0x04	; 4
    1f9c:	8c 93       	st	X, r24
    1f9e:	17 c0       	rjmp	.+46     	; 0x1fce <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			CLR_BIT(SFIOR_REG,PUD_BIT);
    1fa0:	a0 e5       	ldi	r26, 0x50	; 80
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e0 e5       	ldi	r30, 0x50	; 80
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	8b 7f       	andi	r24, 0xFB	; 251
    1fac:	8c 93       	st	X, r24
			DDRD_REG =  DIO_PORT_LOW;
    1fae:	e1 e3       	ldi	r30, 0x31	; 49
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	10 82       	st	Z, r1
			PORTD_REG = DIO_PORT_HIGH;
    1fb4:	e2 e3       	ldi	r30, 0x32	; 50
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	8f ef       	ldi	r24, 0xFF	; 255
    1fba:	80 83       	st	Z, r24
    1fbc:	08 c0       	rjmp	.+16     	; 0x1fce <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			DDRD_REG = DIO_PORT_HIGH;
    1fbe:	e1 e3       	ldi	r30, 0x31	; 49
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	8f ef       	ldi	r24, 0xFF	; 255
    1fc4:	80 83       	st	Z, r24
    1fc6:	03 c0       	rjmp	.+6      	; 0x1fce <DIO_u8SetPortDirection+0x202>
			break;
		default:
			u8ErrorState=STD_TYPES_NOK;
    1fc8:	19 82       	std	Y+1, r1	; 0x01
    1fca:	01 c0       	rjmp	.+2      	; 0x1fce <DIO_u8SetPortDirection+0x202>
		}
		break;
	default:
		u8ErrorState=STD_TYPES_NOK;
    1fcc:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd0:	2d 96       	adiw	r28, 0x0d	; 13
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <DIO_u8SetPortData>:
uint8_t DIO_u8SetPortData    (DIOPort_t u8_PortName,DIODir_t u8_Value)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <DIO_u8SetPortData+0x6>
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <DIO_u8SetPortData+0x8>
    1fea:	0f 92       	push	r0
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	8a 83       	std	Y+2, r24	; 0x02
    1ff2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState=STD_TYPES_OK;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	89 83       	std	Y+1, r24	; 0x01
	if (u8_Value == DIO_PORT_HIGH || u8_Value == DIO_PORT_LOW)
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	8f 3f       	cpi	r24, 0xFF	; 255
    1ffc:	19 f0       	breq	.+6      	; 0x2004 <DIO_u8SetPortData+0x22>
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	88 23       	and	r24, r24
    2002:	a9 f5       	brne	.+106    	; 0x206e <DIO_u8SetPortData+0x8c>
	{
		switch (u8_PortName)
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	3d 83       	std	Y+5, r19	; 0x05
    200c:	2c 83       	std	Y+4, r18	; 0x04
    200e:	8c 81       	ldd	r24, Y+4	; 0x04
    2010:	9d 81       	ldd	r25, Y+5	; 0x05
    2012:	81 30       	cpi	r24, 0x01	; 1
    2014:	91 05       	cpc	r25, r1
    2016:	d1 f0       	breq	.+52     	; 0x204c <DIO_u8SetPortData+0x6a>
    2018:	2c 81       	ldd	r18, Y+4	; 0x04
    201a:	3d 81       	ldd	r19, Y+5	; 0x05
    201c:	22 30       	cpi	r18, 0x02	; 2
    201e:	31 05       	cpc	r19, r1
    2020:	2c f4       	brge	.+10     	; 0x202c <DIO_u8SetPortData+0x4a>
    2022:	8c 81       	ldd	r24, Y+4	; 0x04
    2024:	9d 81       	ldd	r25, Y+5	; 0x05
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	61 f0       	breq	.+24     	; 0x2042 <DIO_u8SetPortData+0x60>
    202a:	1f c0       	rjmp	.+62     	; 0x206a <DIO_u8SetPortData+0x88>
    202c:	2c 81       	ldd	r18, Y+4	; 0x04
    202e:	3d 81       	ldd	r19, Y+5	; 0x05
    2030:	22 30       	cpi	r18, 0x02	; 2
    2032:	31 05       	cpc	r19, r1
    2034:	81 f0       	breq	.+32     	; 0x2056 <DIO_u8SetPortData+0x74>
    2036:	8c 81       	ldd	r24, Y+4	; 0x04
    2038:	9d 81       	ldd	r25, Y+5	; 0x05
    203a:	83 30       	cpi	r24, 0x03	; 3
    203c:	91 05       	cpc	r25, r1
    203e:	81 f0       	breq	.+32     	; 0x2060 <DIO_u8SetPortData+0x7e>
    2040:	14 c0       	rjmp	.+40     	; 0x206a <DIO_u8SetPortData+0x88>
		{
		case PORTA:
			PORTA_REG = u8_Value;
    2042:	eb e3       	ldi	r30, 0x3B	; 59
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	80 83       	st	Z, r24
    204a:	12 c0       	rjmp	.+36     	; 0x2070 <DIO_u8SetPortData+0x8e>
			break;
		case PORTB:
			PORTB_REG = u8_Value;
    204c:	e8 e3       	ldi	r30, 0x38	; 56
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	80 83       	st	Z, r24
    2054:	0d c0       	rjmp	.+26     	; 0x2070 <DIO_u8SetPortData+0x8e>
			break;
		case PORTC:
			PORTC_REG=u8_Value;
    2056:	e5 e3       	ldi	r30, 0x35	; 53
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	80 83       	st	Z, r24
    205e:	08 c0       	rjmp	.+16     	; 0x2070 <DIO_u8SetPortData+0x8e>
			break;
		case PORTD:
			PORTD_REG=u8_Value;
    2060:	e2 e3       	ldi	r30, 0x32	; 50
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	80 83       	st	Z, r24
    2068:	03 c0       	rjmp	.+6      	; 0x2070 <DIO_u8SetPortData+0x8e>
			break;
		default:
			u8ErrorState=STD_TYPES_NOK;
    206a:	19 82       	std	Y+1, r1	; 0x01
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <DIO_u8SetPortData+0x8e>
		}
	}else{
		u8ErrorState=STD_TYPES_NOK;
    206e:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    2070:	89 81       	ldd	r24, Y+1	; 0x01
}
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <DIO_u8GetPortData>:
uint8_t DIO_u8GetPortData    (DIOPort_t u8_PortName,uint8_t* pu8_ReturnVar)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	00 d0       	rcall	.+0      	; 0x2088 <DIO_u8GetPortData+0x6>
    2088:	00 d0       	rcall	.+0      	; 0x208a <DIO_u8GetPortData+0x8>
    208a:	00 d0       	rcall	.+0      	; 0x208c <DIO_u8GetPortData+0xa>
    208c:	cd b7       	in	r28, 0x3d	; 61
    208e:	de b7       	in	r29, 0x3e	; 62
    2090:	8a 83       	std	Y+2, r24	; 0x02
    2092:	7c 83       	std	Y+4, r23	; 0x04
    2094:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	89 83       	std	Y+1, r24	; 0x01
	if (pu8_ReturnVar!=NULL)
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	9c 81       	ldd	r25, Y+4	; 0x04
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	e9 f1       	breq	.+122    	; 0x211c <DIO_u8GetPortData+0x9a>
	{
		switch(u8_PortName)
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	3e 83       	std	Y+6, r19	; 0x06
    20aa:	2d 83       	std	Y+5, r18	; 0x05
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	9e 81       	ldd	r25, Y+6	; 0x06
    20b0:	81 30       	cpi	r24, 0x01	; 1
    20b2:	91 05       	cpc	r25, r1
    20b4:	e1 f0       	breq	.+56     	; 0x20ee <DIO_u8GetPortData+0x6c>
    20b6:	2d 81       	ldd	r18, Y+5	; 0x05
    20b8:	3e 81       	ldd	r19, Y+6	; 0x06
    20ba:	22 30       	cpi	r18, 0x02	; 2
    20bc:	31 05       	cpc	r19, r1
    20be:	2c f4       	brge	.+10     	; 0x20ca <DIO_u8GetPortData+0x48>
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	61 f0       	breq	.+24     	; 0x20e0 <DIO_u8GetPortData+0x5e>
    20c8:	27 c0       	rjmp	.+78     	; 0x2118 <DIO_u8GetPortData+0x96>
    20ca:	2d 81       	ldd	r18, Y+5	; 0x05
    20cc:	3e 81       	ldd	r19, Y+6	; 0x06
    20ce:	22 30       	cpi	r18, 0x02	; 2
    20d0:	31 05       	cpc	r19, r1
    20d2:	a1 f0       	breq	.+40     	; 0x20fc <DIO_u8GetPortData+0x7a>
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	9e 81       	ldd	r25, Y+6	; 0x06
    20d8:	83 30       	cpi	r24, 0x03	; 3
    20da:	91 05       	cpc	r25, r1
    20dc:	b1 f0       	breq	.+44     	; 0x210a <DIO_u8GetPortData+0x88>
    20de:	1c c0       	rjmp	.+56     	; 0x2118 <DIO_u8GetPortData+0x96>
		{
		case PORTA:
			*pu8_ReturnVar= PORTA_REG;
    20e0:	eb e3       	ldi	r30, 0x3B	; 59
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	eb 81       	ldd	r30, Y+3	; 0x03
    20e8:	fc 81       	ldd	r31, Y+4	; 0x04
    20ea:	80 83       	st	Z, r24
    20ec:	18 c0       	rjmp	.+48     	; 0x211e <DIO_u8GetPortData+0x9c>
			break;
		case PORTB:
			*pu8_ReturnVar= PORTB_REG;
    20ee:	e8 e3       	ldi	r30, 0x38	; 56
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	eb 81       	ldd	r30, Y+3	; 0x03
    20f6:	fc 81       	ldd	r31, Y+4	; 0x04
    20f8:	80 83       	st	Z, r24
    20fa:	11 c0       	rjmp	.+34     	; 0x211e <DIO_u8GetPortData+0x9c>
			break;
		case PORTC:
			*pu8_ReturnVar= PORTC_REG;
    20fc:	e5 e3       	ldi	r30, 0x35	; 53
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	eb 81       	ldd	r30, Y+3	; 0x03
    2104:	fc 81       	ldd	r31, Y+4	; 0x04
    2106:	80 83       	st	Z, r24
    2108:	0a c0       	rjmp	.+20     	; 0x211e <DIO_u8GetPortData+0x9c>
			break;
		case PORTD:
			*pu8_ReturnVar= PORTD_REG;
    210a:	e2 e3       	ldi	r30, 0x32	; 50
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	eb 81       	ldd	r30, Y+3	; 0x03
    2112:	fc 81       	ldd	r31, Y+4	; 0x04
    2114:	80 83       	st	Z, r24
    2116:	03 c0       	rjmp	.+6      	; 0x211e <DIO_u8GetPortData+0x9c>
			break;
		default:
			u8ErrorState=STD_TYPES_NOK;
    2118:	19 82       	std	Y+1, r1	; 0x01
    211a:	01 c0       	rjmp	.+2      	; 0x211e <DIO_u8GetPortData+0x9c>
		}
	}else{
		u8ErrorState=STD_TYPES_NOK;
    211c:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    211e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2120:	26 96       	adiw	r28, 0x06	; 6
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <DIO_u8TogglePinData>:

uint8_t DIO_u8TogglePinData(DIOPort_t u8_PortName,DIOPin_t u8_PinNum){
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <DIO_u8TogglePinData+0x6>
    2138:	00 d0       	rcall	.+0      	; 0x213a <DIO_u8TogglePinData+0x8>
    213a:	0f 92       	push	r0
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	8a 83       	std	Y+2, r24	; 0x02
    2142:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t u8ErrorState = STD_TYPES_OK;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_PortName){
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	3d 83       	std	Y+5, r19	; 0x05
    2150:	2c 83       	std	Y+4, r18	; 0x04
    2152:	8c 81       	ldd	r24, Y+4	; 0x04
    2154:	9d 81       	ldd	r25, Y+5	; 0x05
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	91 05       	cpc	r25, r1
    215a:	49 f1       	breq	.+82     	; 0x21ae <DIO_u8TogglePinData+0x7c>
    215c:	2c 81       	ldd	r18, Y+4	; 0x04
    215e:	3d 81       	ldd	r19, Y+5	; 0x05
    2160:	22 30       	cpi	r18, 0x02	; 2
    2162:	31 05       	cpc	r19, r1
    2164:	2c f4       	brge	.+10     	; 0x2170 <DIO_u8TogglePinData+0x3e>
    2166:	8c 81       	ldd	r24, Y+4	; 0x04
    2168:	9d 81       	ldd	r25, Y+5	; 0x05
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	61 f0       	breq	.+24     	; 0x2186 <DIO_u8TogglePinData+0x54>
    216e:	5b c0       	rjmp	.+182    	; 0x2226 <DIO_u8TogglePinData+0xf4>
    2170:	2c 81       	ldd	r18, Y+4	; 0x04
    2172:	3d 81       	ldd	r19, Y+5	; 0x05
    2174:	22 30       	cpi	r18, 0x02	; 2
    2176:	31 05       	cpc	r19, r1
    2178:	71 f1       	breq	.+92     	; 0x21d6 <DIO_u8TogglePinData+0xa4>
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	9d 81       	ldd	r25, Y+5	; 0x05
    217e:	83 30       	cpi	r24, 0x03	; 3
    2180:	91 05       	cpc	r25, r1
    2182:	e9 f1       	breq	.+122    	; 0x21fe <DIO_u8TogglePinData+0xcc>
    2184:	50 c0       	rjmp	.+160    	; 0x2226 <DIO_u8TogglePinData+0xf4>
	case PORTA:
		Toggle_BIT(PORTA_REG, u8_PinNum);
    2186:	ab e3       	ldi	r26, 0x3B	; 59
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	eb e3       	ldi	r30, 0x3B	; 59
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	48 2f       	mov	r20, r24
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	02 2e       	mov	r0, r18
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <DIO_u8TogglePinData+0x72>
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	0a 94       	dec	r0
    21a6:	e2 f7       	brpl	.-8      	; 0x21a0 <DIO_u8TogglePinData+0x6e>
    21a8:	84 27       	eor	r24, r20
    21aa:	8c 93       	st	X, r24
    21ac:	3d c0       	rjmp	.+122    	; 0x2228 <DIO_u8TogglePinData+0xf6>
		break;
	case PORTB:
		Toggle_BIT(PORTB_REG, u8_PinNum);
    21ae:	a8 e3       	ldi	r26, 0x38	; 56
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e8 e3       	ldi	r30, 0x38	; 56
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	48 2f       	mov	r20, r24
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	02 2e       	mov	r0, r18
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <DIO_u8TogglePinData+0x9a>
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	0a 94       	dec	r0
    21ce:	e2 f7       	brpl	.-8      	; 0x21c8 <DIO_u8TogglePinData+0x96>
    21d0:	84 27       	eor	r24, r20
    21d2:	8c 93       	st	X, r24
    21d4:	29 c0       	rjmp	.+82     	; 0x2228 <DIO_u8TogglePinData+0xf6>
		break;
	case PORTC:
		Toggle_BIT(PORTC_REG, u8_PinNum);
    21d6:	a5 e3       	ldi	r26, 0x35	; 53
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e5 e3       	ldi	r30, 0x35	; 53
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	48 2f       	mov	r20, r24
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	02 2e       	mov	r0, r18
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <DIO_u8TogglePinData+0xc2>
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	0a 94       	dec	r0
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <DIO_u8TogglePinData+0xbe>
    21f8:	84 27       	eor	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	15 c0       	rjmp	.+42     	; 0x2228 <DIO_u8TogglePinData+0xf6>
		break;
	case PORTD:
		Toggle_BIT(PORTD_REG, u8_PinNum);
    21fe:	a2 e3       	ldi	r26, 0x32	; 50
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e2 e3       	ldi	r30, 0x32	; 50
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	48 2f       	mov	r20, r24
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	02 2e       	mov	r0, r18
    2216:	02 c0       	rjmp	.+4      	; 0x221c <DIO_u8TogglePinData+0xea>
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	0a 94       	dec	r0
    221e:	e2 f7       	brpl	.-8      	; 0x2218 <DIO_u8TogglePinData+0xe6>
    2220:	84 27       	eor	r24, r20
    2222:	8c 93       	st	X, r24
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <DIO_u8TogglePinData+0xf6>
		break;
	default:
		u8ErrorState = STD_TYPES_NOK;
    2226:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    2228:	89 81       	ldd	r24, Y+1	; 0x01
}
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <TIMER0_u8Init>:
#include "../../ECUAL/LED/LED.h"
#include "TIMER0.h"

static uint16_t volatile counter;

uint8_t TIMER0_u8Init(TIMER timer){
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	0f 92       	push	r0
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	89 83       	std	Y+1, r24	; 0x01
	
	switch(timer){
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	21 f4       	brne	.+8      	; 0x2258 <TIMER0_u8Init+0x1e>
		case TIMER0:
		TCCR0_REG = (1 << WGM01) | (1<<CS01) | (1 << CS00);
    2250:	e3 e5       	ldi	r30, 0x53	; 83
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	8b e0       	ldi	r24, 0x0B	; 11
    2256:	80 83       	st	Z, r24
		case TIMER1:
		break;
		case TIMER2:
		break;
	}
	return 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
}
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <TIMER0_u8Delay>:

uint8_t TIMER0_u8Delay(uint16_t delay){
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	00 d0       	rcall	.+0      	; 0x2268 <TIMER0_u8Delay+0x6>
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
	counter=0;
    2270:	10 92 8f 01 	sts	0x018F, r1
    2274:	10 92 8e 01 	sts	0x018E, r1
	TIMER0_u8Init(TIMER0);
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	0e 94 1d 11 	call	0x223a	; 0x223a <TIMER0_u8Init>
	OCR0_REG = (F_CPU / PRESCALER);
    227e:	ec e5       	ldi	r30, 0x5C	; 92
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	8d e7       	ldi	r24, 0x7D	; 125
    2284:	80 83       	st	Z, r24
	SET_BIT(TIMSK_REG, OCIE0);
    2286:	a9 e5       	ldi	r26, 0x59	; 89
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e9 e5       	ldi	r30, 0x59	; 89
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	82 60       	ori	r24, 0x02	; 2
    2292:	8c 93       	st	X, r24
	SET_BIT(SREG_REG, I_BIT);
    2294:	af e5       	ldi	r26, 0x5F	; 95
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	ef e5       	ldi	r30, 0x5F	; 95
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	80 68       	ori	r24, 0x80	; 128
    22a0:	8c 93       	st	X, r24
	while (counter <= delay);
    22a2:	20 91 8e 01 	lds	r18, 0x018E
    22a6:	30 91 8f 01 	lds	r19, 0x018F
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	9a 81       	ldd	r25, Y+2	; 0x02
    22ae:	82 17       	cp	r24, r18
    22b0:	93 07       	cpc	r25, r19
    22b2:	b8 f7       	brcc	.-18     	; 0x22a2 <TIMER0_u8Delay+0x40>
	CLR_BIT(TIMSK_REG, OCIE0);
    22b4:	a9 e5       	ldi	r26, 0x59	; 89
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e9 e5       	ldi	r30, 0x59	; 89
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	8d 7f       	andi	r24, 0xFD	; 253
    22c0:	8c 93       	st	X, r24
	return 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
}
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <__vector_10>:

void __vector_10(void){
    22ce:	1f 92       	push	r1
    22d0:	0f 92       	push	r0
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	0f 92       	push	r0
    22d6:	11 24       	eor	r1, r1
    22d8:	8f 93       	push	r24
    22da:	9f 93       	push	r25
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
	counter++;
    22e4:	80 91 8e 01 	lds	r24, 0x018E
    22e8:	90 91 8f 01 	lds	r25, 0x018F
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	90 93 8f 01 	sts	0x018F, r25
    22f2:	80 93 8e 01 	sts	0x018E, r24
}
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	9f 91       	pop	r25
    22fc:	8f 91       	pop	r24
    22fe:	0f 90       	pop	r0
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	0f 90       	pop	r0
    2304:	1f 90       	pop	r1
    2306:	18 95       	reti

00002308 <MOTOR_init>:

#include "MOTOR_interface.h"


uint8_t MOTOR_init(MotorDef_t* MotorElement)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	00 d0       	rcall	.+0      	; 0x230e <MOTOR_init+0x6>
    230e:	00 d0       	rcall	.+0      	; 0x2310 <MOTOR_init+0x8>
    2310:	0f 92       	push	r0
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	9d 83       	std	Y+5, r25	; 0x05
    2318:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	89 83       	std	Y+1, r24	; 0x01
	PWMPin_t MotorDef = {MotorElement->port, MotorElement->ENPin};
    231e:	ec 81       	ldd	r30, Y+4	; 0x04
    2320:	fd 81       	ldd	r31, Y+5	; 0x05
    2322:	90 81       	ld	r25, Z
    2324:	ec 81       	ldd	r30, Y+4	; 0x04
    2326:	fd 81       	ldd	r31, Y+5	; 0x05
    2328:	83 81       	ldd	r24, Z+3	; 0x03
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	8b 83       	std	Y+3, r24	; 0x03
	u8ErrorState= DIO_u8SetPinDirection(MotorElement->port,MotorElement->DirPinA,DIO_OUTPUT);
    232e:	ec 81       	ldd	r30, Y+4	; 0x04
    2330:	fd 81       	ldd	r31, Y+5	; 0x05
    2332:	80 81       	ld	r24, Z
    2334:	ec 81       	ldd	r30, Y+4	; 0x04
    2336:	fd 81       	ldd	r31, Y+5	; 0x05
    2338:	91 81       	ldd	r25, Z+1	; 0x01
    233a:	69 2f       	mov	r22, r25
    233c:	42 e0       	ldi	r20, 0x02	; 2
    233e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_u8SetPinDirection>
    2342:	89 83       	std	Y+1, r24	; 0x01
	if (u8ErrorState==STD_TYPES_OK)
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	81 30       	cpi	r24, 0x01	; 1
    2348:	59 f4       	brne	.+22     	; 0x2360 <MOTOR_init+0x58>
	{
		u8ErrorState= DIO_u8SetPinDirection(MotorElement->port,MotorElement->DirPinB,DIO_OUTPUT);
    234a:	ec 81       	ldd	r30, Y+4	; 0x04
    234c:	fd 81       	ldd	r31, Y+5	; 0x05
    234e:	80 81       	ld	r24, Z
    2350:	ec 81       	ldd	r30, Y+4	; 0x04
    2352:	fd 81       	ldd	r31, Y+5	; 0x05
    2354:	92 81       	ldd	r25, Z+2	; 0x02
    2356:	69 2f       	mov	r22, r25
    2358:	42 e0       	ldi	r20, 0x02	; 2
    235a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_u8SetPinDirection>
    235e:	89 83       	std	Y+1, r24	; 0x01
	}
	if (u8ErrorState==STD_TYPES_OK)
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	81 30       	cpi	r24, 0x01	; 1
    2364:	59 f4       	brne	.+22     	; 0x237c <MOTOR_init+0x74>
	{
		u8ErrorState=DIO_u8SetPinDirection(MotorElement->port,MotorElement->ENPin,DIO_OUTPUT);
    2366:	ec 81       	ldd	r30, Y+4	; 0x04
    2368:	fd 81       	ldd	r31, Y+5	; 0x05
    236a:	80 81       	ld	r24, Z
    236c:	ec 81       	ldd	r30, Y+4	; 0x04
    236e:	fd 81       	ldd	r31, Y+5	; 0x05
    2370:	93 81       	ldd	r25, Z+3	; 0x03
    2372:	69 2f       	mov	r22, r25
    2374:	42 e0       	ldi	r20, 0x02	; 2
    2376:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_u8SetPinDirection>
    237a:	89 83       	std	Y+1, r24	; 0x01
	}

	PWM_u8Init(MotorElement->ChannelNum, &MotorDef);
    237c:	ec 81       	ldd	r30, Y+4	; 0x04
    237e:	fd 81       	ldd	r31, Y+5	; 0x05
    2380:	84 81       	ldd	r24, Z+4	; 0x04
    2382:	9e 01       	movw	r18, r28
    2384:	2e 5f       	subi	r18, 0xFE	; 254
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	b9 01       	movw	r22, r18
    238a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <PWM_u8Init>
	return u8ErrorState;
    238e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <MOTOR_Move>:
uint8_t MOTOR_Move(MotorDef_t* MotorElement,uint8_t MotorSpeed,uint8_t MotorDir)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	27 97       	sbiw	r28, 0x07	; 7
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	9b 83       	std	Y+3, r25	; 0x03
    23b6:	8a 83       	std	Y+2, r24	; 0x02
    23b8:	6c 83       	std	Y+4, r22	; 0x04
    23ba:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t u8ErrorState = STD_TYPES_OK;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	89 83       	std	Y+1, r24	; 0x01

	if (MotorElement!=NULL && MotorSpeed > 0 && MotorSpeed <100)
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	9b 81       	ldd	r25, Y+3	; 0x03
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	09 f4       	brne	.+2      	; 0x23ca <MOTOR_Move+0x2a>
    23c8:	57 c0       	rjmp	.+174    	; 0x2478 <MOTOR_Move+0xd8>
    23ca:	8c 81       	ldd	r24, Y+4	; 0x04
    23cc:	88 23       	and	r24, r24
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <MOTOR_Move+0x32>
    23d0:	53 c0       	rjmp	.+166    	; 0x2478 <MOTOR_Move+0xd8>
    23d2:	8c 81       	ldd	r24, Y+4	; 0x04
    23d4:	84 36       	cpi	r24, 0x64	; 100
    23d6:	08 f0       	brcs	.+2      	; 0x23da <MOTOR_Move+0x3a>
    23d8:	4f c0       	rjmp	.+158    	; 0x2478 <MOTOR_Move+0xd8>
	{
		switch (MotorDir)
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	3f 83       	std	Y+7, r19	; 0x07
    23e2:	2e 83       	std	Y+6, r18	; 0x06
    23e4:	8e 81       	ldd	r24, Y+6	; 0x06
    23e6:	9f 81       	ldd	r25, Y+7	; 0x07
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	31 f0       	breq	.+12     	; 0x23f8 <MOTOR_Move+0x58>
    23ec:	2e 81       	ldd	r18, Y+6	; 0x06
    23ee:	3f 81       	ldd	r19, Y+7	; 0x07
    23f0:	21 30       	cpi	r18, 0x01	; 1
    23f2:	31 05       	cpc	r19, r1
    23f4:	01 f1       	breq	.+64     	; 0x2436 <MOTOR_Move+0x96>
    23f6:	3e c0       	rjmp	.+124    	; 0x2474 <MOTOR_Move+0xd4>
		{
		case CLOCKWISE:
			DIO_u8SetPinData(MotorElement->port , MotorElement->DirPinA, DIO_HIGH);
    23f8:	ea 81       	ldd	r30, Y+2	; 0x02
    23fa:	fb 81       	ldd	r31, Y+3	; 0x03
    23fc:	80 81       	ld	r24, Z
    23fe:	ea 81       	ldd	r30, Y+2	; 0x02
    2400:	fb 81       	ldd	r31, Y+3	; 0x03
    2402:	91 81       	ldd	r25, Z+1	; 0x01
    2404:	69 2f       	mov	r22, r25
    2406:	41 e0       	ldi	r20, 0x01	; 1
    2408:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
			DIO_u8SetPinData(MotorElement->port , MotorElement->DirPinB, DIO_LOW);
    240c:	ea 81       	ldd	r30, Y+2	; 0x02
    240e:	fb 81       	ldd	r31, Y+3	; 0x03
    2410:	80 81       	ld	r24, Z
    2412:	ea 81       	ldd	r30, Y+2	; 0x02
    2414:	fb 81       	ldd	r31, Y+3	; 0x03
    2416:	92 81       	ldd	r25, Z+2	; 0x02
    2418:	69 2f       	mov	r22, r25
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
			PWM_u8DutyCycle(MotorElement->ChannelNum,MotorSpeed);
    2420:	ea 81       	ldd	r30, Y+2	; 0x02
    2422:	fb 81       	ldd	r31, Y+3	; 0x03
    2424:	94 81       	ldd	r25, Z+4	; 0x04
    2426:	8c 81       	ldd	r24, Y+4	; 0x04
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	89 2f       	mov	r24, r25
    242e:	b9 01       	movw	r22, r18
    2430:	0e 94 98 0a 	call	0x1530	; 0x1530 <PWM_u8DutyCycle>
    2434:	22 c0       	rjmp	.+68     	; 0x247a <MOTOR_Move+0xda>
			break;
		case ANTI_CLOCKWISE:
			DIO_u8SetPinData(MotorElement->port , MotorElement->DirPinA, DIO_LOW);
    2436:	ea 81       	ldd	r30, Y+2	; 0x02
    2438:	fb 81       	ldd	r31, Y+3	; 0x03
    243a:	80 81       	ld	r24, Z
    243c:	ea 81       	ldd	r30, Y+2	; 0x02
    243e:	fb 81       	ldd	r31, Y+3	; 0x03
    2440:	91 81       	ldd	r25, Z+1	; 0x01
    2442:	69 2f       	mov	r22, r25
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
			DIO_u8SetPinData(MotorElement->port , MotorElement->DirPinB, DIO_HIGH);
    244a:	ea 81       	ldd	r30, Y+2	; 0x02
    244c:	fb 81       	ldd	r31, Y+3	; 0x03
    244e:	80 81       	ld	r24, Z
    2450:	ea 81       	ldd	r30, Y+2	; 0x02
    2452:	fb 81       	ldd	r31, Y+3	; 0x03
    2454:	92 81       	ldd	r25, Z+2	; 0x02
    2456:	69 2f       	mov	r22, r25
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
			PWM_u8DutyCycle(MotorElement->ChannelNum,MotorSpeed);
    245e:	ea 81       	ldd	r30, Y+2	; 0x02
    2460:	fb 81       	ldd	r31, Y+3	; 0x03
    2462:	94 81       	ldd	r25, Z+4	; 0x04
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	89 2f       	mov	r24, r25
    246c:	b9 01       	movw	r22, r18
    246e:	0e 94 98 0a 	call	0x1530	; 0x1530 <PWM_u8DutyCycle>
    2472:	03 c0       	rjmp	.+6      	; 0x247a <MOTOR_Move+0xda>
			break;
		default:
			u8ErrorState = STD_TYPES_NOK;
    2474:	19 82       	std	Y+1, r1	; 0x01
    2476:	01 c0       	rjmp	.+2      	; 0x247a <MOTOR_Move+0xda>
			break;
		}

	}else{
		u8ErrorState = STD_TYPES_NOK;
    2478:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    247a:	89 81       	ldd	r24, Y+1	; 0x01
}
    247c:	27 96       	adiw	r28, 0x07	; 7
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <MOTOR_Stop>:

uint8_t MOTOR_Stop(MotorDef_t* MotorElement)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	00 d0       	rcall	.+0      	; 0x2494 <MOTOR_Stop+0x6>
    2494:	0f 92       	push	r0
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	9b 83       	std	Y+3, r25	; 0x03
    249c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = STD_TYPES_OK;
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	89 83       	std	Y+1, r24	; 0x01
	if (MotorElement!=NULL)
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	9b 81       	ldd	r25, Y+3	; 0x03
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	a9 f0       	breq	.+42     	; 0x24d4 <MOTOR_Stop+0x46>
	{
		DIO_u8SetPinData(MotorElement->port , MotorElement->DirPinA, DIO_LOW);
    24aa:	ea 81       	ldd	r30, Y+2	; 0x02
    24ac:	fb 81       	ldd	r31, Y+3	; 0x03
    24ae:	80 81       	ld	r24, Z
    24b0:	ea 81       	ldd	r30, Y+2	; 0x02
    24b2:	fb 81       	ldd	r31, Y+3	; 0x03
    24b4:	91 81       	ldd	r25, Z+1	; 0x01
    24b6:	69 2f       	mov	r22, r25
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
		DIO_u8SetPinData(MotorElement->port , MotorElement->DirPinB, DIO_LOW);
    24be:	ea 81       	ldd	r30, Y+2	; 0x02
    24c0:	fb 81       	ldd	r31, Y+3	; 0x03
    24c2:	80 81       	ld	r24, Z
    24c4:	ea 81       	ldd	r30, Y+2	; 0x02
    24c6:	fb 81       	ldd	r31, Y+3	; 0x03
    24c8:	92 81       	ldd	r25, Z+2	; 0x02
    24ca:	69 2f       	mov	r22, r25
    24cc:	40 e0       	ldi	r20, 0x00	; 0
    24ce:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <MOTOR_Stop+0x48>
	}else{
		u8ErrorState = STD_TYPES_NOK;
    24d4:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <LED_u8Init>:


#include "LED.h"

uint8_t LED_u8Init ( LED_t led )
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <LED_u8Init+0x6>
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	89 83       	std	Y+1, r24	; 0x01
	return DIO_u8SetPinDirection(led.port,led.pin,DIO_OUTPUT);
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	9a 81       	ldd	r25, Y+2	; 0x02
    24f6:	69 2f       	mov	r22, r25
    24f8:	42 e0       	ldi	r20, 0x02	; 2
    24fa:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_u8SetPinDirection>
}
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <LED_u8On>:

uint8_t LED_u8On ( LED_t led )
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	00 d0       	rcall	.+0      	; 0x250e <LED_u8On+0x6>
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	9a 83       	std	Y+2, r25	; 0x02
    2514:	89 83       	std	Y+1, r24	; 0x01
	return DIO_u8SetPinData(led.port,led.pin,DIO_HIGH);
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
    251a:	69 2f       	mov	r22, r25
    251c:	41 e0       	ldi	r20, 0x01	; 1
    251e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
}
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <LED_u8Off>:

uint8_t LED_u8Off ( LED_t led )
{
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	00 d0       	rcall	.+0      	; 0x2532 <LED_u8Off+0x6>
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	89 83       	std	Y+1, r24	; 0x01
	return DIO_u8SetPinData(led.port,led.pin,DIO_LOW);
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	9a 81       	ldd	r25, Y+2	; 0x02
    253e:	69 2f       	mov	r22, r25
    2540:	40 e0       	ldi	r20, 0x00	; 0
    2542:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
}
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <LED_u8Toggle>:


uint8_t LED_u8Toggle ( LED_t led )
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	00 d0       	rcall	.+0      	; 0x2556 <LED_u8Toggle+0x6>
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	9a 83       	std	Y+2, r25	; 0x02
    255c:	89 83       	std	Y+1, r24	; 0x01
	return DIO_u8TogglePinData(led.port,led.pin);
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	69 2f       	mov	r22, r25
    2564:	0e 94 99 10 	call	0x2132	; 0x2132 <DIO_u8TogglePinData>
}
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <KEYPAD_u8Init>:
#include "KEYPAD_interface.h"
#include "KEYPAD_cfg.h"


uint8_t KEYPAD_u8Init(void)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	0f 92       	push	r0
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
	/*step 1 : config Col pins as output*/
	DIO_u8SetPinDirection(COL_PORT,COL_PIN0,DIO_OUTPUT);
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	65 e0       	ldi	r22, 0x05	; 5
    2580:	42 e0       	ldi	r20, 0x02	; 2
    2582:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(COL_PORT,COL_PIN1,DIO_OUTPUT);
    2586:	82 e0       	ldi	r24, 0x02	; 2
    2588:	66 e0       	ldi	r22, 0x06	; 6
    258a:	42 e0       	ldi	r20, 0x02	; 2
    258c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(COL_PORT,COL_PIN2,DIO_OUTPUT);
    2590:	82 e0       	ldi	r24, 0x02	; 2
    2592:	67 e0       	ldi	r22, 0x07	; 7
    2594:	42 e0       	ldi	r20, 0x02	; 2
    2596:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_u8SetPinDirection>
	/*step 2 : config Rows pins as inputs , pull ups*/
	DIO_u8SetPinDirection(ROW_PORT,ROW_PIN0,DIO_INPUT_PULLUP);
    259a:	82 e0       	ldi	r24, 0x02	; 2
    259c:	62 e0       	ldi	r22, 0x02	; 2
    259e:	41 e0       	ldi	r20, 0x01	; 1
    25a0:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(ROW_PORT,ROW_PIN1,DIO_INPUT_PULLUP);
    25a4:	82 e0       	ldi	r24, 0x02	; 2
    25a6:	63 e0       	ldi	r22, 0x03	; 3
    25a8:	41 e0       	ldi	r20, 0x01	; 1
    25aa:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(ROW_PORT,ROW_PIN2,DIO_INPUT_PULLUP);
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	64 e0       	ldi	r22, 0x04	; 4
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_u8SetPinDirection>
	/*step 3 : Initialize Col pins -> HIGH*/
	DIO_u8SetPinData(COL_PORT,COL_PIN0,DIO_HIGH);
    25b8:	82 e0       	ldi	r24, 0x02	; 2
    25ba:	65 e0       	ldi	r22, 0x05	; 5
    25bc:	41 e0       	ldi	r20, 0x01	; 1
    25be:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
	DIO_u8SetPinData(COL_PORT,COL_PIN1,DIO_HIGH);
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	66 e0       	ldi	r22, 0x06	; 6
    25c6:	41 e0       	ldi	r20, 0x01	; 1
    25c8:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
	DIO_u8SetPinData(COL_PORT,COL_PIN2,DIO_HIGH);
    25cc:	82 e0       	ldi	r24, 0x02	; 2
    25ce:	67 e0       	ldi	r22, 0x07	; 7
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
}
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <KEYPAD_u8GetPressedKey>:
uint8_t KEYPAD_u8GetPressedKey(uint8_t* KeyPressed)
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	65 97       	sbiw	r28, 0x15	; 21
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	de bf       	out	0x3e, r29	; 62
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	cd bf       	out	0x3d, r28	; 61
    25f2:	98 8b       	std	Y+16, r25	; 0x10
    25f4:	8f 87       	std	Y+15, r24	; 0x0f
	uint8_t u8ErrorState = STD_TYPES_OK;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t LOC_u8ReturnVal = KEYPAD_NO_PRESSED_KEY;
    25fa:	8f ef       	ldi	r24, 0xFF	; 255
    25fc:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t col_indx;
	uint8_t row_indx;
	uint8_t Pin_State;
	uint8_t LOC_u8KEYPAD_Arr[KEYPAD_ROWS][KEYPAD_COL]=  KEYPAD_VALUES;
    25fe:	ce 01       	movw	r24, r28
    2600:	06 96       	adiw	r24, 0x06	; 6
    2602:	9a 8b       	std	Y+18, r25	; 0x12
    2604:	89 8b       	std	Y+17, r24	; 0x11
    2606:	ea e7       	ldi	r30, 0x7A	; 122
    2608:	f1 e0       	ldi	r31, 0x01	; 1
    260a:	fc 8b       	std	Y+20, r31	; 0x14
    260c:	eb 8b       	std	Y+19, r30	; 0x13
    260e:	f9 e0       	ldi	r31, 0x09	; 9
    2610:	fd 8b       	std	Y+21, r31	; 0x15
    2612:	eb 89       	ldd	r30, Y+19	; 0x13
    2614:	fc 89       	ldd	r31, Y+20	; 0x14
    2616:	00 80       	ld	r0, Z
    2618:	8b 89       	ldd	r24, Y+19	; 0x13
    261a:	9c 89       	ldd	r25, Y+20	; 0x14
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	9c 8b       	std	Y+20, r25	; 0x14
    2620:	8b 8b       	std	Y+19, r24	; 0x13
    2622:	e9 89       	ldd	r30, Y+17	; 0x11
    2624:	fa 89       	ldd	r31, Y+18	; 0x12
    2626:	00 82       	st	Z, r0
    2628:	89 89       	ldd	r24, Y+17	; 0x11
    262a:	9a 89       	ldd	r25, Y+18	; 0x12
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	9a 8b       	std	Y+18, r25	; 0x12
    2630:	89 8b       	std	Y+17, r24	; 0x11
    2632:	9d 89       	ldd	r25, Y+21	; 0x15
    2634:	91 50       	subi	r25, 0x01	; 1
    2636:	9d 8b       	std	Y+21, r25	; 0x15
    2638:	ed 89       	ldd	r30, Y+21	; 0x15
    263a:	ee 23       	and	r30, r30
    263c:	51 f7       	brne	.-44     	; 0x2612 <KEYPAD_u8GetPressedKey+0x34>

	if (KeyPressed!=NULL)
    263e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2640:	98 89       	ldd	r25, Y+16	; 0x10
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	09 f4       	brne	.+2      	; 0x2648 <KEYPAD_u8GetPressedKey+0x6a>
    2646:	4d c0       	rjmp	.+154    	; 0x26e2 <KEYPAD_u8GetPressedKey+0x104>
	{
		for(col_indx=COL_S;col_indx<COL_MAX;col_indx++ )
    2648:	85 e0       	ldi	r24, 0x05	; 5
    264a:	8a 83       	std	Y+2, r24	; 0x02
    264c:	41 c0       	rjmp	.+130    	; 0x26d0 <KEYPAD_u8GetPressedKey+0xf2>
		{
			/*select column and output low*/
			DIO_u8SetPinData(COL_PORT,col_indx,DIO_LOW);
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	6a 81       	ldd	r22, Y+2	; 0x02
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
			for(row_indx = ROW_S;row_indx<ROW_MAX;row_indx++)
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	2e c0       	rjmp	.+92     	; 0x26ba <KEYPAD_u8GetPressedKey+0xdc>
			{
				DIO_u8GetPinData(ROW_PORT,row_indx,&Pin_State);
    265e:	9e 01       	movw	r18, r28
    2660:	2b 5f       	subi	r18, 0xFB	; 251
    2662:	3f 4f       	sbci	r19, 0xFF	; 255
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	69 81       	ldd	r22, Y+1	; 0x01
    2668:	a9 01       	movw	r20, r18
    266a:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <DIO_u8GetPinData>
				if(Pin_State == 0) /*if true -> PB is pressed*/
    266e:	8d 81       	ldd	r24, Y+5	; 0x05
    2670:	88 23       	and	r24, r24
    2672:	01 f5       	brne	.+64     	; 0x26b4 <KEYPAD_u8GetPressedKey+0xd6>
				{
					LOC_u8ReturnVal =  LOC_u8KEYPAD_Arr[row_indx-ROW_S][col_indx-COL_S];
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	88 2f       	mov	r24, r24
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	9c 01       	movw	r18, r24
    267c:	22 50       	subi	r18, 0x02	; 2
    267e:	30 40       	sbci	r19, 0x00	; 0
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	88 2f       	mov	r24, r24
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	ac 01       	movw	r20, r24
    2688:	45 50       	subi	r20, 0x05	; 5
    268a:	50 40       	sbci	r21, 0x00	; 0
    268c:	c9 01       	movw	r24, r18
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	82 0f       	add	r24, r18
    2694:	93 1f       	adc	r25, r19
    2696:	9e 01       	movw	r18, r28
    2698:	2f 5f       	subi	r18, 0xFF	; 255
    269a:	3f 4f       	sbci	r19, 0xFF	; 255
    269c:	82 0f       	add	r24, r18
    269e:	93 1f       	adc	r25, r19
    26a0:	84 0f       	add	r24, r20
    26a2:	95 1f       	adc	r25, r21
    26a4:	fc 01       	movw	r30, r24
    26a6:	35 96       	adiw	r30, 0x05	; 5
    26a8:	80 81       	ld	r24, Z
    26aa:	8b 83       	std	Y+3, r24	; 0x03
					/*busy waiting loop*/

					/*debouncing button */
					TIMER0_u8Delay(10);
    26ac:	8a e0       	ldi	r24, 0x0A	; 10
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	0e 94 31 11 	call	0x2262	; 0x2262 <TIMER0_u8Delay>
	{
		for(col_indx=COL_S;col_indx<COL_MAX;col_indx++ )
		{
			/*select column and output low*/
			DIO_u8SetPinData(COL_PORT,col_indx,DIO_LOW);
			for(row_indx = ROW_S;row_indx<ROW_MAX;row_indx++)
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	8f 5f       	subi	r24, 0xFF	; 255
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	85 30       	cpi	r24, 0x05	; 5
    26be:	78 f2       	brcs	.-98     	; 0x265e <KEYPAD_u8GetPressedKey+0x80>
					/*debouncing button */
					TIMER0_u8Delay(10);

				}
			}
			DIO_u8SetPinData(COL_PORT,col_indx,DIO_HIGH);
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	6a 81       	ldd	r22, Y+2	; 0x02
    26c4:	41 e0       	ldi	r20, 0x01	; 1
    26c6:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <DIO_u8SetPinData>
	uint8_t Pin_State;
	uint8_t LOC_u8KEYPAD_Arr[KEYPAD_ROWS][KEYPAD_COL]=  KEYPAD_VALUES;

	if (KeyPressed!=NULL)
	{
		for(col_indx=COL_S;col_indx<COL_MAX;col_indx++ )
    26ca:	8a 81       	ldd	r24, Y+2	; 0x02
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	8a 83       	std	Y+2, r24	; 0x02
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	88 30       	cpi	r24, 0x08	; 8
    26d4:	08 f4       	brcc	.+2      	; 0x26d8 <KEYPAD_u8GetPressedKey+0xfa>
    26d6:	bb cf       	rjmp	.-138    	; 0x264e <KEYPAD_u8GetPressedKey+0x70>
				}
			}
			DIO_u8SetPinData(COL_PORT,col_indx,DIO_HIGH);
		}

		*KeyPressed = LOC_u8ReturnVal;
    26d8:	ef 85       	ldd	r30, Y+15	; 0x0f
    26da:	f8 89       	ldd	r31, Y+16	; 0x10
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	80 83       	st	Z, r24
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <KEYPAD_u8GetPressedKey+0x106>
	}else{
		u8ErrorState = STD_TYPES_NOK;
    26e2:	1c 82       	std	Y+4, r1	; 0x04
	}
   return u8ErrorState;
    26e4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    26e6:	65 96       	adiw	r28, 0x15	; 21
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <BTN_u8Init>:


#include "Button.h"

uint8_t BTN_u8Init ( BTN_t button )
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <BTN_u8Init+0x6>
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	9a 83       	std	Y+2, r25	; 0x02
    2704:	89 83       	std	Y+1, r24	; 0x01
	return DIO_u8SetPinDirection(button.port,button.pin,DIO_INPUT);
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	69 2f       	mov	r22, r25
    270c:	40 e0       	ldi	r20, 0x00	; 0
    270e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <DIO_u8SetPinDirection>
}
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <BTN_u8IsPressed>:

uint8_t BTN_u8IsPressed ( BTN_t button , uint8_t * pressed )
{	
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	28 97       	sbiw	r28, 0x08	; 8
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	9e 83       	std	Y+6, r25	; 0x06
    2732:	8d 83       	std	Y+5, r24	; 0x05
    2734:	78 87       	std	Y+8, r23	; 0x08
    2736:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t u8ErrorState = STD_TYPES_OK;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8DebounceDetectorHigh =0 , u8DebounceDetectorLow=0, u8BTNState;
    273c:	1a 82       	std	Y+2, r1	; 0x02
    273e:	19 82       	std	Y+1, r1	; 0x01
	if (pressed!= NULL)
    2740:	8f 81       	ldd	r24, Y+7	; 0x07
    2742:	98 85       	ldd	r25, Y+8	; 0x08
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	a1 f1       	breq	.+104    	; 0x27b0 <BTN_u8IsPressed+0x94>
	{
		DIO_u8GetPinData(button.port,button.pin,&u8BTNState );
    2748:	8d 81       	ldd	r24, Y+5	; 0x05
    274a:	9e 81       	ldd	r25, Y+6	; 0x06
    274c:	9e 01       	movw	r18, r28
    274e:	2c 5f       	subi	r18, 0xFC	; 252
    2750:	3f 4f       	sbci	r19, 0xFF	; 255
    2752:	69 2f       	mov	r22, r25
    2754:	a9 01       	movw	r20, r18
    2756:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <DIO_u8GetPinData>
		if (u8BTNState == STD_TYPES_NOK)
    275a:	8c 81       	ldd	r24, Y+4	; 0x04
    275c:	88 23       	and	r24, r24
    275e:	11 f4       	brne	.+4      	; 0x2764 <BTN_u8IsPressed+0x48>
		{
			u8ErrorState = STD_TYPES_NOK;
    2760:	1b 82       	std	Y+3, r1	; 0x03
    2762:	27 c0       	rjmp	.+78     	; 0x27b2 <BTN_u8IsPressed+0x96>
		}else
		{
			while (1)
			{
				DIO_u8GetPinData(button.port,button.pin,&u8BTNState );
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	9e 01       	movw	r18, r28
    276a:	2c 5f       	subi	r18, 0xFC	; 252
    276c:	3f 4f       	sbci	r19, 0xFF	; 255
    276e:	69 2f       	mov	r22, r25
    2770:	a9 01       	movw	r20, r18
    2772:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <DIO_u8GetPinData>
				if (u8BTNState==DIO_HIGH)
    2776:	8c 81       	ldd	r24, Y+4	; 0x04
    2778:	81 30       	cpi	r24, 0x01	; 1
    277a:	39 f4       	brne	.+14     	; 0x278a <BTN_u8IsPressed+0x6e>
				{
					u8DebounceDetectorHigh++;
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	8f 5f       	subi	r24, 0xFF	; 255
    2780:	8a 83       	std	Y+2, r24	; 0x02
					u8DebounceDetectorLow=0;
    2782:	19 82       	std	Y+1, r1	; 0x01
					u8BTNState = BTN_PRESSED;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	8c 83       	std	Y+4, r24	; 0x04
    2788:	08 c0       	rjmp	.+16     	; 0x279a <BTN_u8IsPressed+0x7e>

				}else if (u8BTNState==DIO_LOW)
    278a:	8c 81       	ldd	r24, Y+4	; 0x04
    278c:	88 23       	and	r24, r24
    278e:	29 f4       	brne	.+10     	; 0x279a <BTN_u8IsPressed+0x7e>
				{
					u8DebounceDetectorHigh=0;
    2790:	1a 82       	std	Y+2, r1	; 0x02
					u8DebounceDetectorLow++;
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	8f 5f       	subi	r24, 0xFF	; 255
    2796:	89 83       	std	Y+1, r24	; 0x01
					u8BTNState = BTN_NOT_PRESSED;
    2798:	1c 82       	std	Y+4, r1	; 0x04
				}

				if (u8DebounceDetectorHigh==5 || u8DebounceDetectorLow ==5)
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	85 30       	cpi	r24, 0x05	; 5
    279e:	19 f0       	breq	.+6      	; 0x27a6 <BTN_u8IsPressed+0x8a>
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	85 30       	cpi	r24, 0x05	; 5
    27a4:	f9 f6       	brne	.-66     	; 0x2764 <BTN_u8IsPressed+0x48>
				{
					*pressed = u8BTNState;
    27a6:	8c 81       	ldd	r24, Y+4	; 0x04
    27a8:	ef 81       	ldd	r30, Y+7	; 0x07
    27aa:	f8 85       	ldd	r31, Y+8	; 0x08
    27ac:	80 83       	st	Z, r24
    27ae:	01 c0       	rjmp	.+2      	; 0x27b2 <BTN_u8IsPressed+0x96>
				}
			}
		}
	}else
		{
		u8ErrorState = STD_TYPES_NOK;
    27b0:	1b 82       	std	Y+3, r1	; 0x03
		}

	return u8ErrorState;
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27b4:	28 96       	adiw	r28, 0x08	; 8
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <main>:
#include "SERVICE/DRIVE/DRIVE.h"
#include "SERVICE/UI/UI_interface.h"
#define OFF 0
#define ON  1
int main ()
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <main+0x6>
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <main+0x8>
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t KeyState;
	uint8_t STATE = MODE1;
    27d2:	19 82       	std	Y+1, r1	; 0x01
	LED_t LED0 = {PORTB, PIN5};
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	8b 83       	std	Y+3, r24	; 0x03
    27d8:	85 e0       	ldi	r24, 0x05	; 5
    27da:	8c 83       	std	Y+4, r24	; 0x04
	LED_u8Init(LED0);
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <LED_u8Init>
	DRIVE_u8Init();
    27e4:	0e 94 76 07 	call	0xeec	; 0xeec <DRIVE_u8Init>
	UI_Init();
    27e8:	0e 94 b7 06 	call	0xd6e	; 0xd6e <UI_Init>
	KEYPAD_u8Init();
    27ec:	0e 94 b9 12 	call	0x2572	; 0x2572 <KEYPAD_u8Init>

	while (1)
	{
		UI_GetKeyPressed(&KeyState);
    27f0:	ce 01       	movw	r24, r28
    27f2:	02 96       	adiw	r24, 0x02	; 2
    27f4:	0e 94 dd 06 	call	0xdba	; 0xdba <UI_GetKeyPressed>
		if (KeyState==2)
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	82 30       	cpi	r24, 0x02	; 2
    27fc:	61 f4       	brne	.+24     	; 0x2816 <main+0x50>
		{
			DRIVE_u8Mode(STATE);
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	0e 94 ed 07 	call	0xfda	; 0xfda <DRIVE_u8Mode>
    2804:	04 c0       	rjmp	.+8      	; 0x280e <main+0x48>
			while (KeyState==2)
			{
				UI_GetKeyPressed(&KeyState);
    2806:	ce 01       	movw	r24, r28
    2808:	02 96       	adiw	r24, 0x02	; 2
    280a:	0e 94 dd 06 	call	0xdba	; 0xdba <UI_GetKeyPressed>
	{
		UI_GetKeyPressed(&KeyState);
		if (KeyState==2)
		{
			DRIVE_u8Mode(STATE);
			while (KeyState==2)
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	82 30       	cpi	r24, 0x02	; 2
    2812:	c9 f3       	breq	.-14     	; 0x2806 <main+0x40>
    2814:	ed cf       	rjmp	.-38     	; 0x27f0 <main+0x2a>
			{
				UI_GetKeyPressed(&KeyState);
			}
		}

		else if(KeyState==6)
    2816:	8a 81       	ldd	r24, Y+2	; 0x02
    2818:	86 30       	cpi	r24, 0x06	; 6
    281a:	19 f4       	brne	.+6      	; 0x2822 <main+0x5c>
		{
			DRIVE_u8Right();
    281c:	0e 94 9b 07 	call	0xf36	; 0xf36 <DRIVE_u8Right>
    2820:	e7 cf       	rjmp	.-50     	; 0x27f0 <main+0x2a>
		}

		else if (KeyState==4)
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	84 30       	cpi	r24, 0x04	; 4
    2826:	19 f4       	brne	.+6      	; 0x282e <main+0x68>
		{
			DRIVE_u8Left();
    2828:	0e 94 c4 07 	call	0xf88	; 0xf88 <DRIVE_u8Left>
    282c:	e1 cf       	rjmp	.-62     	; 0x27f0 <main+0x2a>
		}

		else if (KeyState==5)
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	85 30       	cpi	r24, 0x05	; 5
    2832:	a1 f4       	brne	.+40     	; 0x285c <main+0x96>
		{
			STATE++;
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	8f 5f       	subi	r24, 0xFF	; 255
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	04 c0       	rjmp	.+8      	; 0x2844 <main+0x7e>
			while (KeyState==5)
			{
				UI_GetKeyPressed(&KeyState);
    283c:	ce 01       	movw	r24, r28
    283e:	02 96       	adiw	r24, 0x02	; 2
    2840:	0e 94 dd 06 	call	0xdba	; 0xdba <UI_GetKeyPressed>
		}

		else if (KeyState==5)
		{
			STATE++;
			while (KeyState==5)
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	85 30       	cpi	r24, 0x05	; 5
    2848:	c9 f3       	breq	.-14     	; 0x283c <main+0x76>
			{
				UI_GetKeyPressed(&KeyState);
			}
			if (STATE==5)
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	85 30       	cpi	r24, 0x05	; 5
    284e:	11 f4       	brne	.+4      	; 0x2854 <main+0x8e>
			{
				STATE = MODE2;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	89 83       	std	Y+1, r24	; 0x01
			}
			UI_SetLedModuleState(STATE);
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	0e 94 f3 06 	call	0xde6	; 0xde6 <UI_SetLedModuleState>
    285a:	ca cf       	rjmp	.-108    	; 0x27f0 <main+0x2a>

		}

		else{
			DRIVE_u8Mode(MODE1);
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	0e 94 ed 07 	call	0xfda	; 0xfda <DRIVE_u8Mode>
    2862:	c6 cf       	rjmp	.-116    	; 0x27f0 <main+0x2a>

00002864 <__prologue_saves__>:
    2864:	2f 92       	push	r2
    2866:	3f 92       	push	r3
    2868:	4f 92       	push	r4
    286a:	5f 92       	push	r5
    286c:	6f 92       	push	r6
    286e:	7f 92       	push	r7
    2870:	8f 92       	push	r8
    2872:	9f 92       	push	r9
    2874:	af 92       	push	r10
    2876:	bf 92       	push	r11
    2878:	cf 92       	push	r12
    287a:	df 92       	push	r13
    287c:	ef 92       	push	r14
    287e:	ff 92       	push	r15
    2880:	0f 93       	push	r16
    2882:	1f 93       	push	r17
    2884:	cf 93       	push	r28
    2886:	df 93       	push	r29
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	ca 1b       	sub	r28, r26
    288e:	db 0b       	sbc	r29, r27
    2890:	0f b6       	in	r0, 0x3f	; 63
    2892:	f8 94       	cli
    2894:	de bf       	out	0x3e, r29	; 62
    2896:	0f be       	out	0x3f, r0	; 63
    2898:	cd bf       	out	0x3d, r28	; 61
    289a:	09 94       	ijmp

0000289c <__epilogue_restores__>:
    289c:	2a 88       	ldd	r2, Y+18	; 0x12
    289e:	39 88       	ldd	r3, Y+17	; 0x11
    28a0:	48 88       	ldd	r4, Y+16	; 0x10
    28a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    28a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    28a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    28a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    28aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    28ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    28ae:	b9 84       	ldd	r11, Y+9	; 0x09
    28b0:	c8 84       	ldd	r12, Y+8	; 0x08
    28b2:	df 80       	ldd	r13, Y+7	; 0x07
    28b4:	ee 80       	ldd	r14, Y+6	; 0x06
    28b6:	fd 80       	ldd	r15, Y+5	; 0x05
    28b8:	0c 81       	ldd	r16, Y+4	; 0x04
    28ba:	1b 81       	ldd	r17, Y+3	; 0x03
    28bc:	aa 81       	ldd	r26, Y+2	; 0x02
    28be:	b9 81       	ldd	r27, Y+1	; 0x01
    28c0:	ce 0f       	add	r28, r30
    28c2:	d1 1d       	adc	r29, r1
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	de bf       	out	0x3e, r29	; 62
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	ed 01       	movw	r28, r26
    28d0:	08 95       	ret

000028d2 <_exit>:
    28d2:	f8 94       	cli

000028d4 <__stop_program>:
    28d4:	ff cf       	rjmp	.-2      	; 0x28d4 <__stop_program>
