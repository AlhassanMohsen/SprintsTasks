
UART_TASK2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016c  00800060  00002f42  00002fd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  008001cc  008001cc  00003142  2**0
                  ALLOC
  3 .stab         0000372c  00000000  00000000  00003144  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a8f  00000000  00000000  00006870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000082ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  0000845f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00008615  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  0000a522  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c624  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000c7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000ca8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <__vector_7>
      20:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <__vector_8>
      24:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_9>
      28:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_13>
      38:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3d       	cpi	r26, 0xDF	; 223
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <main>
      8a:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 eb       	ldi	r26, 0xB3	; 179
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 eb       	ldi	r24, 0xB3	; 179
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 eb       	ldi	r22, 0xB3	; 179
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e5 54       	subi	r30, 0x45	; 69
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <STR_CMP>:
#include "STR.h"
#include "../../MCAL/UART/UART_interface.h"


uint8_t STR_CMP(uint8_t* STR1,uint8_t* STR2)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	29 97       	sbiw	r28, 0x09	; 9
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	9f 83       	std	Y+7, r25	; 0x07
     d84:	8e 83       	std	Y+6, r24	; 0x06
     d86:	79 87       	std	Y+9, r23	; 0x09
     d88:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8StringCounter=0;
     d8a:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8String1_Length=0;
     d8c:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t u8String2_Length=0;
     d8e:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t u8SimilarityCounter=0;
     d90:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8CMPResult;

	do
	{
		u8String1_Length++;
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	8c 83       	std	Y+4, r24	; 0x04
		u8StringCounter++;
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	8f 5f       	subi	r24, 0xFF	; 255
     d9c:	8d 83       	std	Y+5, r24	; 0x05
	}while (STR1[u8StringCounter]!='\0'&&STR1[u8StringCounter]!=0x0D);
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	8e 81       	ldd	r24, Y+6	; 0x06
     da6:	9f 81       	ldd	r25, Y+7	; 0x07
     da8:	fc 01       	movw	r30, r24
     daa:	e2 0f       	add	r30, r18
     dac:	f3 1f       	adc	r31, r19
     dae:	80 81       	ld	r24, Z
     db0:	88 23       	and	r24, r24
     db2:	59 f0       	breq	.+22     	; 0xdca <STR_CMP+0x5c>
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	8e 81       	ldd	r24, Y+6	; 0x06
     dbc:	9f 81       	ldd	r25, Y+7	; 0x07
     dbe:	fc 01       	movw	r30, r24
     dc0:	e2 0f       	add	r30, r18
     dc2:	f3 1f       	adc	r31, r19
     dc4:	80 81       	ld	r24, Z
     dc6:	8d 30       	cpi	r24, 0x0D	; 13
     dc8:	21 f7       	brne	.-56     	; 0xd92 <STR_CMP+0x24>

	u8StringCounter=0;
     dca:	1d 82       	std	Y+5, r1	; 0x05

	do
	{
		u8String2_Length++;
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	8f 5f       	subi	r24, 0xFF	; 255
     dd0:	8b 83       	std	Y+3, r24	; 0x03
		u8StringCounter++;
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	8d 83       	std	Y+5, r24	; 0x05
	}while (STR2[u8StringCounter]!='\0'&&STR2[u8StringCounter]!=0x0D);
     dd8:	8d 81       	ldd	r24, Y+5	; 0x05
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	88 85       	ldd	r24, Y+8	; 0x08
     de0:	99 85       	ldd	r25, Y+9	; 0x09
     de2:	fc 01       	movw	r30, r24
     de4:	e2 0f       	add	r30, r18
     de6:	f3 1f       	adc	r31, r19
     de8:	80 81       	ld	r24, Z
     dea:	88 23       	and	r24, r24
     dec:	59 f0       	breq	.+22     	; 0xe04 <STR_CMP+0x96>
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	88 85       	ldd	r24, Y+8	; 0x08
     df6:	99 85       	ldd	r25, Y+9	; 0x09
     df8:	fc 01       	movw	r30, r24
     dfa:	e2 0f       	add	r30, r18
     dfc:	f3 1f       	adc	r31, r19
     dfe:	80 81       	ld	r24, Z
     e00:	8d 30       	cpi	r24, 0x0D	; 13
     e02:	21 f7       	brne	.-56     	; 0xdcc <STR_CMP+0x5e>

	u8StringCounter=0;
     e04:	1d 82       	std	Y+5, r1	; 0x05


	if (u8String2_Length==u8String1_Length)
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	98 17       	cp	r25, r24
     e0c:	01 f5       	brne	.+64     	; 0xe4e <STR_CMP+0xe0>
	{

		for (u8StringCounter=0;u8StringCounter<u8String1_Length;u8StringCounter++)
     e0e:	1d 82       	std	Y+5, r1	; 0x05
     e10:	1a c0       	rjmp	.+52     	; 0xe46 <STR_CMP+0xd8>
		{
			if (STR1[u8StringCounter]==STR2[u8StringCounter])
     e12:	8d 81       	ldd	r24, Y+5	; 0x05
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	8e 81       	ldd	r24, Y+6	; 0x06
     e1a:	9f 81       	ldd	r25, Y+7	; 0x07
     e1c:	fc 01       	movw	r30, r24
     e1e:	e2 0f       	add	r30, r18
     e20:	f3 1f       	adc	r31, r19
     e22:	40 81       	ld	r20, Z
     e24:	8d 81       	ldd	r24, Y+5	; 0x05
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	88 85       	ldd	r24, Y+8	; 0x08
     e2c:	99 85       	ldd	r25, Y+9	; 0x09
     e2e:	fc 01       	movw	r30, r24
     e30:	e2 0f       	add	r30, r18
     e32:	f3 1f       	adc	r31, r19
     e34:	80 81       	ld	r24, Z
     e36:	48 17       	cp	r20, r24
     e38:	51 f4       	brne	.+20     	; 0xe4e <STR_CMP+0xe0>
			{
				u8SimilarityCounter++;
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	8f 5f       	subi	r24, 0xFF	; 255
     e3e:	8a 83       	std	Y+2, r24	; 0x02


	if (u8String2_Length==u8String1_Length)
	{

		for (u8StringCounter=0;u8StringCounter<u8String1_Length;u8StringCounter++)
     e40:	8d 81       	ldd	r24, Y+5	; 0x05
     e42:	8f 5f       	subi	r24, 0xFF	; 255
     e44:	8d 83       	std	Y+5, r24	; 0x05
     e46:	9d 81       	ldd	r25, Y+5	; 0x05
     e48:	8c 81       	ldd	r24, Y+4	; 0x04
     e4a:	98 17       	cp	r25, r24
     e4c:	10 f3       	brcs	.-60     	; 0xe12 <STR_CMP+0xa4>
			}
		}
	}


	if (u8String1_Length==u8SimilarityCounter && u8SimilarityCounter!=0)
     e4e:	9c 81       	ldd	r25, Y+4	; 0x04
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	98 17       	cp	r25, r24
     e54:	31 f4       	brne	.+12     	; 0xe62 <STR_CMP+0xf4>
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	88 23       	and	r24, r24
     e5a:	19 f0       	breq	.+6      	; 0xe62 <STR_CMP+0xf4>
	{
		u8CMPResult=CMP_MATCH;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <STR_CMP+0xf6>
	}else
	{
		u8CMPResult=CMP_NOT_MATCHED;
     e62:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8CMPResult;
     e64:	89 81       	ldd	r24, Y+1	; 0x01
}
     e66:	29 96       	adiw	r28, 0x09	; 9
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	f8 94       	cli
     e6c:	de bf       	out	0x3e, r29	; 62
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	cd bf       	out	0x3d, r28	; 61
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <UART_u8Init>:
/**
 * @fn uint8_t UART_u8Init(uint32_t UART_u32BaudRate)
 * @brief This function is used to Initiate the UART Peripheral
 */
uint8_t UART_u8Init(uint32_t UART_u32BaudRate)
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	27 97       	sbiw	r28, 0x07	; 7
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	6c 83       	std	Y+4, r22	; 0x04
     e8e:	7d 83       	std	Y+5, r23	; 0x05
     e90:	8e 83       	std	Y+6, r24	; 0x06
     e92:	9f 83       	std	Y+7, r25	; 0x07
	uint8_t u8ErrorState = UART_OK;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t u16UBBR;  /// A Temporary Variable used to hold the calculated value of the UBBR register depending on the Baudrate

	// Make the Access to UCSRC Register
	SET_BIT(UCSRC_REG,URSEL_BIT);
     e98:	a0 e4       	ldi	r26, 0x40	; 64
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 68       	ori	r24, 0x80	; 128
     ea4:	8c 93       	st	X, r24

	/*
	 * Set the operation mode of the UART Depending on the chosen UART_OPERATION_MODE Configuration
	 */
#if   UART_OPERATION_MODE == UART_ASYNC_NORMAL_SPEED
	CLR_BIT(UCSRC_REG,UMSEL_BIT);
     ea6:	a0 e4       	ldi	r26, 0x40	; 64
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e0 e4       	ldi	r30, 0x40	; 64
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7b       	andi	r24, 0xBF	; 191
     eb2:	8c 93       	st	X, r24
	CLR_BIT(UCSRA_REG,U2X_BIT);
     eb4:	ab e2       	ldi	r26, 0x2B	; 43
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	eb e2       	ldi	r30, 0x2B	; 43
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8d 7f       	andi	r24, 0xFD	; 253
     ec0:	8c 93       	st	X, r24
	//Calculate the UBBR Value depending on the CPU frequency and the input desired baudrate
	// in the UART_ASYNC_NORMAL_SPEED the baudrate divisor is 16
	u16UBBR = (UART_F_CPU/(16UL*UART_u32BaudRate)-1);
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	ae 81       	ldd	r26, Y+6	; 0x06
     ec8:	bf 81       	ldd	r27, Y+7	; 0x07
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	aa 1f       	adc	r26, r26
     ed0:	bb 1f       	adc	r27, r27
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	aa 1f       	adc	r26, r26
     ed8:	bb 1f       	adc	r27, r27
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	aa 1f       	adc	r26, r26
     ee0:	bb 1f       	adc	r27, r27
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	aa 1f       	adc	r26, r26
     ee8:	bb 1f       	adc	r27, r27
     eea:	9c 01       	movw	r18, r24
     eec:	ad 01       	movw	r20, r26
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	92 e1       	ldi	r25, 0x12	; 18
     ef2:	aa e7       	ldi	r26, 0x7A	; 122
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <__udivmodsi4>
     efe:	da 01       	movw	r26, r20
     f00:	c9 01       	movw	r24, r18
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01
#elif UART_CHARACTER_SIZE == UART_7_BIT_CHARACTER
	CLR_BIT(UCSRC_REG,UCSZ0_BIT);
	SET_BIT(UCSRC_REG,UCSZ1_BIT);
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
#elif UART_CHARACTER_SIZE == UART_8_BIT_CHARACTER
	SET_BIT(UCSRC_REG,UCSZ0_BIT);
     f08:	a0 e4       	ldi	r26, 0x40	; 64
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e0 e4       	ldi	r30, 0x40	; 64
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	82 60       	ori	r24, 0x02	; 2
     f14:	8c 93       	st	X, r24
	SET_BIT(UCSRC_REG,UCSZ1_BIT);
     f16:	a0 e4       	ldi	r26, 0x40	; 64
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e0 e4       	ldi	r30, 0x40	; 64
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	84 60       	ori	r24, 0x04	; 4
     f22:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
     f24:	aa e2       	ldi	r26, 0x2A	; 42
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	ea e2       	ldi	r30, 0x2A	; 42
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8b 7f       	andi	r24, 0xFB	; 251
     f30:	8c 93       	st	X, r24

	/*
	 * Set the Parity mode of the UART Depending on the chosen UART_PARITY_MODE Configuration
	 */
#if UART_PARITY_MODE == UART_DISABLE_PARITY
	CLR_BIT(UCSRC_REG,UPM0_BIT);
     f32:	a0 e4       	ldi	r26, 0x40	; 64
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e0 e4       	ldi	r30, 0x40	; 64
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 7e       	andi	r24, 0xEF	; 239
     f3e:	8c 93       	st	X, r24
	CLR_BIT(UCSRC_REG,UPM1_BIT);
     f40:	a0 e4       	ldi	r26, 0x40	; 64
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e0 e4       	ldi	r30, 0x40	; 64
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	8f 7d       	andi	r24, 0xDF	; 223
     f4c:	8c 93       	st	X, r24

	/*
	 * Set the Stop bits number in the frame of the UART Depending on the chosen UART_STOP_BITS_NUMBER Configuration
	 */
#if UART_STOP_BITS_NUMBER == UART_1_STOP_BIT
	CLR_BIT(UCSRC_REG,USBS_BIT);
     f4e:	a0 e4       	ldi	r26, 0x40	; 64
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e0 e4       	ldi	r30, 0x40	; 64
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	8c 93       	st	X, r24
	// if the UART_STOP_BITS_NUMBER is not one of this values then update the Error state
	u8ErrorState = WRONG_STOP_BITS_CFG;
#endif

	// Set the UBRR Register to the calculated value to configure the input baudrate
	UBRRL_REG= u16UBBR;
     f5c:	e9 e2       	ldi	r30, 0x29	; 41
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	80 83       	st	Z, r24
	UBRRH_REG= (u16UBBR>>8);
     f64:	e0 e4       	ldi	r30, 0x40	; 64
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	89 2f       	mov	r24, r25
     f6e:	99 27       	eor	r25, r25
     f70:	80 83       	st	Z, r24
	//Enable the Receiving and Transmitting Capabilities in the UART
	SET_BIT(UCSRB_REG,RXEN_BIT);
     f72:	aa e2       	ldi	r26, 0x2A	; 42
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ea e2       	ldi	r30, 0x2A	; 42
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	80 61       	ori	r24, 0x10	; 16
     f7e:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,TXEN_BIT);
     f80:	aa e2       	ldi	r26, 0x2A	; 42
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ea e2       	ldi	r30, 0x2A	; 42
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	88 60       	ori	r24, 0x08	; 8
     f8c:	8c 93       	st	X, r24
	if (u8ErrorState == UART_OK)
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	19 f4       	brne	.+6      	; 0xf9a <UART_u8Init+0x122>
	{
		// if there is no errors happened the Rise the Initialization flag indicating that the Peripherals is Initialized Correctly
		gu8_IntializationFlag = UART_INITIALIZED;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	80 93 cc 01 	sts	0x01CC, r24
	}else
	{
		//NOP
	}
	return u8ErrorState;
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f9c:	27 96       	adiw	r28, 0x07	; 7
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <UART_u8SendByte>:
 * @fn uint8_t UART_u8SendByte(uint8_t u8Data)
 * @brief This function is used to Send a Byte by polling mechanism
 * @pre the UART must be initialized
 */
uint8_t UART_u8SendByte(uint8_t u8Data)
{
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <UART_u8SendByte+0x6>
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState;
	if (gu8_IntializationFlag==UART_INITIALIZED) // Check if the UART is initialized
     fba:	80 91 cc 01 	lds	r24, 0x01CC
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	89 f4       	brne	.+34     	; 0xfe4 <UART_u8SendByte+0x36>
	{
		// Busy wait until the current UART Transmittion ends and the UDR register is Available
		while(!GET_BIT(UCSRA_REG,UDRE_BIT));
     fc2:	eb e2       	ldi	r30, 0x2B	; 43
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	82 95       	swap	r24
     fca:	86 95       	lsr	r24
     fcc:	87 70       	andi	r24, 0x07	; 7
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	81 70       	andi	r24, 0x01	; 1
     fd4:	90 70       	andi	r25, 0x00	; 0
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	a1 f3       	breq	.-24     	; 0xfc2 <UART_u8SendByte+0x14>
		// After the Register is available Load it with the Data Desired to be sent to initiate a transmission
		UDR_REG = u8Data;
     fda:	ec e2       	ldi	r30, 0x2C	; 44
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	80 83       	st	Z, r24
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <UART_u8SendByte+0x3a>
	}else{
		// if the UART is not initialized then update the Error State
		u8ErrorState=UART_INITIALIZATION_ERROR;
     fe4:	88 e0       	ldi	r24, 0x08	; 8
     fe6:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <UART_u8SendInt>:


uint8_t UART_u8SendInt(uint32_t u32Data)
{
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	df 93       	push	r29
     ffa:	cf 93       	push	r28
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	ca 57       	subi	r28, 0x7A	; 122
    1002:	d0 40       	sbci	r29, 0x00	; 0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	fe 01       	movw	r30, r28
    1010:	ed 58       	subi	r30, 0x8D	; 141
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	60 83       	st	Z, r22
    1016:	71 83       	std	Z+1, r23	; 0x01
    1018:	82 83       	std	Z+2, r24	; 0x02
    101a:	93 83       	std	Z+3, r25	; 0x03
	uint8_t au8Number[100]={0};
    101c:	84 e6       	ldi	r24, 0x64	; 100
    101e:	fe 01       	movw	r30, r28
    1020:	3f 96       	adiw	r30, 0x0f	; 15
    1022:	df 01       	movw	r26, r30
    1024:	28 2f       	mov	r18, r24
    1026:	1d 92       	st	X+, r1
    1028:	2a 95       	dec	r18
    102a:	e9 f7       	brne	.-6      	; 0x1026 <UART_u8SendInt+0x32>
	uint64_t u8Counter =1;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	8f 83       	std	Y+7, r24	; 0x07
    1030:	18 86       	std	Y+8, r1	; 0x08
    1032:	19 86       	std	Y+9, r1	; 0x09
    1034:	1a 86       	std	Y+10, r1	; 0x0a
    1036:	1b 86       	std	Y+11, r1	; 0x0b
    1038:	1c 86       	std	Y+12, r1	; 0x0c
    103a:	1d 86       	std	Y+13, r1	; 0x0d
    103c:	1e 86       	std	Y+14, r1	; 0x0e
	uint8_t u8NumberASCII;

	    uint8_t i = 0;
    103e:	1d 82       	std	Y+5, r1	; 0x05
	    /* Handle 0 explicitly, otherwise empty string is printed for 0 */
	    if (u32Data == 0)
    1040:	fe 01       	movw	r30, r28
    1042:	ed 58       	subi	r30, 0x8D	; 141
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	a2 81       	ldd	r26, Z+2	; 0x02
    104c:	b3 81       	ldd	r27, Z+3	; 0x03
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	a1 05       	cpc	r26, r1
    1052:	b1 05       	cpc	r27, r1
    1054:	09 f0       	breq	.+2      	; 0x1058 <UART_u8SendInt+0x64>
    1056:	5f c0       	rjmp	.+190    	; 0x1116 <UART_u8SendInt+0x122>
	    {
	    	au8Number[i++] = '0';
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	ce 01       	movw	r24, r28
    1060:	0f 96       	adiw	r24, 0x0f	; 15
    1062:	fc 01       	movw	r30, r24
    1064:	e2 0f       	add	r30, r18
    1066:	f3 1f       	adc	r31, r19
    1068:	80 e3       	ldi	r24, 0x30	; 48
    106a:	80 83       	st	Z, r24
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	8d 83       	std	Y+5, r24	; 0x05
    1072:	51 c0       	rjmp	.+162    	; 0x1116 <UART_u8SendInt+0x122>
	    // base 10. Otherwise numbers are considered unsigned.

	    // Process individual digits
	    while (u32Data != 0)
	    {
	    	uint8_t rem = u32Data % 10;
    1074:	fe 01       	movw	r30, r28
    1076:	ed 58       	subi	r30, 0x8D	; 141
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	80 81       	ld	r24, Z
    107c:	91 81       	ldd	r25, Z+1	; 0x01
    107e:	a2 81       	ldd	r26, Z+2	; 0x02
    1080:	b3 81       	ldd	r27, Z+3	; 0x03
    1082:	2a e0       	ldi	r18, 0x0A	; 10
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <__udivmodsi4>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	89 83       	std	Y+1, r24	; 0x01
	        au8Number[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	a8 2f       	mov	r26, r24
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ea 96       	adiw	r28, 0x3a	; 58
    10a0:	bf af       	std	Y+63, r27	; 0x3f
    10a2:	ae af       	std	Y+62, r26	; 0x3e
    10a4:	ea 97       	sbiw	r28, 0x3a	; 58
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	8a 30       	cpi	r24, 0x0A	; 10
    10aa:	38 f0       	brcs	.+14     	; 0x10ba <UART_u8SendInt+0xc6>
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	b8 2f       	mov	r27, r24
    10b0:	b9 5a       	subi	r27, 0xA9	; 169
    10b2:	e8 96       	adiw	r28, 0x38	; 56
    10b4:	bf af       	std	Y+63, r27	; 0x3f
    10b6:	e8 97       	sbiw	r28, 0x38	; 56
    10b8:	06 c0       	rjmp	.+12     	; 0x10c6 <UART_u8SendInt+0xd2>
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	e8 2f       	mov	r30, r24
    10be:	e0 5d       	subi	r30, 0xD0	; 208
    10c0:	e8 96       	adiw	r28, 0x38	; 56
    10c2:	ef af       	std	Y+63, r30	; 0x3f
    10c4:	e8 97       	sbiw	r28, 0x38	; 56
    10c6:	ce 01       	movw	r24, r28
    10c8:	0f 96       	adiw	r24, 0x0f	; 15
    10ca:	ea 96       	adiw	r28, 0x3a	; 58
    10cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    10ce:	ff ad       	ldd	r31, Y+63	; 0x3f
    10d0:	ea 97       	sbiw	r28, 0x3a	; 58
    10d2:	e8 0f       	add	r30, r24
    10d4:	f9 1f       	adc	r31, r25
    10d6:	e8 96       	adiw	r28, 0x38	; 56
    10d8:	2f ad       	ldd	r18, Y+63	; 0x3f
    10da:	e8 97       	sbiw	r28, 0x38	; 56
    10dc:	20 83       	st	Z, r18
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	8d 83       	std	Y+5, r24	; 0x05
	        u32Data = u32Data/10;
    10e4:	8e 01       	movw	r16, r28
    10e6:	0d 58       	subi	r16, 0x8D	; 141
    10e8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ea:	fe 01       	movw	r30, r28
    10ec:	ed 58       	subi	r30, 0x8D	; 141
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	a2 81       	ldd	r26, Z+2	; 0x02
    10f6:	b3 81       	ldd	r27, Z+3	; 0x03
    10f8:	2a e0       	ldi	r18, 0x0A	; 10
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e0       	ldi	r20, 0x00	; 0
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	bc 01       	movw	r22, r24
    1102:	cd 01       	movw	r24, r26
    1104:	0e 94 46 17 	call	0x2e8c	; 0x2e8c <__udivmodsi4>
    1108:	da 01       	movw	r26, r20
    110a:	c9 01       	movw	r24, r18
    110c:	f8 01       	movw	r30, r16
    110e:	80 83       	st	Z, r24
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	a2 83       	std	Z+2, r26	; 0x02
    1114:	b3 83       	std	Z+3, r27	; 0x03

	    // In standard itoa(), negative numbers are handled only with
	    // base 10. Otherwise numbers are considered unsigned.

	    // Process individual digits
	    while (u32Data != 0)
    1116:	fe 01       	movw	r30, r28
    1118:	ed 58       	subi	r30, 0x8D	; 141
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	a2 81       	ldd	r26, Z+2	; 0x02
    1122:	b3 81       	ldd	r27, Z+3	; 0x03
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	a1 05       	cpc	r26, r1
    1128:	b1 05       	cpc	r27, r1
    112a:	09 f0       	breq	.+2      	; 0x112e <UART_u8SendInt+0x13a>
    112c:	a3 cf       	rjmp	.-186    	; 0x1074 <UART_u8SendInt+0x80>
	        au8Number[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
	        u32Data = u32Data/10;
	    }


	    au8Number[i] = '\0'; // Append string terminator
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	ce 01       	movw	r24, r28
    1136:	0f 96       	adiw	r24, 0x0f	; 15
    1138:	fc 01       	movw	r30, r24
    113a:	e2 0f       	add	r30, r18
    113c:	f3 1f       	adc	r31, r19
    113e:	10 82       	st	Z, r1

	    // Reverse the string
	    uint8_t start = 0;
    1140:	1c 82       	std	Y+4, r1	; 0x04
	    uint8_t end = i -1;
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	81 50       	subi	r24, 0x01	; 1
    1146:	8b 83       	std	Y+3, r24	; 0x03
    1148:	28 c0       	rjmp	.+80     	; 0x119a <UART_u8SendInt+0x1a6>
	    uint8_t temp;
	    while (start < end)
	    {
	    	temp =*(au8Number+start);
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	fe 01       	movw	r30, r28
    1152:	3f 96       	adiw	r30, 0x0f	; 15
    1154:	e8 0f       	add	r30, r24
    1156:	f9 1f       	adc	r31, r25
    1158:	80 81       	ld	r24, Z
    115a:	8a 83       	std	Y+2, r24	; 0x02
	    	*(au8Number+start) = *(au8Number+end);
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	de 01       	movw	r26, r28
    1164:	1f 96       	adiw	r26, 0x0f	; 15
    1166:	a8 0f       	add	r26, r24
    1168:	b9 1f       	adc	r27, r25
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	fe 01       	movw	r30, r28
    1172:	3f 96       	adiw	r30, 0x0f	; 15
    1174:	e8 0f       	add	r30, r24
    1176:	f9 1f       	adc	r31, r25
    1178:	80 81       	ld	r24, Z
    117a:	8c 93       	st	X, r24
	    	*(au8Number+end) = temp;
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	fe 01       	movw	r30, r28
    1184:	3f 96       	adiw	r30, 0x0f	; 15
    1186:	e8 0f       	add	r30, r24
    1188:	f9 1f       	adc	r31, r25
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	80 83       	st	Z, r24
	        start++;
    118e:	8c 81       	ldd	r24, Y+4	; 0x04
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	8c 83       	std	Y+4, r24	; 0x04
	        end--;
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	81 50       	subi	r24, 0x01	; 1
    1198:	8b 83       	std	Y+3, r24	; 0x03

	    // Reverse the string
	    uint8_t start = 0;
	    uint8_t end = i -1;
	    uint8_t temp;
	    while (start < end)
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	98 17       	cp	r25, r24
    11a0:	a0 f2       	brcs	.-88     	; 0x114a <UART_u8SendInt+0x156>
	    	*(au8Number+start) = *(au8Number+end);
	    	*(au8Number+end) = temp;
	        start++;
	        end--;
	    }
	    UART_u8SendString(au8Number);
    11a2:	ce 01       	movw	r24, r28
    11a4:	0f 96       	adiw	r24, 0x0f	; 15
    11a6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <UART_u8SendString>
		UART_u8SendByte(u8NumberASCII);
		u8Counter=u8Counter/10;
	}

*/
}
    11aa:	c6 58       	subi	r28, 0x86	; 134
    11ac:	df 4f       	sbci	r29, 0xFF	; 255
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	08 95       	ret

000011c2 <UART_u8SendString>:
 * @brief This function is used to Send a String of data by polling mechanism
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */
uint8_t UART_u8SendString(uint8_t* pau8Data)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <UART_u8SendString+0x6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <UART_u8SendString+0x8>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <UART_u8SendString+0xa>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	9e 83       	std	Y+6, r25	; 0x06
    11d2:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8ErrorState = UART_OK;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8LastByte; 			/// a variable used to temporarily hold the value of the last character sent
	uint16_t u16StringCounter=0; 	/// counter to navigate the string as array
    11d8:	1a 82       	std	Y+2, r1	; 0x02
    11da:	19 82       	std	Y+1, r1	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED) // Check if the UART is initialized
    11dc:	80 91 cc 01 	lds	r24, 0x01CC
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	e1 f4       	brne	.+56     	; 0x121c <UART_u8SendString+0x5a>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8Data!=NULL)
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	a9 f0       	breq	.+42     	; 0x1216 <UART_u8SendString+0x54>
		{
			// if not pointing to null
			do{
				//save the value of the character to a temporary variable
				u8LastByte=pau8Data[u16StringCounter];
    11ec:	2d 81       	ldd	r18, Y+5	; 0x05
    11ee:	3e 81       	ldd	r19, Y+6	; 0x06
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	f9 01       	movw	r30, r18
    11f6:	e8 0f       	add	r30, r24
    11f8:	f9 1f       	adc	r31, r25
    11fa:	80 81       	ld	r24, Z
    11fc:	8b 83       	std	Y+3, r24	; 0x03
				// Send this character through UART
				UART_u8SendByte(u8LastByte);
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_u8SendByte>
				// increment the array navigator to get the next character
				u16StringCounter++;
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01

			}while(u8LastByte!=0x00);// do the same while the sent byte wasn't a new line
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	88 23       	and	r24, r24
    1212:	61 f7       	brne	.-40     	; 0x11ec <UART_u8SendString+0x2a>
    1214:	05 c0       	rjmp	.+10     	; 0x1220 <UART_u8SendString+0x5e>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    1216:	87 e0       	ldi	r24, 0x07	; 7
    1218:	8c 83       	std	Y+4, r24	; 0x04
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <UART_u8SendString+0x5e>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
    121c:	88 e0       	ldi	r24, 0x08	; 8
    121e:	8c 83       	std	Y+4, r24	; 0x04
	}

	return u8ErrorState;
    1220:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1222:	26 96       	adiw	r28, 0x06	; 6
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <UART_u8ReceiveByte>:
 * @brief This function is used to Get the Received byte of data by polling mechanism
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */
uint8_t UART_u8ReceiveByte(uint8_t* pu8RecievedData)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <UART_u8ReceiveByte+0x6>
    123a:	0f 92       	push	r0
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	9b 83       	std	Y+3, r25	; 0x03
    1242:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	89 83       	std	Y+1, r24	; 0x01
	// Check if the UART is Initialized
	if (gu8_IntializationFlag==UART_INITIALIZED)
    1248:	80 91 cc 01 	lds	r24, 0x01CC
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	99 f4       	brne	.+38     	; 0x1276 <UART_u8ReceiveByte+0x42>
	{
		//if it is initialized then check that the pointer is not pointing to null
		if (pu8RecievedData!=NULL)
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	9b 81       	ldd	r25, Y+3	; 0x03
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	61 f0       	breq	.+24     	; 0x1270 <UART_u8ReceiveByte+0x3c>
		{
			//if not pointing to null
			// Busy wait until the UART Receive a byte
			while (!GET_BIT(UCSRA_REG,RXC_BIT));
    1258:	eb e2       	ldi	r30, 0x2B	; 43
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	88 23       	and	r24, r24
    1260:	dc f7       	brge	.-10     	; 0x1258 <UART_u8ReceiveByte+0x24>
			// Then Load the received byte from the UDR register and save it to the data location input
			*pu8RecievedData = UDR_REG;
    1262:	ec e2       	ldi	r30, 0x2C	; 44
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	ea 81       	ldd	r30, Y+2	; 0x02
    126a:	fb 81       	ldd	r31, Y+3	; 0x03
    126c:	80 83       	st	Z, r24
    126e:	05 c0       	rjmp	.+10     	; 0x127a <UART_u8ReceiveByte+0x46>
		}else
		{
			// if the Pointer is pointing to NULL then update the Error State
			u8ErrorState = UART_NULL_INPUT;
    1270:	87 e0       	ldi	r24, 0x07	; 7
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	02 c0       	rjmp	.+4      	; 0x127a <UART_u8ReceiveByte+0x46>
		}
	}else
	{
		// if the UART is not initialized then update the Error State
		u8ErrorState=UART_INITIALIZATION_ERROR;
    1276:	88 e0       	ldi	r24, 0x08	; 8
    1278:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    127a:	89 81       	ldd	r24, Y+1	; 0x01
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <UART_u8ReceiveInt>:


uint8_t UART_u8ReceiveInt(uint32_t* pu32ReceivedInt)
{
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	66 97       	sbiw	r28, 0x16	; 22
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	9d 8b       	std	Y+21, r25	; 0x15
    12a6:	8c 8b       	std	Y+20, r24	; 0x14
    uint8_t u8ArrayCounter=0;
    12a8:	18 86       	std	Y+8, r1	; 0x08
    uint32_t u8Multiplier=1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a0 e0       	ldi	r26, 0x00	; 0
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	8c 83       	std	Y+4, r24	; 0x04
    12b4:	9d 83       	std	Y+5, r25	; 0x05
    12b6:	ae 83       	std	Y+6, r26	; 0x06
    12b8:	bf 83       	std	Y+7, r27	; 0x07
    uint8_t ReceivedStr[11];
    *pu32ReceivedInt=0;
    12ba:	ec 89       	ldd	r30, Y+20	; 0x14
    12bc:	fd 89       	ldd	r31, Y+21	; 0x15
    12be:	10 82       	st	Z, r1
    12c0:	11 82       	std	Z+1, r1	; 0x01
    12c2:	12 82       	std	Z+2, r1	; 0x02
    12c4:	13 82       	std	Z+3, r1	; 0x03
    UART_u8RecieveString(ReceivedStr);
    12c6:	ce 01       	movw	r24, r28
    12c8:	09 96       	adiw	r24, 0x09	; 9
    12ca:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <UART_u8RecieveString>
    uint8_t ArrayNav=0;
    12ce:	1b 82       	std	Y+3, r1	; 0x03
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <UART_u8ReceiveInt+0x50>
    //UART_u8SendString(ReceivedStr);
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    {
    	u8ArrayCounter++;
    12d2:	88 85       	ldd	r24, Y+8	; 0x08
    12d4:	8f 5f       	subi	r24, 0xFF	; 255
    12d6:	88 87       	std	Y+8, r24	; 0x08
    uint8_t ReceivedStr[11];
    *pu32ReceivedInt=0;
    UART_u8RecieveString(ReceivedStr);
    uint8_t ArrayNav=0;
    //UART_u8SendString(ReceivedStr);
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    12d8:	88 85       	ldd	r24, Y+8	; 0x08
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	ce 01       	movw	r24, r28
    12e0:	09 96       	adiw	r24, 0x09	; 9
    12e2:	fc 01       	movw	r30, r24
    12e4:	e2 0f       	add	r30, r18
    12e6:	f3 1f       	adc	r31, r19
    12e8:	80 81       	ld	r24, Z
    12ea:	8d 30       	cpi	r24, 0x0D	; 13
    12ec:	91 f7       	brne	.-28     	; 0x12d2 <UART_u8ReceiveInt+0x4a>
    {
    	u8ArrayCounter++;
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    12ee:	1a 82       	std	Y+2, r1	; 0x02
    12f0:	58 c0       	rjmp	.+176    	; 0x13a2 <UART_u8ReceiveInt+0x11a>
    {

        for(uint8_t multiplier=(u8ArrayCounter-1)-loopCounter;multiplier>0;multiplier--)
    12f2:	98 85       	ldd	r25, Y+8	; 0x08
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	29 2f       	mov	r18, r25
    12f8:	28 1b       	sub	r18, r24
    12fa:	82 2f       	mov	r24, r18
    12fc:	81 50       	subi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	15 c0       	rjmp	.+42     	; 0x132c <UART_u8ReceiveInt+0xa4>
        {
        	u8Multiplier=10*u8Multiplier;
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	ae 81       	ldd	r26, Y+6	; 0x06
    1308:	bf 81       	ldd	r27, Y+7	; 0x07
    130a:	2a e0       	ldi	r18, 0x0A	; 10
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__mulsi3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	8c 83       	std	Y+4, r24	; 0x04
    1320:	9d 83       	std	Y+5, r25	; 0x05
    1322:	ae 83       	std	Y+6, r26	; 0x06
    1324:	bf 83       	std	Y+7, r27	; 0x07
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    {

        for(uint8_t multiplier=(u8ArrayCounter-1)-loopCounter;multiplier>0;multiplier--)
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	81 50       	subi	r24, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	88 23       	and	r24, r24
    1330:	41 f7       	brne	.-48     	; 0x1302 <UART_u8ReceiveInt+0x7a>
        {
        	u8Multiplier=10*u8Multiplier;
        }
        *pu32ReceivedInt = *pu32ReceivedInt + ((ReceivedStr[ArrayNav]-'0')*u8Multiplier);
    1332:	ec 89       	ldd	r30, Y+20	; 0x14
    1334:	fd 89       	ldd	r31, Y+21	; 0x15
    1336:	e0 80       	ld	r14, Z
    1338:	f1 80       	ldd	r15, Z+1	; 0x01
    133a:	02 81       	ldd	r16, Z+2	; 0x02
    133c:	13 81       	ldd	r17, Z+3	; 0x03
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	ce 01       	movw	r24, r28
    1346:	09 96       	adiw	r24, 0x09	; 9
    1348:	fc 01       	movw	r30, r24
    134a:	e2 0f       	add	r30, r18
    134c:	f3 1f       	adc	r31, r19
    134e:	80 81       	ld	r24, Z
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	c0 97       	sbiw	r24, 0x30	; 48
    1356:	aa 27       	eor	r26, r26
    1358:	97 fd       	sbrc	r25, 7
    135a:	a0 95       	com	r26
    135c:	ba 2f       	mov	r27, r26
    135e:	2c 81       	ldd	r18, Y+4	; 0x04
    1360:	3d 81       	ldd	r19, Y+5	; 0x05
    1362:	4e 81       	ldd	r20, Y+6	; 0x06
    1364:	5f 81       	ldd	r21, Y+7	; 0x07
    1366:	bc 01       	movw	r22, r24
    1368:	cd 01       	movw	r24, r26
    136a:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__mulsi3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	8e 0d       	add	r24, r14
    1374:	9f 1d       	adc	r25, r15
    1376:	a0 1f       	adc	r26, r16
    1378:	b1 1f       	adc	r27, r17
    137a:	ec 89       	ldd	r30, Y+20	; 0x14
    137c:	fd 89       	ldd	r31, Y+21	; 0x15
    137e:	80 83       	st	Z, r24
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	a2 83       	std	Z+2, r26	; 0x02
    1384:	b3 83       	std	Z+3, r27	; 0x03
        ArrayNav++;
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	8f 5f       	subi	r24, 0xFF	; 255
    138a:	8b 83       	std	Y+3, r24	; 0x03
        u8Multiplier=1;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	a0 e0       	ldi	r26, 0x00	; 0
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	8c 83       	std	Y+4, r24	; 0x04
    1396:	9d 83       	std	Y+5, r25	; 0x05
    1398:	ae 83       	std	Y+6, r26	; 0x06
    139a:	bf 83       	std	Y+7, r27	; 0x07
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    {
    	u8ArrayCounter++;
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	8f 5f       	subi	r24, 0xFF	; 255
    13a0:	8a 83       	std	Y+2, r24	; 0x02
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	88 85       	ldd	r24, Y+8	; 0x08
    13a6:	98 17       	cp	r25, r24
    13a8:	08 f4       	brcc	.+2      	; 0x13ac <UART_u8ReceiveInt+0x124>
    13aa:	a3 cf       	rjmp	.-186    	; 0x12f2 <UART_u8ReceiveInt+0x6a>
        *pu32ReceivedInt = *pu32ReceivedInt + ((ReceivedStr[ArrayNav]-'0')*u8Multiplier);
        ArrayNav++;
        u8Multiplier=1;
    }

}
    13ac:	66 96       	adiw	r28, 0x16	; 22
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	08 95       	ret

000013c6 <UART_u8RecieveString>:
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */

uint8_t UART_u8RecieveString(uint8_t* pau8RecievedData)
{
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <UART_u8RecieveString+0x6>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <UART_u8RecieveString+0x8>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <UART_u8RecieveString+0xa>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8ErrorState = UART_OK;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8PreReading; 			/// a variable used to temporarily hold the value of the last character received
	uint8_t* Temp=pau8RecievedData; /// a temporarily pointer initialized with the place of the first character of the array to save the received string in
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag == UART_INITIALIZED)// Check if the UART is initialized
    13e4:	80 91 cc 01 	lds	r24, 0x01CC
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	d9 f4       	brne	.+54     	; 0x1422 <UART_u8RecieveString+0x5c>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8RecievedData!=NULL)
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	a1 f0       	breq	.+40     	; 0x141c <UART_u8RecieveString+0x56>
		{
			do{
				// Receive a character through UART
				UART_u8ReceiveByte(&u8PreReading);
    13f4:	ce 01       	movw	r24, r28
    13f6:	04 96       	adiw	r24, 0x04	; 4
    13f8:	0e 94 1a 09 	call	0x1234	; 0x1234 <UART_u8ReceiveByte>
				//Save the received character to the last empty place in the array
				*Temp =u8PreReading;
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1400:	fa 81       	ldd	r31, Y+2	; 0x02
    1402:	80 83       	st	Z, r24
				//Update the last empty place in the array
				Temp++;
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	01 96       	adiw	r24, 0x01	; 1
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
			}while (u8PreReading!=0x0D); // do this while the received byte is not endline
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	8d 30       	cpi	r24, 0x0D	; 13
    1412:	81 f7       	brne	.-32     	; 0x13f4 <UART_u8RecieveString+0x2e>
			*(Temp) ='\0';
    1414:	e9 81       	ldd	r30, Y+1	; 0x01
    1416:	fa 81       	ldd	r31, Y+2	; 0x02
    1418:	10 82       	st	Z, r1
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <UART_u8RecieveString+0x60>

		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    141c:	87 e0       	ldi	r24, 0x07	; 7
    141e:	8b 83       	std	Y+3, r24	; 0x03
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <UART_u8RecieveString+0x60>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState= UART_INITIALIZATION_ERROR;
    1422:	88 e0       	ldi	r24, 0x08	; 8
    1424:	8b 83       	std	Y+3, r24	; 0x03
	}

	return u8ErrorState;
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1428:	26 96       	adiw	r28, 0x06	; 6
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <UART_u8ReceiveCountedString>:

uint8_t UART_u8ReceiveCountedString(uint8_t*pau8RecievedData,uint8_t Count)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	27 97       	sbiw	r28, 0x07	; 7
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	8d 83       	std	Y+5, r24	; 0x05
    1452:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t u8ErrorState = UART_OK;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8PreReading; 			/// a variable used to temporarily hold the value of the last character received
	uint8_t* Temp=pau8RecievedData; /// a temporarily pointer initialized with the place of the first character of the array to save the received string in
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	9a 83       	std	Y+2, r25	; 0x02
    145e:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag == UART_INITIALIZED)// Check if the UART is initialized
    1460:	80 91 cc 01 	lds	r24, 0x01CC
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	f1 f4       	brne	.+60     	; 0x14a4 <UART_u8ReceiveCountedString+0x6a>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8RecievedData!=NULL)
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	b9 f0       	breq	.+46     	; 0x149e <UART_u8ReceiveCountedString+0x64>
		{
			do{
				// Receive a character through UART
				UART_u8ReceiveByte(&u8PreReading);
    1470:	ce 01       	movw	r24, r28
    1472:	04 96       	adiw	r24, 0x04	; 4
    1474:	0e 94 1a 09 	call	0x1234	; 0x1234 <UART_u8ReceiveByte>
				//Save the received character to the last empty place in the array
				*Temp =u8PreReading;
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	e9 81       	ldd	r30, Y+1	; 0x01
    147c:	fa 81       	ldd	r31, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
				//Update the last empty place in the array
				Temp++;
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	9a 81       	ldd	r25, Y+2	; 0x02
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
				Count--;
    148a:	8f 81       	ldd	r24, Y+7	; 0x07
    148c:	81 50       	subi	r24, 0x01	; 1
    148e:	8f 83       	std	Y+7, r24	; 0x07
			}while (u8PreReading!=0x0D&&Count!=0); // do this while the received byte is not endline
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	8d 30       	cpi	r24, 0x0D	; 13
    1494:	49 f0       	breq	.+18     	; 0x14a8 <UART_u8ReceiveCountedString+0x6e>
    1496:	8f 81       	ldd	r24, Y+7	; 0x07
    1498:	88 23       	and	r24, r24
    149a:	51 f7       	brne	.-44     	; 0x1470 <UART_u8ReceiveCountedString+0x36>
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <UART_u8ReceiveCountedString+0x6e>

		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    149e:	87 e0       	ldi	r24, 0x07	; 7
    14a0:	8b 83       	std	Y+3, r24	; 0x03
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <UART_u8ReceiveCountedString+0x6e>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState= UART_INITIALIZATION_ERROR;
    14a4:	88 e0       	ldi	r24, 0x08	; 8
    14a6:	8b 83       	std	Y+3, r24	; 0x03
	}

	return u8ErrorState;
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14aa:	27 96       	adiw	r28, 0x07	; 7
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <UART_u8EnableRecievingInterrupt>:
 * @brief This function is called to enable the Receiving complete Interrupt
 * @pre - the UART must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t UART_u8EnableRecievingInterrupt(void (*pfnCallBack)(void))
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <UART_u8EnableRecievingInterrupt+0x6>
    14c2:	0f 92       	push	r0
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	9b 83       	std	Y+3, r25	; 0x03
    14ca:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED)// Check if the UART is initialized
    14d0:	80 91 cc 01 	lds	r24, 0x01CC
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	e1 f4       	brne	.+56     	; 0x1510 <UART_u8EnableRecievingInterrupt+0x54>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pfnCallBack!=NULL)
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	9b 81       	ldd	r25, Y+3	; 0x03
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	a9 f0       	breq	.+42     	; 0x150a <UART_u8EnableRecievingInterrupt+0x4e>
		{
			//update the pointer of the CallBack function with the passed address of function
			gpf_RecieveCallBack = pfnCallBack;
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	9b 81       	ldd	r25, Y+3	; 0x03
    14e4:	90 93 ce 01 	sts	0x01CE, r25
    14e8:	80 93 cd 01 	sts	0x01CD, r24
			//Enable the Receiving Interrupt
			SET_BIT(UCSRB_REG,RXCIE_BIT);
    14ec:	aa e2       	ldi	r26, 0x2A	; 42
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ea e2       	ldi	r30, 0x2A	; 42
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	80 68       	ori	r24, 0x80	; 128
    14f8:	8c 93       	st	X, r24
			//Enable the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
    14fa:	af e5       	ldi	r26, 0x5F	; 95
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ef e5       	ldi	r30, 0x5F	; 95
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 68       	ori	r24, 0x80	; 128
    1506:	8c 93       	st	X, r24
    1508:	05 c0       	rjmp	.+10     	; 0x1514 <UART_u8EnableRecievingInterrupt+0x58>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    150a:	87 e0       	ldi	r24, 0x07	; 7
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <UART_u8EnableRecievingInterrupt+0x58>
		}

	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
    1510:	88 e0       	ldi	r24, 0x08	; 8
    1512:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    1514:	89 81       	ldd	r24, Y+1	; 0x01
}
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <UART_u8EnableSendingInterrupt>:
 * @brief This function is called to enable the Sending complete Interrupt
 * @pre - the UART must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t UART_u8EnableSendingInterrupt(void (*pfnCallBack)(void))
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	00 d0       	rcall	.+0      	; 0x1528 <UART_u8EnableSendingInterrupt+0x6>
    1528:	0f 92       	push	r0
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	9b 83       	std	Y+3, r25	; 0x03
    1530:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED)// Check if the UART is initialized
    1536:	80 91 cc 01 	lds	r24, 0x01CC
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	e1 f4       	brne	.+56     	; 0x1576 <UART_u8EnableSendingInterrupt+0x54>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pfnCallBack!=NULL)
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	9b 81       	ldd	r25, Y+3	; 0x03
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	a9 f0       	breq	.+42     	; 0x1570 <UART_u8EnableSendingInterrupt+0x4e>
		{
			//update the pointer of the CallBack function with the passed address of function
			gpf_TransmitCallBack = pfnCallBack;
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	9b 81       	ldd	r25, Y+3	; 0x03
    154a:	90 93 d0 01 	sts	0x01D0, r25
    154e:	80 93 cf 01 	sts	0x01CF, r24
			//Enable the Receiving Interrupt
			SET_BIT(UCSRB_REG,TXCIE_BIT);
    1552:	aa e2       	ldi	r26, 0x2A	; 42
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ea e2       	ldi	r30, 0x2A	; 42
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	80 64       	ori	r24, 0x40	; 64
    155e:	8c 93       	st	X, r24
			//Enable the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
    1560:	af e5       	ldi	r26, 0x5F	; 95
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ef e5       	ldi	r30, 0x5F	; 95
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 68       	ori	r24, 0x80	; 128
    156c:	8c 93       	st	X, r24
    156e:	05 c0       	rjmp	.+10     	; 0x157a <UART_u8EnableSendingInterrupt+0x58>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    1570:	87 e0       	ldi	r24, 0x07	; 7
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	02 c0       	rjmp	.+4      	; 0x157a <UART_u8EnableSendingInterrupt+0x58>
		}

	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
    1576:	88 e0       	ldi	r24, 0x08	; 8
    1578:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    157a:	89 81       	ldd	r24, Y+1	; 0x01

}
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <UART_u8DisableReceivingInterrupt>:
/**
 * @fn UART_u8DisableRecievingInterrupt(void)
 * @brief This function is called to disable the Receiving complete Interrupt
 */
void UART_u8DisableReceivingInterrupt(void)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
	//Reset the pointer to the callback function to NULL
	gpf_RecieveCallBack = NULL;
    1590:	10 92 ce 01 	sts	0x01CE, r1
    1594:	10 92 cd 01 	sts	0x01CD, r1
	// Clear the Enable bit of the receiving Interrupt
	CLR_BIT(UCSRB_REG,RXCIE_BIT);
    1598:	aa e2       	ldi	r26, 0x2A	; 42
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	ea e2       	ldi	r30, 0x2A	; 42
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	8f 77       	andi	r24, 0x7F	; 127
    15a4:	8c 93       	st	X, r24
}
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <UART_u8DisableTransmittionInterrupt>:
/**
 * @fn UART_u8DisableTransmittionInterrupt(void)
 * @brief This function is called to disable the Transmission complete Interrupt
 */
void UART_u8DisableTransmittionInterrupt(void)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
	//Reset the pointer to the callback function to NULL
	gpf_TransmitCallBack = NULL;
    15b4:	10 92 d0 01 	sts	0x01D0, r1
    15b8:	10 92 cf 01 	sts	0x01CF, r1
	// Clear the Enable bit of the transmittion complete Interrupt
	CLR_BIT(UCSRB_REG,TXCIE_BIT);
    15bc:	aa e2       	ldi	r26, 0x2A	; 42
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ea e2       	ldi	r30, 0x2A	; 42
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8f 7b       	andi	r24, 0xBF	; 191
    15c8:	8c 93       	st	X, r24
}
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <UART_u8Deinit>:
/**
 * @fn UART_u8Deinit(void)
 * @brief This function is called to Stop the UART Peripheral and De-initialize it
 */
void UART_u8Deinit(void)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
	// Disable the UART capabilities of Receiving and transmitting
	CLR_BIT(UCSRB_REG,RXEN_BIT);
    15d8:	aa e2       	ldi	r26, 0x2A	; 42
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ea e2       	ldi	r30, 0x2A	; 42
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	8f 7e       	andi	r24, 0xEF	; 239
    15e4:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG,TXEN_BIT);
    15e6:	aa e2       	ldi	r26, 0x2A	; 42
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ea e2       	ldi	r30, 0x2A	; 42
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	87 7f       	andi	r24, 0xF7	; 247
    15f2:	8c 93       	st	X, r24
	//Reset the pointer to the transmittion callback function to NULL
	gpf_TransmitCallBack = NULL;
    15f4:	10 92 d0 01 	sts	0x01D0, r1
    15f8:	10 92 cf 01 	sts	0x01CF, r1
	//Reset the pointer to the Receiving callback function to NULL
	gpf_RecieveCallBack = NULL;
    15fc:	10 92 ce 01 	sts	0x01CE, r1
    1600:	10 92 cd 01 	sts	0x01CD, r1
	// Clear the Enable bit of the receiving Interrupt
	CLR_BIT(UCSRB_REG,RXCIE_BIT);
    1604:	aa e2       	ldi	r26, 0x2A	; 42
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	ea e2       	ldi	r30, 0x2A	; 42
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 77       	andi	r24, 0x7F	; 127
    1610:	8c 93       	st	X, r24
	// Clear the Enable bit of the transmittion complete Interrupt
	CLR_BIT(UCSRB_REG,TXCIE_BIT);
    1612:	aa e2       	ldi	r26, 0x2A	; 42
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	ea e2       	ldi	r30, 0x2A	; 42
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	8f 7b       	andi	r24, 0xBF	; 191
    161e:	8c 93       	st	X, r24
	// Reset the Initialization flag indicating that the UART is not initialized anymore
	gu8_IntializationFlag = UART_INITIALIZED;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	80 93 cc 01 	sts	0x01CC, r24

}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <__vector_13>:

/**
 * @brief the Receiving Interrupt ISR
 */
void __vector_13(void) {
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	2f 93       	push	r18
    1638:	3f 93       	push	r19
    163a:	4f 93       	push	r20
    163c:	5f 93       	push	r21
    163e:	6f 93       	push	r22
    1640:	7f 93       	push	r23
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
    1646:	af 93       	push	r26
    1648:	bf 93       	push	r27
    164a:	ef 93       	push	r30
    164c:	ff 93       	push	r31
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62

	uint8_t UDRFlush; // this is a temporary variable used to read the UDR to clear the receive Complete flag
	if (gpf_RecieveCallBack!=NULL) // check if the pointer to the Callback is pointing to NULL
    1658:	80 91 cd 01 	lds	r24, 0x01CD
    165c:	90 91 ce 01 	lds	r25, 0x01CE
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	31 f0       	breq	.+12     	; 0x1670 <__vector_13+0x44>
	{
		//if not then call the function pointing to it
		gpf_RecieveCallBack();
    1664:	e0 91 cd 01 	lds	r30, 0x01CD
    1668:	f0 91 ce 01 	lds	r31, 0x01CE
    166c:	09 95       	icall
    166e:	04 c0       	rjmp	.+8      	; 0x1678 <__vector_13+0x4c>
	}else
	{
		// if it is the just flush the UDR
		UDRFlush = UDR_REG;
    1670:	ec e2       	ldi	r30, 0x2C	; 44
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	89 83       	std	Y+1, r24	; 0x01
	}
}
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	ff 91       	pop	r31
    1680:	ef 91       	pop	r30
    1682:	bf 91       	pop	r27
    1684:	af 91       	pop	r26
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	7f 91       	pop	r23
    168c:	6f 91       	pop	r22
    168e:	5f 91       	pop	r21
    1690:	4f 91       	pop	r20
    1692:	3f 91       	pop	r19
    1694:	2f 91       	pop	r18
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <__vector_14>:

/**
 * @brief the Transmission Interrupt ISR
 */
void __vector_14(void) {
    16a0:	1f 92       	push	r1
    16a2:	0f 92       	push	r0
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	0f 92       	push	r0
    16a8:	11 24       	eor	r1, r1
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
	if (gpf_TransmitCallBack!=NULL)// check if the pointer to the Callback is pointing to NULL
    16ca:	80 91 cf 01 	lds	r24, 0x01CF
    16ce:	90 91 d0 01 	lds	r25, 0x01D0
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	29 f0       	breq	.+10     	; 0x16e0 <__vector_14+0x40>
	{
		//if not then call the function pointing to it
		gpf_TransmitCallBack();
    16d6:	e0 91 cf 01 	lds	r30, 0x01CF
    16da:	f0 91 d0 01 	lds	r31, 0x01D0
    16de:	09 95       	icall
	}
}
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <TIMER1_u8Init>:

// pointer to function that will be called when COMPB interrupt 	
static void (*COMPB_callBack)(void);

// function to intialize values of control registers 
uint8_t TIMER1_u8Init(void) {
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A_REG = 0;
    170e:	ef e4       	ldi	r30, 0x4F	; 79
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	10 82       	st	Z, r1
	TCCR1B_REG = 0;
    1714:	ee e4       	ldi	r30, 0x4E	; 78
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	10 82       	st	Z, r1
	return 1;
    171a:	81 e0       	ldi	r24, 0x01	; 1
}
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <TIMER1_u8Start>:

// function to set start counting and set intitial value 
uint8_t TIMER1_u8Start(void) {
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG |= (1 << CS10) | (1 << CS11);
    172a:	ae e4       	ldi	r26, 0x4E	; 78
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	ee e4       	ldi	r30, 0x4E	; 78
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	83 60       	ori	r24, 0x03	; 3
    1736:	8c 93       	st	X, r24
	TCNT1_REG = INIT_TIME;
    1738:	ec e4       	ldi	r30, 0x4C	; 76
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	9f ef       	ldi	r25, 0xFF	; 255
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	80 83       	st	Z, r24
	return 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <TIMER1_u8SetComapre>:

// function to set channel register ( OCR1X_REG ) value to compare with 
uint8_t TIMER1_u8SetComapre(CHANNEL channel, uint16_t compareValue) {
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <TIMER1_u8SetComapre+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <TIMER1_u8SetComapre+0x8>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <TIMER1_u8SetComapre+0xa>
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	7b 83       	std	Y+3, r23	; 0x03
    175e:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel) {
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	3e 83       	std	Y+6, r19	; 0x06
    1768:	2d 83       	std	Y+5, r18	; 0x05
    176a:	8d 81       	ldd	r24, Y+5	; 0x05
    176c:	9e 81       	ldd	r25, Y+6	; 0x06
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	31 f0       	breq	.+12     	; 0x177e <TIMER1_u8SetComapre+0x32>
    1772:	2d 81       	ldd	r18, Y+5	; 0x05
    1774:	3e 81       	ldd	r19, Y+6	; 0x06
    1776:	21 30       	cpi	r18, 0x01	; 1
    1778:	31 05       	cpc	r19, r1
    177a:	51 f0       	breq	.+20     	; 0x1790 <TIMER1_u8SetComapre+0x44>
    177c:	12 c0       	rjmp	.+36     	; 0x17a2 <TIMER1_u8SetComapre+0x56>
	case CHANNELA:
		OCR1A_REG = compareValue + INIT_TIME;// set channel register value to compare with 
    177e:	ea e4       	ldi	r30, 0x4A	; 74
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	9b 81       	ldd	r25, Y+3	; 0x03
    1786:	80 50       	subi	r24, 0x00	; 0
    1788:	91 40       	sbci	r25, 0x01	; 1
    178a:	91 83       	std	Z+1, r25	; 0x01
    178c:	80 83       	st	Z, r24
    178e:	0b c0       	rjmp	.+22     	; 0x17a6 <TIMER1_u8SetComapre+0x5a>
		break;
	case CHANNELB:
		OCR1B_REG = compareValue + INIT_TIME;// set channel register value to compare with
    1790:	e8 e4       	ldi	r30, 0x48	; 72
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	80 50       	subi	r24, 0x00	; 0
    179a:	91 40       	sbci	r25, 0x01	; 1
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	80 83       	st	Z, r24
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <TIMER1_u8SetComapre+0x5a>
		break;
	default:
		return 0;
    17a2:	1c 82       	std	Y+4, r1	; 0x04
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <TIMER1_u8SetComapre+0x5e>
	}
	return 1;
    17a6:	31 e0       	ldi	r19, 0x01	; 1
    17a8:	3c 83       	std	Y+4, r19	; 0x04
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
}
    17ac:	26 96       	adiw	r28, 0x06	; 6
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <TIMER1_u8SetChannelInterrupt>:

// function to set pointer to the function run in interrupt
// take channel and pointer to function to run in ISR   
uint8_t TIMER1_u8SetChannelInterrupt(CHANNEL channel, void (*fnCallBack)(void)) {
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <TIMER1_u8SetChannelInterrupt+0x6>
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <TIMER1_u8SetChannelInterrupt+0x8>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <TIMER1_u8SetChannelInterrupt+0xa>
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	7b 83       	std	Y+3, r23	; 0x03
    17d0:	6a 83       	std	Y+2, r22	; 0x02
	if (fnCallBack == NULL) {
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	9b 81       	ldd	r25, Y+3	; 0x03
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	11 f4       	brne	.+4      	; 0x17de <TIMER1_u8SetChannelInterrupt+0x20>
		return 0;
    17da:	1e 82       	std	Y+6, r1	; 0x06
    17dc:	3d c0       	rjmp	.+122    	; 0x1858 <TIMER1_u8SetChannelInterrupt+0x9a>
	}
	switch (channel) {
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	3d 83       	std	Y+5, r19	; 0x05
    17e6:	2c 83       	std	Y+4, r18	; 0x04
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	9d 81       	ldd	r25, Y+5	; 0x05
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	31 f0       	breq	.+12     	; 0x17fc <TIMER1_u8SetChannelInterrupt+0x3e>
    17f0:	2c 81       	ldd	r18, Y+4	; 0x04
    17f2:	3d 81       	ldd	r19, Y+5	; 0x05
    17f4:	21 30       	cpi	r18, 0x01	; 1
    17f6:	31 05       	cpc	r19, r1
    17f8:	79 f0       	breq	.+30     	; 0x1818 <TIMER1_u8SetChannelInterrupt+0x5a>
    17fa:	1c c0       	rjmp	.+56     	; 0x1834 <TIMER1_u8SetChannelInterrupt+0x76>
	case CHANNELA:
		SET_BIT(TIMSK_REG, OCIE1A);			// Enable interrupt when COMPA 
    17fc:	a9 e5       	ldi	r26, 0x59	; 89
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e9 e5       	ldi	r30, 0x59	; 89
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	80 61       	ori	r24, 0x10	; 16
    1808:	8c 93       	st	X, r24
		COMPA_callBack = fnCallBack; // set function in interrupt to the passed function
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	9b 81       	ldd	r25, Y+3	; 0x03
    180e:	90 93 d2 01 	sts	0x01D2, r25
    1812:	80 93 d1 01 	sts	0x01D1, r24
    1816:	10 c0       	rjmp	.+32     	; 0x1838 <TIMER1_u8SetChannelInterrupt+0x7a>
		break;
	case CHANNELB:
		SET_BIT(TIMSK_REG, OCIE1B);			// Enable interrupt when COMPB 
    1818:	a9 e5       	ldi	r26, 0x59	; 89
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e9 e5       	ldi	r30, 0x59	; 89
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	88 60       	ori	r24, 0x08	; 8
    1824:	8c 93       	st	X, r24
		COMPB_callBack = fnCallBack;// set function in interrupt to the passed function 
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	9b 81       	ldd	r25, Y+3	; 0x03
    182a:	90 93 d4 01 	sts	0x01D4, r25
    182e:	80 93 d3 01 	sts	0x01D3, r24
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <TIMER1_u8SetChannelInterrupt+0x7a>
		break;
	default:
		return 0;
    1834:	1e 82       	std	Y+6, r1	; 0x06
    1836:	10 c0       	rjmp	.+32     	; 0x1858 <TIMER1_u8SetChannelInterrupt+0x9a>
	}
	SET_BIT(TIMSK_REG, TOIE1);				// Enable interrupt 
    1838:	a9 e5       	ldi	r26, 0x59	; 89
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e9 e5       	ldi	r30, 0x59	; 89
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	84 60       	ori	r24, 0x04	; 4
    1844:	8c 93       	st	X, r24
	SET_BIT(SREG_REG, I_BIT);
    1846:	af e5       	ldi	r26, 0x5F	; 95
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	ef e5       	ldi	r30, 0x5F	; 95
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	80 68       	ori	r24, 0x80	; 128
    1852:	8c 93       	st	X, r24
	return 1;
    1854:	31 e0       	ldi	r19, 0x01	; 1
    1856:	3e 83       	std	Y+6, r19	; 0x06
    1858:	8e 81       	ldd	r24, Y+6	; 0x06
}
    185a:	26 96       	adiw	r28, 0x06	; 6
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <TIMER1_u8StopChannel>:

// function to stop comparing with channel 
uint8_t TIMER1_u8StopChannel(CHANNEL channel) {
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <TIMER1_u8StopChannel+0x6>
    1872:	00 d0       	rcall	.+0      	; 0x1874 <TIMER1_u8StopChannel+0x8>
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
	switch (channel) {
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	3c 83       	std	Y+4, r19	; 0x04
    1882:	2b 83       	std	Y+3, r18	; 0x03
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	00 97       	sbiw	r24, 0x00	; 0
    188a:	31 f0       	breq	.+12     	; 0x1898 <TIMER1_u8StopChannel+0x2c>
    188c:	2b 81       	ldd	r18, Y+3	; 0x03
    188e:	3c 81       	ldd	r19, Y+4	; 0x04
    1890:	21 30       	cpi	r18, 0x01	; 1
    1892:	31 05       	cpc	r19, r1
    1894:	69 f0       	breq	.+26     	; 0x18b0 <TIMER1_u8StopChannel+0x44>
    1896:	18 c0       	rjmp	.+48     	; 0x18c8 <TIMER1_u8StopChannel+0x5c>
	case CHANNELA:
		CLR_BIT(TIMSK_REG, OCIE1A);      // disable interrupt 
    1898:	a9 e5       	ldi	r26, 0x59	; 89
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e9 e5       	ldi	r30, 0x59	; 89
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	8f 7e       	andi	r24, 0xEF	; 239
    18a4:	8c 93       	st	X, r24
		COMPA_callBack = NULL;      // make sure no function to run in interrupt
    18a6:	10 92 d2 01 	sts	0x01D2, r1
    18aa:	10 92 d1 01 	sts	0x01D1, r1
    18ae:	0e c0       	rjmp	.+28     	; 0x18cc <TIMER1_u8StopChannel+0x60>
		break;
	case CHANNELB:
		CLR_BIT(TIMSK_REG, OCIE1B);	 	 // disable interrupt 
    18b0:	a9 e5       	ldi	r26, 0x59	; 89
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e9 e5       	ldi	r30, 0x59	; 89
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	87 7f       	andi	r24, 0xF7	; 247
    18bc:	8c 93       	st	X, r24
		COMPB_callBack = NULL;		// make sure no function to run in interrupt
    18be:	10 92 d4 01 	sts	0x01D4, r1
    18c2:	10 92 d3 01 	sts	0x01D3, r1
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <TIMER1_u8StopChannel+0x60>
		break;
	default:
		return 0;
    18c8:	1a 82       	std	Y+2, r1	; 0x02
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <TIMER1_u8StopChannel+0x64>
	}
	return 1;
    18cc:	31 e0       	ldi	r19, 0x01	; 1
    18ce:	3a 83       	std	Y+2, r19	; 0x02
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <__vector_7>:

//ISR for TIMER1 COMPA
void __vector_7(void) {
    18e0:	1f 92       	push	r1
    18e2:	0f 92       	push	r0
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	0f 92       	push	r0
    18e8:	11 24       	eor	r1, r1
    18ea:	2f 93       	push	r18
    18ec:	3f 93       	push	r19
    18ee:	4f 93       	push	r20
    18f0:	5f 93       	push	r21
    18f2:	6f 93       	push	r22
    18f4:	7f 93       	push	r23
    18f6:	8f 93       	push	r24
    18f8:	9f 93       	push	r25
    18fa:	af 93       	push	r26
    18fc:	bf 93       	push	r27
    18fe:	ef 93       	push	r30
    1900:	ff 93       	push	r31
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
	if (COMPA_callBack != NULL) {
    190a:	80 91 d1 01 	lds	r24, 0x01D1
    190e:	90 91 d2 01 	lds	r25, 0x01D2
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	29 f0       	breq	.+10     	; 0x1920 <__vector_7+0x40>
		COMPA_callBack();
    1916:	e0 91 d1 01 	lds	r30, 0x01D1
    191a:	f0 91 d2 01 	lds	r31, 0x01D2
    191e:	09 95       	icall
	}
}
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	ff 91       	pop	r31
    1926:	ef 91       	pop	r30
    1928:	bf 91       	pop	r27
    192a:	af 91       	pop	r26
    192c:	9f 91       	pop	r25
    192e:	8f 91       	pop	r24
    1930:	7f 91       	pop	r23
    1932:	6f 91       	pop	r22
    1934:	5f 91       	pop	r21
    1936:	4f 91       	pop	r20
    1938:	3f 91       	pop	r19
    193a:	2f 91       	pop	r18
    193c:	0f 90       	pop	r0
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	0f 90       	pop	r0
    1942:	1f 90       	pop	r1
    1944:	18 95       	reti

00001946 <__vector_8>:
//ISR for TIMER1 COMPB
void __vector_8(void) {
    1946:	1f 92       	push	r1
    1948:	0f 92       	push	r0
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	0f 92       	push	r0
    194e:	11 24       	eor	r1, r1
    1950:	2f 93       	push	r18
    1952:	3f 93       	push	r19
    1954:	4f 93       	push	r20
    1956:	5f 93       	push	r21
    1958:	6f 93       	push	r22
    195a:	7f 93       	push	r23
    195c:	8f 93       	push	r24
    195e:	9f 93       	push	r25
    1960:	af 93       	push	r26
    1962:	bf 93       	push	r27
    1964:	ef 93       	push	r30
    1966:	ff 93       	push	r31
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
	if (COMPB_callBack != NULL) {
    1970:	80 91 d3 01 	lds	r24, 0x01D3
    1974:	90 91 d4 01 	lds	r25, 0x01D4
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	29 f0       	breq	.+10     	; 0x1986 <__vector_8+0x40>
		COMPB_callBack();
    197c:	e0 91 d3 01 	lds	r30, 0x01D3
    1980:	f0 91 d4 01 	lds	r31, 0x01D4
    1984:	09 95       	icall
	}
}
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	ff 91       	pop	r31
    198c:	ef 91       	pop	r30
    198e:	bf 91       	pop	r27
    1990:	af 91       	pop	r26
    1992:	9f 91       	pop	r25
    1994:	8f 91       	pop	r24
    1996:	7f 91       	pop	r23
    1998:	6f 91       	pop	r22
    199a:	5f 91       	pop	r21
    199c:	4f 91       	pop	r20
    199e:	3f 91       	pop	r19
    19a0:	2f 91       	pop	r18
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	0f 90       	pop	r0
    19a8:	1f 90       	pop	r1
    19aa:	18 95       	reti

000019ac <__vector_9>:
//ISR for TIMER1 OVF
void __vector_9(void) {
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG = INIT_TIME;    // reset counter value to initial value 
    19d6:	ec e4       	ldi	r30, 0x4C	; 76
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	9f ef       	ldi	r25, 0xFF	; 255
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
	if (COMPA_callBack != NULL) {
    19e2:	80 91 d1 01 	lds	r24, 0x01D1
    19e6:	90 91 d2 01 	lds	r25, 0x01D2
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	29 f0       	breq	.+10     	; 0x19f8 <__vector_9+0x4c>
		COMPA_callBack();
    19ee:	e0 91 d1 01 	lds	r30, 0x01D1
    19f2:	f0 91 d2 01 	lds	r31, 0x01D2
    19f6:	09 95       	icall
	}
	if (COMPB_callBack != NULL) {
    19f8:	80 91 d3 01 	lds	r24, 0x01D3
    19fc:	90 91 d4 01 	lds	r25, 0x01D4
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	29 f0       	breq	.+10     	; 0x1a0e <__vector_9+0x62>
		COMPB_callBack();
    1a04:	e0 91 d3 01 	lds	r30, 0x01D3
    1a08:	f0 91 d4 01 	lds	r31, 0x01D4
    1a0c:	09 95       	icall
	}
}
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	ff 91       	pop	r31
    1a14:	ef 91       	pop	r30
    1a16:	bf 91       	pop	r27
    1a18:	af 91       	pop	r26
    1a1a:	9f 91       	pop	r25
    1a1c:	8f 91       	pop	r24
    1a1e:	7f 91       	pop	r23
    1a20:	6f 91       	pop	r22
    1a22:	5f 91       	pop	r21
    1a24:	4f 91       	pop	r20
    1a26:	3f 91       	pop	r19
    1a28:	2f 91       	pop	r18
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	0f 90       	pop	r0
    1a30:	1f 90       	pop	r1
    1a32:	18 95       	reti

00001a34 <channelA_callBack>:
// creat 2 PWM struct contain port and pin for each channel  
static PWMPin_t PWM1;
static PWMPin_t PWM2;

// function to toggle PWM pin channel 1
void channelA_callBack(void) {
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8TogglePinData(PWM1.port, PWM1.pin);
    1a3c:	80 91 d5 01 	lds	r24, 0x01D5
    1a40:	90 91 d6 01 	lds	r25, 0x01D6
    1a44:	69 2f       	mov	r22, r25
    1a46:	0e 94 ab 13 	call	0x2756	; 0x2756 <DIO_u8TogglePinData>
}
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <channelB_callBack>:

// function to toggle PWM pin channel 2
void channelB_callBack(void) {
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
	DIO_u8TogglePinData(PWM2.port, PWM2.pin);
    1a58:	80 91 d7 01 	lds	r24, 0x01D7
    1a5c:	90 91 d8 01 	lds	r25, 0x01D8
    1a60:	69 2f       	mov	r22, r25
    1a62:	0e 94 ab 13 	call	0x2756	; 0x2756 <DIO_u8TogglePinData>
}
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <PWM_u8Init>:

// initialize PWM channel for selected pin 
uint8_t PWM_u8Init(CHANNEL channel, PWMPin_t* pwm) {
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <PWM_u8Init+0x6>
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <PWM_u8Init+0x8>
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <PWM_u8Init+0xa>
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	7b 83       	std	Y+3, r23	; 0x03
    1a7e:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel) {
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3e 83       	std	Y+6, r19	; 0x06
    1a88:	2d 83       	std	Y+5, r18	; 0x05
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	31 f0       	breq	.+12     	; 0x1a9e <PWM_u8Init+0x32>
    1a92:	2d 81       	ldd	r18, Y+5	; 0x05
    1a94:	3e 81       	ldd	r19, Y+6	; 0x06
    1a96:	21 30       	cpi	r18, 0x01	; 1
    1a98:	31 05       	cpc	r19, r1
    1a9a:	51 f0       	breq	.+20     	; 0x1ab0 <PWM_u8Init+0x44>
    1a9c:	12 c0       	rjmp	.+36     	; 0x1ac2 <PWM_u8Init+0x56>
	case CHANNELA:
		PWM1 = *pwm;		// set port and pin value 
    1a9e:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa0:	fb 81       	ldd	r31, Y+3	; 0x03
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
    1aa6:	90 93 d6 01 	sts	0x01D6, r25
    1aaa:	80 93 d5 01 	sts	0x01D5, r24
    1aae:	0b c0       	rjmp	.+22     	; 0x1ac6 <PWM_u8Init+0x5a>
		break;
	case CHANNELB:
		PWM2 = *pwm;		// set port and pin value 
    1ab0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ab2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ab4:	80 81       	ld	r24, Z
    1ab6:	91 81       	ldd	r25, Z+1	; 0x01
    1ab8:	90 93 d8 01 	sts	0x01D8, r25
    1abc:	80 93 d7 01 	sts	0x01D7, r24
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <PWM_u8Init+0x5a>
		break;
	default:
		return 0;
    1ac2:	1c 82       	std	Y+4, r1	; 0x04
    1ac4:	03 c0       	rjmp	.+6      	; 0x1acc <PWM_u8Init+0x60>
	}
	return TIMER1_u8Init();		// initialize TIMER1
    1ac6:	0e 94 83 0b 	call	0x1706	; 0x1706 <TIMER1_u8Init>
    1aca:	8c 83       	std	Y+4, r24	; 0x04
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ace:	26 96       	adiw	r28, 0x06	; 6
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <PWM_u8DutyCycle>:

// function set duty cycle on the selected channel 
uint8_t PWM_u8DutyCycle(CHANNEL channel, uint32_t dutyCycle) {
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	2c 97       	sbiw	r28, 0x0c	; 12
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    1af6:	4e 83       	std	Y+6, r20	; 0x06
    1af8:	5f 83       	std	Y+7, r21	; 0x07
    1afa:	68 87       	std	Y+8, r22	; 0x08
    1afc:	79 87       	std	Y+9, r23	; 0x09
	uint32_t dutyValue = ((float) dutyCycle * MAX_VALUE) / MAX_DUTY; // calculate real duty value 
    1afe:	6e 81       	ldd	r22, Y+6	; 0x06
    1b00:	7f 81       	ldd	r23, Y+7	; 0x07
    1b02:	88 85       	ldd	r24, Y+8	; 0x08
    1b04:	99 85       	ldd	r25, Y+9	; 0x09
    1b06:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e8       	ldi	r20, 0x80	; 128
    1b18:	53 e4       	ldi	r21, 0x43	; 67
    1b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	48 ec       	ldi	r20, 0xC8	; 200
    1b2c:	52 e4       	ldi	r21, 0x42	; 66
    1b2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	9a 83       	std	Y+2, r25	; 0x02
    1b46:	ab 83       	std	Y+3, r26	; 0x03
    1b48:	bc 83       	std	Y+4, r27	; 0x04

	// depend on channel initalize it to HIGH 
	// toggle pin depend on duty cycle and frequency  
	switch (channel) {
    1b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4c:	28 2f       	mov	r18, r24
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	3c 87       	std	Y+12, r19	; 0x0c
    1b52:	2b 87       	std	Y+11, r18	; 0x0b
    1b54:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b56:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	31 f0       	breq	.+12     	; 0x1b68 <PWM_u8DutyCycle+0x88>
    1b5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b60:	21 30       	cpi	r18, 0x01	; 1
    1b62:	31 05       	cpc	r19, r1
    1b64:	c9 f0       	breq	.+50     	; 0x1b98 <PWM_u8DutyCycle+0xb8>
    1b66:	30 c0       	rjmp	.+96     	; 0x1bc8 <PWM_u8DutyCycle+0xe8>
	case CHANNELA:
		DIO_u8SetPinData(PWM1.port, PWM1.pin, DIO_HIGH);
    1b68:	80 91 d5 01 	lds	r24, 0x01D5
    1b6c:	90 91 d6 01 	lds	r25, 0x01D6
    1b70:	69 2f       	mov	r22, r25
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 3d 10 	call	0x207a	; 0x207a <DIO_u8SetPinData>
		TIMER1_u8StopChannel(channel);
    1b78:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7a:	0e 94 36 0c 	call	0x186c	; 0x186c <TIMER1_u8StopChannel>
		TIMER1_u8SetComapre(channel, (uint16_t) dutyValue);
    1b7e:	29 81       	ldd	r18, Y+1	; 0x01
    1b80:	3a 81       	ldd	r19, Y+2	; 0x02
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	b9 01       	movw	r22, r18
    1b86:	0e 94 a6 0b 	call	0x174c	; 0x174c <TIMER1_u8SetComapre>
		TIMER1_u8SetChannelInterrupt(channel, channelA_callBack);
    1b8a:	2a e1       	ldi	r18, 0x1A	; 26
    1b8c:	3d e0       	ldi	r19, 0x0D	; 13
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	b9 01       	movw	r22, r18
    1b92:	0e 94 df 0b 	call	0x17be	; 0x17be <TIMER1_u8SetChannelInterrupt>
    1b96:	1a c0       	rjmp	.+52     	; 0x1bcc <PWM_u8DutyCycle+0xec>
		break;
	case CHANNELB:
		DIO_u8SetPinData(PWM2.port, PWM2.pin, DIO_HIGH);
    1b98:	80 91 d7 01 	lds	r24, 0x01D7
    1b9c:	90 91 d8 01 	lds	r25, 0x01D8
    1ba0:	69 2f       	mov	r22, r25
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	0e 94 3d 10 	call	0x207a	; 0x207a <DIO_u8SetPinData>
		TIMER1_u8StopChannel(channel);
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	0e 94 36 0c 	call	0x186c	; 0x186c <TIMER1_u8StopChannel>
		TIMER1_u8SetComapre(channel, (uint16_t) dutyValue);
    1bae:	29 81       	ldd	r18, Y+1	; 0x01
    1bb0:	3a 81       	ldd	r19, Y+2	; 0x02
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	b9 01       	movw	r22, r18
    1bb6:	0e 94 a6 0b 	call	0x174c	; 0x174c <TIMER1_u8SetComapre>
		TIMER1_u8SetChannelInterrupt(channel, channelB_callBack);
    1bba:	28 e2       	ldi	r18, 0x28	; 40
    1bbc:	3d e0       	ldi	r19, 0x0D	; 13
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	b9 01       	movw	r22, r18
    1bc2:	0e 94 df 0b 	call	0x17be	; 0x17be <TIMER1_u8SetChannelInterrupt>
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <PWM_u8DutyCycle+0xec>
		break;
	default:
		return 0;
    1bc8:	1a 86       	std	Y+10, r1	; 0x0a
    1bca:	03 c0       	rjmp	.+6      	; 0x1bd2 <PWM_u8DutyCycle+0xf2>
	}
	return TIMER1_u8Start();
    1bcc:	0e 94 91 0b 	call	0x1722	; 0x1722 <TIMER1_u8Start>
    1bd0:	8a 87       	std	Y+10, r24	; 0x0a
    1bd2:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1bd4:	2c 96       	adiw	r28, 0x0c	; 12
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <DIO_u8SetPinDirection>:
#include "../../LIB/atmega32.h"
#include "DIO_interface.h"

// function to set direction of pin 
uint8_t DIO_u8SetPinDirection(DIOPort_t u8_PortName, DIOPin_t u8_PinNum,
		DIODir_t u8_PinDir) {
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	2e 97       	sbiw	r28, 0x0e	; 14
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	8a 83       	std	Y+2, r24	; 0x02
    1bfc:	6b 83       	std	Y+3, r22	; 0x03
    1bfe:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	89 83       	std	Y+1, r24	; 0x01

	/*Check if the inputs are in the right range*/
	if (u8_PinNum < DIO_PINS_NUMBER && u8_PortName < DIO_PORTS_NUMBER) {
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	88 30       	cpi	r24, 0x08	; 8
    1c08:	08 f0       	brcs	.+2      	; 0x1c0c <DIO_u8SetPinDirection+0x26>
    1c0a:	2c c2       	rjmp	.+1112   	; 0x2064 <DIO_u8SetPinDirection+0x47e>
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	84 30       	cpi	r24, 0x04	; 4
    1c10:	08 f0       	brcs	.+2      	; 0x1c14 <DIO_u8SetPinDirection+0x2e>
    1c12:	28 c2       	rjmp	.+1104   	; 0x2064 <DIO_u8SetPinDirection+0x47e>
		/*Check which port */
		switch (u8_PortName) {
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	3e 87       	std	Y+14, r19	; 0x0e
    1c1c:	2d 87       	std	Y+13, r18	; 0x0d
    1c1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c22:	81 30       	cpi	r24, 0x01	; 1
    1c24:	91 05       	cpc	r25, r1
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <DIO_u8SetPinDirection+0x44>
    1c28:	98 c0       	rjmp	.+304    	; 0x1d5a <DIO_u8SetPinDirection+0x174>
    1c2a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c2c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c2e:	22 30       	cpi	r18, 0x02	; 2
    1c30:	31 05       	cpc	r19, r1
    1c32:	2c f4       	brge	.+10     	; 0x1c3e <DIO_u8SetPinDirection+0x58>
    1c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	71 f0       	breq	.+28     	; 0x1c58 <DIO_u8SetPinDirection+0x72>
    1c3c:	11 c2       	rjmp	.+1058   	; 0x2060 <DIO_u8SetPinDirection+0x47a>
    1c3e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c40:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c42:	22 30       	cpi	r18, 0x02	; 2
    1c44:	31 05       	cpc	r19, r1
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <DIO_u8SetPinDirection+0x64>
    1c48:	09 c1       	rjmp	.+530    	; 0x1e5c <DIO_u8SetPinDirection+0x276>
    1c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4e:	83 30       	cpi	r24, 0x03	; 3
    1c50:	91 05       	cpc	r25, r1
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <DIO_u8SetPinDirection+0x70>
    1c54:	84 c1       	rjmp	.+776    	; 0x1f5e <DIO_u8SetPinDirection+0x378>
    1c56:	04 c2       	rjmp	.+1032   	; 0x2060 <DIO_u8SetPinDirection+0x47a>
		case PORTA:
			/*Check which Direction the user wants the pin to be in */
			switch (u8_PinDir) {
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	3c 87       	std	Y+12, r19	; 0x0c
    1c60:	2b 87       	std	Y+11, r18	; 0x0b
    1c62:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c64:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	91 05       	cpc	r25, r1
    1c6a:	99 f1       	breq	.+102    	; 0x1cd2 <DIO_u8SetPinDirection+0xec>
    1c6c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c6e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c70:	22 30       	cpi	r18, 0x02	; 2
    1c72:	31 05       	cpc	r19, r1
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <DIO_u8SetPinDirection+0x92>
    1c76:	5b c0       	rjmp	.+182    	; 0x1d2e <DIO_u8SetPinDirection+0x148>
    1c78:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <DIO_u8SetPinDirection+0x9c>
    1c80:	6a c0       	rjmp	.+212    	; 0x1d56 <DIO_u8SetPinDirection+0x170>

			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRA_REG, u8_PinNum);
    1c82:	aa e3       	ldi	r26, 0x3A	; 58
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	ea e3       	ldi	r30, 0x3A	; 58
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <DIO_u8SetPinDirection+0xb8>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	2a 95       	dec	r18
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <DIO_u8SetPinDirection+0xb4>
    1ca2:	80 95       	com	r24
    1ca4:	84 23       	and	r24, r20
    1ca6:	8c 93       	st	X, r24
				CLR_BIT(PORTA_REG, u8_PinNum);
    1ca8:	ab e3       	ldi	r26, 0x3B	; 59
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	eb e3       	ldi	r30, 0x3B	; 59
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	48 2f       	mov	r20, r24
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <DIO_u8SetPinDirection+0xe0>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <DIO_u8SetPinDirection+0xdc>
    1cca:	80 95       	com	r24
    1ccc:	84 23       	and	r24, r20
    1cce:	8c 93       	st	X, r24
    1cd0:	ca c1       	rjmp	.+916    	; 0x2066 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    1cd2:	a0 e5       	ldi	r26, 0x50	; 80
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e0 e5       	ldi	r30, 0x50	; 80
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	8b 7f       	andi	r24, 0xFB	; 251
    1cde:	8c 93       	st	X, r24
				CLR_BIT(DDRA_REG, u8_PinNum);
    1ce0:	aa e3       	ldi	r26, 0x3A	; 58
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	ea e3       	ldi	r30, 0x3A	; 58
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <DIO_u8SetPinDirection+0x116>
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	2a 95       	dec	r18
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <DIO_u8SetPinDirection+0x112>
    1d00:	80 95       	com	r24
    1d02:	84 23       	and	r24, r20
    1d04:	8c 93       	st	X, r24
				SET_BIT(PORTA_REG, u8_PinNum);
    1d06:	ab e3       	ldi	r26, 0x3B	; 59
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	eb e3       	ldi	r30, 0x3B	; 59
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	48 2f       	mov	r20, r24
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	02 2e       	mov	r0, r18
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <DIO_u8SetPinDirection+0x13e>
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	0a 94       	dec	r0
    1d26:	e2 f7       	brpl	.-8      	; 0x1d20 <DIO_u8SetPinDirection+0x13a>
    1d28:	84 2b       	or	r24, r20
    1d2a:	8c 93       	st	X, r24
    1d2c:	9c c1       	rjmp	.+824    	; 0x2066 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRA_REG, u8_PinNum);
    1d2e:	aa e3       	ldi	r26, 0x3A	; 58
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	ea e3       	ldi	r30, 0x3A	; 58
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	48 2f       	mov	r20, r24
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	02 2e       	mov	r0, r18
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <DIO_u8SetPinDirection+0x166>
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	0a 94       	dec	r0
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <DIO_u8SetPinDirection+0x162>
    1d50:	84 2b       	or	r24, r20
    1d52:	8c 93       	st	X, r24
    1d54:	88 c1       	rjmp	.+784    	; 0x2066 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    1d56:	19 82       	std	Y+1, r1	; 0x01
    1d58:	86 c1       	rjmp	.+780    	; 0x2066 <DIO_u8SetPinDirection+0x480>
			}
			break;
		case PORTB:
			/*Check if the inputs are in the right range*/
			switch (u8_PinDir) {
    1d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3a 87       	std	Y+10, r19	; 0x0a
    1d62:	29 87       	std	Y+9, r18	; 0x09
    1d64:	89 85       	ldd	r24, Y+9	; 0x09
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	99 f1       	breq	.+102    	; 0x1dd4 <DIO_u8SetPinDirection+0x1ee>
    1d6e:	29 85       	ldd	r18, Y+9	; 0x09
    1d70:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d72:	22 30       	cpi	r18, 0x02	; 2
    1d74:	31 05       	cpc	r19, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <DIO_u8SetPinDirection+0x194>
    1d78:	5b c0       	rjmp	.+182    	; 0x1e30 <DIO_u8SetPinDirection+0x24a>
    1d7a:	89 85       	ldd	r24, Y+9	; 0x09
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <DIO_u8SetPinDirection+0x19e>
    1d82:	6a c0       	rjmp	.+212    	; 0x1e58 <DIO_u8SetPinDirection+0x272>
			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRB_REG, u8_PinNum);
    1d84:	a7 e3       	ldi	r26, 0x37	; 55
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e7 e3       	ldi	r30, 0x37	; 55
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	48 2f       	mov	r20, r24
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <DIO_u8SetPinDirection+0x1ba>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	2a 95       	dec	r18
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <DIO_u8SetPinDirection+0x1b6>
    1da4:	80 95       	com	r24
    1da6:	84 23       	and	r24, r20
    1da8:	8c 93       	st	X, r24
				CLR_BIT(PORTB_REG, u8_PinNum);
    1daa:	a8 e3       	ldi	r26, 0x38	; 56
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e8 e3       	ldi	r30, 0x38	; 56
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	48 2f       	mov	r20, r24
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	02 2e       	mov	r0, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <DIO_u8SetPinDirection+0x1e2>
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	0a 94       	dec	r0
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <DIO_u8SetPinDirection+0x1de>
    1dcc:	80 95       	com	r24
    1dce:	84 23       	and	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	49 c1       	rjmp	.+658    	; 0x2066 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    1dd4:	a0 e5       	ldi	r26, 0x50	; 80
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e0 e5       	ldi	r30, 0x50	; 80
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	8b 7f       	andi	r24, 0xFB	; 251
    1de0:	8c 93       	st	X, r24
				CLR_BIT(DDRB_REG, u8_PinNum);
    1de2:	a7 e3       	ldi	r26, 0x37	; 55
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e7 e3       	ldi	r30, 0x37	; 55
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	48 2f       	mov	r20, r24
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <DIO_u8SetPinDirection+0x218>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	2a 95       	dec	r18
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <DIO_u8SetPinDirection+0x214>
    1e02:	80 95       	com	r24
    1e04:	84 23       	and	r24, r20
    1e06:	8c 93       	st	X, r24
				SET_BIT(PORTB_REG, u8_PinNum);
    1e08:	a8 e3       	ldi	r26, 0x38	; 56
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e8 e3       	ldi	r30, 0x38	; 56
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	48 2f       	mov	r20, r24
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 2e       	mov	r0, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <DIO_u8SetPinDirection+0x240>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	0a 94       	dec	r0
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <DIO_u8SetPinDirection+0x23c>
    1e2a:	84 2b       	or	r24, r20
    1e2c:	8c 93       	st	X, r24
    1e2e:	1b c1       	rjmp	.+566    	; 0x2066 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRB_REG, u8_PinNum);
    1e30:	a7 e3       	ldi	r26, 0x37	; 55
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e7 e3       	ldi	r30, 0x37	; 55
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 2e       	mov	r0, r18
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <DIO_u8SetPinDirection+0x268>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	0a 94       	dec	r0
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <DIO_u8SetPinDirection+0x264>
    1e52:	84 2b       	or	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	07 c1       	rjmp	.+526    	; 0x2066 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    1e58:	19 82       	std	Y+1, r1	; 0x01
    1e5a:	05 c1       	rjmp	.+522    	; 0x2066 <DIO_u8SetPinDirection+0x480>
			}
			break;
		case PORTC:
			switch (u8_PinDir) {
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	38 87       	std	Y+8, r19	; 0x08
    1e64:	2f 83       	std	Y+7, r18	; 0x07
    1e66:	8f 81       	ldd	r24, Y+7	; 0x07
    1e68:	98 85       	ldd	r25, Y+8	; 0x08
    1e6a:	81 30       	cpi	r24, 0x01	; 1
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	99 f1       	breq	.+102    	; 0x1ed6 <DIO_u8SetPinDirection+0x2f0>
    1e70:	2f 81       	ldd	r18, Y+7	; 0x07
    1e72:	38 85       	ldd	r19, Y+8	; 0x08
    1e74:	22 30       	cpi	r18, 0x02	; 2
    1e76:	31 05       	cpc	r19, r1
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <DIO_u8SetPinDirection+0x296>
    1e7a:	5b c0       	rjmp	.+182    	; 0x1f32 <DIO_u8SetPinDirection+0x34c>
    1e7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e7e:	98 85       	ldd	r25, Y+8	; 0x08
    1e80:	00 97       	sbiw	r24, 0x00	; 0
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <DIO_u8SetPinDirection+0x2a0>
    1e84:	6a c0       	rjmp	.+212    	; 0x1f5a <DIO_u8SetPinDirection+0x374>
			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRC_REG, u8_PinNum);
    1e86:	a4 e3       	ldi	r26, 0x34	; 52
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e4 e3       	ldi	r30, 0x34	; 52
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	48 2f       	mov	r20, r24
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <DIO_u8SetPinDirection+0x2bc>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	2a 95       	dec	r18
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <DIO_u8SetPinDirection+0x2b8>
    1ea6:	80 95       	com	r24
    1ea8:	84 23       	and	r24, r20
    1eaa:	8c 93       	st	X, r24
				CLR_BIT(PORTC_REG, u8_PinNum);
    1eac:	a5 e3       	ldi	r26, 0x35	; 53
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e5 e3       	ldi	r30, 0x35	; 53
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 2e       	mov	r0, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <DIO_u8SetPinDirection+0x2e4>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	0a 94       	dec	r0
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <DIO_u8SetPinDirection+0x2e0>
    1ece:	80 95       	com	r24
    1ed0:	84 23       	and	r24, r20
    1ed2:	8c 93       	st	X, r24
    1ed4:	c8 c0       	rjmp	.+400    	; 0x2066 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    1ed6:	a0 e5       	ldi	r26, 0x50	; 80
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e0 e5       	ldi	r30, 0x50	; 80
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	8b 7f       	andi	r24, 0xFB	; 251
    1ee2:	8c 93       	st	X, r24
				CLR_BIT(DDRC_REG, u8_PinNum);
    1ee4:	a4 e3       	ldi	r26, 0x34	; 52
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e4 e3       	ldi	r30, 0x34	; 52
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	48 2f       	mov	r20, r24
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <DIO_u8SetPinDirection+0x31a>
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	2a 95       	dec	r18
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <DIO_u8SetPinDirection+0x316>
    1f04:	80 95       	com	r24
    1f06:	84 23       	and	r24, r20
    1f08:	8c 93       	st	X, r24
				SET_BIT(PORTC_REG, u8_PinNum);
    1f0a:	a5 e3       	ldi	r26, 0x35	; 53
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e5 e3       	ldi	r30, 0x35	; 53
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	48 2f       	mov	r20, r24
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	02 2e       	mov	r0, r18
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <DIO_u8SetPinDirection+0x342>
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	0a 94       	dec	r0
    1f2a:	e2 f7       	brpl	.-8      	; 0x1f24 <DIO_u8SetPinDirection+0x33e>
    1f2c:	84 2b       	or	r24, r20
    1f2e:	8c 93       	st	X, r24
    1f30:	9a c0       	rjmp	.+308    	; 0x2066 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRC_REG, u8_PinNum);
    1f32:	a4 e3       	ldi	r26, 0x34	; 52
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e4 e3       	ldi	r30, 0x34	; 52
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	48 2f       	mov	r20, r24
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	02 2e       	mov	r0, r18
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <DIO_u8SetPinDirection+0x36a>
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	0a 94       	dec	r0
    1f52:	e2 f7       	brpl	.-8      	; 0x1f4c <DIO_u8SetPinDirection+0x366>
    1f54:	84 2b       	or	r24, r20
    1f56:	8c 93       	st	X, r24
    1f58:	86 c0       	rjmp	.+268    	; 0x2066 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    1f5a:	19 82       	std	Y+1, r1	; 0x01
    1f5c:	84 c0       	rjmp	.+264    	; 0x2066 <DIO_u8SetPinDirection+0x480>
			}
			break;
		case PORTD:
			switch (u8_PinDir) {
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	3e 83       	std	Y+6, r19	; 0x06
    1f66:	2d 83       	std	Y+5, r18	; 0x05
    1f68:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	91 05       	cpc	r25, r1
    1f70:	99 f1       	breq	.+102    	; 0x1fd8 <DIO_u8SetPinDirection+0x3f2>
    1f72:	2d 81       	ldd	r18, Y+5	; 0x05
    1f74:	3e 81       	ldd	r19, Y+6	; 0x06
    1f76:	22 30       	cpi	r18, 0x02	; 2
    1f78:	31 05       	cpc	r19, r1
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <DIO_u8SetPinDirection+0x398>
    1f7c:	5b c0       	rjmp	.+182    	; 0x2034 <DIO_u8SetPinDirection+0x44e>
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	9e 81       	ldd	r25, Y+6	; 0x06
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	09 f0       	breq	.+2      	; 0x1f88 <DIO_u8SetPinDirection+0x3a2>
    1f86:	6a c0       	rjmp	.+212    	; 0x205c <DIO_u8SetPinDirection+0x476>
			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRD_REG, u8_PinNum);
    1f88:	a1 e3       	ldi	r26, 0x31	; 49
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e1 e3       	ldi	r30, 0x31	; 49
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	48 2f       	mov	r20, r24
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <DIO_u8SetPinDirection+0x3be>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	2a 95       	dec	r18
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <DIO_u8SetPinDirection+0x3ba>
    1fa8:	80 95       	com	r24
    1faa:	84 23       	and	r24, r20
    1fac:	8c 93       	st	X, r24
				CLR_BIT(PORTA_REG, u8_PinNum);
    1fae:	ab e3       	ldi	r26, 0x3B	; 59
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	eb e3       	ldi	r30, 0x3B	; 59
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	48 2f       	mov	r20, r24
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	02 2e       	mov	r0, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <DIO_u8SetPinDirection+0x3e6>
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	0a 94       	dec	r0
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <DIO_u8SetPinDirection+0x3e2>
    1fd0:	80 95       	com	r24
    1fd2:	84 23       	and	r24, r20
    1fd4:	8c 93       	st	X, r24
    1fd6:	47 c0       	rjmp	.+142    	; 0x2066 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    1fd8:	a0 e5       	ldi	r26, 0x50	; 80
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e0 e5       	ldi	r30, 0x50	; 80
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8b 7f       	andi	r24, 0xFB	; 251
    1fe4:	8c 93       	st	X, r24
				CLR_BIT(DDRD_REG, u8_PinNum);
    1fe6:	a1 e3       	ldi	r26, 0x31	; 49
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e1 e3       	ldi	r30, 0x31	; 49
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	48 2f       	mov	r20, r24
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <DIO_u8SetPinDirection+0x41c>
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	2a 95       	dec	r18
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <DIO_u8SetPinDirection+0x418>
    2006:	80 95       	com	r24
    2008:	84 23       	and	r24, r20
    200a:	8c 93       	st	X, r24
				SET_BIT(PORTD_REG, u8_PinNum);
    200c:	a2 e3       	ldi	r26, 0x32	; 50
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e2 e3       	ldi	r30, 0x32	; 50
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	48 2f       	mov	r20, r24
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	02 2e       	mov	r0, r18
    2024:	02 c0       	rjmp	.+4      	; 0x202a <DIO_u8SetPinDirection+0x444>
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	0a 94       	dec	r0
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <DIO_u8SetPinDirection+0x440>
    202e:	84 2b       	or	r24, r20
    2030:	8c 93       	st	X, r24
    2032:	19 c0       	rjmp	.+50     	; 0x2066 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRD_REG, u8_PinNum);
    2034:	a1 e3       	ldi	r26, 0x31	; 49
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e1 e3       	ldi	r30, 0x31	; 49
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	48 2f       	mov	r20, r24
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	02 2e       	mov	r0, r18
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <DIO_u8SetPinDirection+0x46c>
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	0a 94       	dec	r0
    2054:	e2 f7       	brpl	.-8      	; 0x204e <DIO_u8SetPinDirection+0x468>
    2056:	84 2b       	or	r24, r20
    2058:	8c 93       	st	X, r24
    205a:	05 c0       	rjmp	.+10     	; 0x2066 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    205c:	19 82       	std	Y+1, r1	; 0x01
    205e:	03 c0       	rjmp	.+6      	; 0x2066 <DIO_u8SetPinDirection+0x480>
			}
			break;
		default:
			// If the input port is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    2060:	19 82       	std	Y+1, r1	; 0x01
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <DIO_u8SetPinDirection+0x480>
		}
	} else {
		// If the input port or input pin is not suitable return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    2064:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorState;
    2066:	89 81       	ldd	r24, Y+1	; 0x01
}
    2068:	2e 96       	adiw	r28, 0x0e	; 14
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <DIO_u8SetPinData>:

// function to assign value to pin 
uint8_t DIO_u8SetPinData(DIOPort_t u8_PortName, DIOPin_t u8_PinNum,
		DIODir_t u8_PinValue) {
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	2e 97       	sbiw	r28, 0x0e	; 14
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	8a 83       	std	Y+2, r24	; 0x02
    2090:	6b 83       	std	Y+3, r22	; 0x03
    2092:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	89 83       	std	Y+1, r24	; 0x01
	if (u8_PinNum < DIO_PINS_NUMBER) {
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	88 30       	cpi	r24, 0x08	; 8
    209c:	08 f0       	brcs	.+2      	; 0x20a0 <DIO_u8SetPinData+0x26>
    209e:	06 c1       	rjmp	.+524    	; 0x22ac <DIO_u8SetPinData+0x232>
		/*Check which port */
		switch (u8_PortName) {
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	3e 87       	std	Y+14, r19	; 0x0e
    20a8:	2d 87       	std	Y+13, r18	; 0x0d
    20aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	91 05       	cpc	r25, r1
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <DIO_u8SetPinData+0x3c>
    20b4:	50 c0       	rjmp	.+160    	; 0x2156 <DIO_u8SetPinData+0xdc>
    20b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    20b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    20ba:	22 30       	cpi	r18, 0x02	; 2
    20bc:	31 05       	cpc	r19, r1
    20be:	2c f4       	brge	.+10     	; 0x20ca <DIO_u8SetPinData+0x50>
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	71 f0       	breq	.+28     	; 0x20e4 <DIO_u8SetPinData+0x6a>
    20c8:	f2 c0       	rjmp	.+484    	; 0x22ae <DIO_u8SetPinData+0x234>
    20ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    20cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    20ce:	22 30       	cpi	r18, 0x02	; 2
    20d0:	31 05       	cpc	r19, r1
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <DIO_u8SetPinData+0x5c>
    20d4:	79 c0       	rjmp	.+242    	; 0x21c8 <DIO_u8SetPinData+0x14e>
    20d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20da:	83 30       	cpi	r24, 0x03	; 3
    20dc:	91 05       	cpc	r25, r1
    20de:	09 f4       	brne	.+2      	; 0x20e2 <DIO_u8SetPinData+0x68>
    20e0:	ac c0       	rjmp	.+344    	; 0x223a <DIO_u8SetPinData+0x1c0>
    20e2:	e5 c0       	rjmp	.+458    	; 0x22ae <DIO_u8SetPinData+0x234>
		case PORTA:
			switch (u8_PinValue) {
    20e4:	8c 81       	ldd	r24, Y+4	; 0x04
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	3c 87       	std	Y+12, r19	; 0x0c
    20ec:	2b 87       	std	Y+11, r18	; 0x0b
    20ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    20f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	c9 f0       	breq	.+50     	; 0x2128 <DIO_u8SetPinData+0xae>
    20f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    20f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    20fa:	21 30       	cpi	r18, 0x01	; 1
    20fc:	31 05       	cpc	r19, r1
    20fe:	49 f5       	brne	.+82     	; 0x2152 <DIO_u8SetPinData+0xd8>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTA_REG, u8_PinNum);
    2100:	ab e3       	ldi	r26, 0x3B	; 59
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	eb e3       	ldi	r30, 0x3B	; 59
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	48 2f       	mov	r20, r24
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	02 2e       	mov	r0, r18
    2118:	02 c0       	rjmp	.+4      	; 0x211e <DIO_u8SetPinData+0xa4>
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	0a 94       	dec	r0
    2120:	e2 f7       	brpl	.-8      	; 0x211a <DIO_u8SetPinData+0xa0>
    2122:	84 2b       	or	r24, r20
    2124:	8c 93       	st	X, r24
    2126:	c3 c0       	rjmp	.+390    	; 0x22ae <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTA_REG, u8_PinNum);
    2128:	ab e3       	ldi	r26, 0x3B	; 59
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	eb e3       	ldi	r30, 0x3B	; 59
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	48 2f       	mov	r20, r24
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	02 2e       	mov	r0, r18
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <DIO_u8SetPinData+0xcc>
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	0a 94       	dec	r0
    2148:	e2 f7       	brpl	.-8      	; 0x2142 <DIO_u8SetPinData+0xc8>
    214a:	80 95       	com	r24
    214c:	84 23       	and	r24, r20
    214e:	8c 93       	st	X, r24
    2150:	ae c0       	rjmp	.+348    	; 0x22ae <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    2152:	19 82       	std	Y+1, r1	; 0x01
    2154:	ac c0       	rjmp	.+344    	; 0x22ae <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTB:
			switch (u8_PinValue) {
    2156:	8c 81       	ldd	r24, Y+4	; 0x04
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	3a 87       	std	Y+10, r19	; 0x0a
    215e:	29 87       	std	Y+9, r18	; 0x09
    2160:	89 85       	ldd	r24, Y+9	; 0x09
    2162:	9a 85       	ldd	r25, Y+10	; 0x0a
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	c9 f0       	breq	.+50     	; 0x219a <DIO_u8SetPinData+0x120>
    2168:	29 85       	ldd	r18, Y+9	; 0x09
    216a:	3a 85       	ldd	r19, Y+10	; 0x0a
    216c:	21 30       	cpi	r18, 0x01	; 1
    216e:	31 05       	cpc	r19, r1
    2170:	49 f5       	brne	.+82     	; 0x21c4 <DIO_u8SetPinData+0x14a>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTB_REG, u8_PinNum);
    2172:	a8 e3       	ldi	r26, 0x38	; 56
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e8 e3       	ldi	r30, 0x38	; 56
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	48 2f       	mov	r20, r24
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	02 2e       	mov	r0, r18
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <DIO_u8SetPinData+0x116>
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	0a 94       	dec	r0
    2192:	e2 f7       	brpl	.-8      	; 0x218c <DIO_u8SetPinData+0x112>
    2194:	84 2b       	or	r24, r20
    2196:	8c 93       	st	X, r24
    2198:	8a c0       	rjmp	.+276    	; 0x22ae <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTB_REG, u8_PinNum);
    219a:	a8 e3       	ldi	r26, 0x38	; 56
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e8 e3       	ldi	r30, 0x38	; 56
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	48 2f       	mov	r20, r24
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	02 2e       	mov	r0, r18
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <DIO_u8SetPinData+0x13e>
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	0a 94       	dec	r0
    21ba:	e2 f7       	brpl	.-8      	; 0x21b4 <DIO_u8SetPinData+0x13a>
    21bc:	80 95       	com	r24
    21be:	84 23       	and	r24, r20
    21c0:	8c 93       	st	X, r24
    21c2:	75 c0       	rjmp	.+234    	; 0x22ae <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    21c4:	19 82       	std	Y+1, r1	; 0x01
    21c6:	73 c0       	rjmp	.+230    	; 0x22ae <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTC:
			switch (u8_PinValue) {
    21c8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	38 87       	std	Y+8, r19	; 0x08
    21d0:	2f 83       	std	Y+7, r18	; 0x07
    21d2:	8f 81       	ldd	r24, Y+7	; 0x07
    21d4:	98 85       	ldd	r25, Y+8	; 0x08
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	c9 f0       	breq	.+50     	; 0x220c <DIO_u8SetPinData+0x192>
    21da:	2f 81       	ldd	r18, Y+7	; 0x07
    21dc:	38 85       	ldd	r19, Y+8	; 0x08
    21de:	21 30       	cpi	r18, 0x01	; 1
    21e0:	31 05       	cpc	r19, r1
    21e2:	49 f5       	brne	.+82     	; 0x2236 <DIO_u8SetPinData+0x1bc>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTC_REG, u8_PinNum);
    21e4:	a5 e3       	ldi	r26, 0x35	; 53
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e5 e3       	ldi	r30, 0x35	; 53
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	48 2f       	mov	r20, r24
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	02 2e       	mov	r0, r18
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <DIO_u8SetPinData+0x188>
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	0a 94       	dec	r0
    2204:	e2 f7       	brpl	.-8      	; 0x21fe <DIO_u8SetPinData+0x184>
    2206:	84 2b       	or	r24, r20
    2208:	8c 93       	st	X, r24
    220a:	51 c0       	rjmp	.+162    	; 0x22ae <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTC_REG, u8_PinNum);
    220c:	a5 e3       	ldi	r26, 0x35	; 53
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e5 e3       	ldi	r30, 0x35	; 53
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	48 2f       	mov	r20, r24
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	02 2e       	mov	r0, r18
    2224:	02 c0       	rjmp	.+4      	; 0x222a <DIO_u8SetPinData+0x1b0>
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	0a 94       	dec	r0
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <DIO_u8SetPinData+0x1ac>
    222e:	80 95       	com	r24
    2230:	84 23       	and	r24, r20
    2232:	8c 93       	st	X, r24
    2234:	3c c0       	rjmp	.+120    	; 0x22ae <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    2236:	19 82       	std	Y+1, r1	; 0x01
    2238:	3a c0       	rjmp	.+116    	; 0x22ae <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTD:
			switch (u8_PinValue) {
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	3e 83       	std	Y+6, r19	; 0x06
    2242:	2d 83       	std	Y+5, r18	; 0x05
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	9e 81       	ldd	r25, Y+6	; 0x06
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	c9 f0       	breq	.+50     	; 0x227e <DIO_u8SetPinData+0x204>
    224c:	2d 81       	ldd	r18, Y+5	; 0x05
    224e:	3e 81       	ldd	r19, Y+6	; 0x06
    2250:	21 30       	cpi	r18, 0x01	; 1
    2252:	31 05       	cpc	r19, r1
    2254:	49 f5       	brne	.+82     	; 0x22a8 <DIO_u8SetPinData+0x22e>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTD_REG, u8_PinNum);
    2256:	a2 e3       	ldi	r26, 0x32	; 50
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e2 e3       	ldi	r30, 0x32	; 50
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	48 2f       	mov	r20, r24
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	02 2e       	mov	r0, r18
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <DIO_u8SetPinData+0x1fa>
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	0a 94       	dec	r0
    2276:	e2 f7       	brpl	.-8      	; 0x2270 <DIO_u8SetPinData+0x1f6>
    2278:	84 2b       	or	r24, r20
    227a:	8c 93       	st	X, r24
    227c:	18 c0       	rjmp	.+48     	; 0x22ae <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTD_REG, u8_PinNum);
    227e:	a2 e3       	ldi	r26, 0x32	; 50
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	e2 e3       	ldi	r30, 0x32	; 50
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	48 2f       	mov	r20, r24
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	02 2e       	mov	r0, r18
    2296:	02 c0       	rjmp	.+4      	; 0x229c <DIO_u8SetPinData+0x222>
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	0a 94       	dec	r0
    229e:	e2 f7       	brpl	.-8      	; 0x2298 <DIO_u8SetPinData+0x21e>
    22a0:	80 95       	com	r24
    22a2:	84 23       	and	r24, r20
    22a4:	8c 93       	st	X, r24
    22a6:	03 c0       	rjmp	.+6      	; 0x22ae <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    22a8:	19 82       	std	Y+1, r1	; 0x01
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <DIO_u8SetPinData+0x234>
			}
			break;
		}
	} else {
		// if not suitable port or pin state return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    22ac:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorState;
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b0:	2e 96       	adiw	r28, 0x0e	; 14
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <DIO_u8GetPinData>:

// function to read value on pin 
uint8_t DIO_u8GetPinData(DIOPort_t u8_PortName, DIOPin_t u8_PinNum,
		uint8_t* pu8_ReturnVar) {
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	27 97       	sbiw	r28, 0x07	; 7
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	8a 83       	std	Y+2, r24	; 0x02
    22d8:	6b 83       	std	Y+3, r22	; 0x03
    22da:	5d 83       	std	Y+5, r21	; 0x05
    22dc:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	89 83       	std	Y+1, r24	; 0x01

	if (u8_PinNum < DIO_PINS_NUMBER && pu8_ReturnVar != NULL) {
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	88 30       	cpi	r24, 0x08	; 8
    22e6:	08 f0       	brcs	.+2      	; 0x22ea <DIO_u8GetPinData+0x28>
    22e8:	78 c0       	rjmp	.+240    	; 0x23da <DIO_u8GetPinData+0x118>
    22ea:	8c 81       	ldd	r24, Y+4	; 0x04
    22ec:	9d 81       	ldd	r25, Y+5	; 0x05
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <DIO_u8GetPinData+0x32>
    22f2:	73 c0       	rjmp	.+230    	; 0x23da <DIO_u8GetPinData+0x118>
		switch (u8_PortName) {
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	3f 83       	std	Y+7, r19	; 0x07
    22fc:	2e 83       	std	Y+6, r18	; 0x06
    22fe:	4e 81       	ldd	r20, Y+6	; 0x06
    2300:	5f 81       	ldd	r21, Y+7	; 0x07
    2302:	41 30       	cpi	r20, 0x01	; 1
    2304:	51 05       	cpc	r21, r1
    2306:	59 f1       	breq	.+86     	; 0x235e <DIO_u8GetPinData+0x9c>
    2308:	8e 81       	ldd	r24, Y+6	; 0x06
    230a:	9f 81       	ldd	r25, Y+7	; 0x07
    230c:	82 30       	cpi	r24, 0x02	; 2
    230e:	91 05       	cpc	r25, r1
    2310:	34 f4       	brge	.+12     	; 0x231e <DIO_u8GetPinData+0x5c>
    2312:	2e 81       	ldd	r18, Y+6	; 0x06
    2314:	3f 81       	ldd	r19, Y+7	; 0x07
    2316:	21 15       	cp	r18, r1
    2318:	31 05       	cpc	r19, r1
    231a:	69 f0       	breq	.+26     	; 0x2336 <DIO_u8GetPinData+0x74>
    231c:	5c c0       	rjmp	.+184    	; 0x23d6 <DIO_u8GetPinData+0x114>
    231e:	4e 81       	ldd	r20, Y+6	; 0x06
    2320:	5f 81       	ldd	r21, Y+7	; 0x07
    2322:	42 30       	cpi	r20, 0x02	; 2
    2324:	51 05       	cpc	r21, r1
    2326:	79 f1       	breq	.+94     	; 0x2386 <DIO_u8GetPinData+0xc4>
    2328:	8e 81       	ldd	r24, Y+6	; 0x06
    232a:	9f 81       	ldd	r25, Y+7	; 0x07
    232c:	83 30       	cpi	r24, 0x03	; 3
    232e:	91 05       	cpc	r25, r1
    2330:	09 f4       	brne	.+2      	; 0x2334 <DIO_u8GetPinData+0x72>
    2332:	3d c0       	rjmp	.+122    	; 0x23ae <DIO_u8GetPinData+0xec>
    2334:	50 c0       	rjmp	.+160    	; 0x23d6 <DIO_u8GetPinData+0x114>
		// get bit value in register to variable depend on port and pin 
		case PORTA:
			*pu8_ReturnVar = GET_BIT(PINA_REG, u8_PinNum);
    2336:	e9 e3       	ldi	r30, 0x39	; 57
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	28 2f       	mov	r18, r24
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	88 2f       	mov	r24, r24
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	a9 01       	movw	r20, r18
    2348:	02 c0       	rjmp	.+4      	; 0x234e <DIO_u8GetPinData+0x8c>
    234a:	55 95       	asr	r21
    234c:	47 95       	ror	r20
    234e:	8a 95       	dec	r24
    2350:	e2 f7       	brpl	.-8      	; 0x234a <DIO_u8GetPinData+0x88>
    2352:	ca 01       	movw	r24, r20
    2354:	81 70       	andi	r24, 0x01	; 1
    2356:	ec 81       	ldd	r30, Y+4	; 0x04
    2358:	fd 81       	ldd	r31, Y+5	; 0x05
    235a:	80 83       	st	Z, r24
    235c:	3f c0       	rjmp	.+126    	; 0x23dc <DIO_u8GetPinData+0x11a>
			break;
		case PORTB:
			*pu8_ReturnVar = GET_BIT(PINB_REG, u8_PinNum);
    235e:	e6 e3       	ldi	r30, 0x36	; 54
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	88 2f       	mov	r24, r24
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	a9 01       	movw	r20, r18
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <DIO_u8GetPinData+0xb4>
    2372:	55 95       	asr	r21
    2374:	47 95       	ror	r20
    2376:	8a 95       	dec	r24
    2378:	e2 f7       	brpl	.-8      	; 0x2372 <DIO_u8GetPinData+0xb0>
    237a:	ca 01       	movw	r24, r20
    237c:	81 70       	andi	r24, 0x01	; 1
    237e:	ec 81       	ldd	r30, Y+4	; 0x04
    2380:	fd 81       	ldd	r31, Y+5	; 0x05
    2382:	80 83       	st	Z, r24
    2384:	2b c0       	rjmp	.+86     	; 0x23dc <DIO_u8GetPinData+0x11a>
			break;
		case PORTC:
			*pu8_ReturnVar = GET_BIT(PINC_REG, u8_PinNum);
    2386:	e3 e3       	ldi	r30, 0x33	; 51
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a9 01       	movw	r20, r18
    2398:	02 c0       	rjmp	.+4      	; 0x239e <DIO_u8GetPinData+0xdc>
    239a:	55 95       	asr	r21
    239c:	47 95       	ror	r20
    239e:	8a 95       	dec	r24
    23a0:	e2 f7       	brpl	.-8      	; 0x239a <DIO_u8GetPinData+0xd8>
    23a2:	ca 01       	movw	r24, r20
    23a4:	81 70       	andi	r24, 0x01	; 1
    23a6:	ec 81       	ldd	r30, Y+4	; 0x04
    23a8:	fd 81       	ldd	r31, Y+5	; 0x05
    23aa:	80 83       	st	Z, r24
    23ac:	17 c0       	rjmp	.+46     	; 0x23dc <DIO_u8GetPinData+0x11a>
			break;
		case PORTD:
			*pu8_ReturnVar = GET_BIT(PIND_REG, u8_PinNum);
    23ae:	e0 e3       	ldi	r30, 0x30	; 48
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a9 01       	movw	r20, r18
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <DIO_u8GetPinData+0x104>
    23c2:	55 95       	asr	r21
    23c4:	47 95       	ror	r20
    23c6:	8a 95       	dec	r24
    23c8:	e2 f7       	brpl	.-8      	; 0x23c2 <DIO_u8GetPinData+0x100>
    23ca:	ca 01       	movw	r24, r20
    23cc:	81 70       	andi	r24, 0x01	; 1
    23ce:	ec 81       	ldd	r30, Y+4	; 0x04
    23d0:	fd 81       	ldd	r31, Y+5	; 0x05
    23d2:	80 83       	st	Z, r24
    23d4:	03 c0       	rjmp	.+6      	; 0x23dc <DIO_u8GetPinData+0x11a>
			break;
		default:
			// if not suitable port return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    23d6:	19 82       	std	Y+1, r1	; 0x01
    23d8:	01 c0       	rjmp	.+2      	; 0x23dc <DIO_u8GetPinData+0x11a>
		}
	} else {
		// if return address not passed or not suitable pin number return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    23da:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    23de:	27 96       	adiw	r28, 0x07	; 7
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <DIO_u8SetPortDirection>:

// function to set direction of pin
uint8_t DIO_u8SetPortDirection(DIOPort_t u8_PortName, DIODir_t u8_Dir) {
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	2d 97       	sbiw	r28, 0x0d	; 13
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	8a 83       	std	Y+2, r24	; 0x02
    2406:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	89 83       	std	Y+1, r24	; 0x01
	switch (u8_PortName) {
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	3d 87       	std	Y+13, r19	; 0x0d
    2414:	2c 87       	std	Y+12, r18	; 0x0c
    2416:	8c 85       	ldd	r24, Y+12	; 0x0c
    2418:	9d 85       	ldd	r25, Y+13	; 0x0d
    241a:	81 30       	cpi	r24, 0x01	; 1
    241c:	91 05       	cpc	r25, r1
    241e:	09 f4       	brne	.+2      	; 0x2422 <DIO_u8SetPortDirection+0x32>
    2420:	4b c0       	rjmp	.+150    	; 0x24b8 <DIO_u8SetPortDirection+0xc8>
    2422:	2c 85       	ldd	r18, Y+12	; 0x0c
    2424:	3d 85       	ldd	r19, Y+13	; 0x0d
    2426:	22 30       	cpi	r18, 0x02	; 2
    2428:	31 05       	cpc	r19, r1
    242a:	2c f4       	brge	.+10     	; 0x2436 <DIO_u8SetPortDirection+0x46>
    242c:	8c 85       	ldd	r24, Y+12	; 0x0c
    242e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	71 f0       	breq	.+28     	; 0x2450 <DIO_u8SetPortDirection+0x60>
    2434:	dd c0       	rjmp	.+442    	; 0x25f0 <DIO_u8SetPortDirection+0x200>
    2436:	2c 85       	ldd	r18, Y+12	; 0x0c
    2438:	3d 85       	ldd	r19, Y+13	; 0x0d
    243a:	22 30       	cpi	r18, 0x02	; 2
    243c:	31 05       	cpc	r19, r1
    243e:	09 f4       	brne	.+2      	; 0x2442 <DIO_u8SetPortDirection+0x52>
    2440:	6f c0       	rjmp	.+222    	; 0x2520 <DIO_u8SetPortDirection+0x130>
    2442:	8c 85       	ldd	r24, Y+12	; 0x0c
    2444:	9d 85       	ldd	r25, Y+13	; 0x0d
    2446:	83 30       	cpi	r24, 0x03	; 3
    2448:	91 05       	cpc	r25, r1
    244a:	09 f4       	brne	.+2      	; 0x244e <DIO_u8SetPortDirection+0x5e>
    244c:	9d c0       	rjmp	.+314    	; 0x2588 <DIO_u8SetPortDirection+0x198>
    244e:	d0 c0       	rjmp	.+416    	; 0x25f0 <DIO_u8SetPortDirection+0x200>
	case PORTA:
		switch (u8_Dir) {
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	3b 87       	std	Y+11, r19	; 0x0b
    2458:	2a 87       	std	Y+10, r18	; 0x0a
    245a:	8a 85       	ldd	r24, Y+10	; 0x0a
    245c:	9b 85       	ldd	r25, Y+11	; 0x0b
    245e:	81 30       	cpi	r24, 0x01	; 1
    2460:	91 05       	cpc	r25, r1
    2462:	a1 f0       	breq	.+40     	; 0x248c <DIO_u8SetPortDirection+0x9c>
    2464:	2a 85       	ldd	r18, Y+10	; 0x0a
    2466:	3b 85       	ldd	r19, Y+11	; 0x0b
    2468:	22 30       	cpi	r18, 0x02	; 2
    246a:	31 05       	cpc	r19, r1
    246c:	f1 f0       	breq	.+60     	; 0x24aa <DIO_u8SetPortDirection+0xba>
    246e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2470:	9b 85       	ldd	r25, Y+11	; 0x0b
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	f9 f4       	brne	.+62     	; 0x24b4 <DIO_u8SetPortDirection+0xc4>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRA_REG = DIO_PORT_LOW;
    2476:	ea e3       	ldi	r30, 0x3A	; 58
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    247c:	a0 e5       	ldi	r26, 0x50	; 80
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e0 e5       	ldi	r30, 0x50	; 80
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	84 60       	ori	r24, 0x04	; 4
    2488:	8c 93       	st	X, r24
    248a:	b3 c0       	rjmp	.+358    	; 0x25f2 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    248c:	a0 e5       	ldi	r26, 0x50	; 80
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e0 e5       	ldi	r30, 0x50	; 80
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	8b 7f       	andi	r24, 0xFB	; 251
    2498:	8c 93       	st	X, r24
			DDRA_REG = DIO_PORT_LOW;
    249a:	ea e3       	ldi	r30, 0x3A	; 58
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	10 82       	st	Z, r1
			PORTA_REG = DIO_PORT_HIGH;
    24a0:	eb e3       	ldi	r30, 0x3B	; 59
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	80 83       	st	Z, r24
    24a8:	a4 c0       	rjmp	.+328    	; 0x25f2 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRA_REG = DIO_PORT_HIGH;
    24aa:	ea e3       	ldi	r30, 0x3A	; 58
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	8f ef       	ldi	r24, 0xFF	; 255
    24b0:	80 83       	st	Z, r24
    24b2:	9f c0       	rjmp	.+318    	; 0x25f2 <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    24b4:	19 82       	std	Y+1, r1	; 0x01
    24b6:	9d c0       	rjmp	.+314    	; 0x25f2 <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTB:
		switch (u8_Dir) {
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	39 87       	std	Y+9, r19	; 0x09
    24c0:	28 87       	std	Y+8, r18	; 0x08
    24c2:	88 85       	ldd	r24, Y+8	; 0x08
    24c4:	99 85       	ldd	r25, Y+9	; 0x09
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	91 05       	cpc	r25, r1
    24ca:	a1 f0       	breq	.+40     	; 0x24f4 <DIO_u8SetPortDirection+0x104>
    24cc:	28 85       	ldd	r18, Y+8	; 0x08
    24ce:	39 85       	ldd	r19, Y+9	; 0x09
    24d0:	22 30       	cpi	r18, 0x02	; 2
    24d2:	31 05       	cpc	r19, r1
    24d4:	f1 f0       	breq	.+60     	; 0x2512 <DIO_u8SetPortDirection+0x122>
    24d6:	88 85       	ldd	r24, Y+8	; 0x08
    24d8:	99 85       	ldd	r25, Y+9	; 0x09
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	f9 f4       	brne	.+62     	; 0x251c <DIO_u8SetPortDirection+0x12c>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRB_REG = DIO_PORT_LOW;
    24de:	e7 e3       	ldi	r30, 0x37	; 55
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    24e4:	a0 e5       	ldi	r26, 0x50	; 80
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e0 e5       	ldi	r30, 0x50	; 80
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	84 60       	ori	r24, 0x04	; 4
    24f0:	8c 93       	st	X, r24
    24f2:	7f c0       	rjmp	.+254    	; 0x25f2 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    24f4:	a0 e5       	ldi	r26, 0x50	; 80
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e0 e5       	ldi	r30, 0x50	; 80
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	8b 7f       	andi	r24, 0xFB	; 251
    2500:	8c 93       	st	X, r24
			DDRB_REG = DIO_PORT_LOW;
    2502:	e7 e3       	ldi	r30, 0x37	; 55
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	10 82       	st	Z, r1
			PORTB_REG = DIO_PORT_HIGH;
    2508:	e8 e3       	ldi	r30, 0x38	; 56
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	8f ef       	ldi	r24, 0xFF	; 255
    250e:	80 83       	st	Z, r24
    2510:	70 c0       	rjmp	.+224    	; 0x25f2 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRB_REG = DIO_PORT_HIGH;
    2512:	e7 e3       	ldi	r30, 0x37	; 55
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	8f ef       	ldi	r24, 0xFF	; 255
    2518:	80 83       	st	Z, r24
    251a:	6b c0       	rjmp	.+214    	; 0x25f2 <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    251c:	19 82       	std	Y+1, r1	; 0x01
    251e:	69 c0       	rjmp	.+210    	; 0x25f2 <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTC:
		switch (u8_Dir) {
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	3f 83       	std	Y+7, r19	; 0x07
    2528:	2e 83       	std	Y+6, r18	; 0x06
    252a:	8e 81       	ldd	r24, Y+6	; 0x06
    252c:	9f 81       	ldd	r25, Y+7	; 0x07
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	91 05       	cpc	r25, r1
    2532:	a1 f0       	breq	.+40     	; 0x255c <DIO_u8SetPortDirection+0x16c>
    2534:	2e 81       	ldd	r18, Y+6	; 0x06
    2536:	3f 81       	ldd	r19, Y+7	; 0x07
    2538:	22 30       	cpi	r18, 0x02	; 2
    253a:	31 05       	cpc	r19, r1
    253c:	f1 f0       	breq	.+60     	; 0x257a <DIO_u8SetPortDirection+0x18a>
    253e:	8e 81       	ldd	r24, Y+6	; 0x06
    2540:	9f 81       	ldd	r25, Y+7	; 0x07
    2542:	00 97       	sbiw	r24, 0x00	; 0
    2544:	f9 f4       	brne	.+62     	; 0x2584 <DIO_u8SetPortDirection+0x194>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRC_REG = DIO_PORT_LOW;
    2546:	e4 e3       	ldi	r30, 0x34	; 52
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    254c:	a0 e5       	ldi	r26, 0x50	; 80
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e0 e5       	ldi	r30, 0x50	; 80
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	84 60       	ori	r24, 0x04	; 4
    2558:	8c 93       	st	X, r24
    255a:	4b c0       	rjmp	.+150    	; 0x25f2 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    255c:	a0 e5       	ldi	r26, 0x50	; 80
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e0 e5       	ldi	r30, 0x50	; 80
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	8b 7f       	andi	r24, 0xFB	; 251
    2568:	8c 93       	st	X, r24
			DDRC_REG = DIO_PORT_LOW;
    256a:	e4 e3       	ldi	r30, 0x34	; 52
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	10 82       	st	Z, r1
			PORTC_REG = DIO_PORT_HIGH;
    2570:	e5 e3       	ldi	r30, 0x35	; 53
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	8f ef       	ldi	r24, 0xFF	; 255
    2576:	80 83       	st	Z, r24
    2578:	3c c0       	rjmp	.+120    	; 0x25f2 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRC_REG = DIO_PORT_HIGH;
    257a:	e4 e3       	ldi	r30, 0x34	; 52
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	8f ef       	ldi	r24, 0xFF	; 255
    2580:	80 83       	st	Z, r24
    2582:	37 c0       	rjmp	.+110    	; 0x25f2 <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    2584:	19 82       	std	Y+1, r1	; 0x01
    2586:	35 c0       	rjmp	.+106    	; 0x25f2 <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTD:
		switch (u8_Dir) {
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	3d 83       	std	Y+5, r19	; 0x05
    2590:	2c 83       	std	Y+4, r18	; 0x04
    2592:	8c 81       	ldd	r24, Y+4	; 0x04
    2594:	9d 81       	ldd	r25, Y+5	; 0x05
    2596:	81 30       	cpi	r24, 0x01	; 1
    2598:	91 05       	cpc	r25, r1
    259a:	a1 f0       	breq	.+40     	; 0x25c4 <DIO_u8SetPortDirection+0x1d4>
    259c:	2c 81       	ldd	r18, Y+4	; 0x04
    259e:	3d 81       	ldd	r19, Y+5	; 0x05
    25a0:	22 30       	cpi	r18, 0x02	; 2
    25a2:	31 05       	cpc	r19, r1
    25a4:	f1 f0       	breq	.+60     	; 0x25e2 <DIO_u8SetPortDirection+0x1f2>
    25a6:	8c 81       	ldd	r24, Y+4	; 0x04
    25a8:	9d 81       	ldd	r25, Y+5	; 0x05
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	f9 f4       	brne	.+62     	; 0x25ec <DIO_u8SetPortDirection+0x1fc>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRD_REG = DIO_PORT_LOW;
    25ae:	e1 e3       	ldi	r30, 0x31	; 49
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    25b4:	a0 e5       	ldi	r26, 0x50	; 80
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e0 e5       	ldi	r30, 0x50	; 80
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	84 60       	ori	r24, 0x04	; 4
    25c0:	8c 93       	st	X, r24
    25c2:	17 c0       	rjmp	.+46     	; 0x25f2 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    25c4:	a0 e5       	ldi	r26, 0x50	; 80
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e0 e5       	ldi	r30, 0x50	; 80
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	8b 7f       	andi	r24, 0xFB	; 251
    25d0:	8c 93       	st	X, r24
			DDRD_REG = DIO_PORT_LOW;
    25d2:	e1 e3       	ldi	r30, 0x31	; 49
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	10 82       	st	Z, r1
			PORTD_REG = DIO_PORT_HIGH;
    25d8:	e2 e3       	ldi	r30, 0x32	; 50
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	8f ef       	ldi	r24, 0xFF	; 255
    25de:	80 83       	st	Z, r24
    25e0:	08 c0       	rjmp	.+16     	; 0x25f2 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRD_REG = DIO_PORT_HIGH;
    25e2:	e1 e3       	ldi	r30, 0x31	; 49
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	80 83       	st	Z, r24
    25ea:	03 c0       	rjmp	.+6      	; 0x25f2 <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    25ec:	19 82       	std	Y+1, r1	; 0x01
    25ee:	01 c0       	rjmp	.+2      	; 0x25f2 <DIO_u8SetPortDirection+0x202>
		}
		break;
	default:
		// If the input port is not one of the above cases return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    25f0:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    25f4:	2d 96       	adiw	r28, 0x0d	; 13
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <DIO_u8SetPortData>:

// function to assign value to port
uint8_t DIO_u8SetPortData(DIOPort_t u8_PortName, DIODir_t u8_Value) {
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <DIO_u8SetPortData+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <DIO_u8SetPortData+0x8>
    260e:	0f 92       	push	r0
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	8a 83       	std	Y+2, r24	; 0x02
    2616:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	89 83       	std	Y+1, r24	; 0x01
	if (u8_Value == DIO_PORT_HIGH || u8_Value == DIO_PORT_LOW) {
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	8f 3f       	cpi	r24, 0xFF	; 255
    2620:	19 f0       	breq	.+6      	; 0x2628 <DIO_u8SetPortData+0x22>
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	88 23       	and	r24, r24
    2626:	a9 f5       	brne	.+106    	; 0x2692 <DIO_u8SetPortData+0x8c>
		// check if value of port HIGH or LOW and assign it to the port 
		switch (u8_PortName) {
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	28 2f       	mov	r18, r24
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	3d 83       	std	Y+5, r19	; 0x05
    2630:	2c 83       	std	Y+4, r18	; 0x04
    2632:	8c 81       	ldd	r24, Y+4	; 0x04
    2634:	9d 81       	ldd	r25, Y+5	; 0x05
    2636:	81 30       	cpi	r24, 0x01	; 1
    2638:	91 05       	cpc	r25, r1
    263a:	d1 f0       	breq	.+52     	; 0x2670 <DIO_u8SetPortData+0x6a>
    263c:	2c 81       	ldd	r18, Y+4	; 0x04
    263e:	3d 81       	ldd	r19, Y+5	; 0x05
    2640:	22 30       	cpi	r18, 0x02	; 2
    2642:	31 05       	cpc	r19, r1
    2644:	2c f4       	brge	.+10     	; 0x2650 <DIO_u8SetPortData+0x4a>
    2646:	8c 81       	ldd	r24, Y+4	; 0x04
    2648:	9d 81       	ldd	r25, Y+5	; 0x05
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	61 f0       	breq	.+24     	; 0x2666 <DIO_u8SetPortData+0x60>
    264e:	1f c0       	rjmp	.+62     	; 0x268e <DIO_u8SetPortData+0x88>
    2650:	2c 81       	ldd	r18, Y+4	; 0x04
    2652:	3d 81       	ldd	r19, Y+5	; 0x05
    2654:	22 30       	cpi	r18, 0x02	; 2
    2656:	31 05       	cpc	r19, r1
    2658:	81 f0       	breq	.+32     	; 0x267a <DIO_u8SetPortData+0x74>
    265a:	8c 81       	ldd	r24, Y+4	; 0x04
    265c:	9d 81       	ldd	r25, Y+5	; 0x05
    265e:	83 30       	cpi	r24, 0x03	; 3
    2660:	91 05       	cpc	r25, r1
    2662:	81 f0       	breq	.+32     	; 0x2684 <DIO_u8SetPortData+0x7e>
    2664:	14 c0       	rjmp	.+40     	; 0x268e <DIO_u8SetPortData+0x88>
		case PORTA:
			PORTA_REG = u8_Value;
    2666:	eb e3       	ldi	r30, 0x3B	; 59
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	80 83       	st	Z, r24
    266e:	12 c0       	rjmp	.+36     	; 0x2694 <DIO_u8SetPortData+0x8e>
			break;
		case PORTB:
			PORTB_REG = u8_Value;
    2670:	e8 e3       	ldi	r30, 0x38	; 56
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	80 83       	st	Z, r24
    2678:	0d c0       	rjmp	.+26     	; 0x2694 <DIO_u8SetPortData+0x8e>
			break;
		case PORTC:
			PORTC_REG = u8_Value;
    267a:	e5 e3       	ldi	r30, 0x35	; 53
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	80 83       	st	Z, r24
    2682:	08 c0       	rjmp	.+16     	; 0x2694 <DIO_u8SetPortData+0x8e>
			break;
		case PORTD:
			PORTD_REG = u8_Value;
    2684:	e2 e3       	ldi	r30, 0x32	; 50
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	80 83       	st	Z, r24
    268c:	03 c0       	rjmp	.+6      	; 0x2694 <DIO_u8SetPortData+0x8e>
			break;
		default:
			// if input port is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    268e:	19 82       	std	Y+1, r1	; 0x01
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <DIO_u8SetPortData+0x8e>
		}
	} else {
		// if Value not HIGH or LOW return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    2692:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <DIO_u8GetPortData>:

// function to read value on port
uint8_t DIO_u8GetPortData(DIOPort_t u8_PortName, uint8_t* pu8_ReturnVar) {
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <DIO_u8GetPortData+0x6>
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <DIO_u8GetPortData+0x8>
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <DIO_u8GetPortData+0xa>
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	8a 83       	std	Y+2, r24	; 0x02
    26b6:	7c 83       	std	Y+4, r23	; 0x04
    26b8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	89 83       	std	Y+1, r24	; 0x01
	if (pu8_ReturnVar != NULL) {
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	9c 81       	ldd	r25, Y+4	; 0x04
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	e9 f1       	breq	.+122    	; 0x2740 <DIO_u8GetPortData+0x9a>
		// get port value in register to variable depend on port and pin 
		switch (u8_PortName) {
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	3e 83       	std	Y+6, r19	; 0x06
    26ce:	2d 83       	std	Y+5, r18	; 0x05
    26d0:	8d 81       	ldd	r24, Y+5	; 0x05
    26d2:	9e 81       	ldd	r25, Y+6	; 0x06
    26d4:	81 30       	cpi	r24, 0x01	; 1
    26d6:	91 05       	cpc	r25, r1
    26d8:	e1 f0       	breq	.+56     	; 0x2712 <DIO_u8GetPortData+0x6c>
    26da:	2d 81       	ldd	r18, Y+5	; 0x05
    26dc:	3e 81       	ldd	r19, Y+6	; 0x06
    26de:	22 30       	cpi	r18, 0x02	; 2
    26e0:	31 05       	cpc	r19, r1
    26e2:	2c f4       	brge	.+10     	; 0x26ee <DIO_u8GetPortData+0x48>
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	9e 81       	ldd	r25, Y+6	; 0x06
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	61 f0       	breq	.+24     	; 0x2704 <DIO_u8GetPortData+0x5e>
    26ec:	27 c0       	rjmp	.+78     	; 0x273c <DIO_u8GetPortData+0x96>
    26ee:	2d 81       	ldd	r18, Y+5	; 0x05
    26f0:	3e 81       	ldd	r19, Y+6	; 0x06
    26f2:	22 30       	cpi	r18, 0x02	; 2
    26f4:	31 05       	cpc	r19, r1
    26f6:	a1 f0       	breq	.+40     	; 0x2720 <DIO_u8GetPortData+0x7a>
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	83 30       	cpi	r24, 0x03	; 3
    26fe:	91 05       	cpc	r25, r1
    2700:	b1 f0       	breq	.+44     	; 0x272e <DIO_u8GetPortData+0x88>
    2702:	1c c0       	rjmp	.+56     	; 0x273c <DIO_u8GetPortData+0x96>
		case PORTA:
			*pu8_ReturnVar = PORTA_REG;
    2704:	eb e3       	ldi	r30, 0x3B	; 59
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	eb 81       	ldd	r30, Y+3	; 0x03
    270c:	fc 81       	ldd	r31, Y+4	; 0x04
    270e:	80 83       	st	Z, r24
    2710:	18 c0       	rjmp	.+48     	; 0x2742 <DIO_u8GetPortData+0x9c>
			break;
		case PORTB:
			*pu8_ReturnVar = PORTB_REG;
    2712:	e8 e3       	ldi	r30, 0x38	; 56
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	eb 81       	ldd	r30, Y+3	; 0x03
    271a:	fc 81       	ldd	r31, Y+4	; 0x04
    271c:	80 83       	st	Z, r24
    271e:	11 c0       	rjmp	.+34     	; 0x2742 <DIO_u8GetPortData+0x9c>
			break;
		case PORTC:
			*pu8_ReturnVar = PORTC_REG;
    2720:	e5 e3       	ldi	r30, 0x35	; 53
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	eb 81       	ldd	r30, Y+3	; 0x03
    2728:	fc 81       	ldd	r31, Y+4	; 0x04
    272a:	80 83       	st	Z, r24
    272c:	0a c0       	rjmp	.+20     	; 0x2742 <DIO_u8GetPortData+0x9c>
			break;
		case PORTD:
			*pu8_ReturnVar = PORTD_REG;
    272e:	e2 e3       	ldi	r30, 0x32	; 50
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	eb 81       	ldd	r30, Y+3	; 0x03
    2736:	fc 81       	ldd	r31, Y+4	; 0x04
    2738:	80 83       	st	Z, r24
    273a:	03 c0       	rjmp	.+6      	; 0x2742 <DIO_u8GetPortData+0x9c>
			break;
		default:
			// if not suitable port return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    273c:	19 82       	std	Y+1, r1	; 0x01
    273e:	01 c0       	rjmp	.+2      	; 0x2742 <DIO_u8GetPortData+0x9c>
		}
	} else {
		// if no address passed to function return error state NOK 
		u8ErrorState = STD_TYPES_NOK;
    2740:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    2742:	89 81       	ldd	r24, Y+1	; 0x01
}
    2744:	26 96       	adiw	r28, 0x06	; 6
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	08 95       	ret

00002756 <DIO_u8TogglePinData>:

// function to toggle pin state
uint8_t DIO_u8TogglePinData(DIOPort_t u8_PortName, DIOPin_t u8_PinNum) {
    2756:	df 93       	push	r29
    2758:	cf 93       	push	r28
    275a:	00 d0       	rcall	.+0      	; 0x275c <DIO_u8TogglePinData+0x6>
    275c:	00 d0       	rcall	.+0      	; 0x275e <DIO_u8TogglePinData+0x8>
    275e:	0f 92       	push	r0
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	8a 83       	std	Y+2, r24	; 0x02
    2766:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t u8ErrorState = STD_TYPES_OK;
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	89 83       	std	Y+1, r24	; 0x01
	switch (u8_PortName) {
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	3d 83       	std	Y+5, r19	; 0x05
    2774:	2c 83       	std	Y+4, r18	; 0x04
    2776:	8c 81       	ldd	r24, Y+4	; 0x04
    2778:	9d 81       	ldd	r25, Y+5	; 0x05
    277a:	81 30       	cpi	r24, 0x01	; 1
    277c:	91 05       	cpc	r25, r1
    277e:	49 f1       	breq	.+82     	; 0x27d2 <DIO_u8TogglePinData+0x7c>
    2780:	2c 81       	ldd	r18, Y+4	; 0x04
    2782:	3d 81       	ldd	r19, Y+5	; 0x05
    2784:	22 30       	cpi	r18, 0x02	; 2
    2786:	31 05       	cpc	r19, r1
    2788:	2c f4       	brge	.+10     	; 0x2794 <DIO_u8TogglePinData+0x3e>
    278a:	8c 81       	ldd	r24, Y+4	; 0x04
    278c:	9d 81       	ldd	r25, Y+5	; 0x05
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	61 f0       	breq	.+24     	; 0x27aa <DIO_u8TogglePinData+0x54>
    2792:	5b c0       	rjmp	.+182    	; 0x284a <DIO_u8TogglePinData+0xf4>
    2794:	2c 81       	ldd	r18, Y+4	; 0x04
    2796:	3d 81       	ldd	r19, Y+5	; 0x05
    2798:	22 30       	cpi	r18, 0x02	; 2
    279a:	31 05       	cpc	r19, r1
    279c:	71 f1       	breq	.+92     	; 0x27fa <DIO_u8TogglePinData+0xa4>
    279e:	8c 81       	ldd	r24, Y+4	; 0x04
    27a0:	9d 81       	ldd	r25, Y+5	; 0x05
    27a2:	83 30       	cpi	r24, 0x03	; 3
    27a4:	91 05       	cpc	r25, r1
    27a6:	e9 f1       	breq	.+122    	; 0x2822 <DIO_u8TogglePinData+0xcc>
    27a8:	50 c0       	rjmp	.+160    	; 0x284a <DIO_u8TogglePinData+0xf4>
	// toogle bit value depend on port and pin 
	case PORTA:
		Toggle_BIT(PORTA_REG, u8_PinNum);
    27aa:	ab e3       	ldi	r26, 0x3B	; 59
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	eb e3       	ldi	r30, 0x3B	; 59
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	48 2f       	mov	r20, r24
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	28 2f       	mov	r18, r24
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	02 2e       	mov	r0, r18
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <DIO_u8TogglePinData+0x72>
    27c4:	88 0f       	add	r24, r24
    27c6:	99 1f       	adc	r25, r25
    27c8:	0a 94       	dec	r0
    27ca:	e2 f7       	brpl	.-8      	; 0x27c4 <DIO_u8TogglePinData+0x6e>
    27cc:	84 27       	eor	r24, r20
    27ce:	8c 93       	st	X, r24
    27d0:	3d c0       	rjmp	.+122    	; 0x284c <DIO_u8TogglePinData+0xf6>
		break;
	case PORTB:
		Toggle_BIT(PORTB_REG, u8_PinNum);
    27d2:	a8 e3       	ldi	r26, 0x38	; 56
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e8 e3       	ldi	r30, 0x38	; 56
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	48 2f       	mov	r20, r24
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	28 2f       	mov	r18, r24
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	02 2e       	mov	r0, r18
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <DIO_u8TogglePinData+0x9a>
    27ec:	88 0f       	add	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	0a 94       	dec	r0
    27f2:	e2 f7       	brpl	.-8      	; 0x27ec <DIO_u8TogglePinData+0x96>
    27f4:	84 27       	eor	r24, r20
    27f6:	8c 93       	st	X, r24
    27f8:	29 c0       	rjmp	.+82     	; 0x284c <DIO_u8TogglePinData+0xf6>
		break;
	case PORTC:
		Toggle_BIT(PORTC_REG, u8_PinNum);
    27fa:	a5 e3       	ldi	r26, 0x35	; 53
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	e5 e3       	ldi	r30, 0x35	; 53
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	48 2f       	mov	r20, r24
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	28 2f       	mov	r18, r24
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	02 2e       	mov	r0, r18
    2812:	02 c0       	rjmp	.+4      	; 0x2818 <DIO_u8TogglePinData+0xc2>
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	0a 94       	dec	r0
    281a:	e2 f7       	brpl	.-8      	; 0x2814 <DIO_u8TogglePinData+0xbe>
    281c:	84 27       	eor	r24, r20
    281e:	8c 93       	st	X, r24
    2820:	15 c0       	rjmp	.+42     	; 0x284c <DIO_u8TogglePinData+0xf6>
		break;
	case PORTD:
		Toggle_BIT(PORTD_REG, u8_PinNum);
    2822:	a2 e3       	ldi	r26, 0x32	; 50
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e2 e3       	ldi	r30, 0x32	; 50
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	48 2f       	mov	r20, r24
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	02 2e       	mov	r0, r18
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <DIO_u8TogglePinData+0xea>
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	0a 94       	dec	r0
    2842:	e2 f7       	brpl	.-8      	; 0x283c <DIO_u8TogglePinData+0xe6>
    2844:	84 27       	eor	r24, r20
    2846:	8c 93       	st	X, r24
    2848:	01 c0       	rjmp	.+2      	; 0x284c <DIO_u8TogglePinData+0xf6>
		break;
	default:
		// if input port is not one of the above cases return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    284a:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    284c:	89 81       	ldd	r24, Y+1	; 0x01
}
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <TIMER0_u8Init>:

/*
 * brief: This function is used to initialize Timer 0 to use CTC mode and 64 prescaler
 * return: (output) the Error state of the function 0 if an error happens and 1 otherwise
 */
uint8_t TIMER0_u8Init(void) {
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG = (1 << WGM01) | (1 << CS01) | (1 << CS00);
    2866:	e3 e5       	ldi	r30, 0x53	; 83
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	8b e0       	ldi	r24, 0x0B	; 11
    286c:	80 83       	st	Z, r24
	return DELAY_OK;
    286e:	81 e0       	ldi	r24, 0x01	; 1
}
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <TIMER0_u8InterruptDelay>:
 * brief: This function is used to initialize an interrupt delay if the Timer isn't busy
 * param.: (input) the delay to be set in ms
 * param.: (input) a pointer to a function to be called when the delay is over
 * return: (output) the Error state of the function 0 if an error happens, 2 if the timer is busy and 1 otherwise
 */
uint8_t TIMER0_u8InterruptDelay(uint16_t delay, void (*fnCallBack)(void)) {
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	00 d0       	rcall	.+0      	; 0x287c <TIMER0_u8InterruptDelay+0x6>
    287c:	00 d0       	rcall	.+0      	; 0x287e <TIMER0_u8InterruptDelay+0x8>
    287e:	0f 92       	push	r0
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	9a 83       	std	Y+2, r25	; 0x02
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	7c 83       	std	Y+4, r23	; 0x04
    288a:	6b 83       	std	Y+3, r22	; 0x03
	if (delay_stat == DELAY_BUSY) {
    288c:	80 91 bb 01 	lds	r24, 0x01BB
    2890:	82 30       	cpi	r24, 0x02	; 2
    2892:	21 f4       	brne	.+8      	; 0x289c <TIMER0_u8InterruptDelay+0x26>
		return delay_stat;
    2894:	80 91 bb 01 	lds	r24, 0x01BB
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	29 c0       	rjmp	.+82     	; 0x28ee <TIMER0_u8InterruptDelay+0x78>
	}
	delay_stat = DELAY_BUSY;
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	80 93 bb 01 	sts	0x01BB, r24
	compare = delay;
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	9a 81       	ldd	r25, Y+2	; 0x02
    28a6:	90 93 da 01 	sts	0x01DA, r25
    28aa:	80 93 d9 01 	sts	0x01D9, r24
	if (fnCallBack != NULL) {
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	d9 f0       	breq	.+54     	; 0x28ec <TIMER0_u8InterruptDelay+0x76>
		delayCallBack = fnCallBack;
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ba:	90 93 de 01 	sts	0x01DE, r25
    28be:	80 93 dd 01 	sts	0x01DD, r24
		OCR0_REG = (F_CPU / PRESCALER);
    28c2:	ec e5       	ldi	r30, 0x5C	; 92
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	8d e7       	ldi	r24, 0x7D	; 125
    28c8:	80 83       	st	Z, r24
		SET_BIT(TIMSK_REG, OCIE0);
    28ca:	a9 e5       	ldi	r26, 0x59	; 89
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e9 e5       	ldi	r30, 0x59	; 89
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	82 60       	ori	r24, 0x02	; 2
    28d6:	8c 93       	st	X, r24
		SET_BIT(SREG_REG, I_BIT);
    28d8:	af e5       	ldi	r26, 0x5F	; 95
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	ef e5       	ldi	r30, 0x5F	; 95
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	80 68       	ori	r24, 0x80	; 128
    28e4:	8c 93       	st	X, r24
		return DELAY_OK;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	01 c0       	rjmp	.+2      	; 0x28ee <TIMER0_u8InterruptDelay+0x78>
	} else {
		return DELAY_ERR;
    28ec:	1d 82       	std	Y+5, r1	; 0x05
    28ee:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	08 95       	ret

00002900 <TIMER0_u8PollingDelay>:
/*
 * brief: This function is used to initialize a polling delay if the Timer isn't busy
 * param.: (input) the delay to be set in ms
 * return: (output) the Error state of the function 0 if an error happens, 2 if the timer is busy and 1 otherwise
 */
uint8_t TIMER0_u8PollingDelay(uint16_t delay) {
    2900:	df 93       	push	r29
    2902:	cf 93       	push	r28
    2904:	00 d0       	rcall	.+0      	; 0x2906 <TIMER0_u8PollingDelay+0x6>
    2906:	0f 92       	push	r0
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	9a 83       	std	Y+2, r25	; 0x02
    290e:	89 83       	std	Y+1, r24	; 0x01
	if (delay_stat == DELAY_BUSY) {
    2910:	80 91 bb 01 	lds	r24, 0x01BB
    2914:	82 30       	cpi	r24, 0x02	; 2
    2916:	21 f4       	brne	.+8      	; 0x2920 <TIMER0_u8PollingDelay+0x20>
		return delay_stat;
    2918:	80 91 bb 01 	lds	r24, 0x01BB
    291c:	8b 83       	std	Y+3, r24	; 0x03
    291e:	3b c0       	rjmp	.+118    	; 0x2996 <TIMER0_u8PollingDelay+0x96>
	}
	delay_stat = DELAY_BUSY;
    2920:	82 e0       	ldi	r24, 0x02	; 2
    2922:	80 93 bb 01 	sts	0x01BB, r24
	counter = 0;						// reset counter to 0
    2926:	10 92 dc 01 	sts	0x01DC, r1
    292a:	10 92 db 01 	sts	0x01DB, r1
	compare = delay;
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	9a 81       	ldd	r25, Y+2	; 0x02
    2932:	90 93 da 01 	sts	0x01DA, r25
    2936:	80 93 d9 01 	sts	0x01D9, r24
	TIMER0_u8Init();				// initialize timer0
    293a:	0e 94 2f 14 	call	0x285e	; 0x285e <TIMER0_u8Init>
	TCNT0_REG = 0;
    293e:	e2 e5       	ldi	r30, 0x52	; 82
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	10 82       	st	Z, r1
	OCR0_REG = (F_CPU / PRESCALER);		// set OCR0_REG value
    2944:	ec e5       	ldi	r30, 0x5C	; 92
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	8d e7       	ldi	r24, 0x7D	; 125
    294a:	80 83       	st	Z, r24
	SET_BIT(TIMSK_REG, OCIE0);			// enable interrupt
    294c:	a9 e5       	ldi	r26, 0x59	; 89
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	e9 e5       	ldi	r30, 0x59	; 89
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	82 60       	ori	r24, 0x02	; 2
    2958:	8c 93       	st	X, r24
	SET_BIT(SREG_REG, I_BIT);
    295a:	af e5       	ldi	r26, 0x5F	; 95
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	ef e5       	ldi	r30, 0x5F	; 95
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	80 68       	ori	r24, 0x80	; 128
    2966:	8c 93       	st	X, r24
	while (counter <= compare)
    2968:	20 91 db 01 	lds	r18, 0x01DB
    296c:	30 91 dc 01 	lds	r19, 0x01DC
    2970:	80 91 d9 01 	lds	r24, 0x01D9
    2974:	90 91 da 01 	lds	r25, 0x01DA
    2978:	82 17       	cp	r24, r18
    297a:	93 07       	cpc	r25, r19
    297c:	a8 f7       	brcc	.-22     	; 0x2968 <TIMER0_u8PollingDelay+0x68>
		;			// stop if delay not finished
	CLR_BIT(TIMSK_REG, OCIE0);
    297e:	a9 e5       	ldi	r26, 0x59	; 89
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	e9 e5       	ldi	r30, 0x59	; 89
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	8d 7f       	andi	r24, 0xFD	; 253
    298a:	8c 93       	st	X, r24
	delay_stat = DELAY_OK;
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	80 93 bb 01 	sts	0x01BB, r24
	return DELAY_OK;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	8b 83       	std	Y+3, r24	; 0x03
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	0f 90       	pop	r0
    299e:	cf 91       	pop	r28
    29a0:	df 91       	pop	r29
    29a2:	08 95       	ret

000029a4 <__vector_10>:
void __vector_10(void) {
    29a4:	1f 92       	push	r1
    29a6:	0f 92       	push	r0
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	0f 92       	push	r0
    29ac:	11 24       	eor	r1, r1
    29ae:	2f 93       	push	r18
    29b0:	3f 93       	push	r19
    29b2:	4f 93       	push	r20
    29b4:	5f 93       	push	r21
    29b6:	6f 93       	push	r22
    29b8:	7f 93       	push	r23
    29ba:	8f 93       	push	r24
    29bc:	9f 93       	push	r25
    29be:	af 93       	push	r26
    29c0:	bf 93       	push	r27
    29c2:	ef 93       	push	r30
    29c4:	ff 93       	push	r31
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
	counter++;
    29ce:	80 91 db 01 	lds	r24, 0x01DB
    29d2:	90 91 dc 01 	lds	r25, 0x01DC
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	90 93 dc 01 	sts	0x01DC, r25
    29dc:	80 93 db 01 	sts	0x01DB, r24
	if (counter == compare && delayCallBack != NULL) {
    29e0:	20 91 db 01 	lds	r18, 0x01DB
    29e4:	30 91 dc 01 	lds	r19, 0x01DC
    29e8:	80 91 d9 01 	lds	r24, 0x01D9
    29ec:	90 91 da 01 	lds	r25, 0x01DA
    29f0:	28 17       	cp	r18, r24
    29f2:	39 07       	cpc	r19, r25
    29f4:	c9 f4       	brne	.+50     	; 0x2a28 <__vector_10+0x84>
    29f6:	80 91 dd 01 	lds	r24, 0x01DD
    29fa:	90 91 de 01 	lds	r25, 0x01DE
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	99 f0       	breq	.+38     	; 0x2a28 <__vector_10+0x84>
		counter = 0;
    2a02:	10 92 dc 01 	sts	0x01DC, r1
    2a06:	10 92 db 01 	sts	0x01DB, r1
		CLR_BIT(TIMSK_REG, OCIE0);
    2a0a:	a9 e5       	ldi	r26, 0x59	; 89
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	e9 e5       	ldi	r30, 0x59	; 89
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	8d 7f       	andi	r24, 0xFD	; 253
    2a16:	8c 93       	st	X, r24
		delay_stat = DELAY_OK;
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	80 93 bb 01 	sts	0x01BB, r24
		delayCallBack();
    2a1e:	e0 91 dd 01 	lds	r30, 0x01DD
    2a22:	f0 91 de 01 	lds	r31, 0x01DE
    2a26:	09 95       	icall
	}
}
    2a28:	cf 91       	pop	r28
    2a2a:	df 91       	pop	r29
    2a2c:	ff 91       	pop	r31
    2a2e:	ef 91       	pop	r30
    2a30:	bf 91       	pop	r27
    2a32:	af 91       	pop	r26
    2a34:	9f 91       	pop	r25
    2a36:	8f 91       	pop	r24
    2a38:	7f 91       	pop	r23
    2a3a:	6f 91       	pop	r22
    2a3c:	5f 91       	pop	r21
    2a3e:	4f 91       	pop	r20
    2a40:	3f 91       	pop	r19
    2a42:	2f 91       	pop	r18
    2a44:	0f 90       	pop	r0
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	0f 90       	pop	r0
    2a4a:	1f 90       	pop	r1
    2a4c:	18 95       	reti

00002a4e <LED_u8Init>:
 */

#include "LED.h"

// function to initialize LED 
uint8_t LED_u8Init(LED_t* led) {
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <LED_u8Init+0x6>
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	9a 83       	std	Y+2, r25	; 0x02
    2a5a:	89 83       	std	Y+1, r24	; 0x01
	// set direction of LED's pin to OUTPUT 
	return DIO_u8SetPinDirection(led->port, led->pin, DIO_OUTPUT);
    2a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a60:	80 81       	ld	r24, Z
    2a62:	e9 81       	ldd	r30, Y+1	; 0x01
    2a64:	fa 81       	ldd	r31, Y+2	; 0x02
    2a66:	91 81       	ldd	r25, Z+1	; 0x01
    2a68:	69 2f       	mov	r22, r25
    2a6a:	42 e0       	ldi	r20, 0x02	; 2
    2a6c:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <DIO_u8SetPinDirection>
}
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <LED_u8On>:

// function ta turn LED on
uint8_t LED_u8On(LED_t* led) {
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <LED_u8On+0x6>
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	9a 83       	std	Y+2, r25	; 0x02
    2a86:	89 83       	std	Y+1, r24	; 0x01
	// set LED's pin to HIGH 
	return DIO_u8SetPinData(led->port, led->pin, DIO_HIGH);
    2a88:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a8c:	80 81       	ld	r24, Z
    2a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a90:	fa 81       	ldd	r31, Y+2	; 0x02
    2a92:	91 81       	ldd	r25, Z+1	; 0x01
    2a94:	69 2f       	mov	r22, r25
    2a96:	41 e0       	ldi	r20, 0x01	; 1
    2a98:	0e 94 3d 10 	call	0x207a	; 0x207a <DIO_u8SetPinData>
}
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <LED_u8Off>:

// function ta turn LED off
uint8_t LED_u8Off(LED_t* led) {
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <LED_u8Off+0x6>
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	9a 83       	std	Y+2, r25	; 0x02
    2ab2:	89 83       	std	Y+1, r24	; 0x01
	// set LED's pin to LOW
	return DIO_u8SetPinData(led->port, led->pin, DIO_LOW);
    2ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab8:	80 81       	ld	r24, Z
    2aba:	e9 81       	ldd	r30, Y+1	; 0x01
    2abc:	fa 81       	ldd	r31, Y+2	; 0x02
    2abe:	91 81       	ldd	r25, Z+1	; 0x01
    2ac0:	69 2f       	mov	r22, r25
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	0e 94 3d 10 	call	0x207a	; 0x207a <DIO_u8SetPinData>
}
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	08 95       	ret

00002ad2 <LED_u8Toggle>:

// function to toggle LED state
uint8_t LED_u8Toggle(LED_t* led) {
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	00 d0       	rcall	.+0      	; 0x2ad8 <LED_u8Toggle+0x6>
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	9a 83       	std	Y+2, r25	; 0x02
    2ade:	89 83       	std	Y+1, r24	; 0x01
	// toggle LED's pin state 
	return DIO_u8TogglePinData(led->port, led->pin);
    2ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae4:	80 81       	ld	r24, Z
    2ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aea:	91 81       	ldd	r25, Z+1	; 0x01
    2aec:	69 2f       	mov	r22, r25
    2aee:	0e 94 ab 13 	call	0x2756	; 0x2756 <DIO_u8TogglePinData>
}
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <KEYPAD_u8Init>:
#include "../../MCAL/DELAY/TIMER0.h"
#include "KEYPAD_interface.h"
#include "KEYPAD_cfg.h"

// function to initialize keypad 
uint8_t KEYPAD_u8Init(void) {
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	0f 92       	push	r0
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
	/*step 1 : config Col pins as output*/
	DIO_u8SetPinDirection(COL_PORT, COL_PIN0, DIO_OUTPUT);
    2b06:	82 e0       	ldi	r24, 0x02	; 2
    2b08:	62 e0       	ldi	r22, 0x02	; 2
    2b0a:	42 e0       	ldi	r20, 0x02	; 2
    2b0c:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(COL_PORT, COL_PIN1, DIO_OUTPUT);
    2b10:	82 e0       	ldi	r24, 0x02	; 2
    2b12:	63 e0       	ldi	r22, 0x03	; 3
    2b14:	42 e0       	ldi	r20, 0x02	; 2
    2b16:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(COL_PORT, COL_PIN2, DIO_OUTPUT);
    2b1a:	82 e0       	ldi	r24, 0x02	; 2
    2b1c:	64 e0       	ldi	r22, 0x04	; 4
    2b1e:	42 e0       	ldi	r20, 0x02	; 2
    2b20:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(COL_PORT, COL_PIN3, DIO_OUTPUT);
    2b24:	82 e0       	ldi	r24, 0x02	; 2
    2b26:	65 e0       	ldi	r22, 0x05	; 5
    2b28:	42 e0       	ldi	r20, 0x02	; 2
    2b2a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <DIO_u8SetPinDirection>
	/*step 2 : config Rows pins as inputs , pull ups*/
	DIO_u8SetPinDirection(ROW_PORT, ROW_PIN0, DIO_INPUT_PULLUP);
    2b2e:	83 e0       	ldi	r24, 0x03	; 3
    2b30:	62 e0       	ldi	r22, 0x02	; 2
    2b32:	41 e0       	ldi	r20, 0x01	; 1
    2b34:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(ROW_PORT, ROW_PIN1, DIO_INPUT_PULLUP);
    2b38:	83 e0       	ldi	r24, 0x03	; 3
    2b3a:	63 e0       	ldi	r22, 0x03	; 3
    2b3c:	41 e0       	ldi	r20, 0x01	; 1
    2b3e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(ROW_PORT, ROW_PIN2, DIO_INPUT_PULLUP);
    2b42:	83 e0       	ldi	r24, 0x03	; 3
    2b44:	64 e0       	ldi	r22, 0x04	; 4
    2b46:	41 e0       	ldi	r20, 0x01	; 1
    2b48:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(ROW_PORT, ROW_PIN3, DIO_INPUT_PULLUP);
    2b4c:	83 e0       	ldi	r24, 0x03	; 3
    2b4e:	65 e0       	ldi	r22, 0x05	; 5
    2b50:	41 e0       	ldi	r20, 0x01	; 1
    2b52:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <DIO_u8SetPinDirection>
	/*step 3 : Initialize Col pins -> HIGH*/
	DIO_u8SetPinData(COL_PORT, COL_PIN0, DIO_HIGH);
    2b56:	82 e0       	ldi	r24, 0x02	; 2
    2b58:	62 e0       	ldi	r22, 0x02	; 2
    2b5a:	41 e0       	ldi	r20, 0x01	; 1
    2b5c:	0e 94 3d 10 	call	0x207a	; 0x207a <DIO_u8SetPinData>
	DIO_u8SetPinData(COL_PORT, COL_PIN1, DIO_HIGH);
    2b60:	82 e0       	ldi	r24, 0x02	; 2
    2b62:	63 e0       	ldi	r22, 0x03	; 3
    2b64:	41 e0       	ldi	r20, 0x01	; 1
    2b66:	0e 94 3d 10 	call	0x207a	; 0x207a <DIO_u8SetPinData>
	DIO_u8SetPinData(COL_PORT, COL_PIN2, DIO_HIGH);
    2b6a:	82 e0       	ldi	r24, 0x02	; 2
    2b6c:	64 e0       	ldi	r22, 0x04	; 4
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	0e 94 3d 10 	call	0x207a	; 0x207a <DIO_u8SetPinData>
	DIO_u8SetPinData(COL_PORT, COL_PIN3, DIO_HIGH);
    2b74:	82 e0       	ldi	r24, 0x02	; 2
    2b76:	65 e0       	ldi	r22, 0x05	; 5
    2b78:	41 e0       	ldi	r20, 0x01	; 1
    2b7a:	0e 94 3d 10 	call	0x207a	; 0x207a <DIO_u8SetPinData>
}
    2b7e:	0f 90       	pop	r0
    2b80:	cf 91       	pop	r28
    2b82:	df 91       	pop	r29
    2b84:	08 95       	ret

00002b86 <KEYPAD_u8GetPressedKey>:

// function to check which key is pressed 
uint8_t KEYPAD_u8GetPressedKey(uint8_t* KeyPressed) {
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	6c 97       	sbiw	r28, 0x1c	; 28
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	cd bf       	out	0x3d, r28	; 61
    2b9a:	9f 8b       	std	Y+23, r25	; 0x17
    2b9c:	8e 8b       	std	Y+22, r24	; 0x16
	uint8_t u8ErrorState = STD_TYPES_OK;
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t LOC_u8ReturnVal = KEYPAD_NO_PRESSED_KEY;
    2ba2:	8f ef       	ldi	r24, 0xFF	; 255
    2ba4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t col_indx;
	uint8_t row_indx;
	uint8_t Pin_State;
	uint8_t LOC_u8KEYPAD_Arr[KEYPAD_ROWS][KEYPAD_COL] = KEYPAD_VALUES;
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	06 96       	adiw	r24, 0x06	; 6
    2baa:	99 8f       	std	Y+25, r25	; 0x19
    2bac:	88 8f       	std	Y+24, r24	; 0x18
    2bae:	ec eb       	ldi	r30, 0xBC	; 188
    2bb0:	f1 e0       	ldi	r31, 0x01	; 1
    2bb2:	fb 8f       	std	Y+27, r31	; 0x1b
    2bb4:	ea 8f       	std	Y+26, r30	; 0x1a
    2bb6:	f0 e1       	ldi	r31, 0x10	; 16
    2bb8:	fc 8f       	std	Y+28, r31	; 0x1c
    2bba:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2bbc:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2bbe:	00 80       	ld	r0, Z
    2bc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bc2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bc4:	01 96       	adiw	r24, 0x01	; 1
    2bc6:	9b 8f       	std	Y+27, r25	; 0x1b
    2bc8:	8a 8f       	std	Y+26, r24	; 0x1a
    2bca:	e8 8d       	ldd	r30, Y+24	; 0x18
    2bcc:	f9 8d       	ldd	r31, Y+25	; 0x19
    2bce:	00 82       	st	Z, r0
    2bd0:	88 8d       	ldd	r24, Y+24	; 0x18
    2bd2:	99 8d       	ldd	r25, Y+25	; 0x19
    2bd4:	01 96       	adiw	r24, 0x01	; 1
    2bd6:	99 8f       	std	Y+25, r25	; 0x19
    2bd8:	88 8f       	std	Y+24, r24	; 0x18
    2bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bdc:	91 50       	subi	r25, 0x01	; 1
    2bde:	9c 8f       	std	Y+28, r25	; 0x1c
    2be0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2be2:	ee 23       	and	r30, r30
    2be4:	51 f7       	brne	.-44     	; 0x2bba <KEYPAD_u8GetPressedKey+0x34>

	if (KeyPressed != NULL) {
    2be6:	8e 89       	ldd	r24, Y+22	; 0x16
    2be8:	9f 89       	ldd	r25, Y+23	; 0x17
    2bea:	00 97       	sbiw	r24, 0x00	; 0
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <KEYPAD_u8GetPressedKey+0x6a>
    2bee:	4b c0       	rjmp	.+150    	; 0x2c86 <KEYPAD_u8GetPressedKey+0x100>
		for (col_indx = COL_S; col_indx < COL_MAX; col_indx++) {
    2bf0:	82 e0       	ldi	r24, 0x02	; 2
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
    2bf4:	3f c0       	rjmp	.+126    	; 0x2c74 <KEYPAD_u8GetPressedKey+0xee>
			/*select column and output low*/
			DIO_u8SetPinData(COL_PORT, col_indx, DIO_LOW);
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	6a 81       	ldd	r22, Y+2	; 0x02
    2bfa:	40 e0       	ldi	r20, 0x00	; 0
    2bfc:	0e 94 3d 10 	call	0x207a	; 0x207a <DIO_u8SetPinData>
			for (row_indx = ROW_S; row_indx < ROW_MAX; row_indx++) {
    2c00:	82 e0       	ldi	r24, 0x02	; 2
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	2c c0       	rjmp	.+88     	; 0x2c5e <KEYPAD_u8GetPressedKey+0xd8>
				DIO_u8GetPinData(ROW_PORT, row_indx, &Pin_State);
    2c06:	9e 01       	movw	r18, r28
    2c08:	2b 5f       	subi	r18, 0xFB	; 251
    2c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0c:	83 e0       	ldi	r24, 0x03	; 3
    2c0e:	69 81       	ldd	r22, Y+1	; 0x01
    2c10:	a9 01       	movw	r20, r18
    2c12:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_u8GetPinData>
				if (Pin_State == 0) /*if true -> PB is pressed*/
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	88 23       	and	r24, r24
    2c1a:	f1 f4       	brne	.+60     	; 0x2c58 <KEYPAD_u8GetPressedKey+0xd2>
				{
					LOC_u8ReturnVal = LOC_u8KEYPAD_Arr[row_indx - ROW_S][col_indx - COL_S];
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9c 01       	movw	r18, r24
    2c24:	22 50       	subi	r18, 0x02	; 2
    2c26:	30 40       	sbci	r19, 0x00	; 0
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	ac 01       	movw	r20, r24
    2c30:	42 50       	subi	r20, 0x02	; 2
    2c32:	50 40       	sbci	r21, 0x00	; 0
    2c34:	22 0f       	add	r18, r18
    2c36:	33 1f       	adc	r19, r19
    2c38:	22 0f       	add	r18, r18
    2c3a:	33 1f       	adc	r19, r19
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	01 96       	adiw	r24, 0x01	; 1
    2c40:	82 0f       	add	r24, r18
    2c42:	93 1f       	adc	r25, r19
    2c44:	84 0f       	add	r24, r20
    2c46:	95 1f       	adc	r25, r21
    2c48:	fc 01       	movw	r30, r24
    2c4a:	35 96       	adiw	r30, 0x05	; 5
    2c4c:	80 81       	ld	r24, Z
    2c4e:	8b 83       	std	Y+3, r24	; 0x03
					/*debouncing button */
					TIMER0_u8PollingDelay(300);
    2c50:	8c e2       	ldi	r24, 0x2C	; 44
    2c52:	91 e0       	ldi	r25, 0x01	; 1
    2c54:	0e 94 80 14 	call	0x2900	; 0x2900 <TIMER0_u8PollingDelay>

	if (KeyPressed != NULL) {
		for (col_indx = COL_S; col_indx < COL_MAX; col_indx++) {
			/*select column and output low*/
			DIO_u8SetPinData(COL_PORT, col_indx, DIO_LOW);
			for (row_indx = ROW_S; row_indx < ROW_MAX; row_indx++) {
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	8f 5f       	subi	r24, 0xFF	; 255
    2c5c:	89 83       	std	Y+1, r24	; 0x01
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	86 30       	cpi	r24, 0x06	; 6
    2c62:	88 f2       	brcs	.-94     	; 0x2c06 <KEYPAD_u8GetPressedKey+0x80>
					LOC_u8ReturnVal = LOC_u8KEYPAD_Arr[row_indx - ROW_S][col_indx - COL_S];
					/*debouncing button */
					TIMER0_u8PollingDelay(300);
				}				
			}
			DIO_u8SetPinData(COL_PORT, col_indx, DIO_HIGH);
    2c64:	82 e0       	ldi	r24, 0x02	; 2
    2c66:	6a 81       	ldd	r22, Y+2	; 0x02
    2c68:	41 e0       	ldi	r20, 0x01	; 1
    2c6a:	0e 94 3d 10 	call	0x207a	; 0x207a <DIO_u8SetPinData>
	uint8_t row_indx;
	uint8_t Pin_State;
	uint8_t LOC_u8KEYPAD_Arr[KEYPAD_ROWS][KEYPAD_COL] = KEYPAD_VALUES;

	if (KeyPressed != NULL) {
		for (col_indx = COL_S; col_indx < COL_MAX; col_indx++) {
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	8f 5f       	subi	r24, 0xFF	; 255
    2c72:	8a 83       	std	Y+2, r24	; 0x02
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	86 30       	cpi	r24, 0x06	; 6
    2c78:	08 f4       	brcc	.+2      	; 0x2c7c <KEYPAD_u8GetPressedKey+0xf6>
    2c7a:	bd cf       	rjmp	.-134    	; 0x2bf6 <KEYPAD_u8GetPressedKey+0x70>
				}				
			}
			DIO_u8SetPinData(COL_PORT, col_indx, DIO_HIGH);
		}

		*KeyPressed = LOC_u8ReturnVal;
    2c7c:	ee 89       	ldd	r30, Y+22	; 0x16
    2c7e:	ff 89       	ldd	r31, Y+23	; 0x17
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	80 83       	st	Z, r24
    2c84:	01 c0       	rjmp	.+2      	; 0x2c88 <KEYPAD_u8GetPressedKey+0x102>
	} else {
		u8ErrorState = STD_TYPES_NOK;
    2c86:	1c 82       	std	Y+4, r1	; 0x04
	}
	return u8ErrorState;
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2c8a:	6c 96       	adiw	r28, 0x1c	; 28
    2c8c:	0f b6       	in	r0, 0x3f	; 63
    2c8e:	f8 94       	cli
    2c90:	de bf       	out	0x3e, r29	; 62
    2c92:	0f be       	out	0x3f, r0	; 63
    2c94:	cd bf       	out	0x3d, r28	; 61
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	08 95       	ret

00002c9c <BTN_u8Init>:


#include "Button.h"

uint8_t BTN_u8Init ( BTN_t button )
{
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <BTN_u8Init+0x6>
    2ca2:	0f 92       	push	r0
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	9b 83       	std	Y+3, r25	; 0x03
    2caa:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = STD_TYPES_OK;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	89 83       	std	Y+1, r24	; 0x01
	u8ErrorState= DIO_u8SetPinDirection(button.port,button.pin,DIO_INPUT_PULLUP);
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb4:	69 2f       	mov	r22, r25
    2cb6:	41 e0       	ldi	r20, 0x01	; 1
    2cb8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <DIO_u8SetPinDirection>
    2cbc:	89 83       	std	Y+1, r24	; 0x01
	return u8ErrorState;
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <BTN_u8IsPressed>:

uint8_t BTN_u8IsPressed ( BTN_t button , uint8_t * pressed )
{	
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	00 d0       	rcall	.+0      	; 0x2cd2 <BTN_u8IsPressed+0x6>
    2cd2:	00 d0       	rcall	.+0      	; 0x2cd4 <BTN_u8IsPressed+0x8>
    2cd4:	00 d0       	rcall	.+0      	; 0x2cd6 <BTN_u8IsPressed+0xa>
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	9c 83       	std	Y+4, r25	; 0x04
    2cdc:	8b 83       	std	Y+3, r24	; 0x03
    2cde:	7e 83       	std	Y+6, r23	; 0x06
    2ce0:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t u8BTNState;
	uint8_t u8ErrorState = STD_TYPES_OK;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	89 83       	std	Y+1, r24	; 0x01
	if (pressed!= NULL)
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	51 f1       	breq	.+84     	; 0x2d42 <BTN_u8IsPressed+0x76>
	{
		DIO_u8GetPinData(button.port,button.pin,&u8BTNState);
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	9e 01       	movw	r18, r28
    2cf4:	2e 5f       	subi	r18, 0xFE	; 254
    2cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf8:	69 2f       	mov	r22, r25
    2cfa:	a9 01       	movw	r20, r18
    2cfc:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_u8GetPinData>
		if (u8BTNState == DIO_HIGH)
    2d00:	8a 81       	ldd	r24, Y+2	; 0x02
    2d02:	81 30       	cpi	r24, 0x01	; 1
    2d04:	c9 f4       	brne	.+50     	; 0x2d38 <BTN_u8IsPressed+0x6c>
		{
			TIMER0_u8PollingDelay(15);
    2d06:	8f e0       	ldi	r24, 0x0F	; 15
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	0e 94 80 14 	call	0x2900	; 0x2900 <TIMER0_u8PollingDelay>
			DIO_u8GetPinData(button.port,button.pin,&u8BTNState);
    2d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d10:	9c 81       	ldd	r25, Y+4	; 0x04
    2d12:	9e 01       	movw	r18, r28
    2d14:	2e 5f       	subi	r18, 0xFE	; 254
    2d16:	3f 4f       	sbci	r19, 0xFF	; 255
    2d18:	69 2f       	mov	r22, r25
    2d1a:	a9 01       	movw	r20, r18
    2d1c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_u8GetPinData>
			if (u8BTNState == DIO_HIGH)
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	81 30       	cpi	r24, 0x01	; 1
    2d24:	29 f4       	brne	.+10     	; 0x2d30 <BTN_u8IsPressed+0x64>
			{
				*pressed = u8BTNState;
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	ed 81       	ldd	r30, Y+5	; 0x05
    2d2a:	fe 81       	ldd	r31, Y+6	; 0x06
    2d2c:	80 83       	st	Z, r24
    2d2e:	0a c0       	rjmp	.+20     	; 0x2d44 <BTN_u8IsPressed+0x78>
			}else
			{
				*pressed = DIO_LOW;
    2d30:	ed 81       	ldd	r30, Y+5	; 0x05
    2d32:	fe 81       	ldd	r31, Y+6	; 0x06
    2d34:	10 82       	st	Z, r1
    2d36:	06 c0       	rjmp	.+12     	; 0x2d44 <BTN_u8IsPressed+0x78>
			}
		}else{
			*pressed = u8BTNState;
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	ed 81       	ldd	r30, Y+5	; 0x05
    2d3c:	fe 81       	ldd	r31, Y+6	; 0x06
    2d3e:	80 83       	st	Z, r24
    2d40:	01 c0       	rjmp	.+2      	; 0x2d44 <BTN_u8IsPressed+0x78>
		}
		//
	}else{
		u8ErrorState = STD_TYPES_NOK;
    2d42:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d46:	26 96       	adiw	r28, 0x06	; 6
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <main>:
#include "../MCAL/UART/UART_interface.h"
#include "../ECUAL/LED/LED.h"
#include "../Service/Strings/STR.h"

int main(void)
{
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	60 97       	sbiw	r28, 0x10	; 16
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8CommandReceived[10];
	LED_t LEDGreen={PORTA,PIN6};
    2d6c:	1b 86       	std	Y+11, r1	; 0x0b
    2d6e:	86 e0       	ldi	r24, 0x06	; 6
    2d70:	8c 87       	std	Y+12, r24	; 0x0c
	LED_t LEDYellow={PORTA,PIN3};
    2d72:	1d 86       	std	Y+13, r1	; 0x0d
    2d74:	83 e0       	ldi	r24, 0x03	; 3
    2d76:	8e 87       	std	Y+14, r24	; 0x0e
	LED_t LEDRed={PORTA,PIN0};
    2d78:	1f 86       	std	Y+15, r1	; 0x0f
    2d7a:	18 8a       	std	Y+16, r1	; 0x10

	LED_u8Init(&LEDGreen);
    2d7c:	ce 01       	movw	r24, r28
    2d7e:	0b 96       	adiw	r24, 0x0b	; 11
    2d80:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LED_u8Init>
	LED_u8Init(&LEDYellow);
    2d84:	ce 01       	movw	r24, r28
    2d86:	0d 96       	adiw	r24, 0x0d	; 13
    2d88:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LED_u8Init>
	LED_u8Init(&LEDRed);
    2d8c:	ce 01       	movw	r24, r28
    2d8e:	0f 96       	adiw	r24, 0x0f	; 15
    2d90:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <LED_u8Init>
	UART_u8Init(9600);
    2d94:	60 e8       	ldi	r22, 0x80	; 128
    2d96:	75 e2       	ldi	r23, 0x25	; 37
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_u8Init>


	while (1)
	{

		UART_u8RecieveString(u8CommandReceived);
    2da0:	ce 01       	movw	r24, r28
    2da2:	01 96       	adiw	r24, 0x01	; 1
    2da4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <UART_u8RecieveString>

		if (STR_CMP(u8CommandReceived,(uint8_t*)"START"))
    2da8:	20 e6       	ldi	r18, 0x60	; 96
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	ce 01       	movw	r24, r28
    2dae:	01 96       	adiw	r24, 0x01	; 1
    2db0:	b9 01       	movw	r22, r18
    2db2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <STR_CMP>
    2db6:	88 23       	and	r24, r24
    2db8:	89 f0       	breq	.+34     	; 0x2ddc <main+0x84>
		{
			LED_u8On(&LEDGreen);
    2dba:	ce 01       	movw	r24, r28
    2dbc:	0b 96       	adiw	r24, 0x0b	; 11
    2dbe:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <LED_u8On>
			LED_u8Off(&LEDRed);
    2dc2:	ce 01       	movw	r24, r28
    2dc4:	0f 96       	adiw	r24, 0x0f	; 15
    2dc6:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <LED_u8Off>
			LED_u8Off(&LEDYellow);
    2dca:	ce 01       	movw	r24, r28
    2dcc:	0d 96       	adiw	r24, 0x0d	; 13
    2dce:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <LED_u8Off>
			UART_u8SendString((uint8_t*)"Green LED is on\r\n");
    2dd2:	86 e6       	ldi	r24, 0x66	; 102
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <UART_u8SendString>
    2dda:	e2 cf       	rjmp	.-60     	; 0x2da0 <main+0x48>
		}else if (STR_CMP(u8CommandReceived,(uint8_t*)"WAIT"))
    2ddc:	28 e7       	ldi	r18, 0x78	; 120
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	ce 01       	movw	r24, r28
    2de2:	01 96       	adiw	r24, 0x01	; 1
    2de4:	b9 01       	movw	r22, r18
    2de6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <STR_CMP>
    2dea:	88 23       	and	r24, r24
    2dec:	89 f0       	breq	.+34     	; 0x2e10 <main+0xb8>
		{
			LED_u8Off(&LEDGreen);
    2dee:	ce 01       	movw	r24, r28
    2df0:	0b 96       	adiw	r24, 0x0b	; 11
    2df2:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <LED_u8Off>
			LED_u8Off(&LEDRed);
    2df6:	ce 01       	movw	r24, r28
    2df8:	0f 96       	adiw	r24, 0x0f	; 15
    2dfa:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <LED_u8Off>
			LED_u8On(&LEDYellow);
    2dfe:	ce 01       	movw	r24, r28
    2e00:	0d 96       	adiw	r24, 0x0d	; 13
    2e02:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <LED_u8On>
			UART_u8SendString((uint8_t*)"Yellow LED is on\r\n");
    2e06:	8d e7       	ldi	r24, 0x7D	; 125
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <UART_u8SendString>
    2e0e:	c8 cf       	rjmp	.-112    	; 0x2da0 <main+0x48>
		}else if(STR_CMP(u8CommandReceived,(uint8_t*)"STOP"))
    2e10:	20 e9       	ldi	r18, 0x90	; 144
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	ce 01       	movw	r24, r28
    2e16:	01 96       	adiw	r24, 0x01	; 1
    2e18:	b9 01       	movw	r22, r18
    2e1a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <STR_CMP>
    2e1e:	88 23       	and	r24, r24
    2e20:	89 f0       	breq	.+34     	; 0x2e44 <main+0xec>
		{
			LED_u8Off(&LEDGreen);
    2e22:	ce 01       	movw	r24, r28
    2e24:	0b 96       	adiw	r24, 0x0b	; 11
    2e26:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <LED_u8Off>
			LED_u8On(&LEDRed);
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	0f 96       	adiw	r24, 0x0f	; 15
    2e2e:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <LED_u8On>
			LED_u8Off(&LEDYellow);
    2e32:	ce 01       	movw	r24, r28
    2e34:	0d 96       	adiw	r24, 0x0d	; 13
    2e36:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <LED_u8Off>
			UART_u8SendString((uint8_t*)"RED LED is on\r\n");
    2e3a:	85 e9       	ldi	r24, 0x95	; 149
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <UART_u8SendString>
    2e42:	ae cf       	rjmp	.-164    	; 0x2da0 <main+0x48>
		}else
		{
			UART_u8SendString((uint8_t*)"Wrong Input\r\n");
    2e44:	85 ea       	ldi	r24, 0xA5	; 165
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <UART_u8SendString>
    2e4c:	a9 cf       	rjmp	.-174    	; 0x2da0 <main+0x48>

00002e4e <__mulsi3>:
    2e4e:	62 9f       	mul	r22, r18
    2e50:	d0 01       	movw	r26, r0
    2e52:	73 9f       	mul	r23, r19
    2e54:	f0 01       	movw	r30, r0
    2e56:	82 9f       	mul	r24, r18
    2e58:	e0 0d       	add	r30, r0
    2e5a:	f1 1d       	adc	r31, r1
    2e5c:	64 9f       	mul	r22, r20
    2e5e:	e0 0d       	add	r30, r0
    2e60:	f1 1d       	adc	r31, r1
    2e62:	92 9f       	mul	r25, r18
    2e64:	f0 0d       	add	r31, r0
    2e66:	83 9f       	mul	r24, r19
    2e68:	f0 0d       	add	r31, r0
    2e6a:	74 9f       	mul	r23, r20
    2e6c:	f0 0d       	add	r31, r0
    2e6e:	65 9f       	mul	r22, r21
    2e70:	f0 0d       	add	r31, r0
    2e72:	99 27       	eor	r25, r25
    2e74:	72 9f       	mul	r23, r18
    2e76:	b0 0d       	add	r27, r0
    2e78:	e1 1d       	adc	r30, r1
    2e7a:	f9 1f       	adc	r31, r25
    2e7c:	63 9f       	mul	r22, r19
    2e7e:	b0 0d       	add	r27, r0
    2e80:	e1 1d       	adc	r30, r1
    2e82:	f9 1f       	adc	r31, r25
    2e84:	bd 01       	movw	r22, r26
    2e86:	cf 01       	movw	r24, r30
    2e88:	11 24       	eor	r1, r1
    2e8a:	08 95       	ret

00002e8c <__udivmodsi4>:
    2e8c:	a1 e2       	ldi	r26, 0x21	; 33
    2e8e:	1a 2e       	mov	r1, r26
    2e90:	aa 1b       	sub	r26, r26
    2e92:	bb 1b       	sub	r27, r27
    2e94:	fd 01       	movw	r30, r26
    2e96:	0d c0       	rjmp	.+26     	; 0x2eb2 <__udivmodsi4_ep>

00002e98 <__udivmodsi4_loop>:
    2e98:	aa 1f       	adc	r26, r26
    2e9a:	bb 1f       	adc	r27, r27
    2e9c:	ee 1f       	adc	r30, r30
    2e9e:	ff 1f       	adc	r31, r31
    2ea0:	a2 17       	cp	r26, r18
    2ea2:	b3 07       	cpc	r27, r19
    2ea4:	e4 07       	cpc	r30, r20
    2ea6:	f5 07       	cpc	r31, r21
    2ea8:	20 f0       	brcs	.+8      	; 0x2eb2 <__udivmodsi4_ep>
    2eaa:	a2 1b       	sub	r26, r18
    2eac:	b3 0b       	sbc	r27, r19
    2eae:	e4 0b       	sbc	r30, r20
    2eb0:	f5 0b       	sbc	r31, r21

00002eb2 <__udivmodsi4_ep>:
    2eb2:	66 1f       	adc	r22, r22
    2eb4:	77 1f       	adc	r23, r23
    2eb6:	88 1f       	adc	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	1a 94       	dec	r1
    2ebc:	69 f7       	brne	.-38     	; 0x2e98 <__udivmodsi4_loop>
    2ebe:	60 95       	com	r22
    2ec0:	70 95       	com	r23
    2ec2:	80 95       	com	r24
    2ec4:	90 95       	com	r25
    2ec6:	9b 01       	movw	r18, r22
    2ec8:	ac 01       	movw	r20, r24
    2eca:	bd 01       	movw	r22, r26
    2ecc:	cf 01       	movw	r24, r30
    2ece:	08 95       	ret

00002ed0 <__prologue_saves__>:
    2ed0:	2f 92       	push	r2
    2ed2:	3f 92       	push	r3
    2ed4:	4f 92       	push	r4
    2ed6:	5f 92       	push	r5
    2ed8:	6f 92       	push	r6
    2eda:	7f 92       	push	r7
    2edc:	8f 92       	push	r8
    2ede:	9f 92       	push	r9
    2ee0:	af 92       	push	r10
    2ee2:	bf 92       	push	r11
    2ee4:	cf 92       	push	r12
    2ee6:	df 92       	push	r13
    2ee8:	ef 92       	push	r14
    2eea:	ff 92       	push	r15
    2eec:	0f 93       	push	r16
    2eee:	1f 93       	push	r17
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
    2ef8:	ca 1b       	sub	r28, r26
    2efa:	db 0b       	sbc	r29, r27
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
    2f06:	09 94       	ijmp

00002f08 <__epilogue_restores__>:
    2f08:	2a 88       	ldd	r2, Y+18	; 0x12
    2f0a:	39 88       	ldd	r3, Y+17	; 0x11
    2f0c:	48 88       	ldd	r4, Y+16	; 0x10
    2f0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f10:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f12:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f14:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f16:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f18:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f1a:	b9 84       	ldd	r11, Y+9	; 0x09
    2f1c:	c8 84       	ldd	r12, Y+8	; 0x08
    2f1e:	df 80       	ldd	r13, Y+7	; 0x07
    2f20:	ee 80       	ldd	r14, Y+6	; 0x06
    2f22:	fd 80       	ldd	r15, Y+5	; 0x05
    2f24:	0c 81       	ldd	r16, Y+4	; 0x04
    2f26:	1b 81       	ldd	r17, Y+3	; 0x03
    2f28:	aa 81       	ldd	r26, Y+2	; 0x02
    2f2a:	b9 81       	ldd	r27, Y+1	; 0x01
    2f2c:	ce 0f       	add	r28, r30
    2f2e:	d1 1d       	adc	r29, r1
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	ed 01       	movw	r28, r26
    2f3c:	08 95       	ret

00002f3e <_exit>:
    2f3e:	f8 94       	cli

00002f40 <__stop_program>:
    2f40:	ff cf       	rjmp	.-2      	; 0x2f40 <__stop_program>
