
CARD_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000186  00800060  00004fca  0000505e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  008001e6  008001e6  000051e4  2**0
                  ALLOC
  3 .stab         000081cc  00000000  00000000  000051e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000491b  00000000  00000000  0000d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00011ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d8  00000000  00000000  00011e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002114  00000000  00000000  00012023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000121a  00000000  00000000  00014137  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001165  00000000  00000000  00015351  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  000164b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f7  00000000  00000000  00016658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009a2  00000000  00000000  0001694f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000172f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 10 27 	jmp	0x4e20	; 0x4e20 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__vector_7>
      20:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__vector_8>
      24:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__vector_9>
      28:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__vector_12>
      34:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__vector_13>
      38:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 0e 1e 	jmp	0x3c1c	; 0x3c1c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	ff e4       	ldi	r31, 0x4F	; 79
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 32       	cpi	r26, 0x23	; 35
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <main>
      8a:	0c 94 e3 27 	jmp	0x4fc6	; 0x4fc6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ac 27 	jmp	0x4f58	; 0x4f58 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ec       	ldi	r26, 0xCE	; 206
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c8 27 	jmp	0x4f90	; 0x4f90 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b8 27 	jmp	0x4f70	; 0x4f70 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b8 27 	jmp	0x4f70	; 0x4f70 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ac 27 	jmp	0x4f58	; 0x4f58 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ec       	ldi	r24, 0xCE	; 206
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c8 27 	jmp	0x4f90	; 0x4f90 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b4 27 	jmp	0x4f68	; 0x4f68 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e ec       	ldi	r22, 0xCE	; 206
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d0 27 	jmp	0x4fa0	; 0x4fa0 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b8 27 	jmp	0x4f70	; 0x4f70 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 bc 06 	call	0xd78	; 0xd78 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d4 27 	jmp	0x4fa8	; 0x4fa8 <__epilogue_restores__+0x18>

000007ea <__floatsisf>:
     7ea:	a8 e0       	ldi	r26, 0x08	; 8
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b5 27 	jmp	0x4f6a	; 0x4f6a <__prologue_saves__+0x12>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	da 01       	movw	r26, r20
     800:	c9 01       	movw	r24, r18
     802:	88 27       	eor	r24, r24
     804:	b7 fd       	sbrc	r27, 7
     806:	83 95       	inc	r24
     808:	99 27       	eor	r25, r25
     80a:	aa 27       	eor	r26, r26
     80c:	bb 27       	eor	r27, r27
     80e:	b8 2e       	mov	r11, r24
     810:	21 15       	cp	r18, r1
     812:	31 05       	cpc	r19, r1
     814:	41 05       	cpc	r20, r1
     816:	51 05       	cpc	r21, r1
     818:	19 f4       	brne	.+6      	; 0x820 <__floatsisf+0x36>
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	3a c0       	rjmp	.+116    	; 0x894 <__stack+0x35>
     820:	88 23       	and	r24, r24
     822:	a9 f0       	breq	.+42     	; 0x84e <__floatsisf+0x64>
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	38 07       	cpc	r19, r24
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	48 07       	cpc	r20, r24
     82e:	80 e8       	ldi	r24, 0x80	; 128
     830:	58 07       	cpc	r21, r24
     832:	29 f4       	brne	.+10     	; 0x83e <__floatsisf+0x54>
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	9f ec       	ldi	r25, 0xCF	; 207
     83c:	30 c0       	rjmp	.+96     	; 0x89e <__stack+0x3f>
     83e:	ee 24       	eor	r14, r14
     840:	ff 24       	eor	r15, r15
     842:	87 01       	movw	r16, r14
     844:	e2 1a       	sub	r14, r18
     846:	f3 0a       	sbc	r15, r19
     848:	04 0b       	sbc	r16, r20
     84a:	15 0b       	sbc	r17, r21
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__floatsisf+0x68>
     84e:	79 01       	movw	r14, r18
     850:	8a 01       	movw	r16, r20
     852:	8e e1       	ldi	r24, 0x1E	; 30
     854:	c8 2e       	mov	r12, r24
     856:	d1 2c       	mov	r13, r1
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ed 82       	std	Y+5, r14	; 0x05
     85e:	fe 82       	std	Y+6, r15	; 0x06
     860:	0f 83       	std	Y+7, r16	; 0x07
     862:	18 87       	std	Y+8, r17	; 0x08
     864:	c8 01       	movw	r24, r16
     866:	b7 01       	movw	r22, r14
     868:	0e 94 20 05 	call	0xa40	; 0xa40 <__clzsi2>
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	18 16       	cp	r1, r24
     870:	19 06       	cpc	r1, r25
     872:	84 f4       	brge	.+32     	; 0x894 <__stack+0x35>
     874:	08 2e       	mov	r0, r24
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	ee 0c       	add	r14, r14
     87a:	ff 1c       	adc	r15, r15
     87c:	00 1f       	adc	r16, r16
     87e:	11 1f       	adc	r17, r17
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	ed 82       	std	Y+5, r14	; 0x05
     886:	fe 82       	std	Y+6, r15	; 0x06
     888:	0f 83       	std	Y+7, r16	; 0x07
     88a:	18 87       	std	Y+8, r17	; 0x08
     88c:	c8 1a       	sub	r12, r24
     88e:	d9 0a       	sbc	r13, r25
     890:	dc 82       	std	Y+4, r13	; 0x04
     892:	cb 82       	std	Y+3, r12	; 0x03
     894:	ba 82       	std	Y+2, r11	; 0x02
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     89e:	28 96       	adiw	r28, 0x08	; 8
     8a0:	e9 e0       	ldi	r30, 0x09	; 9
     8a2:	0c 94 d1 27 	jmp	0x4fa2	; 0x4fa2 <__epilogue_restores__+0x12>

000008a6 <__fixsfsi>:
     8a6:	ac e0       	ldi	r26, 0x0C	; 12
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 bc 27 	jmp	0x4f78	; 0x4f78 <__prologue_saves__+0x20>
     8b2:	69 83       	std	Y+1, r22	; 0x01
     8b4:	7a 83       	std	Y+2, r23	; 0x02
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	be 01       	movw	r22, r28
     8c0:	6b 5f       	subi	r22, 0xFB	; 251
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	0e 94 44 06 	call	0xc88	; 0xc88 <__unpack_f>
     8c8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ca:	82 30       	cpi	r24, 0x02	; 2
     8cc:	61 f1       	breq	.+88     	; 0x926 <__fixsfsi+0x80>
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	50 f1       	brcs	.+84     	; 0x926 <__fixsfsi+0x80>
     8d2:	84 30       	cpi	r24, 0x04	; 4
     8d4:	21 f4       	brne	.+8      	; 0x8de <__fixsfsi+0x38>
     8d6:	8e 81       	ldd	r24, Y+6	; 0x06
     8d8:	88 23       	and	r24, r24
     8da:	51 f1       	breq	.+84     	; 0x930 <__fixsfsi+0x8a>
     8dc:	2e c0       	rjmp	.+92     	; 0x93a <__fixsfsi+0x94>
     8de:	2f 81       	ldd	r18, Y+7	; 0x07
     8e0:	38 85       	ldd	r19, Y+8	; 0x08
     8e2:	37 fd       	sbrc	r19, 7
     8e4:	20 c0       	rjmp	.+64     	; 0x926 <__fixsfsi+0x80>
     8e6:	6e 81       	ldd	r22, Y+6	; 0x06
     8e8:	2f 31       	cpi	r18, 0x1F	; 31
     8ea:	31 05       	cpc	r19, r1
     8ec:	1c f0       	brlt	.+6      	; 0x8f4 <__fixsfsi+0x4e>
     8ee:	66 23       	and	r22, r22
     8f0:	f9 f0       	breq	.+62     	; 0x930 <__fixsfsi+0x8a>
     8f2:	23 c0       	rjmp	.+70     	; 0x93a <__fixsfsi+0x94>
     8f4:	8e e1       	ldi	r24, 0x1E	; 30
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	82 1b       	sub	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	29 85       	ldd	r18, Y+9	; 0x09
     8fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     900:	4b 85       	ldd	r20, Y+11	; 0x0b
     902:	5c 85       	ldd	r21, Y+12	; 0x0c
     904:	04 c0       	rjmp	.+8      	; 0x90e <__fixsfsi+0x68>
     906:	56 95       	lsr	r21
     908:	47 95       	ror	r20
     90a:	37 95       	ror	r19
     90c:	27 95       	ror	r18
     90e:	8a 95       	dec	r24
     910:	d2 f7       	brpl	.-12     	; 0x906 <__fixsfsi+0x60>
     912:	66 23       	and	r22, r22
     914:	b1 f0       	breq	.+44     	; 0x942 <__fixsfsi+0x9c>
     916:	50 95       	com	r21
     918:	40 95       	com	r20
     91a:	30 95       	com	r19
     91c:	21 95       	neg	r18
     91e:	3f 4f       	sbci	r19, 0xFF	; 255
     920:	4f 4f       	sbci	r20, 0xFF	; 255
     922:	5f 4f       	sbci	r21, 0xFF	; 255
     924:	0e c0       	rjmp	.+28     	; 0x942 <__fixsfsi+0x9c>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	09 c0       	rjmp	.+18     	; 0x942 <__fixsfsi+0x9c>
     930:	2f ef       	ldi	r18, 0xFF	; 255
     932:	3f ef       	ldi	r19, 0xFF	; 255
     934:	4f ef       	ldi	r20, 0xFF	; 255
     936:	5f e7       	ldi	r21, 0x7F	; 127
     938:	04 c0       	rjmp	.+8      	; 0x942 <__fixsfsi+0x9c>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e8       	ldi	r21, 0x80	; 128
     942:	b9 01       	movw	r22, r18
     944:	ca 01       	movw	r24, r20
     946:	2c 96       	adiw	r28, 0x0c	; 12
     948:	e2 e0       	ldi	r30, 0x02	; 2
     94a:	0c 94 d8 27 	jmp	0x4fb0	; 0x4fb0 <__epilogue_restores__+0x20>

0000094e <__floatunsisf>:
     94e:	a8 e0       	ldi	r26, 0x08	; 8
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	ed ea       	ldi	r30, 0xAD	; 173
     954:	f4 e0       	ldi	r31, 0x04	; 4
     956:	0c 94 b4 27 	jmp	0x4f68	; 0x4f68 <__prologue_saves__+0x10>
     95a:	7b 01       	movw	r14, r22
     95c:	8c 01       	movw	r16, r24
     95e:	61 15       	cp	r22, r1
     960:	71 05       	cpc	r23, r1
     962:	81 05       	cpc	r24, r1
     964:	91 05       	cpc	r25, r1
     966:	19 f4       	brne	.+6      	; 0x96e <__floatunsisf+0x20>
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	89 83       	std	Y+1, r24	; 0x01
     96c:	60 c0       	rjmp	.+192    	; 0xa2e <__floatunsisf+0xe0>
     96e:	83 e0       	ldi	r24, 0x03	; 3
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 20 05 	call	0xa40	; 0xa40 <__clzsi2>
     98c:	fc 01       	movw	r30, r24
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	f7 ff       	sbrs	r31, 7
     992:	3b c0       	rjmp	.+118    	; 0xa0a <__floatunsisf+0xbc>
     994:	22 27       	eor	r18, r18
     996:	33 27       	eor	r19, r19
     998:	2e 1b       	sub	r18, r30
     99a:	3f 0b       	sbc	r19, r31
     99c:	57 01       	movw	r10, r14
     99e:	68 01       	movw	r12, r16
     9a0:	02 2e       	mov	r0, r18
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__floatunsisf+0x5e>
     9a4:	d6 94       	lsr	r13
     9a6:	c7 94       	ror	r12
     9a8:	b7 94       	ror	r11
     9aa:	a7 94       	ror	r10
     9ac:	0a 94       	dec	r0
     9ae:	d2 f7       	brpl	.-12     	; 0x9a4 <__floatunsisf+0x56>
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	a0 e0       	ldi	r26, 0x00	; 0
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__floatunsisf+0x7c>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	aa 1f       	adc	r26, r26
     9c8:	bb 1f       	adc	r27, r27
     9ca:	2a 95       	dec	r18
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__floatunsisf+0x74>
     9ce:	01 97       	sbiw	r24, 0x01	; 1
     9d0:	a1 09       	sbc	r26, r1
     9d2:	b1 09       	sbc	r27, r1
     9d4:	8e 21       	and	r24, r14
     9d6:	9f 21       	and	r25, r15
     9d8:	a0 23       	and	r26, r16
     9da:	b1 23       	and	r27, r17
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	a1 05       	cpc	r26, r1
     9e0:	b1 05       	cpc	r27, r1
     9e2:	21 f0       	breq	.+8      	; 0x9ec <__floatunsisf+0x9e>
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	4a 29       	or	r20, r10
     9ee:	5b 29       	or	r21, r11
     9f0:	6c 29       	or	r22, r12
     9f2:	7d 29       	or	r23, r13
     9f4:	4d 83       	std	Y+5, r20	; 0x05
     9f6:	5e 83       	std	Y+6, r21	; 0x06
     9f8:	6f 83       	std	Y+7, r22	; 0x07
     9fa:	78 87       	std	Y+8, r23	; 0x08
     9fc:	8e e1       	ldi	r24, 0x1E	; 30
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	8e 1b       	sub	r24, r30
     a02:	9f 0b       	sbc	r25, r31
     a04:	9c 83       	std	Y+4, r25	; 0x04
     a06:	8b 83       	std	Y+3, r24	; 0x03
     a08:	12 c0       	rjmp	.+36     	; 0xa2e <__floatunsisf+0xe0>
     a0a:	30 97       	sbiw	r30, 0x00	; 0
     a0c:	81 f0       	breq	.+32     	; 0xa2e <__floatunsisf+0xe0>
     a0e:	0e 2e       	mov	r0, r30
     a10:	04 c0       	rjmp	.+8      	; 0xa1a <__floatunsisf+0xcc>
     a12:	ee 0c       	add	r14, r14
     a14:	ff 1c       	adc	r15, r15
     a16:	00 1f       	adc	r16, r16
     a18:	11 1f       	adc	r17, r17
     a1a:	0a 94       	dec	r0
     a1c:	d2 f7       	brpl	.-12     	; 0xa12 <__floatunsisf+0xc4>
     a1e:	ed 82       	std	Y+5, r14	; 0x05
     a20:	fe 82       	std	Y+6, r15	; 0x06
     a22:	0f 83       	std	Y+7, r16	; 0x07
     a24:	18 87       	std	Y+8, r17	; 0x08
     a26:	ce 1a       	sub	r12, r30
     a28:	df 0a       	sbc	r13, r31
     a2a:	dc 82       	std	Y+4, r13	; 0x04
     a2c:	cb 82       	std	Y+3, r12	; 0x03
     a2e:	1a 82       	std	Y+2, r1	; 0x02
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 6f 05 	call	0xade	; 0xade <__pack_f>
     a38:	28 96       	adiw	r28, 0x08	; 8
     a3a:	ea e0       	ldi	r30, 0x0A	; 10
     a3c:	0c 94 d0 27 	jmp	0x4fa0	; 0x4fa0 <__epilogue_restores__+0x10>

00000a40 <__clzsi2>:
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	7b 01       	movw	r14, r22
     a4a:	8c 01       	movw	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	e8 16       	cp	r14, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	f8 06       	cpc	r15, r24
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	08 07       	cpc	r16, r24
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	18 07       	cpc	r17, r24
     a5c:	88 f4       	brcc	.+34     	; 0xa80 <__clzsi2+0x40>
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	e8 16       	cp	r14, r24
     a62:	f1 04       	cpc	r15, r1
     a64:	01 05       	cpc	r16, r1
     a66:	11 05       	cpc	r17, r1
     a68:	31 f0       	breq	.+12     	; 0xa76 <__clzsi2+0x36>
     a6a:	28 f0       	brcs	.+10     	; 0xa76 <__clzsi2+0x36>
     a6c:	88 e0       	ldi	r24, 0x08	; 8
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	a0 e0       	ldi	r26, 0x00	; 0
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	17 c0       	rjmp	.+46     	; 0xaa4 <__clzsi2+0x64>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	12 c0       	rjmp	.+36     	; 0xaa4 <__clzsi2+0x64>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	e8 16       	cp	r14, r24
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	f8 06       	cpc	r15, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	08 07       	cpc	r16, r24
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	18 07       	cpc	r17, r24
     a90:	28 f0       	brcs	.+10     	; 0xa9c <__clzsi2+0x5c>
     a92:	88 e1       	ldi	r24, 0x18	; 24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__clzsi2+0x64>
     a9c:	80 e1       	ldi	r24, 0x10	; 16
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	20 e2       	ldi	r18, 0x20	; 32
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	28 1b       	sub	r18, r24
     aae:	39 0b       	sbc	r19, r25
     ab0:	4a 0b       	sbc	r20, r26
     ab2:	5b 0b       	sbc	r21, r27
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__clzsi2+0x7e>
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__clzsi2+0x76>
     ac2:	f7 01       	movw	r30, r14
     ac4:	ea 52       	subi	r30, 0x2A	; 42
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	80 81       	ld	r24, Z
     aca:	28 1b       	sub	r18, r24
     acc:	31 09       	sbc	r19, r1
     ace:	41 09       	sbc	r20, r1
     ad0:	51 09       	sbc	r21, r1
     ad2:	c9 01       	movw	r24, r18
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	08 95       	ret

00000ade <__pack_f>:
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	fc 01       	movw	r30, r24
     aea:	e4 80       	ldd	r14, Z+4	; 0x04
     aec:	f5 80       	ldd	r15, Z+5	; 0x05
     aee:	06 81       	ldd	r16, Z+6	; 0x06
     af0:	17 81       	ldd	r17, Z+7	; 0x07
     af2:	d1 80       	ldd	r13, Z+1	; 0x01
     af4:	80 81       	ld	r24, Z
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	48 f4       	brcc	.+18     	; 0xb0c <__pack_f+0x2e>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	a0 e1       	ldi	r26, 0x10	; 16
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	e8 2a       	or	r14, r24
     b04:	f9 2a       	or	r15, r25
     b06:	0a 2b       	or	r16, r26
     b08:	1b 2b       	or	r17, r27
     b0a:	a5 c0       	rjmp	.+330    	; 0xc56 <__pack_f+0x178>
     b0c:	84 30       	cpi	r24, 0x04	; 4
     b0e:	09 f4       	brne	.+2      	; 0xb12 <__pack_f+0x34>
     b10:	9f c0       	rjmp	.+318    	; 0xc50 <__pack_f+0x172>
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	21 f4       	brne	.+8      	; 0xb1e <__pack_f+0x40>
     b16:	ee 24       	eor	r14, r14
     b18:	ff 24       	eor	r15, r15
     b1a:	87 01       	movw	r16, r14
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <__pack_f+0x4a>
     b1e:	e1 14       	cp	r14, r1
     b20:	f1 04       	cpc	r15, r1
     b22:	01 05       	cpc	r16, r1
     b24:	11 05       	cpc	r17, r1
     b26:	19 f4       	brne	.+6      	; 0xb2e <__pack_f+0x50>
     b28:	e0 e0       	ldi	r30, 0x00	; 0
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	96 c0       	rjmp	.+300    	; 0xc5a <__pack_f+0x17c>
     b2e:	62 81       	ldd	r22, Z+2	; 0x02
     b30:	73 81       	ldd	r23, Z+3	; 0x03
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	62 38       	cpi	r22, 0x82	; 130
     b36:	79 07       	cpc	r23, r25
     b38:	0c f0       	brlt	.+2      	; 0xb3c <__pack_f+0x5e>
     b3a:	5b c0       	rjmp	.+182    	; 0xbf2 <__pack_f+0x114>
     b3c:	22 e8       	ldi	r18, 0x82	; 130
     b3e:	3f ef       	ldi	r19, 0xFF	; 255
     b40:	26 1b       	sub	r18, r22
     b42:	37 0b       	sbc	r19, r23
     b44:	2a 31       	cpi	r18, 0x1A	; 26
     b46:	31 05       	cpc	r19, r1
     b48:	2c f0       	brlt	.+10     	; 0xb54 <__pack_f+0x76>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	2a c0       	rjmp	.+84     	; 0xba8 <__pack_f+0xca>
     b54:	b8 01       	movw	r22, r16
     b56:	a7 01       	movw	r20, r14
     b58:	02 2e       	mov	r0, r18
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__pack_f+0x86>
     b5c:	76 95       	lsr	r23
     b5e:	67 95       	ror	r22
     b60:	57 95       	ror	r21
     b62:	47 95       	ror	r20
     b64:	0a 94       	dec	r0
     b66:	d2 f7       	brpl	.-12     	; 0xb5c <__pack_f+0x7e>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	a0 e0       	ldi	r26, 0x00	; 0
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <__pack_f+0x9c>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	aa 1f       	adc	r26, r26
     b78:	bb 1f       	adc	r27, r27
     b7a:	2a 95       	dec	r18
     b7c:	d2 f7       	brpl	.-12     	; 0xb72 <__pack_f+0x94>
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	a1 09       	sbc	r26, r1
     b82:	b1 09       	sbc	r27, r1
     b84:	8e 21       	and	r24, r14
     b86:	9f 21       	and	r25, r15
     b88:	a0 23       	and	r26, r16
     b8a:	b1 23       	and	r27, r17
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	a1 05       	cpc	r26, r1
     b90:	b1 05       	cpc	r27, r1
     b92:	21 f0       	breq	.+8      	; 0xb9c <__pack_f+0xbe>
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	9a 01       	movw	r18, r20
     b9e:	ab 01       	movw	r20, r22
     ba0:	28 2b       	or	r18, r24
     ba2:	39 2b       	or	r19, r25
     ba4:	4a 2b       	or	r20, r26
     ba6:	5b 2b       	or	r21, r27
     ba8:	da 01       	movw	r26, r20
     baa:	c9 01       	movw	r24, r18
     bac:	8f 77       	andi	r24, 0x7F	; 127
     bae:	90 70       	andi	r25, 0x00	; 0
     bb0:	a0 70       	andi	r26, 0x00	; 0
     bb2:	b0 70       	andi	r27, 0x00	; 0
     bb4:	80 34       	cpi	r24, 0x40	; 64
     bb6:	91 05       	cpc	r25, r1
     bb8:	a1 05       	cpc	r26, r1
     bba:	b1 05       	cpc	r27, r1
     bbc:	39 f4       	brne	.+14     	; 0xbcc <__pack_f+0xee>
     bbe:	27 ff       	sbrs	r18, 7
     bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <__pack_f+0xf6>
     bc2:	20 5c       	subi	r18, 0xC0	; 192
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	4f 4f       	sbci	r20, 0xFF	; 255
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__pack_f+0xf6>
     bcc:	21 5c       	subi	r18, 0xC1	; 193
     bce:	3f 4f       	sbci	r19, 0xFF	; 255
     bd0:	4f 4f       	sbci	r20, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	e0 e0       	ldi	r30, 0x00	; 0
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	20 30       	cpi	r18, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	3a 07       	cpc	r19, r26
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	4a 07       	cpc	r20, r26
     be2:	a0 e4       	ldi	r26, 0x40	; 64
     be4:	5a 07       	cpc	r21, r26
     be6:	10 f0       	brcs	.+4      	; 0xbec <__pack_f+0x10e>
     be8:	e1 e0       	ldi	r30, 0x01	; 1
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	79 01       	movw	r14, r18
     bee:	8a 01       	movw	r16, r20
     bf0:	27 c0       	rjmp	.+78     	; 0xc40 <__pack_f+0x162>
     bf2:	60 38       	cpi	r22, 0x80	; 128
     bf4:	71 05       	cpc	r23, r1
     bf6:	64 f5       	brge	.+88     	; 0xc50 <__pack_f+0x172>
     bf8:	fb 01       	movw	r30, r22
     bfa:	e1 58       	subi	r30, 0x81	; 129
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	d8 01       	movw	r26, r16
     c00:	c7 01       	movw	r24, r14
     c02:	8f 77       	andi	r24, 0x7F	; 127
     c04:	90 70       	andi	r25, 0x00	; 0
     c06:	a0 70       	andi	r26, 0x00	; 0
     c08:	b0 70       	andi	r27, 0x00	; 0
     c0a:	80 34       	cpi	r24, 0x40	; 64
     c0c:	91 05       	cpc	r25, r1
     c0e:	a1 05       	cpc	r26, r1
     c10:	b1 05       	cpc	r27, r1
     c12:	39 f4       	brne	.+14     	; 0xc22 <__pack_f+0x144>
     c14:	e7 fe       	sbrs	r14, 7
     c16:	0d c0       	rjmp	.+26     	; 0xc32 <__pack_f+0x154>
     c18:	80 e4       	ldi	r24, 0x40	; 64
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a0 e0       	ldi	r26, 0x00	; 0
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__pack_f+0x14c>
     c22:	8f e3       	ldi	r24, 0x3F	; 63
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 0e       	add	r14, r24
     c2c:	f9 1e       	adc	r15, r25
     c2e:	0a 1f       	adc	r16, r26
     c30:	1b 1f       	adc	r17, r27
     c32:	17 ff       	sbrs	r17, 7
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <__pack_f+0x162>
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	31 96       	adiw	r30, 0x01	; 1
     c40:	87 e0       	ldi	r24, 0x07	; 7
     c42:	16 95       	lsr	r17
     c44:	07 95       	ror	r16
     c46:	f7 94       	ror	r15
     c48:	e7 94       	ror	r14
     c4a:	8a 95       	dec	r24
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <__pack_f+0x164>
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <__pack_f+0x17c>
     c50:	ee 24       	eor	r14, r14
     c52:	ff 24       	eor	r15, r15
     c54:	87 01       	movw	r16, r14
     c56:	ef ef       	ldi	r30, 0xFF	; 255
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	6e 2f       	mov	r22, r30
     c5c:	67 95       	ror	r22
     c5e:	66 27       	eor	r22, r22
     c60:	67 95       	ror	r22
     c62:	90 2f       	mov	r25, r16
     c64:	9f 77       	andi	r25, 0x7F	; 127
     c66:	d7 94       	ror	r13
     c68:	dd 24       	eor	r13, r13
     c6a:	d7 94       	ror	r13
     c6c:	8e 2f       	mov	r24, r30
     c6e:	86 95       	lsr	r24
     c70:	49 2f       	mov	r20, r25
     c72:	46 2b       	or	r20, r22
     c74:	58 2f       	mov	r21, r24
     c76:	5d 29       	or	r21, r13
     c78:	b7 01       	movw	r22, r14
     c7a:	ca 01       	movw	r24, r20
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	df 90       	pop	r13
     c86:	08 95       	ret

00000c88 <__unpack_f>:
     c88:	fc 01       	movw	r30, r24
     c8a:	db 01       	movw	r26, r22
     c8c:	40 81       	ld	r20, Z
     c8e:	51 81       	ldd	r21, Z+1	; 0x01
     c90:	22 81       	ldd	r18, Z+2	; 0x02
     c92:	62 2f       	mov	r22, r18
     c94:	6f 77       	andi	r22, 0x7F	; 127
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	22 1f       	adc	r18, r18
     c9a:	22 27       	eor	r18, r18
     c9c:	22 1f       	adc	r18, r18
     c9e:	93 81       	ldd	r25, Z+3	; 0x03
     ca0:	89 2f       	mov	r24, r25
     ca2:	88 0f       	add	r24, r24
     ca4:	82 2b       	or	r24, r18
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	99 1f       	adc	r25, r25
     cac:	99 27       	eor	r25, r25
     cae:	99 1f       	adc	r25, r25
     cb0:	11 96       	adiw	r26, 0x01	; 1
     cb2:	9c 93       	st	X, r25
     cb4:	11 97       	sbiw	r26, 0x01	; 1
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	a9 f5       	brne	.+106    	; 0xd26 <__unpack_f+0x9e>
     cbc:	41 15       	cp	r20, r1
     cbe:	51 05       	cpc	r21, r1
     cc0:	61 05       	cpc	r22, r1
     cc2:	71 05       	cpc	r23, r1
     cc4:	11 f4       	brne	.+4      	; 0xcca <__unpack_f+0x42>
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	37 c0       	rjmp	.+110    	; 0xd38 <__unpack_f+0xb0>
     cca:	82 e8       	ldi	r24, 0x82	; 130
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	9a 01       	movw	r18, r20
     cd8:	ab 01       	movw	r20, r22
     cda:	67 e0       	ldi	r22, 0x07	; 7
     cdc:	22 0f       	add	r18, r18
     cde:	33 1f       	adc	r19, r19
     ce0:	44 1f       	adc	r20, r20
     ce2:	55 1f       	adc	r21, r21
     ce4:	6a 95       	dec	r22
     ce6:	d1 f7       	brne	.-12     	; 0xcdc <__unpack_f+0x54>
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	8c 93       	st	X, r24
     cec:	0d c0       	rjmp	.+26     	; 0xd08 <__unpack_f+0x80>
     cee:	22 0f       	add	r18, r18
     cf0:	33 1f       	adc	r19, r19
     cf2:	44 1f       	adc	r20, r20
     cf4:	55 1f       	adc	r21, r21
     cf6:	12 96       	adiw	r26, 0x02	; 2
     cf8:	8d 91       	ld	r24, X+
     cfa:	9c 91       	ld	r25, X
     cfc:	13 97       	sbiw	r26, 0x03	; 3
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	13 96       	adiw	r26, 0x03	; 3
     d02:	9c 93       	st	X, r25
     d04:	8e 93       	st	-X, r24
     d06:	12 97       	sbiw	r26, 0x02	; 2
     d08:	20 30       	cpi	r18, 0x00	; 0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	38 07       	cpc	r19, r24
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	48 07       	cpc	r20, r24
     d12:	80 e4       	ldi	r24, 0x40	; 64
     d14:	58 07       	cpc	r21, r24
     d16:	58 f3       	brcs	.-42     	; 0xcee <__unpack_f+0x66>
     d18:	14 96       	adiw	r26, 0x04	; 4
     d1a:	2d 93       	st	X+, r18
     d1c:	3d 93       	st	X+, r19
     d1e:	4d 93       	st	X+, r20
     d20:	5c 93       	st	X, r21
     d22:	17 97       	sbiw	r26, 0x07	; 7
     d24:	08 95       	ret
     d26:	2f 3f       	cpi	r18, 0xFF	; 255
     d28:	31 05       	cpc	r19, r1
     d2a:	79 f4       	brne	.+30     	; 0xd4a <__unpack_f+0xc2>
     d2c:	41 15       	cp	r20, r1
     d2e:	51 05       	cpc	r21, r1
     d30:	61 05       	cpc	r22, r1
     d32:	71 05       	cpc	r23, r1
     d34:	19 f4       	brne	.+6      	; 0xd3c <__unpack_f+0xb4>
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	8c 93       	st	X, r24
     d3a:	08 95       	ret
     d3c:	64 ff       	sbrs	r22, 4
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <__unpack_f+0xbe>
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8c 93       	st	X, r24
     d44:	12 c0       	rjmp	.+36     	; 0xd6a <__unpack_f+0xe2>
     d46:	1c 92       	st	X, r1
     d48:	10 c0       	rjmp	.+32     	; 0xd6a <__unpack_f+0xe2>
     d4a:	2f 57       	subi	r18, 0x7F	; 127
     d4c:	30 40       	sbci	r19, 0x00	; 0
     d4e:	13 96       	adiw	r26, 0x03	; 3
     d50:	3c 93       	st	X, r19
     d52:	2e 93       	st	-X, r18
     d54:	12 97       	sbiw	r26, 0x02	; 2
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	8c 93       	st	X, r24
     d5a:	87 e0       	ldi	r24, 0x07	; 7
     d5c:	44 0f       	add	r20, r20
     d5e:	55 1f       	adc	r21, r21
     d60:	66 1f       	adc	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	8a 95       	dec	r24
     d66:	d1 f7       	brne	.-12     	; 0xd5c <__unpack_f+0xd4>
     d68:	70 64       	ori	r23, 0x40	; 64
     d6a:	14 96       	adiw	r26, 0x04	; 4
     d6c:	4d 93       	st	X+, r20
     d6e:	5d 93       	st	X+, r21
     d70:	6d 93       	st	X+, r22
     d72:	7c 93       	st	X, r23
     d74:	17 97       	sbiw	r26, 0x07	; 7
     d76:	08 95       	ret

00000d78 <__fpcmp_parts_f>:
     d78:	1f 93       	push	r17
     d7a:	dc 01       	movw	r26, r24
     d7c:	fb 01       	movw	r30, r22
     d7e:	9c 91       	ld	r25, X
     d80:	92 30       	cpi	r25, 0x02	; 2
     d82:	08 f4       	brcc	.+2      	; 0xd86 <__fpcmp_parts_f+0xe>
     d84:	47 c0       	rjmp	.+142    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d86:	80 81       	ld	r24, Z
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	08 f4       	brcc	.+2      	; 0xd8e <__fpcmp_parts_f+0x16>
     d8c:	43 c0       	rjmp	.+134    	; 0xe14 <__fpcmp_parts_f+0x9c>
     d8e:	94 30       	cpi	r25, 0x04	; 4
     d90:	51 f4       	brne	.+20     	; 0xda6 <__fpcmp_parts_f+0x2e>
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	1c 91       	ld	r17, X
     d96:	84 30       	cpi	r24, 0x04	; 4
     d98:	99 f5       	brne	.+102    	; 0xe00 <__fpcmp_parts_f+0x88>
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	68 2f       	mov	r22, r24
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	61 1b       	sub	r22, r17
     da2:	71 09       	sbc	r23, r1
     da4:	3f c0       	rjmp	.+126    	; 0xe24 <__fpcmp_parts_f+0xac>
     da6:	84 30       	cpi	r24, 0x04	; 4
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__fpcmp_parts_f+0x3a>
     daa:	92 30       	cpi	r25, 0x02	; 2
     dac:	31 f4       	brne	.+12     	; 0xdba <__fpcmp_parts_f+0x42>
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	b9 f1       	breq	.+110    	; 0xe20 <__fpcmp_parts_f+0xa8>
     db2:	81 81       	ldd	r24, Z+1	; 0x01
     db4:	88 23       	and	r24, r24
     db6:	89 f1       	breq	.+98     	; 0xe1a <__fpcmp_parts_f+0xa2>
     db8:	2d c0       	rjmp	.+90     	; 0xe14 <__fpcmp_parts_f+0x9c>
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	1c 91       	ld	r17, X
     dbe:	11 97       	sbiw	r26, 0x01	; 1
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	f1 f0       	breq	.+60     	; 0xe00 <__fpcmp_parts_f+0x88>
     dc4:	81 81       	ldd	r24, Z+1	; 0x01
     dc6:	18 17       	cp	r17, r24
     dc8:	d9 f4       	brne	.+54     	; 0xe00 <__fpcmp_parts_f+0x88>
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	2d 91       	ld	r18, X+
     dce:	3c 91       	ld	r19, X
     dd0:	13 97       	sbiw	r26, 0x03	; 3
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	82 17       	cp	r24, r18
     dd8:	93 07       	cpc	r25, r19
     dda:	94 f0       	brlt	.+36     	; 0xe00 <__fpcmp_parts_f+0x88>
     ddc:	28 17       	cp	r18, r24
     dde:	39 07       	cpc	r19, r25
     de0:	bc f0       	brlt	.+46     	; 0xe10 <__fpcmp_parts_f+0x98>
     de2:	14 96       	adiw	r26, 0x04	; 4
     de4:	8d 91       	ld	r24, X+
     de6:	9d 91       	ld	r25, X+
     de8:	0d 90       	ld	r0, X+
     dea:	bc 91       	ld	r27, X
     dec:	a0 2d       	mov	r26, r0
     dee:	24 81       	ldd	r18, Z+4	; 0x04
     df0:	35 81       	ldd	r19, Z+5	; 0x05
     df2:	46 81       	ldd	r20, Z+6	; 0x06
     df4:	57 81       	ldd	r21, Z+7	; 0x07
     df6:	28 17       	cp	r18, r24
     df8:	39 07       	cpc	r19, r25
     dfa:	4a 07       	cpc	r20, r26
     dfc:	5b 07       	cpc	r21, r27
     dfe:	18 f4       	brcc	.+6      	; 0xe06 <__fpcmp_parts_f+0x8e>
     e00:	11 23       	and	r17, r17
     e02:	41 f0       	breq	.+16     	; 0xe14 <__fpcmp_parts_f+0x9c>
     e04:	0a c0       	rjmp	.+20     	; 0xe1a <__fpcmp_parts_f+0xa2>
     e06:	82 17       	cp	r24, r18
     e08:	93 07       	cpc	r25, r19
     e0a:	a4 07       	cpc	r26, r20
     e0c:	b5 07       	cpc	r27, r21
     e0e:	40 f4       	brcc	.+16     	; 0xe20 <__fpcmp_parts_f+0xa8>
     e10:	11 23       	and	r17, r17
     e12:	19 f0       	breq	.+6      	; 0xe1a <__fpcmp_parts_f+0xa2>
     e14:	61 e0       	ldi	r22, 0x01	; 1
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <__fpcmp_parts_f+0xac>
     e1a:	6f ef       	ldi	r22, 0xFF	; 255
     e1c:	7f ef       	ldi	r23, 0xFF	; 255
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <__fpcmp_parts_f+0xac>
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	cb 01       	movw	r24, r22
     e26:	1f 91       	pop	r17
     e28:	08 95       	ret

00000e2a <STR_CMP>:
#include "STR.h"
#include "../../MCAL/UART/UART_interface.h"


uint8_t STR_CMP(uint8_t* STR1,uint8_t* STR2)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	29 97       	sbiw	r28, 0x09	; 9
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	9f 83       	std	Y+7, r25	; 0x07
     e40:	8e 83       	std	Y+6, r24	; 0x06
     e42:	79 87       	std	Y+9, r23	; 0x09
     e44:	68 87       	std	Y+8, r22	; 0x08
	uint8_t u8StringCounter=0;
     e46:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8String1_Length=0;
     e48:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t u8String2_Length=0;
     e4a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t u8SimilarityCounter=0;
     e4c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8CMPResult;

	do
	{
		u8String1_Length++;
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	8c 83       	std	Y+4, r24	; 0x04
		u8StringCounter++;
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	8d 83       	std	Y+5, r24	; 0x05
	}while (STR1[u8StringCounter]!='\0'&&STR1[u8StringCounter]!=0x0D);
     e5a:	8d 81       	ldd	r24, Y+5	; 0x05
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	8e 81       	ldd	r24, Y+6	; 0x06
     e62:	9f 81       	ldd	r25, Y+7	; 0x07
     e64:	fc 01       	movw	r30, r24
     e66:	e2 0f       	add	r30, r18
     e68:	f3 1f       	adc	r31, r19
     e6a:	80 81       	ld	r24, Z
     e6c:	88 23       	and	r24, r24
     e6e:	59 f0       	breq	.+22     	; 0xe86 <STR_CMP+0x5c>
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	8e 81       	ldd	r24, Y+6	; 0x06
     e78:	9f 81       	ldd	r25, Y+7	; 0x07
     e7a:	fc 01       	movw	r30, r24
     e7c:	e2 0f       	add	r30, r18
     e7e:	f3 1f       	adc	r31, r19
     e80:	80 81       	ld	r24, Z
     e82:	8d 30       	cpi	r24, 0x0D	; 13
     e84:	21 f7       	brne	.-56     	; 0xe4e <STR_CMP+0x24>

	u8StringCounter=0;
     e86:	1d 82       	std	Y+5, r1	; 0x05

	do
	{
		u8String2_Length++;
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
     e8c:	8b 83       	std	Y+3, r24	; 0x03
		u8StringCounter++;
     e8e:	8d 81       	ldd	r24, Y+5	; 0x05
     e90:	8f 5f       	subi	r24, 0xFF	; 255
     e92:	8d 83       	std	Y+5, r24	; 0x05
	}while (STR2[u8StringCounter]!='\0'&&STR2[u8StringCounter]!=0x0D);
     e94:	8d 81       	ldd	r24, Y+5	; 0x05
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	88 85       	ldd	r24, Y+8	; 0x08
     e9c:	99 85       	ldd	r25, Y+9	; 0x09
     e9e:	fc 01       	movw	r30, r24
     ea0:	e2 0f       	add	r30, r18
     ea2:	f3 1f       	adc	r31, r19
     ea4:	80 81       	ld	r24, Z
     ea6:	88 23       	and	r24, r24
     ea8:	59 f0       	breq	.+22     	; 0xec0 <STR_CMP+0x96>
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	88 85       	ldd	r24, Y+8	; 0x08
     eb2:	99 85       	ldd	r25, Y+9	; 0x09
     eb4:	fc 01       	movw	r30, r24
     eb6:	e2 0f       	add	r30, r18
     eb8:	f3 1f       	adc	r31, r19
     eba:	80 81       	ld	r24, Z
     ebc:	8d 30       	cpi	r24, 0x0D	; 13
     ebe:	21 f7       	brne	.-56     	; 0xe88 <STR_CMP+0x5e>

	u8StringCounter=0;
     ec0:	1d 82       	std	Y+5, r1	; 0x05


	if (u8String2_Length==u8String1_Length)
     ec2:	9b 81       	ldd	r25, Y+3	; 0x03
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	98 17       	cp	r25, r24
     ec8:	01 f5       	brne	.+64     	; 0xf0a <STR_CMP+0xe0>
	{

		for (u8StringCounter=0;u8StringCounter<u8String1_Length;u8StringCounter++)
     eca:	1d 82       	std	Y+5, r1	; 0x05
     ecc:	1a c0       	rjmp	.+52     	; 0xf02 <STR_CMP+0xd8>
		{
			if (STR1[u8StringCounter]==STR2[u8StringCounter])
     ece:	8d 81       	ldd	r24, Y+5	; 0x05
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	8e 81       	ldd	r24, Y+6	; 0x06
     ed6:	9f 81       	ldd	r25, Y+7	; 0x07
     ed8:	fc 01       	movw	r30, r24
     eda:	e2 0f       	add	r30, r18
     edc:	f3 1f       	adc	r31, r19
     ede:	40 81       	ld	r20, Z
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	88 85       	ldd	r24, Y+8	; 0x08
     ee8:	99 85       	ldd	r25, Y+9	; 0x09
     eea:	fc 01       	movw	r30, r24
     eec:	e2 0f       	add	r30, r18
     eee:	f3 1f       	adc	r31, r19
     ef0:	80 81       	ld	r24, Z
     ef2:	48 17       	cp	r20, r24
     ef4:	51 f4       	brne	.+20     	; 0xf0a <STR_CMP+0xe0>
			{
				u8SimilarityCounter++;
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	8a 83       	std	Y+2, r24	; 0x02


	if (u8String2_Length==u8String1_Length)
	{

		for (u8StringCounter=0;u8StringCounter<u8String1_Length;u8StringCounter++)
     efc:	8d 81       	ldd	r24, Y+5	; 0x05
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	8d 83       	std	Y+5, r24	; 0x05
     f02:	9d 81       	ldd	r25, Y+5	; 0x05
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	98 17       	cp	r25, r24
     f08:	10 f3       	brcs	.-60     	; 0xece <STR_CMP+0xa4>
			}
		}
	}


	if (u8String1_Length==u8SimilarityCounter && u8SimilarityCounter!=0)
     f0a:	9c 81       	ldd	r25, Y+4	; 0x04
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	98 17       	cp	r25, r24
     f10:	31 f4       	brne	.+12     	; 0xf1e <STR_CMP+0xf4>
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	88 23       	and	r24, r24
     f16:	19 f0       	breq	.+6      	; 0xf1e <STR_CMP+0xf4>
	{
		u8CMPResult=CMP_MATCH;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <STR_CMP+0xf6>
	}else
	{
		u8CMPResult=CMP_NOT_MATCHED;
     f1e:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8CMPResult;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
}
     f22:	29 96       	adiw	r28, 0x09	; 9
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <StringToInt>:
 */
 
#include "SERVICE.h"

uint8_t StringToInt (uint8_t * Str,uint32_t* pu32Result)
{
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	2d 97       	sbiw	r28, 0x0d	; 13
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	9a 87       	std	Y+10, r25	; 0x0a
     f52:	89 87       	std	Y+9, r24	; 0x09
     f54:	7c 87       	std	Y+12, r23	; 0x0c
     f56:	6b 87       	std	Y+11, r22	; 0x0b
		*pu32Result = (*(pu32Result) * 10)+ ( *Str - '0' );
		Str++ ;
	}
	return 1 ;
	*/
    uint8_t u8ArrayCounter=0;
     f58:	18 86       	std	Y+8, r1	; 0x08
    uint32_t u8Multiplier=1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	8c 83       	std	Y+4, r24	; 0x04
     f64:	9d 83       	std	Y+5, r25	; 0x05
     f66:	ae 83       	std	Y+6, r26	; 0x06
     f68:	bf 83       	std	Y+7, r27	; 0x07
    *pu32Result=0;
     f6a:	eb 85       	ldd	r30, Y+11	; 0x0b
     f6c:	fc 85       	ldd	r31, Y+12	; 0x0c
     f6e:	10 82       	st	Z, r1
     f70:	11 82       	std	Z+1, r1	; 0x01
     f72:	12 82       	std	Z+2, r1	; 0x02
     f74:	13 82       	std	Z+3, r1	; 0x03
    uint8_t ArrayNav=0;
     f76:	1b 82       	std	Y+3, r1	; 0x03
     f78:	03 c0       	rjmp	.+6      	; 0xf80 <StringToInt+0x4c>
    //UART_u8SendString(ReceivedStr);
    while (Str[u8ArrayCounter]!=0x00)
    {
    	u8ArrayCounter++;
     f7a:	88 85       	ldd	r24, Y+8	; 0x08
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	88 87       	std	Y+8, r24	; 0x08
    uint8_t u8ArrayCounter=0;
    uint32_t u8Multiplier=1;
    *pu32Result=0;
    uint8_t ArrayNav=0;
    //UART_u8SendString(ReceivedStr);
    while (Str[u8ArrayCounter]!=0x00)
     f80:	88 85       	ldd	r24, Y+8	; 0x08
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	89 85       	ldd	r24, Y+9	; 0x09
     f88:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8a:	fc 01       	movw	r30, r24
     f8c:	e2 0f       	add	r30, r18
     f8e:	f3 1f       	adc	r31, r19
     f90:	80 81       	ld	r24, Z
     f92:	88 23       	and	r24, r24
     f94:	91 f7       	brne	.-28     	; 0xf7a <StringToInt+0x46>
    {
    	u8ArrayCounter++;
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
     f96:	1a 82       	std	Y+2, r1	; 0x02
     f98:	58 c0       	rjmp	.+176    	; 0x104a <StringToInt+0x116>
    {

        for(uint8_t multiplier=(u8ArrayCounter-1)-loopCounter;multiplier>0;multiplier--)
     f9a:	98 85       	ldd	r25, Y+8	; 0x08
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	29 2f       	mov	r18, r25
     fa0:	28 1b       	sub	r18, r24
     fa2:	82 2f       	mov	r24, r18
     fa4:	81 50       	subi	r24, 0x01	; 1
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	15 c0       	rjmp	.+42     	; 0xfd4 <StringToInt+0xa0>
        {
        	u8Multiplier=10*u8Multiplier;
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	9d 81       	ldd	r25, Y+5	; 0x05
     fae:	ae 81       	ldd	r26, Y+6	; 0x06
     fb0:	bf 81       	ldd	r27, Y+7	; 0x07
     fb2:	2a e0       	ldi	r18, 0x0A	; 10
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e0       	ldi	r20, 0x00	; 0
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 57 27 	call	0x4eae	; 0x4eae <__mulsi3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	8c 83       	std	Y+4, r24	; 0x04
     fc8:	9d 83       	std	Y+5, r25	; 0x05
     fca:	ae 83       	std	Y+6, r26	; 0x06
     fcc:	bf 83       	std	Y+7, r27	; 0x07
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    {

        for(uint8_t multiplier=(u8ArrayCounter-1)-loopCounter;multiplier>0;multiplier--)
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	81 50       	subi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	88 23       	and	r24, r24
     fd8:	41 f7       	brne	.-48     	; 0xfaa <StringToInt+0x76>
        {
        	u8Multiplier=10*u8Multiplier;
        }
        *pu32Result = *pu32Result + ((Str[ArrayNav]-'0')*u8Multiplier);
     fda:	eb 85       	ldd	r30, Y+11	; 0x0b
     fdc:	fc 85       	ldd	r31, Y+12	; 0x0c
     fde:	e0 80       	ld	r14, Z
     fe0:	f1 80       	ldd	r15, Z+1	; 0x01
     fe2:	02 81       	ldd	r16, Z+2	; 0x02
     fe4:	13 81       	ldd	r17, Z+3	; 0x03
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	89 85       	ldd	r24, Y+9	; 0x09
     fee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff0:	fc 01       	movw	r30, r24
     ff2:	e2 0f       	add	r30, r18
     ff4:	f3 1f       	adc	r31, r19
     ff6:	80 81       	ld	r24, Z
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	c0 97       	sbiw	r24, 0x30	; 48
     ffe:	aa 27       	eor	r26, r26
    1000:	97 fd       	sbrc	r25, 7
    1002:	a0 95       	com	r26
    1004:	ba 2f       	mov	r27, r26
    1006:	2c 81       	ldd	r18, Y+4	; 0x04
    1008:	3d 81       	ldd	r19, Y+5	; 0x05
    100a:	4e 81       	ldd	r20, Y+6	; 0x06
    100c:	5f 81       	ldd	r21, Y+7	; 0x07
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 57 27 	call	0x4eae	; 0x4eae <__mulsi3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	8e 0d       	add	r24, r14
    101c:	9f 1d       	adc	r25, r15
    101e:	a0 1f       	adc	r26, r16
    1020:	b1 1f       	adc	r27, r17
    1022:	eb 85       	ldd	r30, Y+11	; 0x0b
    1024:	fc 85       	ldd	r31, Y+12	; 0x0c
    1026:	80 83       	st	Z, r24
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	a2 83       	std	Z+2, r26	; 0x02
    102c:	b3 83       	std	Z+3, r27	; 0x03
        ArrayNav++;
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	8b 83       	std	Y+3, r24	; 0x03
        u8Multiplier=1;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	a0 e0       	ldi	r26, 0x00	; 0
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	8c 83       	std	Y+4, r24	; 0x04
    103e:	9d 83       	std	Y+5, r25	; 0x05
    1040:	ae 83       	std	Y+6, r26	; 0x06
    1042:	bf 83       	std	Y+7, r27	; 0x07
    while (Str[u8ArrayCounter]!=0x00)
    {
    	u8ArrayCounter++;
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	8a 83       	std	Y+2, r24	; 0x02
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	88 85       	ldd	r24, Y+8	; 0x08
    104e:	98 17       	cp	r25, r24
    1050:	08 f4       	brcc	.+2      	; 0x1054 <StringToInt+0x120>
    1052:	a3 cf       	rjmp	.-186    	; 0xf9a <StringToInt+0x66>
        }
        *pu32Result = *pu32Result + ((Str[ArrayNav]-'0')*u8Multiplier);
        ArrayNav++;
        u8Multiplier=1;
    }
}
    1054:	2d 96       	adiw	r28, 0x0d	; 13
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	08 95       	ret

0000106e <StringToFloat>:

f32_t StringToFloat (uint8_t * Str)
{
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	66 97       	sbiw	r28, 0x16	; 22
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	9a 8b       	std	Y+18, r25	; 0x12
    108c:	89 8b       	std	Y+17, r24	; 0x11
	f32_t iPart , dPart , result , mult ;
	mult = 0.1 ;
    108e:	8d ec       	ldi	r24, 0xCD	; 205
    1090:	9c ec       	ldi	r25, 0xCC	; 204
    1092:	ac ec       	ldi	r26, 0xCC	; 204
    1094:	bd e3       	ldi	r27, 0x3D	; 61
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	ab 83       	std	Y+3, r26	; 0x03
    109c:	bc 83       	std	Y+4, r27	; 0x04
	iPart = dPart = result = 0.0 ;
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	a0 e0       	ldi	r26, 0x00	; 0
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	8d 83       	std	Y+5, r24	; 0x05
    10a8:	9e 83       	std	Y+6, r25	; 0x06
    10aa:	af 83       	std	Y+7, r26	; 0x07
    10ac:	b8 87       	std	Y+8, r27	; 0x08
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	af 81       	ldd	r26, Y+7	; 0x07
    10b4:	b8 85       	ldd	r27, Y+8	; 0x08
    10b6:	89 87       	std	Y+9, r24	; 0x09
    10b8:	9a 87       	std	Y+10, r25	; 0x0a
    10ba:	ab 87       	std	Y+11, r26	; 0x0b
    10bc:	bc 87       	std	Y+12, r27	; 0x0c
    10be:	89 85       	ldd	r24, Y+9	; 0x09
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	ab 85       	ldd	r26, Y+11	; 0x0b
    10c4:	bc 85       	ldd	r27, Y+12	; 0x0c
    10c6:	8d 87       	std	Y+13, r24	; 0x0d
    10c8:	9e 87       	std	Y+14, r25	; 0x0e
    10ca:	af 87       	std	Y+15, r26	; 0x0f
    10cc:	b8 8b       	std	Y+16, r27	; 0x10
	UART_u8SendString(Str);
    10ce:	89 89       	ldd	r24, Y+17	; 0x11
    10d0:	9a 89       	ldd	r25, Y+18	; 0x12
    10d2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <UART_u8SendString>
	UART_u8SendByte(0x0D);
    10d6:	8d e0       	ldi	r24, 0x0D	; 13
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 bb 09 	call	0x1376	; 0x1376 <UART_u8SendByte>
    10de:	39 c0       	rjmp	.+114    	; 0x1152 <StringToFloat+0xe4>
	while( *Str != '.' ) 
	{
		iPart = iPart * 10.0 + (*Str -'0') ;
    10e0:	6d 85       	ldd	r22, Y+13	; 0x0d
    10e2:	7e 85       	ldd	r23, Y+14	; 0x0e
    10e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e6:	98 89       	ldd	r25, Y+16	; 0x10
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e2       	ldi	r20, 0x20	; 32
    10ee:	51 e4       	ldi	r21, 0x41	; 65
    10f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	7c 01       	movw	r14, r24
    10fa:	8d 01       	movw	r16, r26
    10fc:	e9 89       	ldd	r30, Y+17	; 0x11
    10fe:	fa 89       	ldd	r31, Y+18	; 0x12
    1100:	80 81       	ld	r24, Z
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	c0 97       	sbiw	r24, 0x30	; 48
    1108:	aa 27       	eor	r26, r26
    110a:	97 fd       	sbrc	r25, 7
    110c:	a0 95       	com	r26
    110e:	ba 2f       	mov	r27, r26
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    1118:	9b 01       	movw	r18, r22
    111a:	ac 01       	movw	r20, r24
    111c:	c8 01       	movw	r24, r16
    111e:	b7 01       	movw	r22, r14
    1120:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	8d 87       	std	Y+13, r24	; 0x0d
    112a:	9e 87       	std	Y+14, r25	; 0x0e
    112c:	af 87       	std	Y+15, r26	; 0x0f
    112e:	b8 8b       	std	Y+16, r27	; 0x10
		UART_u8SendInt(iPart);
    1130:	8d 85       	ldd	r24, Y+13	; 0x0d
    1132:	9e 85       	ldd	r25, Y+14	; 0x0e
    1134:	af 85       	ldd	r26, Y+15	; 0x0f
    1136:	b8 89       	ldd	r27, Y+16	; 0x10
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	0e 94 de 09 	call	0x13bc	; 0x13bc <UART_u8SendInt>
		UART_u8SendByte(0x0D);
    1140:	8d e0       	ldi	r24, 0x0D	; 13
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 bb 09 	call	0x1376	; 0x1376 <UART_u8SendByte>
		Str++ ;
    1148:	89 89       	ldd	r24, Y+17	; 0x11
    114a:	9a 89       	ldd	r25, Y+18	; 0x12
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	9a 8b       	std	Y+18, r25	; 0x12
    1150:	89 8b       	std	Y+17, r24	; 0x11
	f32_t iPart , dPart , result , mult ;
	mult = 0.1 ;
	iPart = dPart = result = 0.0 ;
	UART_u8SendString(Str);
	UART_u8SendByte(0x0D);
	while( *Str != '.' ) 
    1152:	e9 89       	ldd	r30, Y+17	; 0x11
    1154:	fa 89       	ldd	r31, Y+18	; 0x12
    1156:	80 81       	ld	r24, Z
    1158:	8e 32       	cpi	r24, 0x2E	; 46
    115a:	11 f6       	brne	.-124    	; 0x10e0 <StringToFloat+0x72>
		iPart = iPart * 10.0 + (*Str -'0') ;
		UART_u8SendInt(iPart);
		UART_u8SendByte(0x0D);
		Str++ ;
	}
	Str++;
    115c:	89 89       	ldd	r24, Y+17	; 0x11
    115e:	9a 89       	ldd	r25, Y+18	; 0x12
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	9a 8b       	std	Y+18, r25	; 0x12
    1164:	89 8b       	std	Y+17, r24	; 0x11
    1166:	49 c0       	rjmp	.+146    	; 0x11fa <StringToFloat+0x18c>
	while( *Str != '\0' ) 
	{
		dPart += (*Str - '0')*mult;
    1168:	e9 89       	ldd	r30, Y+17	; 0x11
    116a:	fa 89       	ldd	r31, Y+18	; 0x12
    116c:	80 81       	ld	r24, Z
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	c0 97       	sbiw	r24, 0x30	; 48
    1174:	aa 27       	eor	r26, r26
    1176:	97 fd       	sbrc	r25, 7
    1178:	a0 95       	com	r26
    117a:	ba 2f       	mov	r27, r26
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__floatsisf>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	29 81       	ldd	r18, Y+1	; 0x01
    118e:	3a 81       	ldd	r19, Y+2	; 0x02
    1190:	4b 81       	ldd	r20, Y+3	; 0x03
    1192:	5c 81       	ldd	r21, Y+4	; 0x04
    1194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	9c 01       	movw	r18, r24
    119e:	ad 01       	movw	r20, r26
    11a0:	69 85       	ldd	r22, Y+9	; 0x09
    11a2:	7a 85       	ldd	r23, Y+10	; 0x0a
    11a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    11a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    11a8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	89 87       	std	Y+9, r24	; 0x09
    11b2:	9a 87       	std	Y+10, r25	; 0x0a
    11b4:	ab 87       	std	Y+11, r26	; 0x0b
    11b6:	bc 87       	std	Y+12, r27	; 0x0c
		mult *= 0.1;
    11b8:	69 81       	ldd	r22, Y+1	; 0x01
    11ba:	7a 81       	ldd	r23, Y+2	; 0x02
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	2d ec       	ldi	r18, 0xCD	; 205
    11c2:	3c ec       	ldi	r19, 0xCC	; 204
    11c4:	4c ec       	ldi	r20, 0xCC	; 204
    11c6:	5d e3       	ldi	r21, 0x3D	; 61
    11c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	9a 83       	std	Y+2, r25	; 0x02
    11d4:	ab 83       	std	Y+3, r26	; 0x03
    11d6:	bc 83       	std	Y+4, r27	; 0x04
		Str++ ;
    11d8:	89 89       	ldd	r24, Y+17	; 0x11
    11da:	9a 89       	ldd	r25, Y+18	; 0x12
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	9a 8b       	std	Y+18, r25	; 0x12
    11e0:	89 8b       	std	Y+17, r24	; 0x11
		UART_u8SendInt(dPart);
    11e2:	89 85       	ldd	r24, Y+9	; 0x09
    11e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e6:	ab 85       	ldd	r26, Y+11	; 0x0b
    11e8:	bc 85       	ldd	r27, Y+12	; 0x0c
    11ea:	bc 01       	movw	r22, r24
    11ec:	cd 01       	movw	r24, r26
    11ee:	0e 94 de 09 	call	0x13bc	; 0x13bc <UART_u8SendInt>
		UART_u8SendByte(0x0D);
    11f2:	8d e0       	ldi	r24, 0x0D	; 13
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 bb 09 	call	0x1376	; 0x1376 <UART_u8SendByte>
		UART_u8SendInt(iPart);
		UART_u8SendByte(0x0D);
		Str++ ;
	}
	Str++;
	while( *Str != '\0' ) 
    11fa:	e9 89       	ldd	r30, Y+17	; 0x11
    11fc:	fa 89       	ldd	r31, Y+18	; 0x12
    11fe:	80 81       	ld	r24, Z
    1200:	88 23       	and	r24, r24
    1202:	09 f0       	breq	.+2      	; 0x1206 <StringToFloat+0x198>
    1204:	b1 cf       	rjmp	.-158    	; 0x1168 <StringToFloat+0xfa>
		mult *= 0.1;
		Str++ ;
		UART_u8SendInt(dPart);
		UART_u8SendByte(0x0D);
	}
	result = iPart + dPart;
    1206:	6d 85       	ldd	r22, Y+13	; 0x0d
    1208:	7e 85       	ldd	r23, Y+14	; 0x0e
    120a:	8f 85       	ldd	r24, Y+15	; 0x0f
    120c:	98 89       	ldd	r25, Y+16	; 0x10
    120e:	29 85       	ldd	r18, Y+9	; 0x09
    1210:	3a 85       	ldd	r19, Y+10	; 0x0a
    1212:	4b 85       	ldd	r20, Y+11	; 0x0b
    1214:	5c 85       	ldd	r21, Y+12	; 0x0c
    1216:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	8d 83       	std	Y+5, r24	; 0x05
    1220:	9e 83       	std	Y+6, r25	; 0x06
    1222:	af 83       	std	Y+7, r26	; 0x07
    1224:	b8 87       	std	Y+8, r27	; 0x08
}
    1226:	66 96       	adiw	r28, 0x16	; 22
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	08 95       	ret

00001240 <UART_u8Init>:
/**
 * @fn uint8_t UART_u8Init(uint32_t UART_u32BaudRate)
 * @brief This function is used to Initiate the UART Peripheral
 */
uint8_t UART_u8Init(uint32_t UART_u32BaudRate)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	27 97       	sbiw	r28, 0x07	; 7
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	6c 83       	std	Y+4, r22	; 0x04
    1256:	7d 83       	std	Y+5, r23	; 0x05
    1258:	8e 83       	std	Y+6, r24	; 0x06
    125a:	9f 83       	std	Y+7, r25	; 0x07
	uint8_t u8ErrorState = UART_OK;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t u16UBBR;  /// A Temporary Variable used to hold the calculated value of the UBBR register depending on the Baudrate

	// Make the Access to UCSRC Register
	SET_BIT(UCSRC_REG,URSEL_BIT);
    1260:	a0 e4       	ldi	r26, 0x40	; 64
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e0 e4       	ldi	r30, 0x40	; 64
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 68       	ori	r24, 0x80	; 128
    126c:	8c 93       	st	X, r24

	/*
	 * Set the operation mode of the UART Depending on the chosen UART_OPERATION_MODE Configuration
	 */
#if   UART_OPERATION_MODE == UART_ASYNC_NORMAL_SPEED
	CLR_BIT(UCSRC_REG,UMSEL_BIT);
    126e:	a0 e4       	ldi	r26, 0x40	; 64
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e0 e4       	ldi	r30, 0x40	; 64
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8f 7b       	andi	r24, 0xBF	; 191
    127a:	8c 93       	st	X, r24
	CLR_BIT(UCSRA_REG,U2X_BIT);
    127c:	ab e2       	ldi	r26, 0x2B	; 43
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	eb e2       	ldi	r30, 0x2B	; 43
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	8d 7f       	andi	r24, 0xFD	; 253
    1288:	8c 93       	st	X, r24
	//Calculate the UBBR Value depending on the CPU frequency and the input desired baudrate
	// in the UART_ASYNC_NORMAL_SPEED the baudrate divisor is 16
	u16UBBR = (UART_F_CPU/(16UL*UART_u32BaudRate)-1);
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	9d 81       	ldd	r25, Y+5	; 0x05
    128e:	ae 81       	ldd	r26, Y+6	; 0x06
    1290:	bf 81       	ldd	r27, Y+7	; 0x07
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	aa 1f       	adc	r26, r26
    1298:	bb 1f       	adc	r27, r27
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	aa 1f       	adc	r26, r26
    12a0:	bb 1f       	adc	r27, r27
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	aa 1f       	adc	r26, r26
    12a8:	bb 1f       	adc	r27, r27
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	aa 1f       	adc	r26, r26
    12b0:	bb 1f       	adc	r27, r27
    12b2:	9c 01       	movw	r18, r24
    12b4:	ad 01       	movw	r20, r26
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	92 e1       	ldi	r25, 0x12	; 18
    12ba:	aa e7       	ldi	r26, 0x7A	; 122
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	bc 01       	movw	r22, r24
    12c0:	cd 01       	movw	r24, r26
    12c2:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <__udivmodsi4>
    12c6:	da 01       	movw	r26, r20
    12c8:	c9 01       	movw	r24, r18
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	89 83       	std	Y+1, r24	; 0x01
#elif UART_CHARACTER_SIZE == UART_7_BIT_CHARACTER
	CLR_BIT(UCSRC_REG,UCSZ0_BIT);
	SET_BIT(UCSRC_REG,UCSZ1_BIT);
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
#elif UART_CHARACTER_SIZE == UART_8_BIT_CHARACTER
	SET_BIT(UCSRC_REG,UCSZ0_BIT);
    12d0:	a0 e4       	ldi	r26, 0x40	; 64
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e0 e4       	ldi	r30, 0x40	; 64
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	82 60       	ori	r24, 0x02	; 2
    12dc:	8c 93       	st	X, r24
	SET_BIT(UCSRC_REG,UCSZ1_BIT);
    12de:	a0 e4       	ldi	r26, 0x40	; 64
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e0 e4       	ldi	r30, 0x40	; 64
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	84 60       	ori	r24, 0x04	; 4
    12ea:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
    12ec:	aa e2       	ldi	r26, 0x2A	; 42
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ea e2       	ldi	r30, 0x2A	; 42
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	8b 7f       	andi	r24, 0xFB	; 251
    12f8:	8c 93       	st	X, r24

	/*
	 * Set the Parity mode of the UART Depending on the chosen UART_PARITY_MODE Configuration
	 */
#if UART_PARITY_MODE == UART_DISABLE_PARITY
	CLR_BIT(UCSRC_REG,UPM0_BIT);
    12fa:	a0 e4       	ldi	r26, 0x40	; 64
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e0 e4       	ldi	r30, 0x40	; 64
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 7e       	andi	r24, 0xEF	; 239
    1306:	8c 93       	st	X, r24
	CLR_BIT(UCSRC_REG,UPM1_BIT);
    1308:	a0 e4       	ldi	r26, 0x40	; 64
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e0 e4       	ldi	r30, 0x40	; 64
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	8f 7d       	andi	r24, 0xDF	; 223
    1314:	8c 93       	st	X, r24

	/*
	 * Set the Stop bits number in the frame of the UART Depending on the chosen UART_STOP_BITS_NUMBER Configuration
	 */
#if UART_STOP_BITS_NUMBER == UART_1_STOP_BIT
	CLR_BIT(UCSRC_REG,USBS_BIT);
    1316:	a0 e4       	ldi	r26, 0x40	; 64
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e0 e4       	ldi	r30, 0x40	; 64
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	87 7f       	andi	r24, 0xF7	; 247
    1322:	8c 93       	st	X, r24
	// if the UART_STOP_BITS_NUMBER is not one of this values then update the Error state
	u8ErrorState = WRONG_STOP_BITS_CFG;
#endif

	// Set the UBRR Register to the calculated value to configure the input baudrate
	UBRRL_REG= u16UBBR;
    1324:	e9 e2       	ldi	r30, 0x29	; 41
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	80 83       	st	Z, r24
	UBRRH_REG= (u16UBBR>>8);
    132c:	e0 e4       	ldi	r30, 0x40	; 64
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	89 2f       	mov	r24, r25
    1336:	99 27       	eor	r25, r25
    1338:	80 83       	st	Z, r24
	//Enable the Receiving and Transmitting Capabilities in the UART
	SET_BIT(UCSRB_REG,RXEN_BIT);
    133a:	aa e2       	ldi	r26, 0x2A	; 42
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	ea e2       	ldi	r30, 0x2A	; 42
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	80 61       	ori	r24, 0x10	; 16
    1346:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,TXEN_BIT);
    1348:	aa e2       	ldi	r26, 0x2A	; 42
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	ea e2       	ldi	r30, 0x2A	; 42
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	88 60       	ori	r24, 0x08	; 8
    1354:	8c 93       	st	X, r24
	if (u8ErrorState == UART_OK)
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	19 f4       	brne	.+6      	; 0x1362 <UART_u8Init+0x122>
	{
		// if there is no errors happened the Rise the Initialization flag indicating that the Peripherals is Initialized Correctly
		gu8_IntializationFlag = UART_INITIALIZED;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	80 93 e6 01 	sts	0x01E6, r24
	}else
	{
		//NOP
	}
	return u8ErrorState;
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1364:	27 96       	adiw	r28, 0x07	; 7
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <UART_u8SendByte>:
 * @fn uint8_t UART_u8SendByte(uint8_t u8Data)
 * @brief This function is used to Send a Byte by polling mechanism
 * @pre the UART must be initialized
 */
uint8_t UART_u8SendByte(uint8_t u8Data)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <UART_u8SendByte+0x6>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState;
	if (gu8_IntializationFlag==UART_INITIALIZED) // Check if the UART is initialized
    1382:	80 91 e6 01 	lds	r24, 0x01E6
    1386:	81 30       	cpi	r24, 0x01	; 1
    1388:	89 f4       	brne	.+34     	; 0x13ac <UART_u8SendByte+0x36>
	{
		// Busy wait until the current UART Transmittion ends and the UDR register is Available
		while(!GET_BIT(UCSRA_REG,UDRE_BIT));
    138a:	eb e2       	ldi	r30, 0x2B	; 43
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	82 95       	swap	r24
    1392:	86 95       	lsr	r24
    1394:	87 70       	andi	r24, 0x07	; 7
    1396:	88 2f       	mov	r24, r24
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	81 70       	andi	r24, 0x01	; 1
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	a1 f3       	breq	.-24     	; 0x138a <UART_u8SendByte+0x14>
		// After the Register is available Load it with the Data Desired to be sent to initiate a transmission
		UDR_REG = u8Data;
    13a2:	ec e2       	ldi	r30, 0x2C	; 44
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	80 83       	st	Z, r24
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <UART_u8SendByte+0x3a>
	}else{
		// if the UART is not initialized then update the Error State
		u8ErrorState=UART_INITIALIZATION_ERROR;
    13ac:	88 e0       	ldi	r24, 0x08	; 8
    13ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <UART_u8SendInt>:
 * 		- the pointer to data not pointing to NULL
 */


uint8_t UART_u8SendInt(uint32_t u32Data)
{
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	ca 57       	subi	r28, 0x7A	; 122
    13ca:	d0 40       	sbci	r29, 0x00	; 0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	fe 01       	movw	r30, r28
    13d8:	ed 58       	subi	r30, 0x8D	; 141
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	60 83       	st	Z, r22
    13de:	71 83       	std	Z+1, r23	; 0x01
    13e0:	82 83       	std	Z+2, r24	; 0x02
    13e2:	93 83       	std	Z+3, r25	; 0x03
	DDRB_REG=0xff;
    13e4:	e7 e3       	ldi	r30, 0x37	; 55
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	80 83       	st	Z, r24
	PORTB_REG=u32Data;
    13ec:	a8 e3       	ldi	r26, 0x38	; 56
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	fe 01       	movw	r30, r28
    13f2:	ed 58       	subi	r30, 0x8D	; 141
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 81       	ld	r24, Z
    13f8:	8c 93       	st	X, r24
	uint8_t au8Number[100]={0};
    13fa:	84 e6       	ldi	r24, 0x64	; 100
    13fc:	fe 01       	movw	r30, r28
    13fe:	3f 96       	adiw	r30, 0x0f	; 15
    1400:	df 01       	movw	r26, r30
    1402:	28 2f       	mov	r18, r24
    1404:	1d 92       	st	X+, r1
    1406:	2a 95       	dec	r18
    1408:	e9 f7       	brne	.-6      	; 0x1404 <UART_u8SendInt+0x48>
	uint64_t u8Counter =1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	8f 83       	std	Y+7, r24	; 0x07
    140e:	18 86       	std	Y+8, r1	; 0x08
    1410:	19 86       	std	Y+9, r1	; 0x09
    1412:	1a 86       	std	Y+10, r1	; 0x0a
    1414:	1b 86       	std	Y+11, r1	; 0x0b
    1416:	1c 86       	std	Y+12, r1	; 0x0c
    1418:	1d 86       	std	Y+13, r1	; 0x0d
    141a:	1e 86       	std	Y+14, r1	; 0x0e
	uint8_t u8NumberASCII;

	    uint8_t i = 0;
    141c:	1d 82       	std	Y+5, r1	; 0x05
	    /* Handle 0 explicitly, otherwise empty string is printed for 0 */
	    if (u32Data == 0)
    141e:	fe 01       	movw	r30, r28
    1420:	ed 58       	subi	r30, 0x8D	; 141
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	80 81       	ld	r24, Z
    1426:	91 81       	ldd	r25, Z+1	; 0x01
    1428:	a2 81       	ldd	r26, Z+2	; 0x02
    142a:	b3 81       	ldd	r27, Z+3	; 0x03
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	a1 05       	cpc	r26, r1
    1430:	b1 05       	cpc	r27, r1
    1432:	09 f0       	breq	.+2      	; 0x1436 <UART_u8SendInt+0x7a>
    1434:	5f c0       	rjmp	.+190    	; 0x14f4 <UART_u8SendInt+0x138>
	    {
	    	au8Number[i++] = '0';
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	ce 01       	movw	r24, r28
    143e:	0f 96       	adiw	r24, 0x0f	; 15
    1440:	fc 01       	movw	r30, r24
    1442:	e2 0f       	add	r30, r18
    1444:	f3 1f       	adc	r31, r19
    1446:	80 e3       	ldi	r24, 0x30	; 48
    1448:	80 83       	st	Z, r24
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	8f 5f       	subi	r24, 0xFF	; 255
    144e:	8d 83       	std	Y+5, r24	; 0x05
    1450:	51 c0       	rjmp	.+162    	; 0x14f4 <UART_u8SendInt+0x138>
	    // base 10. Otherwise numbers are considered unsigned.

	    // Process individual digits
	    while (u32Data != 0)
	    {
	    	uint8_t rem = u32Data % 10;
    1452:	fe 01       	movw	r30, r28
    1454:	ed 58       	subi	r30, 0x8D	; 141
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	a2 81       	ldd	r26, Z+2	; 0x02
    145e:	b3 81       	ldd	r27, Z+3	; 0x03
    1460:	2a e0       	ldi	r18, 0x0A	; 10
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <__udivmodsi4>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	89 83       	std	Y+1, r24	; 0x01
	        au8Number[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	a8 2f       	mov	r26, r24
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	ea 96       	adiw	r28, 0x3a	; 58
    147e:	bf af       	std	Y+63, r27	; 0x3f
    1480:	ae af       	std	Y+62, r26	; 0x3e
    1482:	ea 97       	sbiw	r28, 0x3a	; 58
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	8a 30       	cpi	r24, 0x0A	; 10
    1488:	38 f0       	brcs	.+14     	; 0x1498 <UART_u8SendInt+0xdc>
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	b8 2f       	mov	r27, r24
    148e:	b9 5a       	subi	r27, 0xA9	; 169
    1490:	e8 96       	adiw	r28, 0x38	; 56
    1492:	bf af       	std	Y+63, r27	; 0x3f
    1494:	e8 97       	sbiw	r28, 0x38	; 56
    1496:	06 c0       	rjmp	.+12     	; 0x14a4 <UART_u8SendInt+0xe8>
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	e8 2f       	mov	r30, r24
    149c:	e0 5d       	subi	r30, 0xD0	; 208
    149e:	e8 96       	adiw	r28, 0x38	; 56
    14a0:	ef af       	std	Y+63, r30	; 0x3f
    14a2:	e8 97       	sbiw	r28, 0x38	; 56
    14a4:	ce 01       	movw	r24, r28
    14a6:	0f 96       	adiw	r24, 0x0f	; 15
    14a8:	ea 96       	adiw	r28, 0x3a	; 58
    14aa:	ee ad       	ldd	r30, Y+62	; 0x3e
    14ac:	ff ad       	ldd	r31, Y+63	; 0x3f
    14ae:	ea 97       	sbiw	r28, 0x3a	; 58
    14b0:	e8 0f       	add	r30, r24
    14b2:	f9 1f       	adc	r31, r25
    14b4:	e8 96       	adiw	r28, 0x38	; 56
    14b6:	2f ad       	ldd	r18, Y+63	; 0x3f
    14b8:	e8 97       	sbiw	r28, 0x38	; 56
    14ba:	20 83       	st	Z, r18
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	8f 5f       	subi	r24, 0xFF	; 255
    14c0:	8d 83       	std	Y+5, r24	; 0x05
	        u32Data = u32Data/10;
    14c2:	8e 01       	movw	r16, r28
    14c4:	0d 58       	subi	r16, 0x8D	; 141
    14c6:	1f 4f       	sbci	r17, 0xFF	; 255
    14c8:	fe 01       	movw	r30, r28
    14ca:	ed 58       	subi	r30, 0x8D	; 141
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	80 81       	ld	r24, Z
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
    14d2:	a2 81       	ldd	r26, Z+2	; 0x02
    14d4:	b3 81       	ldd	r27, Z+3	; 0x03
    14d6:	2a e0       	ldi	r18, 0x0A	; 10
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 8a 27 	call	0x4f14	; 0x4f14 <__udivmodsi4>
    14e6:	da 01       	movw	r26, r20
    14e8:	c9 01       	movw	r24, r18
    14ea:	f8 01       	movw	r30, r16
    14ec:	80 83       	st	Z, r24
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	a2 83       	std	Z+2, r26	; 0x02
    14f2:	b3 83       	std	Z+3, r27	; 0x03

	    // In standard itoa(), negative numbers are handled only with
	    // base 10. Otherwise numbers are considered unsigned.

	    // Process individual digits
	    while (u32Data != 0)
    14f4:	fe 01       	movw	r30, r28
    14f6:	ed 58       	subi	r30, 0x8D	; 141
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	80 81       	ld	r24, Z
    14fc:	91 81       	ldd	r25, Z+1	; 0x01
    14fe:	a2 81       	ldd	r26, Z+2	; 0x02
    1500:	b3 81       	ldd	r27, Z+3	; 0x03
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	a1 05       	cpc	r26, r1
    1506:	b1 05       	cpc	r27, r1
    1508:	09 f0       	breq	.+2      	; 0x150c <UART_u8SendInt+0x150>
    150a:	a3 cf       	rjmp	.-186    	; 0x1452 <UART_u8SendInt+0x96>
	        au8Number[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
	        u32Data = u32Data/10;
	    }


	    au8Number[i] = '\0'; // Append string terminator
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	ce 01       	movw	r24, r28
    1514:	0f 96       	adiw	r24, 0x0f	; 15
    1516:	fc 01       	movw	r30, r24
    1518:	e2 0f       	add	r30, r18
    151a:	f3 1f       	adc	r31, r19
    151c:	10 82       	st	Z, r1

	    // Reverse the string
	    uint8_t start = 0;
    151e:	1c 82       	std	Y+4, r1	; 0x04
	    uint8_t end = i -1;
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	81 50       	subi	r24, 0x01	; 1
    1524:	8b 83       	std	Y+3, r24	; 0x03
    1526:	28 c0       	rjmp	.+80     	; 0x1578 <UART_u8SendInt+0x1bc>
	    uint8_t temp;
	    while (start < end)
	    {
	    	temp =*(au8Number+start);
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	fe 01       	movw	r30, r28
    1530:	3f 96       	adiw	r30, 0x0f	; 15
    1532:	e8 0f       	add	r30, r24
    1534:	f9 1f       	adc	r31, r25
    1536:	80 81       	ld	r24, Z
    1538:	8a 83       	std	Y+2, r24	; 0x02
	    	*(au8Number+start) = *(au8Number+end);
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	de 01       	movw	r26, r28
    1542:	1f 96       	adiw	r26, 0x0f	; 15
    1544:	a8 0f       	add	r26, r24
    1546:	b9 1f       	adc	r27, r25
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	fe 01       	movw	r30, r28
    1550:	3f 96       	adiw	r30, 0x0f	; 15
    1552:	e8 0f       	add	r30, r24
    1554:	f9 1f       	adc	r31, r25
    1556:	80 81       	ld	r24, Z
    1558:	8c 93       	st	X, r24
	    	*(au8Number+end) = temp;
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	88 2f       	mov	r24, r24
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	fe 01       	movw	r30, r28
    1562:	3f 96       	adiw	r30, 0x0f	; 15
    1564:	e8 0f       	add	r30, r24
    1566:	f9 1f       	adc	r31, r25
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	80 83       	st	Z, r24
	        start++;
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	8f 5f       	subi	r24, 0xFF	; 255
    1570:	8c 83       	std	Y+4, r24	; 0x04
	        end--;
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 50       	subi	r24, 0x01	; 1
    1576:	8b 83       	std	Y+3, r24	; 0x03

	    // Reverse the string
	    uint8_t start = 0;
	    uint8_t end = i -1;
	    uint8_t temp;
	    while (start < end)
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	98 17       	cp	r25, r24
    157e:	a0 f2       	brcs	.-88     	; 0x1528 <UART_u8SendInt+0x16c>
	    	*(au8Number+start) = *(au8Number+end);
	    	*(au8Number+end) = temp;
	        start++;
	        end--;
	    }
	    UART_u8SendString(au8Number);
    1580:	ce 01       	movw	r24, r28
    1582:	0f 96       	adiw	r24, 0x0f	; 15
    1584:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <UART_u8SendString>
		UART_u8SendByte(u8NumberASCII);
		u8Counter=u8Counter/10;
	}

*/
}
    1588:	c6 58       	subi	r28, 0x86	; 134
    158a:	df 4f       	sbci	r29, 0xFF	; 255
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	de bf       	out	0x3e, r29	; 62
    1592:	0f be       	out	0x3f, r0	; 63
    1594:	cd bf       	out	0x3d, r28	; 61
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	1f 91       	pop	r17
    159c:	0f 91       	pop	r16
    159e:	08 95       	ret

000015a0 <UART_u8SendString>:


uint8_t UART_u8SendString(uint8_t* pau8Data)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <UART_u8SendString+0x6>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <UART_u8SendString+0x8>
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <UART_u8SendString+0xa>
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8ErrorState = UART_OK;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8LastByte; 			/// a variable used to temporarily hold the value of the last character sent
	uint16_t u16StringCounter=0; 	/// counter to navigate the string as array
    15b6:	1a 82       	std	Y+2, r1	; 0x02
    15b8:	19 82       	std	Y+1, r1	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED) // Check if the UART is initialized
    15ba:	80 91 e6 01 	lds	r24, 0x01E6
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	f9 f4       	brne	.+62     	; 0x1600 <UART_u8SendString+0x60>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8Data!=NULL)
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	c1 f0       	breq	.+48     	; 0x15fa <UART_u8SendString+0x5a>
		{
			// if not pointing to null
			do{
				//save the value of the character to a temporary variable
				u8LastByte=pau8Data[u16StringCounter];
    15ca:	2d 81       	ldd	r18, Y+5	; 0x05
    15cc:	3e 81       	ldd	r19, Y+6	; 0x06
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	f9 01       	movw	r30, r18
    15d4:	e8 0f       	add	r30, r24
    15d6:	f9 1f       	adc	r31, r25
    15d8:	80 81       	ld	r24, Z
    15da:	8b 83       	std	Y+3, r24	; 0x03
				// Send this character through UART
				UART_u8SendByte(u8LastByte);
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	0e 94 bb 09 	call	0x1376	; 0x1376 <UART_u8SendByte>
				// increment the array navigator to get the next character
				u16StringCounter++;
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01

			}while(u8LastByte!=0x0D&&u8LastByte!=0x00);// do the same while the sent byte wasn't a new line
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	8d 30       	cpi	r24, 0x0D	; 13
    15f0:	49 f0       	breq	.+18     	; 0x1604 <UART_u8SendString+0x64>
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	88 23       	and	r24, r24
    15f6:	49 f7       	brne	.-46     	; 0x15ca <UART_u8SendString+0x2a>
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <UART_u8SendString+0x64>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    15fa:	87 e0       	ldi	r24, 0x07	; 7
    15fc:	8c 83       	std	Y+4, r24	; 0x04
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <UART_u8SendString+0x64>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
    1600:	88 e0       	ldi	r24, 0x08	; 8
    1602:	8c 83       	std	Y+4, r24	; 0x04
	}

	return u8ErrorState;
    1604:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1606:	26 96       	adiw	r28, 0x06	; 6
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <UART_u8ReceiveByte>:
 * @brief This function is used to Get the Received byte of data by polling mechanism
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */
uint8_t UART_u8ReceiveByte(uint8_t* pu8RecievedData)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	00 d0       	rcall	.+0      	; 0x161e <UART_u8ReceiveByte+0x6>
    161e:	0f 92       	push	r0
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	9b 83       	std	Y+3, r25	; 0x03
    1626:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	89 83       	std	Y+1, r24	; 0x01
	// Check if the UART is Initialized
	if (gu8_IntializationFlag==UART_INITIALIZED)
    162c:	80 91 e6 01 	lds	r24, 0x01E6
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	99 f4       	brne	.+38     	; 0x165a <UART_u8ReceiveByte+0x42>
	{
		//if it is initialized then check that the pointer is not pointing to null
		if (pu8RecievedData!=NULL)
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	9b 81       	ldd	r25, Y+3	; 0x03
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	61 f0       	breq	.+24     	; 0x1654 <UART_u8ReceiveByte+0x3c>
		{
			//if not pointing to null
			// Busy wait until the UART Receive a byte
			while (!GET_BIT(UCSRA_REG,RXC_BIT));
    163c:	eb e2       	ldi	r30, 0x2B	; 43
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	88 23       	and	r24, r24
    1644:	dc f7       	brge	.-10     	; 0x163c <UART_u8ReceiveByte+0x24>
			// Then Load the received byte from the UDR register and save it to the data location input
			*pu8RecievedData = UDR_REG;
    1646:	ec e2       	ldi	r30, 0x2C	; 44
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	ea 81       	ldd	r30, Y+2	; 0x02
    164e:	fb 81       	ldd	r31, Y+3	; 0x03
    1650:	80 83       	st	Z, r24
    1652:	05 c0       	rjmp	.+10     	; 0x165e <UART_u8ReceiveByte+0x46>
		}else
		{
			// if the Pointer is pointing to NULL then update the Error State
			u8ErrorState = UART_NULL_INPUT;
    1654:	87 e0       	ldi	r24, 0x07	; 7
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	02 c0       	rjmp	.+4      	; 0x165e <UART_u8ReceiveByte+0x46>
		}
	}else
	{
		// if the UART is not initialized then update the Error State
		u8ErrorState=UART_INITIALIZATION_ERROR;
    165a:	88 e0       	ldi	r24, 0x08	; 8
    165c:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <UART_u8ReceiveInt>:

uint8_t UART_u8ReceiveInt(uint32_t* pu32ReceivedInt)
{
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	66 97       	sbiw	r28, 0x16	; 22
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	9d 8b       	std	Y+21, r25	; 0x15
    168a:	8c 8b       	std	Y+20, r24	; 0x14
    uint8_t u8ArrayCounter=0;
    168c:	18 86       	std	Y+8, r1	; 0x08
    uint32_t u8Multiplier=1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a0 e0       	ldi	r26, 0x00	; 0
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	8c 83       	std	Y+4, r24	; 0x04
    1698:	9d 83       	std	Y+5, r25	; 0x05
    169a:	ae 83       	std	Y+6, r26	; 0x06
    169c:	bf 83       	std	Y+7, r27	; 0x07
    uint8_t ReceivedStr[11];
    *pu32ReceivedInt=0;
    169e:	ec 89       	ldd	r30, Y+20	; 0x14
    16a0:	fd 89       	ldd	r31, Y+21	; 0x15
    16a2:	10 82       	st	Z, r1
    16a4:	11 82       	std	Z+1, r1	; 0x01
    16a6:	12 82       	std	Z+2, r1	; 0x02
    16a8:	13 82       	std	Z+3, r1	; 0x03
    UART_u8RecieveString(ReceivedStr);
    16aa:	ce 01       	movw	r24, r28
    16ac:	09 96       	adiw	r24, 0x09	; 9
    16ae:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <UART_u8RecieveString>
    uint8_t ArrayNav=0;
    16b2:	1b 82       	std	Y+3, r1	; 0x03
    16b4:	03 c0       	rjmp	.+6      	; 0x16bc <UART_u8ReceiveInt+0x50>
    //UART_u8SendString(ReceivedStr);
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    {
    	u8ArrayCounter++;
    16b6:	88 85       	ldd	r24, Y+8	; 0x08
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	88 87       	std	Y+8, r24	; 0x08
    uint8_t ReceivedStr[11];
    *pu32ReceivedInt=0;
    UART_u8RecieveString(ReceivedStr);
    uint8_t ArrayNav=0;
    //UART_u8SendString(ReceivedStr);
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    16bc:	88 85       	ldd	r24, Y+8	; 0x08
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	ce 01       	movw	r24, r28
    16c4:	09 96       	adiw	r24, 0x09	; 9
    16c6:	fc 01       	movw	r30, r24
    16c8:	e2 0f       	add	r30, r18
    16ca:	f3 1f       	adc	r31, r19
    16cc:	80 81       	ld	r24, Z
    16ce:	8d 30       	cpi	r24, 0x0D	; 13
    16d0:	91 f7       	brne	.-28     	; 0x16b6 <UART_u8ReceiveInt+0x4a>
    {
    	u8ArrayCounter++;
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    16d2:	1a 82       	std	Y+2, r1	; 0x02
    16d4:	58 c0       	rjmp	.+176    	; 0x1786 <UART_u8ReceiveInt+0x11a>
    {

        for(uint8_t multiplier=(u8ArrayCounter-1)-loopCounter;multiplier>0;multiplier--)
    16d6:	98 85       	ldd	r25, Y+8	; 0x08
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	29 2f       	mov	r18, r25
    16dc:	28 1b       	sub	r18, r24
    16de:	82 2f       	mov	r24, r18
    16e0:	81 50       	subi	r24, 0x01	; 1
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	15 c0       	rjmp	.+42     	; 0x1710 <UART_u8ReceiveInt+0xa4>
        {
        	u8Multiplier=10*u8Multiplier;
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ea:	ae 81       	ldd	r26, Y+6	; 0x06
    16ec:	bf 81       	ldd	r27, Y+7	; 0x07
    16ee:	2a e0       	ldi	r18, 0x0A	; 10
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	bc 01       	movw	r22, r24
    16f8:	cd 01       	movw	r24, r26
    16fa:	0e 94 57 27 	call	0x4eae	; 0x4eae <__mulsi3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	8c 83       	std	Y+4, r24	; 0x04
    1704:	9d 83       	std	Y+5, r25	; 0x05
    1706:	ae 83       	std	Y+6, r26	; 0x06
    1708:	bf 83       	std	Y+7, r27	; 0x07
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    {

        for(uint8_t multiplier=(u8ArrayCounter-1)-loopCounter;multiplier>0;multiplier--)
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	81 50       	subi	r24, 0x01	; 1
    170e:	89 83       	std	Y+1, r24	; 0x01
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	88 23       	and	r24, r24
    1714:	41 f7       	brne	.-48     	; 0x16e6 <UART_u8ReceiveInt+0x7a>
        {
        	u8Multiplier=10*u8Multiplier;
        }
        *pu32ReceivedInt = *pu32ReceivedInt + ((ReceivedStr[ArrayNav]-'0')*u8Multiplier);
    1716:	ec 89       	ldd	r30, Y+20	; 0x14
    1718:	fd 89       	ldd	r31, Y+21	; 0x15
    171a:	e0 80       	ld	r14, Z
    171c:	f1 80       	ldd	r15, Z+1	; 0x01
    171e:	02 81       	ldd	r16, Z+2	; 0x02
    1720:	13 81       	ldd	r17, Z+3	; 0x03
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	ce 01       	movw	r24, r28
    172a:	09 96       	adiw	r24, 0x09	; 9
    172c:	fc 01       	movw	r30, r24
    172e:	e2 0f       	add	r30, r18
    1730:	f3 1f       	adc	r31, r19
    1732:	80 81       	ld	r24, Z
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	c0 97       	sbiw	r24, 0x30	; 48
    173a:	aa 27       	eor	r26, r26
    173c:	97 fd       	sbrc	r25, 7
    173e:	a0 95       	com	r26
    1740:	ba 2f       	mov	r27, r26
    1742:	2c 81       	ldd	r18, Y+4	; 0x04
    1744:	3d 81       	ldd	r19, Y+5	; 0x05
    1746:	4e 81       	ldd	r20, Y+6	; 0x06
    1748:	5f 81       	ldd	r21, Y+7	; 0x07
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 57 27 	call	0x4eae	; 0x4eae <__mulsi3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	8e 0d       	add	r24, r14
    1758:	9f 1d       	adc	r25, r15
    175a:	a0 1f       	adc	r26, r16
    175c:	b1 1f       	adc	r27, r17
    175e:	ec 89       	ldd	r30, Y+20	; 0x14
    1760:	fd 89       	ldd	r31, Y+21	; 0x15
    1762:	80 83       	st	Z, r24
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	a2 83       	std	Z+2, r26	; 0x02
    1768:	b3 83       	std	Z+3, r27	; 0x03
        ArrayNav++;
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	8f 5f       	subi	r24, 0xFF	; 255
    176e:	8b 83       	std	Y+3, r24	; 0x03
        u8Multiplier=1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a0 e0       	ldi	r26, 0x00	; 0
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	8c 83       	std	Y+4, r24	; 0x04
    177a:	9d 83       	std	Y+5, r25	; 0x05
    177c:	ae 83       	std	Y+6, r26	; 0x06
    177e:	bf 83       	std	Y+7, r27	; 0x07
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    {
    	u8ArrayCounter++;
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	8f 5f       	subi	r24, 0xFF	; 255
    1784:	8a 83       	std	Y+2, r24	; 0x02
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	88 85       	ldd	r24, Y+8	; 0x08
    178a:	98 17       	cp	r25, r24
    178c:	08 f4       	brcc	.+2      	; 0x1790 <UART_u8ReceiveInt+0x124>
    178e:	a3 cf       	rjmp	.-186    	; 0x16d6 <UART_u8ReceiveInt+0x6a>
        *pu32ReceivedInt = *pu32ReceivedInt + ((ReceivedStr[ArrayNav]-'0')*u8Multiplier);
        ArrayNav++;
        u8Multiplier=1;
    }

}
    1790:	66 96       	adiw	r28, 0x16	; 22
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	1f 91       	pop	r17
    17a2:	0f 91       	pop	r16
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	08 95       	ret

000017aa <UART_u8RecieveString>:
 * @brief This function is used to Get a Received String by polling mechanism
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */
uint8_t UART_u8RecieveString(uint8_t* pau8RecievedData)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <UART_u8RecieveString+0x6>
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <UART_u8RecieveString+0x8>
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <UART_u8RecieveString+0xa>
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8ErrorState = UART_OK;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8PreReading; 			/// a variable used to temporarily hold the value of the last character received
	uint8_t* Temp=pau8RecievedData; /// a temporarily pointer initialized with the place of the first character of the array to save the received string in
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	9a 83       	std	Y+2, r25	; 0x02
    17c6:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag == UART_INITIALIZED)// Check if the UART is initialized
    17c8:	80 91 e6 01 	lds	r24, 0x01E6
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	c1 f4       	brne	.+48     	; 0x1800 <UART_u8RecieveString+0x56>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8RecievedData!=NULL)
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	9e 81       	ldd	r25, Y+6	; 0x06
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	89 f0       	breq	.+34     	; 0x17fa <UART_u8RecieveString+0x50>
		{
			do{
				// Receive a character through UART
				UART_u8ReceiveByte(&u8PreReading);
    17d8:	ce 01       	movw	r24, r28
    17da:	04 96       	adiw	r24, 0x04	; 4
    17dc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <UART_u8ReceiveByte>
				//Save the received character to the last empty place in the array
				*Temp =u8PreReading;
    17e0:	8c 81       	ldd	r24, Y+4	; 0x04
    17e2:	e9 81       	ldd	r30, Y+1	; 0x01
    17e4:	fa 81       	ldd	r31, Y+2	; 0x02
    17e6:	80 83       	st	Z, r24
				//Update the last empty place in the array
				Temp++;
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	9a 81       	ldd	r25, Y+2	; 0x02
    17ec:	01 96       	adiw	r24, 0x01	; 1
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
			}while (u8PreReading!=0x0D); // do this while the received byte is not endline
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
    17f4:	8d 30       	cpi	r24, 0x0D	; 13
    17f6:	81 f7       	brne	.-32     	; 0x17d8 <UART_u8RecieveString+0x2e>
    17f8:	05 c0       	rjmp	.+10     	; 0x1804 <UART_u8RecieveString+0x5a>

		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    17fa:	87 e0       	ldi	r24, 0x07	; 7
    17fc:	8b 83       	std	Y+3, r24	; 0x03
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <UART_u8RecieveString+0x5a>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState= UART_INITIALIZATION_ERROR;
    1800:	88 e0       	ldi	r24, 0x08	; 8
    1802:	8b 83       	std	Y+3, r24	; 0x03
	}

	return u8ErrorState;
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1806:	26 96       	adiw	r28, 0x06	; 6
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <UART_u8ReceiveCountedString>:


uint8_t UART_u8ReceiveCountedString(uint8_t*pau8RecievedData,uint8_t Count)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	27 97       	sbiw	r28, 0x07	; 7
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
    1830:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t u8ErrorState = UART_OK;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8PreReading; 			/// a variable used to temporarily hold the value of the last character received
	uint8_t* Temp=pau8RecievedData; /// a temporarily pointer initialized with the place of the first character of the array to save the received string in
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	9a 83       	std	Y+2, r25	; 0x02
    183c:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag == UART_INITIALIZED)// Check if the UART is initialized
    183e:	80 91 e6 01 	lds	r24, 0x01E6
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	f1 f4       	brne	.+60     	; 0x1882 <UART_u8ReceiveCountedString+0x6a>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8RecievedData!=NULL)
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	b9 f0       	breq	.+46     	; 0x187c <UART_u8ReceiveCountedString+0x64>
		{
			do{
				// Receive a character through UART
				UART_u8ReceiveByte(&u8PreReading);
    184e:	ce 01       	movw	r24, r28
    1850:	04 96       	adiw	r24, 0x04	; 4
    1852:	0e 94 0c 0b 	call	0x1618	; 0x1618 <UART_u8ReceiveByte>
				//Save the received character to the last empty place in the array
				*Temp =u8PreReading;
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	e9 81       	ldd	r30, Y+1	; 0x01
    185a:	fa 81       	ldd	r31, Y+2	; 0x02
    185c:	80 83       	st	Z, r24
				//Update the last empty place in the array
				Temp++;
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
				Count--;
    1868:	8f 81       	ldd	r24, Y+7	; 0x07
    186a:	81 50       	subi	r24, 0x01	; 1
    186c:	8f 83       	std	Y+7, r24	; 0x07
			}while (u8PreReading!=0x0D&&Count!=0); // do this while the received byte is not endline
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	8d 30       	cpi	r24, 0x0D	; 13
    1872:	49 f0       	breq	.+18     	; 0x1886 <UART_u8ReceiveCountedString+0x6e>
    1874:	8f 81       	ldd	r24, Y+7	; 0x07
    1876:	88 23       	and	r24, r24
    1878:	51 f7       	brne	.-44     	; 0x184e <UART_u8ReceiveCountedString+0x36>
    187a:	05 c0       	rjmp	.+10     	; 0x1886 <UART_u8ReceiveCountedString+0x6e>

		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    187c:	87 e0       	ldi	r24, 0x07	; 7
    187e:	8b 83       	std	Y+3, r24	; 0x03
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <UART_u8ReceiveCountedString+0x6e>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState= UART_INITIALIZATION_ERROR;
    1882:	88 e0       	ldi	r24, 0x08	; 8
    1884:	8b 83       	std	Y+3, r24	; 0x03
	}

	return u8ErrorState;
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1888:	27 96       	adiw	r28, 0x07	; 7
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <UART_u8EnableRecievingInterrupt>:
 * @brief This function is called to enable the Receiving complete Interrupt
 * @pre - the UART must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t UART_u8EnableRecievingInterrupt(void (*pfnCallBack)(uint8_t))
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <UART_u8EnableRecievingInterrupt+0x6>
    18a0:	0f 92       	push	r0
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	9b 83       	std	Y+3, r25	; 0x03
    18a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED)// Check if the UART is initialized
    18ae:	80 91 e6 01 	lds	r24, 0x01E6
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	e1 f4       	brne	.+56     	; 0x18ee <UART_u8EnableRecievingInterrupt+0x54>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pfnCallBack!=NULL)
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	a9 f0       	breq	.+42     	; 0x18e8 <UART_u8EnableRecievingInterrupt+0x4e>
		{
			//update the pointer of the CallBack function with the passed address of function
			gpf_RecieveCallBack = pfnCallBack;
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	9b 81       	ldd	r25, Y+3	; 0x03
    18c2:	90 93 e8 01 	sts	0x01E8, r25
    18c6:	80 93 e7 01 	sts	0x01E7, r24
			//Enable the Receiving Interrupt
			SET_BIT(UCSRB_REG,RXCIE_BIT);
    18ca:	aa e2       	ldi	r26, 0x2A	; 42
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	ea e2       	ldi	r30, 0x2A	; 42
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	80 68       	ori	r24, 0x80	; 128
    18d6:	8c 93       	st	X, r24
			//Enable the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
    18d8:	af e5       	ldi	r26, 0x5F	; 95
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	ef e5       	ldi	r30, 0x5F	; 95
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	80 68       	ori	r24, 0x80	; 128
    18e4:	8c 93       	st	X, r24
    18e6:	05 c0       	rjmp	.+10     	; 0x18f2 <UART_u8EnableRecievingInterrupt+0x58>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    18e8:	87 e0       	ldi	r24, 0x07	; 7
    18ea:	89 83       	std	Y+1, r24	; 0x01
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <UART_u8EnableRecievingInterrupt+0x58>
		}

	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
    18ee:	88 e0       	ldi	r24, 0x08	; 8
    18f0:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <UART_u8EnableSendingInterrupt>:
 * @brief This function is called to enable the Sending complete Interrupt
 * @pre - the UART must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t UART_u8EnableSendingInterrupt(void (*pfnCallBack)(void))
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	00 d0       	rcall	.+0      	; 0x1906 <UART_u8EnableSendingInterrupt+0x6>
    1906:	0f 92       	push	r0
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	9b 83       	std	Y+3, r25	; 0x03
    190e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED)// Check if the UART is initialized
    1914:	80 91 e6 01 	lds	r24, 0x01E6
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	e1 f4       	brne	.+56     	; 0x1954 <UART_u8EnableSendingInterrupt+0x54>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pfnCallBack!=NULL)
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	9b 81       	ldd	r25, Y+3	; 0x03
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	a9 f0       	breq	.+42     	; 0x194e <UART_u8EnableSendingInterrupt+0x4e>
		{
			//update the pointer of the CallBack function with the passed address of function
			gpf_TransmitCallBack = pfnCallBack;
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	9b 81       	ldd	r25, Y+3	; 0x03
    1928:	90 93 ea 01 	sts	0x01EA, r25
    192c:	80 93 e9 01 	sts	0x01E9, r24
			//Enable the Receiving Interrupt
			SET_BIT(UCSRB_REG,TXCIE_BIT);
    1930:	aa e2       	ldi	r26, 0x2A	; 42
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ea e2       	ldi	r30, 0x2A	; 42
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	80 64       	ori	r24, 0x40	; 64
    193c:	8c 93       	st	X, r24
			//Enable the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
    193e:	af e5       	ldi	r26, 0x5F	; 95
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ef e5       	ldi	r30, 0x5F	; 95
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	80 68       	ori	r24, 0x80	; 128
    194a:	8c 93       	st	X, r24
    194c:	05 c0       	rjmp	.+10     	; 0x1958 <UART_u8EnableSendingInterrupt+0x58>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    194e:	87 e0       	ldi	r24, 0x07	; 7
    1950:	89 83       	std	Y+1, r24	; 0x01
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <UART_u8EnableSendingInterrupt+0x58>
		}

	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
    1954:	88 e0       	ldi	r24, 0x08	; 8
    1956:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    1958:	89 81       	ldd	r24, Y+1	; 0x01

}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <UART_u8DisableReceivingInterrupt>:
/**
 * @fn UART_u8DisableRecievingInterrupt(void)
 * @brief This function is called to disable the Receiving complete Interrupt
 */
void UART_u8DisableReceivingInterrupt(void)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
	//Reset the pointer to the callback function to NULL
	gpf_RecieveCallBack = NULL;
    196e:	10 92 e8 01 	sts	0x01E8, r1
    1972:	10 92 e7 01 	sts	0x01E7, r1
	// Clear the Enable bit of the receiving Interrupt
	CLR_BIT(UCSRB_REG,RXCIE_BIT);
    1976:	aa e2       	ldi	r26, 0x2A	; 42
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	ea e2       	ldi	r30, 0x2A	; 42
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8f 77       	andi	r24, 0x7F	; 127
    1982:	8c 93       	st	X, r24
}
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <UART_u8DisableTransmittionInterrupt>:
/**
 * @fn UART_u8DisableTransmittionInterrupt(void)
 * @brief This function is called to disable the Transmission complete Interrupt
 */
void UART_u8DisableTransmittionInterrupt(void)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
	//Reset the pointer to the callback function to NULL
	gpf_TransmitCallBack = NULL;
    1992:	10 92 ea 01 	sts	0x01EA, r1
    1996:	10 92 e9 01 	sts	0x01E9, r1
	// Clear the Enable bit of the transmittion complete Interrupt
	CLR_BIT(UCSRB_REG,TXCIE_BIT);
    199a:	aa e2       	ldi	r26, 0x2A	; 42
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	ea e2       	ldi	r30, 0x2A	; 42
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8f 7b       	andi	r24, 0xBF	; 191
    19a6:	8c 93       	st	X, r24
}
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <UART_u8Deinit>:
/**
 * @fn UART_u8Deinit(void)
 * @brief This function is called to Stop the UART Peripheral and De-initialize it
 */
void UART_u8Deinit(void)
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
	// Disable the UART capabilities of Receiving and transmitting
	CLR_BIT(UCSRB_REG,RXEN_BIT);
    19b6:	aa e2       	ldi	r26, 0x2A	; 42
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ea e2       	ldi	r30, 0x2A	; 42
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	8f 7e       	andi	r24, 0xEF	; 239
    19c2:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG,TXEN_BIT);
    19c4:	aa e2       	ldi	r26, 0x2A	; 42
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	ea e2       	ldi	r30, 0x2A	; 42
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	87 7f       	andi	r24, 0xF7	; 247
    19d0:	8c 93       	st	X, r24
	//Reset the pointer to the transmittion callback function to NULL
	gpf_TransmitCallBack = NULL;
    19d2:	10 92 ea 01 	sts	0x01EA, r1
    19d6:	10 92 e9 01 	sts	0x01E9, r1
	//Reset the pointer to the Receiving callback function to NULL
	gpf_RecieveCallBack = NULL;
    19da:	10 92 e8 01 	sts	0x01E8, r1
    19de:	10 92 e7 01 	sts	0x01E7, r1
	// Clear the Enable bit of the receiving Interrupt
	CLR_BIT(UCSRB_REG,RXCIE_BIT);
    19e2:	aa e2       	ldi	r26, 0x2A	; 42
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ea e2       	ldi	r30, 0x2A	; 42
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	8f 77       	andi	r24, 0x7F	; 127
    19ee:	8c 93       	st	X, r24
	// Clear the Enable bit of the transmittion complete Interrupt
	CLR_BIT(UCSRB_REG,TXCIE_BIT);
    19f0:	aa e2       	ldi	r26, 0x2A	; 42
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	ea e2       	ldi	r30, 0x2A	; 42
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	8f 7b       	andi	r24, 0xBF	; 191
    19fc:	8c 93       	st	X, r24
	// Reset the Initialization flag indicating that the UART is not initialized anymore
	gu8_IntializationFlag = UART_INITIALIZED;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	80 93 e6 01 	sts	0x01E6, r24

}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <__vector_13>:

/**
 * @brief the Receiving Interrupt ISR
 */
void __vector_13(void) {
    1a0a:	1f 92       	push	r1
    1a0c:	0f 92       	push	r0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	0f 92       	push	r0
    1a12:	11 24       	eor	r1, r1
    1a14:	2f 93       	push	r18
    1a16:	3f 93       	push	r19
    1a18:	4f 93       	push	r20
    1a1a:	5f 93       	push	r21
    1a1c:	6f 93       	push	r22
    1a1e:	7f 93       	push	r23
    1a20:	8f 93       	push	r24
    1a22:	9f 93       	push	r25
    1a24:	af 93       	push	r26
    1a26:	bf 93       	push	r27
    1a28:	ef 93       	push	r30
    1a2a:	ff 93       	push	r31
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	0f 92       	push	r0
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62

	uint8_t UDRFlush; // this is a temporary variable used to read the UDR to clear the receive Complete flag
	if (gpf_RecieveCallBack!=NULL) // check if the pointer to the Callback is pointing to NULL
    1a36:	80 91 e7 01 	lds	r24, 0x01E7
    1a3a:	90 91 e8 01 	lds	r25, 0x01E8
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	31 f0       	breq	.+12     	; 0x1a4e <__vector_13+0x44>
	{
		//if not then call the function pointing to it
		gpf_RecieveCallBack();
    1a42:	e0 91 e7 01 	lds	r30, 0x01E7
    1a46:	f0 91 e8 01 	lds	r31, 0x01E8
    1a4a:	09 95       	icall
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <__vector_13+0x4c>
	}else
	{
		// if it is the just flush the UDR
		UDRFlush = UDR_REG;
    1a4e:	ec e2       	ldi	r30, 0x2C	; 44
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	89 83       	std	Y+1, r24	; 0x01
	}
}
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	ff 91       	pop	r31
    1a5e:	ef 91       	pop	r30
    1a60:	bf 91       	pop	r27
    1a62:	af 91       	pop	r26
    1a64:	9f 91       	pop	r25
    1a66:	8f 91       	pop	r24
    1a68:	7f 91       	pop	r23
    1a6a:	6f 91       	pop	r22
    1a6c:	5f 91       	pop	r21
    1a6e:	4f 91       	pop	r20
    1a70:	3f 91       	pop	r19
    1a72:	2f 91       	pop	r18
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 90       	pop	r0
    1a7a:	1f 90       	pop	r1
    1a7c:	18 95       	reti

00001a7e <__vector_14>:

/**
 * @brief the Transmission Interrupt ISR
 */
void __vector_14(void) {
    1a7e:	1f 92       	push	r1
    1a80:	0f 92       	push	r0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	0f 92       	push	r0
    1a86:	11 24       	eor	r1, r1
    1a88:	2f 93       	push	r18
    1a8a:	3f 93       	push	r19
    1a8c:	4f 93       	push	r20
    1a8e:	5f 93       	push	r21
    1a90:	6f 93       	push	r22
    1a92:	7f 93       	push	r23
    1a94:	8f 93       	push	r24
    1a96:	9f 93       	push	r25
    1a98:	af 93       	push	r26
    1a9a:	bf 93       	push	r27
    1a9c:	ef 93       	push	r30
    1a9e:	ff 93       	push	r31
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
	if (gpf_TransmitCallBack!=NULL)// check if the pointer to the Callback is pointing to NULL
    1aa8:	80 91 e9 01 	lds	r24, 0x01E9
    1aac:	90 91 ea 01 	lds	r25, 0x01EA
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	29 f0       	breq	.+10     	; 0x1abe <__vector_14+0x40>
	{
		//if not then call the function pointing to it
		gpf_TransmitCallBack();
    1ab4:	e0 91 e9 01 	lds	r30, 0x01E9
    1ab8:	f0 91 ea 01 	lds	r31, 0x01EA
    1abc:	09 95       	icall
	}
}
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	ff 91       	pop	r31
    1ac4:	ef 91       	pop	r30
    1ac6:	bf 91       	pop	r27
    1ac8:	af 91       	pop	r26
    1aca:	9f 91       	pop	r25
    1acc:	8f 91       	pop	r24
    1ace:	7f 91       	pop	r23
    1ad0:	6f 91       	pop	r22
    1ad2:	5f 91       	pop	r21
    1ad4:	4f 91       	pop	r20
    1ad6:	3f 91       	pop	r19
    1ad8:	2f 91       	pop	r18
    1ada:	0f 90       	pop	r0
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	0f 90       	pop	r0
    1ae0:	1f 90       	pop	r1
    1ae2:	18 95       	reti

00001ae4 <TIMER1_u8Init>:

// pointer to function that will be called when COMPB interrupt 	
static void (*COMPB_callBack)(void);

// function to intialize values of control registers 
uint8_t TIMER1_u8Init(void) {
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
	TCCR1A_REG = 0;
    1aec:	ef e4       	ldi	r30, 0x4F	; 79
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	10 82       	st	Z, r1
	TCCR1B_REG = 0;
    1af2:	ee e4       	ldi	r30, 0x4E	; 78
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	10 82       	st	Z, r1
	return 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
}
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <TIMER1_u8Start>:

// function to set start counting and set intitial value 
uint8_t TIMER1_u8Start(void) {
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG |= (1 << CS10) | (1 << CS11);
    1b08:	ae e4       	ldi	r26, 0x4E	; 78
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	ee e4       	ldi	r30, 0x4E	; 78
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	83 60       	ori	r24, 0x03	; 3
    1b14:	8c 93       	st	X, r24
	TCNT1_REG = INIT_TIME;
    1b16:	ec e4       	ldi	r30, 0x4C	; 76
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	9f ef       	ldi	r25, 0xFF	; 255
    1b1e:	91 83       	std	Z+1, r25	; 0x01
    1b20:	80 83       	st	Z, r24
	return 1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
}
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <TIMER1_u8SetComapre>:

// function to set channel register ( OCR1X_REG ) value to compare with 
uint8_t TIMER1_u8SetComapre(CHANNEL channel, uint16_t compareValue) {
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <TIMER1_u8SetComapre+0x6>
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <TIMER1_u8SetComapre+0x8>
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <TIMER1_u8SetComapre+0xa>
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	7b 83       	std	Y+3, r23	; 0x03
    1b3c:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel) {
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	3e 83       	std	Y+6, r19	; 0x06
    1b46:	2d 83       	std	Y+5, r18	; 0x05
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	31 f0       	breq	.+12     	; 0x1b5c <TIMER1_u8SetComapre+0x32>
    1b50:	2d 81       	ldd	r18, Y+5	; 0x05
    1b52:	3e 81       	ldd	r19, Y+6	; 0x06
    1b54:	21 30       	cpi	r18, 0x01	; 1
    1b56:	31 05       	cpc	r19, r1
    1b58:	51 f0       	breq	.+20     	; 0x1b6e <TIMER1_u8SetComapre+0x44>
    1b5a:	12 c0       	rjmp	.+36     	; 0x1b80 <TIMER1_u8SetComapre+0x56>
	case CHANNELA:
		OCR1A_REG = compareValue + INIT_TIME;// set channel register value to compare with 
    1b5c:	ea e4       	ldi	r30, 0x4A	; 74
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	9b 81       	ldd	r25, Y+3	; 0x03
    1b64:	80 50       	subi	r24, 0x00	; 0
    1b66:	91 40       	sbci	r25, 0x01	; 1
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
    1b6c:	0b c0       	rjmp	.+22     	; 0x1b84 <TIMER1_u8SetComapre+0x5a>
		break;
	case CHANNELB:
		OCR1B_REG = compareValue + INIT_TIME;// set channel register value to compare with
    1b6e:	e8 e4       	ldi	r30, 0x48	; 72
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	9b 81       	ldd	r25, Y+3	; 0x03
    1b76:	80 50       	subi	r24, 0x00	; 0
    1b78:	91 40       	sbci	r25, 0x01	; 1
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <TIMER1_u8SetComapre+0x5a>
		break;
	default:
		return 0;
    1b80:	1c 82       	std	Y+4, r1	; 0x04
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <TIMER1_u8SetComapre+0x5e>
	}
	return 1;
    1b84:	31 e0       	ldi	r19, 0x01	; 1
    1b86:	3c 83       	std	Y+4, r19	; 0x04
    1b88:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b8a:	26 96       	adiw	r28, 0x06	; 6
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <TIMER1_u8SetChannelInterrupt>:

// function to set pointer to the function run in interrupt
// take channel and pointer to function to run in ISR   
uint8_t TIMER1_u8SetChannelInterrupt(CHANNEL channel, void (*fnCallBack)(void)) {
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <TIMER1_u8SetChannelInterrupt+0x6>
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <TIMER1_u8SetChannelInterrupt+0x8>
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <TIMER1_u8SetChannelInterrupt+0xa>
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	7b 83       	std	Y+3, r23	; 0x03
    1bae:	6a 83       	std	Y+2, r22	; 0x02
	if (fnCallBack == NULL) {
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	11 f4       	brne	.+4      	; 0x1bbc <TIMER1_u8SetChannelInterrupt+0x20>
		return 0;
    1bb8:	1e 82       	std	Y+6, r1	; 0x06
    1bba:	3d c0       	rjmp	.+122    	; 0x1c36 <TIMER1_u8SetChannelInterrupt+0x9a>
	}
	switch (channel) {
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	3d 83       	std	Y+5, r19	; 0x05
    1bc4:	2c 83       	std	Y+4, r18	; 0x04
    1bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	31 f0       	breq	.+12     	; 0x1bda <TIMER1_u8SetChannelInterrupt+0x3e>
    1bce:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd2:	21 30       	cpi	r18, 0x01	; 1
    1bd4:	31 05       	cpc	r19, r1
    1bd6:	79 f0       	breq	.+30     	; 0x1bf6 <TIMER1_u8SetChannelInterrupt+0x5a>
    1bd8:	1c c0       	rjmp	.+56     	; 0x1c12 <TIMER1_u8SetChannelInterrupt+0x76>
	case CHANNELA:
		SET_BIT(TIMSK_REG, OCIE1A);			// Enable interrupt when COMPA 
    1bda:	a9 e5       	ldi	r26, 0x59	; 89
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e9 e5       	ldi	r30, 0x59	; 89
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	80 61       	ori	r24, 0x10	; 16
    1be6:	8c 93       	st	X, r24
		COMPA_callBack = fnCallBack; // set function in interrupt to the passed function
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	9b 81       	ldd	r25, Y+3	; 0x03
    1bec:	90 93 ec 01 	sts	0x01EC, r25
    1bf0:	80 93 eb 01 	sts	0x01EB, r24
    1bf4:	10 c0       	rjmp	.+32     	; 0x1c16 <TIMER1_u8SetChannelInterrupt+0x7a>
		break;
	case CHANNELB:
		SET_BIT(TIMSK_REG, OCIE1B);			// Enable interrupt when COMPB 
    1bf6:	a9 e5       	ldi	r26, 0x59	; 89
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e9 e5       	ldi	r30, 0x59	; 89
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	88 60       	ori	r24, 0x08	; 8
    1c02:	8c 93       	st	X, r24
		COMPB_callBack = fnCallBack;// set function in interrupt to the passed function 
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	9b 81       	ldd	r25, Y+3	; 0x03
    1c08:	90 93 ee 01 	sts	0x01EE, r25
    1c0c:	80 93 ed 01 	sts	0x01ED, r24
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <TIMER1_u8SetChannelInterrupt+0x7a>
		break;
	default:
		return 0;
    1c12:	1e 82       	std	Y+6, r1	; 0x06
    1c14:	10 c0       	rjmp	.+32     	; 0x1c36 <TIMER1_u8SetChannelInterrupt+0x9a>
	}
	SET_BIT(TIMSK_REG, TOIE1);				// Enable interrupt 
    1c16:	a9 e5       	ldi	r26, 0x59	; 89
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e9 e5       	ldi	r30, 0x59	; 89
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	84 60       	ori	r24, 0x04	; 4
    1c22:	8c 93       	st	X, r24
	SET_BIT(SREG_REG, I_BIT);
    1c24:	af e5       	ldi	r26, 0x5F	; 95
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	ef e5       	ldi	r30, 0x5F	; 95
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 68       	ori	r24, 0x80	; 128
    1c30:	8c 93       	st	X, r24
	return 1;
    1c32:	31 e0       	ldi	r19, 0x01	; 1
    1c34:	3e 83       	std	Y+6, r19	; 0x06
    1c36:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1c38:	26 96       	adiw	r28, 0x06	; 6
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <TIMER1_u8StopChannel>:

// function to stop comparing with channel 
uint8_t TIMER1_u8StopChannel(CHANNEL channel) {
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <TIMER1_u8StopChannel+0x6>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <TIMER1_u8StopChannel+0x8>
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	89 83       	std	Y+1, r24	; 0x01
	switch (channel) {
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	3c 83       	std	Y+4, r19	; 0x04
    1c60:	2b 83       	std	Y+3, r18	; 0x03
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	31 f0       	breq	.+12     	; 0x1c76 <TIMER1_u8StopChannel+0x2c>
    1c6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6e:	21 30       	cpi	r18, 0x01	; 1
    1c70:	31 05       	cpc	r19, r1
    1c72:	69 f0       	breq	.+26     	; 0x1c8e <TIMER1_u8StopChannel+0x44>
    1c74:	18 c0       	rjmp	.+48     	; 0x1ca6 <TIMER1_u8StopChannel+0x5c>
	case CHANNELA:
		CLR_BIT(TIMSK_REG, OCIE1A);      // disable interrupt 
    1c76:	a9 e5       	ldi	r26, 0x59	; 89
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e9 e5       	ldi	r30, 0x59	; 89
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	8f 7e       	andi	r24, 0xEF	; 239
    1c82:	8c 93       	st	X, r24
		COMPA_callBack = NULL;      // make sure no function to run in interrupt
    1c84:	10 92 ec 01 	sts	0x01EC, r1
    1c88:	10 92 eb 01 	sts	0x01EB, r1
    1c8c:	0e c0       	rjmp	.+28     	; 0x1caa <TIMER1_u8StopChannel+0x60>
		break;
	case CHANNELB:
		CLR_BIT(TIMSK_REG, OCIE1B);	 	 // disable interrupt 
    1c8e:	a9 e5       	ldi	r26, 0x59	; 89
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e9 e5       	ldi	r30, 0x59	; 89
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	87 7f       	andi	r24, 0xF7	; 247
    1c9a:	8c 93       	st	X, r24
		COMPB_callBack = NULL;		// make sure no function to run in interrupt
    1c9c:	10 92 ee 01 	sts	0x01EE, r1
    1ca0:	10 92 ed 01 	sts	0x01ED, r1
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <TIMER1_u8StopChannel+0x60>
		break;
	default:
		return 0;
    1ca6:	1a 82       	std	Y+2, r1	; 0x02
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <TIMER1_u8StopChannel+0x64>
	}
	return 1;
    1caa:	31 e0       	ldi	r19, 0x01	; 1
    1cac:	3a 83       	std	Y+2, r19	; 0x02
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <__vector_7>:

//ISR for TIMER1 COMPA
void __vector_7(void) {
    1cbe:	1f 92       	push	r1
    1cc0:	0f 92       	push	r0
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	0f 92       	push	r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	2f 93       	push	r18
    1cca:	3f 93       	push	r19
    1ccc:	4f 93       	push	r20
    1cce:	5f 93       	push	r21
    1cd0:	6f 93       	push	r22
    1cd2:	7f 93       	push	r23
    1cd4:	8f 93       	push	r24
    1cd6:	9f 93       	push	r25
    1cd8:	af 93       	push	r26
    1cda:	bf 93       	push	r27
    1cdc:	ef 93       	push	r30
    1cde:	ff 93       	push	r31
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
	if (COMPA_callBack != NULL) {
    1ce8:	80 91 eb 01 	lds	r24, 0x01EB
    1cec:	90 91 ec 01 	lds	r25, 0x01EC
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	29 f0       	breq	.+10     	; 0x1cfe <__vector_7+0x40>
		COMPA_callBack();
    1cf4:	e0 91 eb 01 	lds	r30, 0x01EB
    1cf8:	f0 91 ec 01 	lds	r31, 0x01EC
    1cfc:	09 95       	icall
	}
}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	ff 91       	pop	r31
    1d04:	ef 91       	pop	r30
    1d06:	bf 91       	pop	r27
    1d08:	af 91       	pop	r26
    1d0a:	9f 91       	pop	r25
    1d0c:	8f 91       	pop	r24
    1d0e:	7f 91       	pop	r23
    1d10:	6f 91       	pop	r22
    1d12:	5f 91       	pop	r21
    1d14:	4f 91       	pop	r20
    1d16:	3f 91       	pop	r19
    1d18:	2f 91       	pop	r18
    1d1a:	0f 90       	pop	r0
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	0f 90       	pop	r0
    1d20:	1f 90       	pop	r1
    1d22:	18 95       	reti

00001d24 <__vector_8>:
//ISR for TIMER1 COMPB
void __vector_8(void) {
    1d24:	1f 92       	push	r1
    1d26:	0f 92       	push	r0
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	0f 92       	push	r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	2f 93       	push	r18
    1d30:	3f 93       	push	r19
    1d32:	4f 93       	push	r20
    1d34:	5f 93       	push	r21
    1d36:	6f 93       	push	r22
    1d38:	7f 93       	push	r23
    1d3a:	8f 93       	push	r24
    1d3c:	9f 93       	push	r25
    1d3e:	af 93       	push	r26
    1d40:	bf 93       	push	r27
    1d42:	ef 93       	push	r30
    1d44:	ff 93       	push	r31
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
	if (COMPB_callBack != NULL) {
    1d4e:	80 91 ed 01 	lds	r24, 0x01ED
    1d52:	90 91 ee 01 	lds	r25, 0x01EE
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	29 f0       	breq	.+10     	; 0x1d64 <__vector_8+0x40>
		COMPB_callBack();
    1d5a:	e0 91 ed 01 	lds	r30, 0x01ED
    1d5e:	f0 91 ee 01 	lds	r31, 0x01EE
    1d62:	09 95       	icall
	}
}
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	ff 91       	pop	r31
    1d6a:	ef 91       	pop	r30
    1d6c:	bf 91       	pop	r27
    1d6e:	af 91       	pop	r26
    1d70:	9f 91       	pop	r25
    1d72:	8f 91       	pop	r24
    1d74:	7f 91       	pop	r23
    1d76:	6f 91       	pop	r22
    1d78:	5f 91       	pop	r21
    1d7a:	4f 91       	pop	r20
    1d7c:	3f 91       	pop	r19
    1d7e:	2f 91       	pop	r18
    1d80:	0f 90       	pop	r0
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	0f 90       	pop	r0
    1d86:	1f 90       	pop	r1
    1d88:	18 95       	reti

00001d8a <__vector_9>:
//ISR for TIMER1 OVF
void __vector_9(void) {
    1d8a:	1f 92       	push	r1
    1d8c:	0f 92       	push	r0
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	0f 92       	push	r0
    1d92:	11 24       	eor	r1, r1
    1d94:	2f 93       	push	r18
    1d96:	3f 93       	push	r19
    1d98:	4f 93       	push	r20
    1d9a:	5f 93       	push	r21
    1d9c:	6f 93       	push	r22
    1d9e:	7f 93       	push	r23
    1da0:	8f 93       	push	r24
    1da2:	9f 93       	push	r25
    1da4:	af 93       	push	r26
    1da6:	bf 93       	push	r27
    1da8:	ef 93       	push	r30
    1daa:	ff 93       	push	r31
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG = INIT_TIME;    // reset counter value to initial value 
    1db4:	ec e4       	ldi	r30, 0x4C	; 76
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	9f ef       	ldi	r25, 0xFF	; 255
    1dbc:	91 83       	std	Z+1, r25	; 0x01
    1dbe:	80 83       	st	Z, r24
	if (COMPA_callBack != NULL) {
    1dc0:	80 91 eb 01 	lds	r24, 0x01EB
    1dc4:	90 91 ec 01 	lds	r25, 0x01EC
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	29 f0       	breq	.+10     	; 0x1dd6 <__vector_9+0x4c>
		COMPA_callBack();
    1dcc:	e0 91 eb 01 	lds	r30, 0x01EB
    1dd0:	f0 91 ec 01 	lds	r31, 0x01EC
    1dd4:	09 95       	icall
	}
	if (COMPB_callBack != NULL) {
    1dd6:	80 91 ed 01 	lds	r24, 0x01ED
    1dda:	90 91 ee 01 	lds	r25, 0x01EE
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	29 f0       	breq	.+10     	; 0x1dec <__vector_9+0x62>
		COMPB_callBack();
    1de2:	e0 91 ed 01 	lds	r30, 0x01ED
    1de6:	f0 91 ee 01 	lds	r31, 0x01EE
    1dea:	09 95       	icall
	}
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	ff 91       	pop	r31
    1df2:	ef 91       	pop	r30
    1df4:	bf 91       	pop	r27
    1df6:	af 91       	pop	r26
    1df8:	9f 91       	pop	r25
    1dfa:	8f 91       	pop	r24
    1dfc:	7f 91       	pop	r23
    1dfe:	6f 91       	pop	r22
    1e00:	5f 91       	pop	r21
    1e02:	4f 91       	pop	r20
    1e04:	3f 91       	pop	r19
    1e06:	2f 91       	pop	r18
    1e08:	0f 90       	pop	r0
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	0f 90       	pop	r0
    1e0e:	1f 90       	pop	r1
    1e10:	18 95       	reti

00001e12 <SPI_u8Init>:
 * @pre This function require
 * 			- the configurations in the peripheral configuration file is configured with allowed options
 * 			- the u8SPIMode should take only two possibilities  SPI_MASTER or SPI_SLAVE
 */
uint8_t SPI_u8Init(SPIMode_t u8SPIMode)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <SPI_u8Init+0x6>
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = SPI_OK;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	89 83       	std	Y+1, r24	; 0x01

LED_u8Init(&LEDT);
    1e22:	86 ed       	ldi	r24, 0xD6	; 214
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <LED_u8Init>
	/*
	 * Set the transmittion Clock of the SPI as configured by the SPI_CLK_RATE Configuration
	 */
#if SPI_CLK_RATE == SPI_CPU_4
	CLR_BIT(SPCR_REG,SPR0_BIT);
    1e2a:	ad e2       	ldi	r26, 0x2D	; 45
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	ed e2       	ldi	r30, 0x2D	; 45
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	8e 7f       	andi	r24, 0xFE	; 254
    1e36:	8c 93       	st	X, r24
	CLR_BIT(SPCR_REG,SPR1_BIT);
    1e38:	ad e2       	ldi	r26, 0x2D	; 45
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	ed e2       	ldi	r30, 0x2D	; 45
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	8d 7f       	andi	r24, 0xFD	; 253
    1e44:	8c 93       	st	X, r24
	CLR_BIT(SPSR_REG,SPI2X_BIT);
    1e46:	ae e2       	ldi	r26, 0x2E	; 46
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	ee e2       	ldi	r30, 0x2E	; 46
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8e 7f       	andi	r24, 0xFE	; 254
    1e52:	8c 93       	st	X, r24

	/*
	 * Set the DATA sampling mode of the SPI as configured by the SPI_DATA_MODE configuration in the configuration file
	 */
#if SPI_DATA_MODE == SPI_SAMPLE_LEADING_RISING
	CLR_BIT(SPCR_REG,CPHA_BIT);
    1e54:	ad e2       	ldi	r26, 0x2D	; 45
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	ed e2       	ldi	r30, 0x2D	; 45
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8b 7f       	andi	r24, 0xFB	; 251
    1e60:	8c 93       	st	X, r24
	CLR_BIT(SPCR_REG,CPOL_BIT);
    1e62:	ad e2       	ldi	r26, 0x2D	; 45
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	ed e2       	ldi	r30, 0x2D	; 45
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	87 7f       	andi	r24, 0xF7	; 247
    1e6e:	8c 93       	st	X, r24

	/*
	 * Setting the Data bits transmitting order as configured by the SPI_DATA_ORDER configuration in the configuration file
	 */
#if SPI_DATA_ORDER == SPI_LSB_FIRST
	SET_BIT(SPCR_REG,DORD_BIT);
    1e70:	ad e2       	ldi	r26, 0x2D	; 45
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	ed e2       	ldi	r30, 0x2D	; 45
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	80 62       	ori	r24, 0x20	; 32
    1e7c:	8c 93       	st	X, r24
#else
	u8ErrorState = SPI_WRONG_DATA_ORDER_CFG;
#endif

	/*Set the SPI Mode and Configure the SPI PINS */
	if (u8SPIMode == SPI_MASTER)
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	21 f5       	brne	.+72     	; 0x1ecc <SPI_u8Init+0xba>
	{
		//Set the SPI mode to master
		SET_BIT(SPCR_REG,MSTR_BIT);
    1e84:	ad e2       	ldi	r26, 0x2D	; 45
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	ed e2       	ldi	r30, 0x2D	; 45
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	80 61       	ori	r24, 0x10	; 16
    1e90:	8c 93       	st	X, r24
		//Configure the MOSI pin as output
		SET_BIT(DDRB_REG,DDB5_BIT);
    1e92:	a7 e3       	ldi	r26, 0x37	; 55
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e7 e3       	ldi	r30, 0x37	; 55
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	80 62       	ori	r24, 0x20	; 32
    1e9e:	8c 93       	st	X, r24
		//Configure the Slave Select pin as output
		SET_BIT(DDRB_REG,DDB4_BIT);
    1ea0:	a7 e3       	ldi	r26, 0x37	; 55
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e7 e3       	ldi	r30, 0x37	; 55
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	80 61       	ori	r24, 0x10	; 16
    1eac:	8c 93       	st	X, r24
		SET_BIT(PORTB_REG,DDB4_BIT);
    1eae:	a8 e3       	ldi	r26, 0x38	; 56
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e8 e3       	ldi	r30, 0x38	; 56
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	80 61       	ori	r24, 0x10	; 16
    1eba:	8c 93       	st	X, r24
		//Configure the SCK pin as output
		SET_BIT(DDRB_REG,DDB7_BIT);
    1ebc:	a7 e3       	ldi	r26, 0x37	; 55
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e7 e3       	ldi	r30, 0x37	; 55
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	80 68       	ori	r24, 0x80	; 128
    1ec8:	8c 93       	st	X, r24
    1eca:	14 c0       	rjmp	.+40     	; 0x1ef4 <SPI_u8Init+0xe2>

	}else if (u8SPIMode == SPI_SLAVE)
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	82 30       	cpi	r24, 0x02	; 2
    1ed0:	79 f4       	brne	.+30     	; 0x1ef0 <SPI_u8Init+0xde>
	{
		//Set the SPI mode to Slave
		CLR_BIT(SPCR_REG,MSTR_BIT);
    1ed2:	ad e2       	ldi	r26, 0x2D	; 45
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	ed e2       	ldi	r30, 0x2D	; 45
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8f 7e       	andi	r24, 0xEF	; 239
    1ede:	8c 93       	st	X, r24
		//Configure the MISO pin as output
		SET_BIT(DDRB_REG,DDB6_BIT);
    1ee0:	a7 e3       	ldi	r26, 0x37	; 55
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e7 e3       	ldi	r30, 0x37	; 55
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 64       	ori	r24, 0x40	; 64
    1eec:	8c 93       	st	X, r24
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <SPI_u8Init+0xe2>
	}else
	{
		u8ErrorState = SPI_WRONG_MODE;
    1ef0:	85 e0       	ldi	r24, 0x05	; 5
    1ef2:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if no error occurred in the previous stages then Enable the SPI with the Written Configurations*/
	if (u8ErrorState==SPI_OK)
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	81 30       	cpi	r24, 0x01	; 1
    1ef8:	51 f4       	brne	.+20     	; 0x1f0e <SPI_u8Init+0xfc>
	{
		SET_BIT(SPCR_REG,SPE_BIT);
    1efa:	ad e2       	ldi	r26, 0x2D	; 45
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	ed e2       	ldi	r30, 0x2D	; 45
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	80 64       	ori	r24, 0x40	; 64
    1f06:	8c 93       	st	X, r24
		/*Change the state of the SPI to initialized as MASTER/SLAVE indicating that it is initialized and in this mode*/
		gu8_SPIState = u8SPIMode;
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	80 93 ef 01 	sts	0x01EF, r24
	else
	{
		//if not do nothing
	}

	return u8ErrorState;
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <SPI_u8SendByte>:
 * @brief This function is used to Send a byte using the SPI peripheral
 * @pre This function require
 * 			- The SPI to be initialized
 */
uint8_t SPI_u8SendByte(uint8_t u8Data)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <SPI_u8SendByte+0x6>
    1f20:	0f 92       	push	r0
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ErrorState = SPI_OK;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t flush_buffer;
	if (gu8_SPIState!=SPI_NOT_INITIALIZED)//check first if the SPI is initialized
    1f2c:	80 91 ef 01 	lds	r24, 0x01EF
    1f30:	88 23       	and	r24, r24
    1f32:	a9 f0       	breq	.+42     	; 0x1f5e <SPI_u8SendByte+0x44>
	{
		CLR_BIT(PORTB_REG,DDB4_BIT);
    1f34:	a8 e3       	ldi	r26, 0x38	; 56
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e8 e3       	ldi	r30, 0x38	; 56
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8f 7e       	andi	r24, 0xEF	; 239
    1f40:	8c 93       	st	X, r24
		//Load the Data to the SPI data Register to initiate the transmission
		SPDR_REG = u8Data;
    1f42:	ef e2       	ldi	r30, 0x2F	; 47
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	80 83       	st	Z, r24
		//Wait until the Transmission is complete
		while (!GET_BIT(SPSR_REG,SPIF_BIT));
    1f4a:	ee e2       	ldi	r30, 0x2E	; 46
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	88 23       	and	r24, r24
    1f52:	dc f7       	brge	.-10     	; 0x1f4a <SPI_u8SendByte+0x30>
		flush_buffer = SPDR_REG;		/* Flush received data */
    1f54:	ef e2       	ldi	r30, 0x2F	; 47
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <SPI_u8SendByte+0x48>
//		SET_BIT(PORTB_REG,DDB4_BIT);
	}else
	{
		u8ErrorState = SPI_INITIALIZATION_ERROR;
    1f5e:	86 e0       	ldi	r24, 0x06	; 6
    1f60:	8a 83       	std	Y+2, r24	; 0x02
	}
	return u8ErrorState;
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <SPI_u8SendString>:
 * @pre This function require
 * 			- The SPI to be initialized
 * 			- the pu8Data pointer can not points to NULL
 */
uint8_t SPI_u8SendString(uint8_t* pu8Data)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <SPI_u8SendString+0x6>
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <SPI_u8SendString+0x8>
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	9c 83       	std	Y+4, r25	; 0x04
    1f7e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ErrorState=SPI_OK;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8CharCounter=0; /// a variable used to navigate the array of the characters
    1f84:	19 82       	std	Y+1, r1	; 0x01

	if (gu8_SPIState!=SPI_NOT_INITIALIZED)// Check first if the SPI is initialized
    1f86:	80 91 ef 01 	lds	r24, 0x01EF
    1f8a:	88 23       	and	r24, r24
    1f8c:	29 f1       	breq	.+74     	; 0x1fd8 <SPI_u8SendString+0x68>
	{
		if (pu8Data!=NULL) // if it is initialized then check the pointer is not pointing to NULL
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	f1 f0       	breq	.+60     	; 0x1fd2 <SPI_u8SendString+0x62>
    1f96:	0e c0       	rjmp	.+28     	; 0x1fb4 <SPI_u8SendString+0x44>
		{
			while (pu8Data[u8CharCounter]!='\0')
			{
				//While the current character is not endline
				// Send the character through SPI
				SPI_u8SendByte(pu8Data[u8CharCounter]);
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	80 81       	ld	r24, Z
    1faa:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <SPI_u8SendByte>
				//check the next character
				u8CharCounter++;
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	8f 5f       	subi	r24, 0xFF	; 255
    1fb2:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_SPIState!=SPI_NOT_INITIALIZED)// Check first if the SPI is initialized
	{
		if (pu8Data!=NULL) // if it is initialized then check the pointer is not pointing to NULL
		{
			while (pu8Data[u8CharCounter]!='\0')
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	e2 0f       	add	r30, r18
    1fc2:	f3 1f       	adc	r31, r19
    1fc4:	80 81       	ld	r24, Z
    1fc6:	88 23       	and	r24, r24
    1fc8:	39 f7       	brne	.-50     	; 0x1f98 <SPI_u8SendString+0x28>
				SPI_u8SendByte(pu8Data[u8CharCounter]);
				//check the next character
				u8CharCounter++;
			}
			//After sending the string send endline character indicating the end of the string
			SPI_u8SendByte('\0');
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <SPI_u8SendByte>
    1fd0:	05 c0       	rjmp	.+10     	; 0x1fdc <SPI_u8SendString+0x6c>

		}else
		{
			// if the input pointer is pointing to NULL update the error state
			u8ErrorState = SPI_NULL_INPUT;
    1fd2:	87 e0       	ldi	r24, 0x07	; 7
    1fd4:	8a 83       	std	Y+2, r24	; 0x02
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <SPI_u8SendString+0x6c>
		}

	}else
	{
		// if the SPI is not initialized then update the error state
		u8ErrorState=SPI_INITIALIZATION_ERROR;
    1fd8:	86 e0       	ldi	r24, 0x06	; 6
    1fda:	8a 83       	std	Y+2, r24	; 0x02
	}

	return u8ErrorState;
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <SPI_u8ReceiveByte>:
 * @pre This function require
 * 			- The SPI to be initialized
 * 			- the pu8Data pointer can not points to NULL
 */
uint8_t SPI_u8ReceiveByte(uint8_t* pu8Data)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <SPI_u8ReceiveByte+0x6>
    1ff2:	0f 92       	push	r0
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	9b 83       	std	Y+3, r25	; 0x03
    1ffa:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = SPI_OK;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	89 83       	std	Y+1, r24	; 0x01


	if (gu8_SPIState!=SPI_NOT_INITIALIZED)//check first if the SPI is initialized
    2000:	80 91 ef 01 	lds	r24, 0x01EF
    2004:	88 23       	and	r24, r24
    2006:	99 f0       	breq	.+38     	; 0x202e <SPI_u8ReceiveByte+0x42>
	{
		if (pu8Data!=NULL)//Then Check if the pointer is not pointing to a NULL
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	9b 81       	ldd	r25, Y+3	; 0x03
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	61 f0       	breq	.+24     	; 0x2028 <SPI_u8ReceiveByte+0x3c>
		{
			//Wait until the Reception is complete
			while (!GET_BIT(SPSR_REG,SPIF_BIT));
    2010:	ee e2       	ldi	r30, 0x2E	; 46
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	88 23       	and	r24, r24
    2018:	dc f7       	brge	.-10     	; 0x2010 <SPI_u8ReceiveByte+0x24>
			//Load the SPI data Register to the place the pointer holding its address
			*pu8Data = SPDR_REG;
    201a:	ef e2       	ldi	r30, 0x2F	; 47
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	ea 81       	ldd	r30, Y+2	; 0x02
    2022:	fb 81       	ldd	r31, Y+3	; 0x03
    2024:	80 83       	st	Z, r24
    2026:	05 c0       	rjmp	.+10     	; 0x2032 <SPI_u8ReceiveByte+0x46>
		}else
		{
			u8ErrorState = SPI_NULL_INPUT;
    2028:	87 e0       	ldi	r24, 0x07	; 7
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <SPI_u8ReceiveByte+0x46>
		}

	}else
	{
		u8ErrorState = SPI_INITIALIZATION_ERROR;
    202e:	86 e0       	ldi	r24, 0x06	; 6
    2030:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
    2032:	89 81       	ldd	r24, Y+1	; 0x01
}
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <SPI_u8ReceiveString>:
 * @pre This function require
 * 			- The SPI to be initialized
 * 			- the pu8Data pointer can not points to NULL
 */
uint8_t SPI_u8ReceiveString(uint8_t* pu8Data)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	00 d0       	rcall	.+0      	; 0x2046 <SPI_u8ReceiveString+0x6>
    2046:	00 d0       	rcall	.+0      	; 0x2048 <SPI_u8ReceiveString+0x8>
    2048:	0f 92       	push	r0
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	9d 83       	std	Y+5, r25	; 0x05
    2050:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ErrorState=SPI_OK;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8CharCounter=0;  /// a variable used to navigate the array of the characters
    2056:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Temp;			/// a variable used to temporarily hold the value of the last character sent

	if (gu8_SPIState!=SPI_NOT_INITIALIZED)// Check first if the SPI is initialized
    2058:	80 91 ef 01 	lds	r24, 0x01EF
    205c:	88 23       	and	r24, r24
    205e:	31 f1       	breq	.+76     	; 0x20ac <SPI_u8ReceiveString+0x6c>
	{
		if (pu8Data!=NULL)// if it is initialized then check the pointer is not pointing to NULL
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	9d 81       	ldd	r25, Y+5	; 0x05
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	f9 f0       	breq	.+62     	; 0x20a6 <SPI_u8ReceiveString+0x66>
		{
			do
			{
				//Receive Byte
				SPI_u8ReceiveByte(&u8Temp);
    2068:	ce 01       	movw	r24, r28
    206a:	03 96       	adiw	r24, 0x03	; 3
    206c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <SPI_u8ReceiveByte>
				//Save the received byte to the first empty place in the array of characters
				pu8Data[u8CharCounter] = u8Temp;
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	8c 81       	ldd	r24, Y+4	; 0x04
    2078:	9d 81       	ldd	r25, Y+5	; 0x05
    207a:	fc 01       	movw	r30, r24
    207c:	e2 0f       	add	r30, r18
    207e:	f3 1f       	adc	r31, r19
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	80 83       	st	Z, r24
				//update the array navigator
				u8CharCounter++;
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	8f 5f       	subi	r24, 0xFF	; 255
    2088:	89 83       	std	Y+1, r24	; 0x01
			}while (u8Temp!='\0'); // do this until we receive endline character indicating the end of the string
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	88 23       	and	r24, r24
    208e:	61 f7       	brne	.-40     	; 0x2068 <SPI_u8ReceiveString+0x28>

			// save the endline character in the end of the string
			pu8Data[u8CharCounter] = u8Temp;
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	8c 81       	ldd	r24, Y+4	; 0x04
    2098:	9d 81       	ldd	r25, Y+5	; 0x05
    209a:	fc 01       	movw	r30, r24
    209c:	e2 0f       	add	r30, r18
    209e:	f3 1f       	adc	r31, r19
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	80 83       	st	Z, r24
    20a4:	05 c0       	rjmp	.+10     	; 0x20b0 <SPI_u8ReceiveString+0x70>

		}else
		{
			// if the input pointer is pointing to NULL update the error state
			u8ErrorState = SPI_NULL_INPUT;
    20a6:	87 e0       	ldi	r24, 0x07	; 7
    20a8:	8a 83       	std	Y+2, r24	; 0x02
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <SPI_u8ReceiveString+0x70>
		}

	}else
	{
		// if the SPI is not initialized then update the error state
		u8ErrorState=SPI_INITIALIZATION_ERROR;
    20ac:	86 e0       	ldi	r24, 0x06	; 6
    20ae:	8a 83       	std	Y+2, r24	; 0x02
	}

	return u8ErrorState;
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <SPI_u8EnableInterrupt>:
 * @brief This function is called to enable the SPI Transmit complete Interrupt
 * @pre - the SPI must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t SPI_u8EnableInterrupt(void (*pfnCallBack)(void))
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <SPI_u8EnableInterrupt+0x6>
    20c8:	0f 92       	push	r0
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	9b 83       	std	Y+3, r25	; 0x03
    20d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = SPI_OK;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	89 83       	std	Y+1, r24	; 0x01
	if (gu8_SPIState != SPI_NOT_INITIALIZED)// Check first if the SPI is initialized
    20d6:	80 91 ef 01 	lds	r24, 0x01EF
    20da:	88 23       	and	r24, r24
    20dc:	e1 f0       	breq	.+56     	; 0x2116 <SPI_u8EnableInterrupt+0x54>
	{
		if (pfnCallBack!=NULL)// if it is initialized then check the pointer is not pointing to NULL
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	9b 81       	ldd	r25, Y+3	; 0x03
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	a9 f0       	breq	.+42     	; 0x2110 <SPI_u8EnableInterrupt+0x4e>
		{
			// Set the pointer of the call function to the function address passed by the user
			gpf_SPICallBack = pfnCallBack;
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ea:	90 93 f1 01 	sts	0x01F1, r25
    20ee:	80 93 f0 01 	sts	0x01F0, r24
			// Set the Enable bit of the SPI Interrupt
			SET_BIT(SPCR_REG,SPIE_BIT);
    20f2:	ad e2       	ldi	r26, 0x2D	; 45
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	ed e2       	ldi	r30, 0x2D	; 45
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	80 68       	ori	r24, 0x80	; 128
    20fe:	8c 93       	st	X, r24
			// Set the Enable bit of the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
    2100:	af e5       	ldi	r26, 0x5F	; 95
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	ef e5       	ldi	r30, 0x5F	; 95
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	80 68       	ori	r24, 0x80	; 128
    210c:	8c 93       	st	X, r24
    210e:	05 c0       	rjmp	.+10     	; 0x211a <SPI_u8EnableInterrupt+0x58>
		}else
		{
			// if the input pointer is pointing to NULL update the error state
			u8ErrorState = SPI_NULL_INPUT;
    2110:	87 e0       	ldi	r24, 0x07	; 7
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	02 c0       	rjmp	.+4      	; 0x211a <SPI_u8EnableInterrupt+0x58>
		}
	}else
	{
		// if the SPI is not initialized then update the error state
		u8ErrorState = SPI_INITIALIZATION_ERROR;
    2116:	86 e0       	ldi	r24, 0x06	; 6
    2118:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
    211a:	89 81       	ldd	r24, Y+1	; 0x01

}
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <SPI_u8DisableInterrupt>:
/**
 * @fn void SPI_u8DisableInterrupt(void)
 * @brief Used to disable the SPI Interrupt
 */
void SPI_u8DisableInterrupt(void)
{
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
	// Reset the pointer of the call function to NULL
	gpf_SPICallBack = NULL;
    2130:	10 92 f1 01 	sts	0x01F1, r1
    2134:	10 92 f0 01 	sts	0x01F0, r1
	// Reset the Enable bit of the SPI Interrupt to disable it
	CLR_BIT(SPCR_REG,SPIE_BIT);
    2138:	ad e2       	ldi	r26, 0x2D	; 45
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	ed e2       	ldi	r30, 0x2D	; 45
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	8f 77       	andi	r24, 0x7F	; 127
    2144:	8c 93       	st	X, r24
}
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <SPI_u8Deinit>:
/**
 * @fn void SPI_u8Deinit(void)
 * @brief This function is called to Stop the SPI Peripheral and De-initialize it
 */
void SPI_u8Deinit(void)
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
	// Disable the SPI capabilities of Receiving and transmitting
	CLR_BIT(SPCR_REG,SPE_BIT);
    2154:	ad e2       	ldi	r26, 0x2D	; 45
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	ed e2       	ldi	r30, 0x2D	; 45
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	8f 7b       	andi	r24, 0xBF	; 191
    2160:	8c 93       	st	X, r24
	//Reset the pointer to the callback function to NULL
	gpf_SPICallBack = NULL;
    2162:	10 92 f1 01 	sts	0x01F1, r1
    2166:	10 92 f0 01 	sts	0x01F0, r1
	// Clear the Enable bit of the SPI Interrupt
	CLR_BIT(SPCR_REG,SPIE_BIT);
    216a:	ad e2       	ldi	r26, 0x2D	; 45
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	ed e2       	ldi	r30, 0x2D	; 45
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	8f 77       	andi	r24, 0x7F	; 127
    2176:	8c 93       	st	X, r24
	// Reset the Initialization flag indicating that the SPI is not initialized anymore
	gu8_SPIState = SPI_NOT_INITIALIZED;
    2178:	10 92 ef 01 	sts	0x01EF, r1

}
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <SPI_u8ReceiveInt>:


void SPI_u8ReceiveInt(uint32_t* pu8Data)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <SPI_u8ReceiveInt+0x6>
    2188:	00 d0       	rcall	.+0      	; 0x218a <SPI_u8ReceiveInt+0x8>
    218a:	00 d0       	rcall	.+0      	; 0x218c <SPI_u8ReceiveInt+0xa>
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05

	IntData_t Received;
	SPI_u8ReceiveByte(&Received.u8Bytes[3]);
    2194:	ce 01       	movw	r24, r28
    2196:	04 96       	adiw	r24, 0x04	; 4
    2198:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <SPI_u8ReceiveByte>
	//UART_u8SendByte(Received.u8Bytes[0]);
	SPI_u8ReceiveByte(&Received.u8Bytes[2]);
    219c:	ce 01       	movw	r24, r28
    219e:	03 96       	adiw	r24, 0x03	; 3
    21a0:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <SPI_u8ReceiveByte>
	//UART_u8SendByte(Received.u8Bytes[1]);
	SPI_u8ReceiveByte(&Received.u8Bytes[1]);
    21a4:	ce 01       	movw	r24, r28
    21a6:	02 96       	adiw	r24, 0x02	; 2
    21a8:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <SPI_u8ReceiveByte>
	//UART_u8SendByte(Received.u8Bytes[2]);
	SPI_u8ReceiveByte(&Received.u8Bytes[0]);
    21ac:	ce 01       	movw	r24, r28
    21ae:	01 96       	adiw	r24, 0x01	; 1
    21b0:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <SPI_u8ReceiveByte>
	//UART_u8SendByte(Received.u8Bytes[3]);
	*pu8Data = Received.num;
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	9a 81       	ldd	r25, Y+2	; 0x02
    21b8:	ab 81       	ldd	r26, Y+3	; 0x03
    21ba:	bc 81       	ldd	r27, Y+4	; 0x04
    21bc:	ed 81       	ldd	r30, Y+5	; 0x05
    21be:	fe 81       	ldd	r31, Y+6	; 0x06
    21c0:	80 83       	st	Z, r24
    21c2:	91 83       	std	Z+1, r25	; 0x01
    21c4:	a2 83       	std	Z+2, r26	; 0x02
    21c6:	b3 83       	std	Z+3, r27	; 0x03
}
    21c8:	26 96       	adiw	r28, 0x06	; 6
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret

000021da <SPI_u8SendInt>:


void SPI_u8SendInt(uint32_t u32Data){
    21da:	df 93       	push	r29
    21dc:	cf 93       	push	r28
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	2c 97       	sbiw	r28, 0x0c	; 12
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	69 87       	std	Y+9, r22	; 0x09
    21f0:	7a 87       	std	Y+10, r23	; 0x0a
    21f2:	8b 87       	std	Y+11, r24	; 0x0b
    21f4:	9c 87       	std	Y+12, r25	; 0x0c

	IntData_t New;
	uint8_t Byte1 = (u32Data);
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t Byte2 = (u32Data>>8);
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fe:	ab 85       	ldd	r26, Y+11	; 0x0b
    2200:	bc 85       	ldd	r27, Y+12	; 0x0c
    2202:	89 2f       	mov	r24, r25
    2204:	9a 2f       	mov	r25, r26
    2206:	ab 2f       	mov	r26, r27
    2208:	bb 27       	eor	r27, r27
    220a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t Byte3 = (u32Data>>16);
    220c:	89 85       	ldd	r24, Y+9	; 0x09
    220e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2210:	ab 85       	ldd	r26, Y+11	; 0x0b
    2212:	bc 85       	ldd	r27, Y+12	; 0x0c
    2214:	cd 01       	movw	r24, r26
    2216:	aa 27       	eor	r26, r26
    2218:	bb 27       	eor	r27, r27
    221a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Byte4 = (u32Data>>24);
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	ab 85       	ldd	r26, Y+11	; 0x0b
    2222:	bc 85       	ldd	r27, Y+12	; 0x0c
    2224:	8b 2f       	mov	r24, r27
    2226:	99 27       	eor	r25, r25
    2228:	aa 27       	eor	r26, r26
    222a:	bb 27       	eor	r27, r27
    222c:	89 83       	std	Y+1, r24	; 0x01

	New.num=u32Data;
    222e:	89 85       	ldd	r24, Y+9	; 0x09
    2230:	9a 85       	ldd	r25, Y+10	; 0x0a
    2232:	ab 85       	ldd	r26, Y+11	; 0x0b
    2234:	bc 85       	ldd	r27, Y+12	; 0x0c
    2236:	8d 83       	std	Y+5, r24	; 0x05
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	af 83       	std	Y+7, r26	; 0x07
    223c:	b8 87       	std	Y+8, r27	; 0x08
	UART_u8SendByte(u32Data);
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	0e 94 bb 09 	call	0x1376	; 0x1376 <UART_u8SendByte>
	UART_u8SendInt(New.u8Bytes[3]);
    2244:	88 85       	ldd	r24, Y+8	; 0x08
    2246:	88 2f       	mov	r24, r24
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	a0 e0       	ldi	r26, 0x00	; 0
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 de 09 	call	0x13bc	; 0x13bc <UART_u8SendInt>
	SPI_u8SendByte(New.u8Bytes[3]);
    2256:	88 85       	ldd	r24, Y+8	; 0x08
    2258:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <SPI_u8SendByte>
	SPI_u8SendByte(New.u8Bytes[2]);
    225c:	8f 81       	ldd	r24, Y+7	; 0x07
    225e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <SPI_u8SendByte>
	SPI_u8SendByte(New.u8Bytes[1]);
    2262:	8e 81       	ldd	r24, Y+6	; 0x06
    2264:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <SPI_u8SendByte>
	SPI_u8SendByte(New.u8Bytes[0]);
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <SPI_u8SendByte>
}
    226e:	2c 96       	adiw	r28, 0x0c	; 12
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <__vector_12>:

/**
 * @brief the SPI Interrupt ISR
 */
void __vector_12(void) {
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62

	if (gpf_SPICallBack!=NULL) // check if the pointer to the Callback is pointing to NULL
    2288:	80 91 f0 01 	lds	r24, 0x01F0
    228c:	90 91 f1 01 	lds	r25, 0x01F1
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	29 f0       	breq	.+10     	; 0x229e <__vector_12+0x1e>
	{
		//if not then call the function pointing to it
		gpf_SPICallBack();
    2294:	e0 91 f0 01 	lds	r30, 0x01F0
    2298:	f0 91 f1 01 	lds	r31, 0x01F1
    229c:	09 95       	icall
	}
}
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <channelA_callBack>:
// creat 2 PWM struct contain port and pin for each channel  
static PWMPin_t PWM1;
static PWMPin_t PWM2;

// function to toggle PWM pin channel 1
void channelA_callBack(void) {
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
	DIO_u8TogglePinData(PWM1.port, PWM1.pin);
    22ac:	80 91 f2 01 	lds	r24, 0x01F2
    22b0:	90 91 f3 01 	lds	r25, 0x01F3
    22b4:	69 2f       	mov	r22, r25
    22b6:	0e 94 04 1b 	call	0x3608	; 0x3608 <DIO_u8TogglePinData>
}
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <channelB_callBack>:

// function to toggle PWM pin channel 2
void channelB_callBack(void) {
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8TogglePinData(PWM2.port, PWM2.pin);
    22c8:	80 91 f4 01 	lds	r24, 0x01F4
    22cc:	90 91 f5 01 	lds	r25, 0x01F5
    22d0:	69 2f       	mov	r22, r25
    22d2:	0e 94 04 1b 	call	0x3608	; 0x3608 <DIO_u8TogglePinData>
}
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <PWM_u8Init>:

// initialize PWM channel for selected pin 
uint8_t PWM_u8Init(CHANNEL channel, PWMPin_t* pwm) {
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <PWM_u8Init+0x6>
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <PWM_u8Init+0x8>
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <PWM_u8Init+0xa>
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	7b 83       	std	Y+3, r23	; 0x03
    22ee:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel) {
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	3e 83       	std	Y+6, r19	; 0x06
    22f8:	2d 83       	std	Y+5, r18	; 0x05
    22fa:	8d 81       	ldd	r24, Y+5	; 0x05
    22fc:	9e 81       	ldd	r25, Y+6	; 0x06
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	31 f0       	breq	.+12     	; 0x230e <PWM_u8Init+0x32>
    2302:	2d 81       	ldd	r18, Y+5	; 0x05
    2304:	3e 81       	ldd	r19, Y+6	; 0x06
    2306:	21 30       	cpi	r18, 0x01	; 1
    2308:	31 05       	cpc	r19, r1
    230a:	51 f0       	breq	.+20     	; 0x2320 <PWM_u8Init+0x44>
    230c:	12 c0       	rjmp	.+36     	; 0x2332 <PWM_u8Init+0x56>
	case CHANNELA:
		PWM1 = *pwm;		// set port and pin value 
    230e:	ea 81       	ldd	r30, Y+2	; 0x02
    2310:	fb 81       	ldd	r31, Y+3	; 0x03
    2312:	80 81       	ld	r24, Z
    2314:	91 81       	ldd	r25, Z+1	; 0x01
    2316:	90 93 f3 01 	sts	0x01F3, r25
    231a:	80 93 f2 01 	sts	0x01F2, r24
    231e:	0b c0       	rjmp	.+22     	; 0x2336 <PWM_u8Init+0x5a>
		break;
	case CHANNELB:
		PWM2 = *pwm;		// set port and pin value 
    2320:	ea 81       	ldd	r30, Y+2	; 0x02
    2322:	fb 81       	ldd	r31, Y+3	; 0x03
    2324:	80 81       	ld	r24, Z
    2326:	91 81       	ldd	r25, Z+1	; 0x01
    2328:	90 93 f5 01 	sts	0x01F5, r25
    232c:	80 93 f4 01 	sts	0x01F4, r24
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <PWM_u8Init+0x5a>
		break;
	default:
		return 0;
    2332:	1c 82       	std	Y+4, r1	; 0x04
    2334:	03 c0       	rjmp	.+6      	; 0x233c <PWM_u8Init+0x60>
	}
	return TIMER1_u8Init();		// initialize TIMER1
    2336:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <TIMER1_u8Init>
    233a:	8c 83       	std	Y+4, r24	; 0x04
    233c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    233e:	26 96       	adiw	r28, 0x06	; 6
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <PWM_u8DutyCycle>:

// function set duty cycle on the selected channel 
uint8_t PWM_u8DutyCycle(CHANNEL channel, uint32_t dutyCycle) {
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	2c 97       	sbiw	r28, 0x0c	; 12
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	8d 83       	std	Y+5, r24	; 0x05
    2366:	4e 83       	std	Y+6, r20	; 0x06
    2368:	5f 83       	std	Y+7, r21	; 0x07
    236a:	68 87       	std	Y+8, r22	; 0x08
    236c:	79 87       	std	Y+9, r23	; 0x09
	uint32_t dutyValue = ((float) dutyCycle * MAX_VALUE) / MAX_DUTY; // calculate real duty value 
    236e:	6e 81       	ldd	r22, Y+6	; 0x06
    2370:	7f 81       	ldd	r23, Y+7	; 0x07
    2372:	88 85       	ldd	r24, Y+8	; 0x08
    2374:	99 85       	ldd	r25, Y+9	; 0x09
    2376:	0e 94 a7 04 	call	0x94e	; 0x94e <__floatunsisf>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	53 e4       	ldi	r21, 0x43	; 67
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	48 ec       	ldi	r20, 0xC8	; 200
    239c:	52 e4       	ldi	r21, 0x42	; 66
    239e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	9a 83       	std	Y+2, r25	; 0x02
    23b6:	ab 83       	std	Y+3, r26	; 0x03
    23b8:	bc 83       	std	Y+4, r27	; 0x04

	// depend on channel initalize it to HIGH 
	// toggle pin depend on duty cycle and frequency  
	switch (channel) {
    23ba:	8d 81       	ldd	r24, Y+5	; 0x05
    23bc:	28 2f       	mov	r18, r24
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	3c 87       	std	Y+12, r19	; 0x0c
    23c2:	2b 87       	std	Y+11, r18	; 0x0b
    23c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    23c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	31 f0       	breq	.+12     	; 0x23d8 <PWM_u8DutyCycle+0x88>
    23cc:	2b 85       	ldd	r18, Y+11	; 0x0b
    23ce:	3c 85       	ldd	r19, Y+12	; 0x0c
    23d0:	21 30       	cpi	r18, 0x01	; 1
    23d2:	31 05       	cpc	r19, r1
    23d4:	c9 f0       	breq	.+50     	; 0x2408 <PWM_u8DutyCycle+0xb8>
    23d6:	30 c0       	rjmp	.+96     	; 0x2438 <PWM_u8DutyCycle+0xe8>
	case CHANNELA:
		DIO_u8SetPinData(PWM1.port, PWM1.pin, DIO_HIGH);
    23d8:	80 91 f2 01 	lds	r24, 0x01F2
    23dc:	90 91 f3 01 	lds	r25, 0x01F3
    23e0:	69 2f       	mov	r22, r25
    23e2:	41 e0       	ldi	r20, 0x01	; 1
    23e4:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
		TIMER1_u8StopChannel(channel);
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <TIMER1_u8StopChannel>
		TIMER1_u8SetComapre(channel, (uint16_t) dutyValue);
    23ee:	29 81       	ldd	r18, Y+1	; 0x01
    23f0:	3a 81       	ldd	r19, Y+2	; 0x02
    23f2:	8d 81       	ldd	r24, Y+5	; 0x05
    23f4:	b9 01       	movw	r22, r18
    23f6:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <TIMER1_u8SetComapre>
		TIMER1_u8SetChannelInterrupt(channel, channelA_callBack);
    23fa:	22 e5       	ldi	r18, 0x52	; 82
    23fc:	31 e1       	ldi	r19, 0x11	; 17
    23fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2400:	b9 01       	movw	r22, r18
    2402:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <TIMER1_u8SetChannelInterrupt>
    2406:	1a c0       	rjmp	.+52     	; 0x243c <PWM_u8DutyCycle+0xec>
		break;
	case CHANNELB:
		DIO_u8SetPinData(PWM2.port, PWM2.pin, DIO_HIGH);
    2408:	80 91 f4 01 	lds	r24, 0x01F4
    240c:	90 91 f5 01 	lds	r25, 0x01F5
    2410:	69 2f       	mov	r22, r25
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
		TIMER1_u8StopChannel(channel);
    2418:	8d 81       	ldd	r24, Y+5	; 0x05
    241a:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <TIMER1_u8StopChannel>
		TIMER1_u8SetComapre(channel, (uint16_t) dutyValue);
    241e:	29 81       	ldd	r18, Y+1	; 0x01
    2420:	3a 81       	ldd	r19, Y+2	; 0x02
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	b9 01       	movw	r22, r18
    2426:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <TIMER1_u8SetComapre>
		TIMER1_u8SetChannelInterrupt(channel, channelB_callBack);
    242a:	20 e6       	ldi	r18, 0x60	; 96
    242c:	31 e1       	ldi	r19, 0x11	; 17
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	b9 01       	movw	r22, r18
    2432:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <TIMER1_u8SetChannelInterrupt>
    2436:	02 c0       	rjmp	.+4      	; 0x243c <PWM_u8DutyCycle+0xec>
		break;
	default:
		return 0;
    2438:	1a 86       	std	Y+10, r1	; 0x0a
    243a:	03 c0       	rjmp	.+6      	; 0x2442 <PWM_u8DutyCycle+0xf2>
	}
	return TIMER1_u8Start();
    243c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <TIMER1_u8Start>
    2440:	8a 87       	std	Y+10, r24	; 0x0a
    2442:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2444:	2c 96       	adiw	r28, 0x0c	; 12
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <I2C_u8Init>:
static volatile uint8_t gu8_I2CState= I2C_NO_INFO;



uint8_t I2C_u8Init()
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = I2C_OK;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	89 83       	std	Y+1, r24	; 0x01

	//Set the clock rate of the I2C bus
	TWBR_REG = I2C_400KHZ;
    2464:	e0 e2       	ldi	r30, 0x20	; 32
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	88 e4       	ldi	r24, 0x48	; 72
    246a:	80 83       	st	Z, r24
	//Set the slave address which it will respond to
	TWAR_REG =I2C_OWN_SLAVE_ADDRESS;
    246c:	e2 e2       	ldi	r30, 0x22	; 34
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	80 83       	st	Z, r24
	//Enable the ACK
	SET_BIT(TWCR_REG,TWEA_BIT);
    2474:	a6 e5       	ldi	r26, 0x56	; 86
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e6 e5       	ldi	r30, 0x56	; 86
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	80 64       	ori	r24, 0x40	; 64
    2480:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWIE_BIT);
    2482:	a6 e5       	ldi	r26, 0x56	; 86
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e6 e5       	ldi	r30, 0x56	; 86
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	81 60       	ori	r24, 0x01	; 1
    248e:	8c 93       	st	X, r24
	SET_BIT(SREG_REG,I_BIT);
    2490:	af e5       	ldi	r26, 0x5F	; 95
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	ef e5       	ldi	r30, 0x5F	; 95
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	80 68       	ori	r24, 0x80	; 128
    249c:	8c 93       	st	X, r24
	//Enable the I2C Peripheral
	SET_BIT(TWCR_REG,TWEN_BIT);
    249e:	a6 e5       	ldi	r26, 0x56	; 86
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e6 e5       	ldi	r30, 0x56	; 86
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	84 60       	ori	r24, 0x04	; 4
    24aa:	8c 93       	st	X, r24

#ifdef DEBUG_MODE
	LED_u8Init(&LEDTEST1);
    24ac:	86 ef       	ldi	r24, 0xF6	; 246
    24ae:	91 e0       	ldi	r25, 0x01	; 1
    24b0:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <LED_u8Init>
	LED_u8Init(&LEDTEST2);
    24b4:	88 ed       	ldi	r24, 0xD8	; 216
    24b6:	91 e0       	ldi	r25, 0x01	; 1
    24b8:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <LED_u8Init>
#endif

	return u8ErrorState;
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    24be:	0f 90       	pop	r0
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	08 95       	ret

000024c6 <I2C_u8GetStatus>:


uint8_t I2C_u8GetStatus(void)
{
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
	return TWSR_REG & I2C_PRESCALAR_MASK;
    24ce:	e1 e2       	ldi	r30, 0x21	; 33
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	88 7f       	andi	r24, 0xF8	; 248
}
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <I2C_u8MasterSendSLA>:

uint8_t I2C_u8MasterSendSLA(uint8_t u8SlaveAddress,uint8_t u8MasterOperation)
{
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <I2C_u8MasterSendSLA+0x6>
    24e2:	0f 92       	push	r0
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	8a 83       	std	Y+2, r24	; 0x02
    24ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState= I2C_OK;
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	89 83       	std	Y+1, r24	; 0x01
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    24f0:	e6 e5       	ldi	r30, 0x56	; 86
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	88 23       	and	r24, r24
    24f8:	dc f7       	brge	.-10     	; 0x24f0 <I2C_u8MasterSendSLA+0x14>
		if (gu8_I2CState==I2C_MT_START_TRANSMITTED||gu8_I2CState==I2C_MT_REPEATED_START_TRANSMITTED)
    24fa:	80 91 da 01 	lds	r24, 0x01DA
    24fe:	88 30       	cpi	r24, 0x08	; 8
    2500:	21 f0       	breq	.+8      	; 0x250a <I2C_u8MasterSendSLA+0x2e>
    2502:	80 91 da 01 	lds	r24, 0x01DA
    2506:	80 31       	cpi	r24, 0x10	; 16
    2508:	71 f4       	brne	.+28     	; 0x2526 <I2C_u8MasterSendSLA+0x4a>
		{//if it is state that the start condition is successfully sent then load the slave address in the data register and set the mode to write
			TWDR_REG = (u8SlaveAddress|u8MasterOperation);
    250a:	e3 e2       	ldi	r30, 0x23	; 35
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	9a 81       	ldd	r25, Y+2	; 0x02
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	89 2b       	or	r24, r25
    2514:	80 83       	st	Z, r24
			// Clear the interrupt flag to start the next action by the peripheral
			ASSIGN_HIGH_NIB(TWCR_REG,I2C_CLR_INTERRUPT_FLAG);
    2516:	a6 e5       	ldi	r26, 0x56	; 86
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	e6 e5       	ldi	r30, 0x56	; 86
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	8f 70       	andi	r24, 0x0F	; 15
    2522:	80 68       	ori	r24, 0x80	; 128
    2524:	8c 93       	st	X, r24
		}
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    2526:	e6 e5       	ldi	r30, 0x56	; 86
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	88 23       	and	r24, r24
    252e:	dc f7       	brge	.-10     	; 0x2526 <I2C_u8MasterSendSLA+0x4a>

	return u8ErrorState;
    2530:	89 81       	ldd	r24, Y+1	; 0x01
}
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <I2C_u8MasterSendByte>:


uint8_t I2C_u8MasterSendByte(uint8_t u8Data)
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <I2C_u8MasterSendByte+0x6>
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = I2C_OK;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	89 83       	std	Y+1, r24	; 0x01

	//Load the data in the I2C Data Register
	TWDR_REG= u8Data;
    254e:	e3 e2       	ldi	r30, 0x23	; 35
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	80 83       	st	Z, r24
	// Clear the interrupt flag to start the next action by the peripheral
	ASSIGN_HIGH_NIB(TWCR_REG,I2C_CLR_INTERRUPT_FLAG);
    2556:	a6 e5       	ldi	r26, 0x56	; 86
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e6 e5       	ldi	r30, 0x56	; 86
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	8f 70       	andi	r24, 0x0F	; 15
    2562:	80 68       	ori	r24, 0x80	; 128
    2564:	8c 93       	st	X, r24
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    2566:	e6 e5       	ldi	r30, 0x56	; 86
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	88 23       	and	r24, r24
    256e:	dc f7       	brge	.-10     	; 0x2566 <I2C_u8MasterSendByte+0x28>
	//wait until the byte is sent
	return u8ErrorState;
    2570:	89 81       	ldd	r24, Y+1	; 0x01
}
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <I2C_u8MasterSendStart>:

uint8_t I2C_u8MasterSendStart(void)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	0f 92       	push	r0
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState=I2C_OK;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	89 83       	std	Y+1, r24	; 0x01
	if (gu8_I2CState==I2C_NO_INFO)
    258a:	80 91 da 01 	lds	r24, 0x01DA
    258e:	88 3f       	cpi	r24, 0xF8	; 248
    2590:	69 f4       	brne	.+26     	; 0x25ac <I2C_u8MasterSendStart+0x30>
	{// if it is the first communication or after stop condition

		//Send the Start Condition
		SET_BIT(TWCR_REG,TWSTA_BIT);
    2592:	a6 e5       	ldi	r26, 0x56	; 86
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e6 e5       	ldi	r30, 0x56	; 86
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	80 62       	ori	r24, 0x20	; 32
    259e:	8c 93       	st	X, r24
		//Wait until it is sent
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    25a0:	e6 e5       	ldi	r30, 0x56	; 86
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	88 23       	and	r24, r24
    25a8:	dc f7       	brge	.-10     	; 0x25a0 <I2C_u8MasterSendStart+0x24>
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <I2C_u8MasterSendStart+0x34>

	}else
	{
		u8ErrorState= I2C_ILLEGAL_START;
    25ac:	86 e0       	ldi	r24, 0x06	; 6
    25ae:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    25b2:	0f 90       	pop	r0
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <I2C_u8SendRepeatedStart>:

uint8_t I2C_u8SendRepeatedStart(void)
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	0f 92       	push	r0
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = I2C_OK;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	89 83       	std	Y+1, r24	; 0x01
//	uint8_t u8I2CState= I2C_u8GetStatus();
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    25c8:	e6 e5       	ldi	r30, 0x56	; 86
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	88 23       	and	r24, r24
    25d0:	dc f7       	brge	.-10     	; 0x25c8 <I2C_u8SendRepeatedStart+0xe>

	if (gu8_I2CState==I2C_MT_DATA_TRANSMITTED_ACK || gu8_I2CState==I2C_MT_DATA_TRANSMITTED_NACK)
    25d2:	80 91 da 01 	lds	r24, 0x01DA
    25d6:	88 32       	cpi	r24, 0x28	; 40
    25d8:	21 f0       	breq	.+8      	; 0x25e2 <I2C_u8SendRepeatedStart+0x28>
    25da:	80 91 da 01 	lds	r24, 0x01DA
    25de:	80 33       	cpi	r24, 0x30	; 48
    25e0:	49 f4       	brne	.+18     	; 0x25f4 <I2C_u8SendRepeatedStart+0x3a>
	{// if the current state is the data byte is sent
		//Then send the Repeated start condition and clear the interrupt flag to send it
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_START_CONDITION);
    25e2:	a6 e5       	ldi	r26, 0x56	; 86
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e6 e5       	ldi	r30, 0x56	; 86
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	8f 70       	andi	r24, 0x0F	; 15
    25ee:	80 6a       	ori	r24, 0xA0	; 160
    25f0:	8c 93       	st	X, r24
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <I2C_u8SendRepeatedStart+0x3e>
	}else
	{
		// if not update the error state to indicate that the start condition can not be send here
		u8ErrorState = I2C_START_WRONG_PLACE;
    25f4:	85 e0       	ldi	r24, 0x05	; 5
    25f6:	89 83       	std	Y+1, r24	; 0x01
	}


	return u8ErrorState;
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    25fa:	0f 90       	pop	r0
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <I2C_u8MasterReceiveWithACK>:


uint8_t I2C_u8MasterReceiveWithACK(uint8_t* pu8Data)
{
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	00 d0       	rcall	.+0      	; 0x2608 <I2C_u8MasterReceiveWithACK+0x6>
    2608:	0f 92       	push	r0
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	9b 83       	std	Y+3, r25	; 0x03
    2610:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState=I2C_OK;
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	89 83       	std	Y+1, r24	; 0x01
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    2616:	e6 e5       	ldi	r30, 0x56	; 86
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	88 23       	and	r24, r24
    261e:	dc f7       	brge	.-10     	; 0x2616 <I2C_u8MasterReceiveWithACK+0x14>
	if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_ACK||gu8_I2CState==I2C_MR_DATA_RECEIVED_ACK)
    2620:	80 91 da 01 	lds	r24, 0x01DA
    2624:	80 34       	cpi	r24, 0x40	; 64
    2626:	21 f0       	breq	.+8      	; 0x2630 <I2C_u8MasterReceiveWithACK+0x2e>
    2628:	80 91 da 01 	lds	r24, 0x01DA
    262c:	80 35       	cpi	r24, 0x50	; 80
    262e:	c1 f4       	brne	.+48     	; 0x2660 <I2C_u8MasterReceiveWithACK+0x5e>
	{
		LED_u8On(&LEDTEST1);
    2630:	86 ef       	ldi	r24, 0xF6	; 246
    2632:	91 e0       	ldi	r25, 0x01	; 1
    2634:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <LED_u8On>
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_RECEIVE_WITH_ACK);
    2638:	a6 e5       	ldi	r26, 0x56	; 86
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e6 e5       	ldi	r30, 0x56	; 86
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	8f 70       	andi	r24, 0x0F	; 15
    2644:	80 6c       	ori	r24, 0xC0	; 192
    2646:	8c 93       	st	X, r24
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    2648:	e6 e5       	ldi	r30, 0x56	; 86
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	88 23       	and	r24, r24
    2650:	dc f7       	brge	.-10     	; 0x2648 <I2C_u8MasterReceiveWithACK+0x46>
		*pu8Data=TWDR_REG;
    2652:	e3 e2       	ldi	r30, 0x23	; 35
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	ea 81       	ldd	r30, Y+2	; 0x02
    265a:	fb 81       	ldd	r31, Y+3	; 0x03
    265c:	80 83       	st	Z, r24
    265e:	0e c0       	rjmp	.+28     	; 0x267c <I2C_u8MasterReceiveWithACK+0x7a>

	}else if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_NACK)
    2660:	80 91 da 01 	lds	r24, 0x01DA
    2664:	88 34       	cpi	r24, 0x48	; 72
    2666:	51 f4       	brne	.+20     	; 0x267c <I2C_u8MasterReceiveWithACK+0x7a>
	{
		u8ErrorState= I2C_SLAVE_NOT_AVLBL;
    2668:	87 e0       	ldi	r24, 0x07	; 7
    266a:	89 83       	std	Y+1, r24	; 0x01
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_STOP_CONDITION);
    266c:	a6 e5       	ldi	r26, 0x56	; 86
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e6 e5       	ldi	r30, 0x56	; 86
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	8f 70       	andi	r24, 0x0F	; 15
    2678:	80 69       	ori	r24, 0x90	; 144
    267a:	8c 93       	st	X, r24
	}
	return u8ErrorState;
    267c:	89 81       	ldd	r24, Y+1	; 0x01
}
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <I2C_u8MasterReceiveWithNAK>:

uint8_t I2C_u8MasterReceiveWithNAK(uint8_t* pu8Data)
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	00 d0       	rcall	.+0      	; 0x2690 <I2C_u8MasterReceiveWithNAK+0x6>
    2690:	0f 92       	push	r0
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	9b 83       	std	Y+3, r25	; 0x03
    2698:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState=I2C_OK;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	89 83       	std	Y+1, r24	; 0x01
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    269e:	e6 e5       	ldi	r30, 0x56	; 86
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	88 23       	and	r24, r24
    26a6:	dc f7       	brge	.-10     	; 0x269e <I2C_u8MasterReceiveWithNAK+0x14>
	if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_ACK||gu8_I2CState==I2C_MR_DATA_RECEIVED_ACK)
    26a8:	80 91 da 01 	lds	r24, 0x01DA
    26ac:	80 34       	cpi	r24, 0x40	; 64
    26ae:	21 f0       	breq	.+8      	; 0x26b8 <I2C_u8MasterReceiveWithNAK+0x2e>
    26b0:	80 91 da 01 	lds	r24, 0x01DA
    26b4:	80 35       	cpi	r24, 0x50	; 80
    26b6:	a1 f4       	brne	.+40     	; 0x26e0 <I2C_u8MasterReceiveWithNAK+0x56>
	{
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_CLR_INTERRUPT_FLAG);
    26b8:	a6 e5       	ldi	r26, 0x56	; 86
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e6 e5       	ldi	r30, 0x56	; 86
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	8f 70       	andi	r24, 0x0F	; 15
    26c4:	80 68       	ori	r24, 0x80	; 128
    26c6:	8c 93       	st	X, r24
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    26c8:	e6 e5       	ldi	r30, 0x56	; 86
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	88 23       	and	r24, r24
    26d0:	dc f7       	brge	.-10     	; 0x26c8 <I2C_u8MasterReceiveWithNAK+0x3e>
		*pu8Data=TWDR_REG;
    26d2:	e3 e2       	ldi	r30, 0x23	; 35
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	ea 81       	ldd	r30, Y+2	; 0x02
    26da:	fb 81       	ldd	r31, Y+3	; 0x03
    26dc:	80 83       	st	Z, r24
    26de:	0e c0       	rjmp	.+28     	; 0x26fc <I2C_u8MasterReceiveWithNAK+0x72>

	}else if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_NACK)
    26e0:	80 91 da 01 	lds	r24, 0x01DA
    26e4:	88 34       	cpi	r24, 0x48	; 72
    26e6:	51 f4       	brne	.+20     	; 0x26fc <I2C_u8MasterReceiveWithNAK+0x72>
	{
		u8ErrorState= I2C_SLAVE_NOT_AVLBL;
    26e8:	87 e0       	ldi	r24, 0x07	; 7
    26ea:	89 83       	std	Y+1, r24	; 0x01
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_STOP_CONDITION);
    26ec:	a6 e5       	ldi	r26, 0x56	; 86
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e6 e5       	ldi	r30, 0x56	; 86
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	8f 70       	andi	r24, 0x0F	; 15
    26f8:	80 69       	ori	r24, 0x90	; 144
    26fa:	8c 93       	st	X, r24
	}

	return u8ErrorState;
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	08 95       	ret

0000270a <I2C_u8Stop>:

uint8_t I2C_u8Stop(void)
{
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	0f 92       	push	r0
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = I2C_OK;
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	89 83       	std	Y+1, r24	; 0x01
	//uint8_t u8I2CState= I2C_u8GetStatus();

	if (gu8_I2CState!=I2C_MT_START_TRANSMITTED || gu8_I2CState==I2C_MT_REPEATED_START_TRANSMITTED)
    2718:	80 91 da 01 	lds	r24, 0x01DA
    271c:	88 30       	cpi	r24, 0x08	; 8
    271e:	21 f4       	brne	.+8      	; 0x2728 <I2C_u8Stop+0x1e>
    2720:	80 91 da 01 	lds	r24, 0x01DA
    2724:	80 31       	cpi	r24, 0x10	; 16
    2726:	49 f4       	brne	.+18     	; 0x273a <I2C_u8Stop+0x30>
	{// if the current state is not after a start condition

		//Then send the stop condition and clear the interrupt flag to send it
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_STOP_CONDITION);
    2728:	a6 e5       	ldi	r26, 0x56	; 86
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e6 e5       	ldi	r30, 0x56	; 86
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	8f 70       	andi	r24, 0x0F	; 15
    2734:	80 69       	ori	r24, 0x90	; 144
    2736:	8c 93       	st	X, r24
    2738:	02 c0       	rjmp	.+4      	; 0x273e <I2C_u8Stop+0x34>
	}else
	{
		// if not update the error state to indicate that the start condition can not be send here
		u8ErrorState = I2C_START_WRONG_PLACE;
    273a:	85 e0       	ldi	r24, 0x05	; 5
    273c:	89 83       	std	Y+1, r24	; 0x01
	}
	gu8_I2CState=I2C_NO_INFO;
    273e:	88 ef       	ldi	r24, 0xF8	; 248
    2740:	80 93 da 01 	sts	0x01DA, r24


	return u8ErrorState;
    2744:	89 81       	ldd	r24, Y+1	; 0x01
}
    2746:	0f 90       	pop	r0
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <I2C_u8SlaveGetByte>:

uint8_t I2C_u8SlaveGetByte(uint8_t* pu8Reading)
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	00 d0       	rcall	.+0      	; 0x2754 <I2C_u8SlaveGetByte+0x6>
    2754:	0f 92       	push	r0
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until the Device is addressed*/
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    275e:	e6 e5       	ldi	r30, 0x56	; 86
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	88 23       	and	r24, r24
    2766:	dc f7       	brge	.-10     	; 0x275e <I2C_u8SlaveGetByte+0x10>

	/*Assign the high nibble of the I2C control register with value that will make it send a NACK after receiving data*/
	ASSIGN_HIGH_NIB(TWCR_REG,I2C_RECEIVE_WITH_ACK);
    2768:	a6 e5       	ldi	r26, 0x56	; 86
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e6 e5       	ldi	r30, 0x56	; 86
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	8f 70       	andi	r24, 0x0F	; 15
    2774:	80 6c       	ori	r24, 0xC0	; 192
    2776:	8c 93       	st	X, r24
	while (!(gu8_I2CState==I2C_SR_DATA_RECIEVED ||gu8_I2CState==I2C_SR_LAST_BYTE_RECIEVED ) );
    2778:	80 91 da 01 	lds	r24, 0x01DA
    277c:	80 38       	cpi	r24, 0x80	; 128
    277e:	21 f0       	breq	.+8      	; 0x2788 <I2C_u8SlaveGetByte+0x3a>
    2780:	80 91 da 01 	lds	r24, 0x01DA
    2784:	88 38       	cpi	r24, 0x88	; 136
    2786:	c1 f7       	brne	.-16     	; 0x2778 <I2C_u8SlaveGetByte+0x2a>
	ASSIGN_HIGH_NIB(TWCR_REG,I2C_RECOGNIZE_SLA_WITH_ACK);
    2788:	a6 e5       	ldi	r26, 0x56	; 86
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	e6 e5       	ldi	r30, 0x56	; 86
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	8f 70       	andi	r24, 0x0F	; 15
    2794:	80 6c       	ori	r24, 0xC0	; 192
    2796:	8c 93       	st	X, r24
	gu8_I2CState=I2C_NO_INFO;
    2798:	88 ef       	ldi	r24, 0xF8	; 248
    279a:	80 93 da 01 	sts	0x01DA, r24
	*pu8Reading= TWDR_REG;
    279e:	e3 e2       	ldi	r30, 0x23	; 35
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	e9 81       	ldd	r30, Y+1	; 0x01
    27a6:	fa 81       	ldd	r31, Y+2	; 0x02
    27a8:	80 83       	st	Z, r24
}
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <__vector_19>:



void __vector_19(void) {
    27b6:	1f 92       	push	r1
    27b8:	0f 92       	push	r0
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	0f 92       	push	r0
    27be:	11 24       	eor	r1, r1
    27c0:	8f 93       	push	r24
    27c2:	ef 93       	push	r30
    27c4:	ff 93       	push	r31
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
	gu8_I2CState = TWSR_REG & I2C_PRESCALAR_MASK;
    27ce:	e1 e2       	ldi	r30, 0x21	; 33
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	80 81       	ld	r24, Z
    27d4:	88 7f       	andi	r24, 0xF8	; 248
    27d6:	80 93 da 01 	sts	0x01DA, r24
}
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	ff 91       	pop	r31
    27e0:	ef 91       	pop	r30
    27e2:	8f 91       	pop	r24
    27e4:	0f 90       	pop	r0
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	0f 90       	pop	r0
    27ea:	1f 90       	pop	r1
    27ec:	18 95       	reti

000027ee <EXTI_u8Enable>:
#include "EXTI_prv.h"
#include "EXTI.h"


uint8_t EXTI_u8Enable(EXTINumber_t u8InterruptNumber, EXTITiggerType_t u8InterruptTrigger)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	2b 97       	sbiw	r28, 0x0b	; 11
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	8a 83       	std	Y+2, r24	; 0x02
    2804:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = EXTI_OK;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	89 83       	std	Y+1, r24	; 0x01

	switch(u8InterruptNumber)
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	28 2f       	mov	r18, r24
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	3b 87       	std	Y+11, r19	; 0x0b
    2812:	2a 87       	std	Y+10, r18	; 0x0a
    2814:	8a 85       	ldd	r24, Y+10	; 0x0a
    2816:	9b 85       	ldd	r25, Y+11	; 0x0b
    2818:	81 30       	cpi	r24, 0x01	; 1
    281a:	91 05       	cpc	r25, r1
    281c:	09 f4       	brne	.+2      	; 0x2820 <EXTI_u8Enable+0x32>
    281e:	7e c0       	rjmp	.+252    	; 0x291c <EXTI_u8Enable+0x12e>
    2820:	2a 85       	ldd	r18, Y+10	; 0x0a
    2822:	3b 85       	ldd	r19, Y+11	; 0x0b
    2824:	22 30       	cpi	r18, 0x02	; 2
    2826:	31 05       	cpc	r19, r1
    2828:	09 f4       	brne	.+2      	; 0x282c <EXTI_u8Enable+0x3e>
    282a:	eb c0       	rjmp	.+470    	; 0x2a02 <EXTI_u8Enable+0x214>
    282c:	8a 85       	ldd	r24, Y+10	; 0x0a
    282e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	09 f0       	breq	.+2      	; 0x2836 <EXTI_u8Enable+0x48>
    2834:	1e c1       	rjmp	.+572    	; 0x2a72 <EXTI_u8Enable+0x284>
	{
	case INT0:
		CLR_BIT(GICR_REG,INT0_BIT);
    2836:	ab e5       	ldi	r26, 0x5B	; 91
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	eb e5       	ldi	r30, 0x5B	; 91
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	8f 7b       	andi	r24, 0xBF	; 191
    2842:	8c 93       	st	X, r24
		CLR_BIT(DDRD_REG,DDD2_BIT);
    2844:	a1 e3       	ldi	r26, 0x31	; 49
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e1 e3       	ldi	r30, 0x31	; 49
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	8b 7f       	andi	r24, 0xFB	; 251
    2850:	8c 93       	st	X, r24
		switch(u8InterruptTrigger)
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	28 2f       	mov	r18, r24
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	39 87       	std	Y+9, r19	; 0x09
    285a:	28 87       	std	Y+8, r18	; 0x08
    285c:	88 85       	ldd	r24, Y+8	; 0x08
    285e:	99 85       	ldd	r25, Y+9	; 0x09
    2860:	81 30       	cpi	r24, 0x01	; 1
    2862:	91 05       	cpc	r25, r1
    2864:	21 f1       	breq	.+72     	; 0x28ae <EXTI_u8Enable+0xc0>
    2866:	28 85       	ldd	r18, Y+8	; 0x08
    2868:	39 85       	ldd	r19, Y+9	; 0x09
    286a:	22 30       	cpi	r18, 0x02	; 2
    286c:	31 05       	cpc	r19, r1
    286e:	2c f4       	brge	.+10     	; 0x287a <EXTI_u8Enable+0x8c>
    2870:	88 85       	ldd	r24, Y+8	; 0x08
    2872:	99 85       	ldd	r25, Y+9	; 0x09
    2874:	00 97       	sbiw	r24, 0x00	; 0
    2876:	61 f0       	breq	.+24     	; 0x2890 <EXTI_u8Enable+0xa2>
    2878:	47 c0       	rjmp	.+142    	; 0x2908 <EXTI_u8Enable+0x11a>
    287a:	28 85       	ldd	r18, Y+8	; 0x08
    287c:	39 85       	ldd	r19, Y+9	; 0x09
    287e:	22 30       	cpi	r18, 0x02	; 2
    2880:	31 05       	cpc	r19, r1
    2882:	21 f1       	breq	.+72     	; 0x28cc <EXTI_u8Enable+0xde>
    2884:	88 85       	ldd	r24, Y+8	; 0x08
    2886:	99 85       	ldd	r25, Y+9	; 0x09
    2888:	83 30       	cpi	r24, 0x03	; 3
    288a:	91 05       	cpc	r25, r1
    288c:	71 f1       	breq	.+92     	; 0x28ea <EXTI_u8Enable+0xfc>
    288e:	3c c0       	rjmp	.+120    	; 0x2908 <EXTI_u8Enable+0x11a>
		{
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR_REG,ISC00_BIT);
    2890:	a5 e5       	ldi	r26, 0x55	; 85
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e5 e5       	ldi	r30, 0x55	; 85
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	8e 7f       	andi	r24, 0xFE	; 254
    289c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,ISC01_BIT);
    289e:	a5 e5       	ldi	r26, 0x55	; 85
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	e5 e5       	ldi	r30, 0x55	; 85
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	8d 7f       	andi	r24, 0xFD	; 253
    28aa:	8c 93       	st	X, r24
    28ac:	2f c0       	rjmp	.+94     	; 0x290c <EXTI_u8Enable+0x11e>
			break;
		case EXTI_TOGGLE:
			SET_BIT(MCUCR_REG,ISC00_BIT);
    28ae:	a5 e5       	ldi	r26, 0x55	; 85
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	e5 e5       	ldi	r30, 0x55	; 85
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	81 60       	ori	r24, 0x01	; 1
    28ba:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,ISC01_BIT);
    28bc:	a5 e5       	ldi	r26, 0x55	; 85
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	e5 e5       	ldi	r30, 0x55	; 85
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	8d 7f       	andi	r24, 0xFD	; 253
    28c8:	8c 93       	st	X, r24
    28ca:	20 c0       	rjmp	.+64     	; 0x290c <EXTI_u8Enable+0x11e>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR_REG,ISC00_BIT);
    28cc:	a5 e5       	ldi	r26, 0x55	; 85
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	e5 e5       	ldi	r30, 0x55	; 85
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	8e 7f       	andi	r24, 0xFE	; 254
    28d8:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,ISC01_BIT);
    28da:	a5 e5       	ldi	r26, 0x55	; 85
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e5 e5       	ldi	r30, 0x55	; 85
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	82 60       	ori	r24, 0x02	; 2
    28e6:	8c 93       	st	X, r24
    28e8:	11 c0       	rjmp	.+34     	; 0x290c <EXTI_u8Enable+0x11e>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR_REG,ISC00_BIT);
    28ea:	a5 e5       	ldi	r26, 0x55	; 85
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e5 e5       	ldi	r30, 0x55	; 85
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	81 60       	ori	r24, 0x01	; 1
    28f6:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,ISC01_BIT);
    28f8:	a5 e5       	ldi	r26, 0x55	; 85
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	e5 e5       	ldi	r30, 0x55	; 85
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	82 60       	ori	r24, 0x02	; 2
    2904:	8c 93       	st	X, r24
    2906:	02 c0       	rjmp	.+4      	; 0x290c <EXTI_u8Enable+0x11e>
			break;
		default:
			u8ErrorState = EXTI_WRONG_TRIGGER_TYPE;
    2908:	83 e0       	ldi	r24, 0x03	; 3
    290a:	89 83       	std	Y+1, r24	; 0x01
		}
		SET_BIT(GICR_REG,INT0_BIT);
    290c:	ab e5       	ldi	r26, 0x5B	; 91
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	eb e5       	ldi	r30, 0x5B	; 91
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	80 64       	ori	r24, 0x40	; 64
    2918:	8c 93       	st	X, r24
    291a:	ad c0       	rjmp	.+346    	; 0x2a76 <EXTI_u8Enable+0x288>
		break;
	case INT1:
		CLR_BIT(GICR_REG,INT1_BIT);
    291c:	ab e5       	ldi	r26, 0x5B	; 91
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	eb e5       	ldi	r30, 0x5B	; 91
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	8f 77       	andi	r24, 0x7F	; 127
    2928:	8c 93       	st	X, r24
		CLR_BIT(DDRD_REG,DDD3_BIT);
    292a:	a1 e3       	ldi	r26, 0x31	; 49
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	e1 e3       	ldi	r30, 0x31	; 49
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	87 7f       	andi	r24, 0xF7	; 247
    2936:	8c 93       	st	X, r24
		switch(u8InterruptTrigger)
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	3f 83       	std	Y+7, r19	; 0x07
    2940:	2e 83       	std	Y+6, r18	; 0x06
    2942:	8e 81       	ldd	r24, Y+6	; 0x06
    2944:	9f 81       	ldd	r25, Y+7	; 0x07
    2946:	81 30       	cpi	r24, 0x01	; 1
    2948:	91 05       	cpc	r25, r1
    294a:	21 f1       	breq	.+72     	; 0x2994 <EXTI_u8Enable+0x1a6>
    294c:	2e 81       	ldd	r18, Y+6	; 0x06
    294e:	3f 81       	ldd	r19, Y+7	; 0x07
    2950:	22 30       	cpi	r18, 0x02	; 2
    2952:	31 05       	cpc	r19, r1
    2954:	2c f4       	brge	.+10     	; 0x2960 <EXTI_u8Enable+0x172>
    2956:	8e 81       	ldd	r24, Y+6	; 0x06
    2958:	9f 81       	ldd	r25, Y+7	; 0x07
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	61 f0       	breq	.+24     	; 0x2976 <EXTI_u8Enable+0x188>
    295e:	47 c0       	rjmp	.+142    	; 0x29ee <EXTI_u8Enable+0x200>
    2960:	2e 81       	ldd	r18, Y+6	; 0x06
    2962:	3f 81       	ldd	r19, Y+7	; 0x07
    2964:	22 30       	cpi	r18, 0x02	; 2
    2966:	31 05       	cpc	r19, r1
    2968:	21 f1       	breq	.+72     	; 0x29b2 <EXTI_u8Enable+0x1c4>
    296a:	8e 81       	ldd	r24, Y+6	; 0x06
    296c:	9f 81       	ldd	r25, Y+7	; 0x07
    296e:	83 30       	cpi	r24, 0x03	; 3
    2970:	91 05       	cpc	r25, r1
    2972:	71 f1       	breq	.+92     	; 0x29d0 <EXTI_u8Enable+0x1e2>
    2974:	3c c0       	rjmp	.+120    	; 0x29ee <EXTI_u8Enable+0x200>
		{
		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR_REG,ISC10_BIT);
    2976:	a5 e5       	ldi	r26, 0x55	; 85
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e5 e5       	ldi	r30, 0x55	; 85
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	8b 7f       	andi	r24, 0xFB	; 251
    2982:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,ISC11_BIT);
    2984:	a5 e5       	ldi	r26, 0x55	; 85
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e5 e5       	ldi	r30, 0x55	; 85
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	87 7f       	andi	r24, 0xF7	; 247
    2990:	8c 93       	st	X, r24
    2992:	2f c0       	rjmp	.+94     	; 0x29f2 <EXTI_u8Enable+0x204>
			break;
		case EXTI_TOGGLE:
			SET_BIT(MCUCR_REG,ISC10_BIT);
    2994:	a5 e5       	ldi	r26, 0x55	; 85
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e5 e5       	ldi	r30, 0x55	; 85
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	84 60       	ori	r24, 0x04	; 4
    29a0:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG,ISC11_BIT);
    29a2:	a5 e5       	ldi	r26, 0x55	; 85
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e5 e5       	ldi	r30, 0x55	; 85
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	87 7f       	andi	r24, 0xF7	; 247
    29ae:	8c 93       	st	X, r24
    29b0:	20 c0       	rjmp	.+64     	; 0x29f2 <EXTI_u8Enable+0x204>
			break;
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCR_REG,ISC10_BIT);
    29b2:	a5 e5       	ldi	r26, 0x55	; 85
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e5 e5       	ldi	r30, 0x55	; 85
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	8b 7f       	andi	r24, 0xFB	; 251
    29be:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,ISC11_BIT);
    29c0:	a5 e5       	ldi	r26, 0x55	; 85
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	e5 e5       	ldi	r30, 0x55	; 85
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	88 60       	ori	r24, 0x08	; 8
    29cc:	8c 93       	st	X, r24
    29ce:	11 c0       	rjmp	.+34     	; 0x29f2 <EXTI_u8Enable+0x204>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR_REG,ISC10_BIT);
    29d0:	a5 e5       	ldi	r26, 0x55	; 85
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e5 e5       	ldi	r30, 0x55	; 85
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	84 60       	ori	r24, 0x04	; 4
    29dc:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG,ISC11_BIT);
    29de:	a5 e5       	ldi	r26, 0x55	; 85
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e5 e5       	ldi	r30, 0x55	; 85
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	88 60       	ori	r24, 0x08	; 8
    29ea:	8c 93       	st	X, r24
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <EXTI_u8Enable+0x204>
			break;
		default:
			u8ErrorState = EXTI_WRONG_TRIGGER_TYPE;
    29ee:	83 e0       	ldi	r24, 0x03	; 3
    29f0:	89 83       	std	Y+1, r24	; 0x01
		}
		SET_BIT(GICR_REG,INT1_BIT);
    29f2:	ab e5       	ldi	r26, 0x5B	; 91
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	eb e5       	ldi	r30, 0x5B	; 91
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	80 68       	ori	r24, 0x80	; 128
    29fe:	8c 93       	st	X, r24
    2a00:	3a c0       	rjmp	.+116    	; 0x2a76 <EXTI_u8Enable+0x288>
		break;
	case INT2:
		CLR_BIT(GICR_REG,INT2_BIT);
    2a02:	ab e5       	ldi	r26, 0x5B	; 91
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	eb e5       	ldi	r30, 0x5B	; 91
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	8f 7d       	andi	r24, 0xDF	; 223
    2a0e:	8c 93       	st	X, r24
		CLR_BIT(DDRB_REG,DDB2_BIT);
    2a10:	a7 e3       	ldi	r26, 0x37	; 55
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	e7 e3       	ldi	r30, 0x37	; 55
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	8b 7f       	andi	r24, 0xFB	; 251
    2a1c:	8c 93       	st	X, r24
		switch(u8InterruptTrigger)
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	28 2f       	mov	r18, r24
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	3d 83       	std	Y+5, r19	; 0x05
    2a26:	2c 83       	std	Y+4, r18	; 0x04
    2a28:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2c:	82 30       	cpi	r24, 0x02	; 2
    2a2e:	91 05       	cpc	r25, r1
    2a30:	31 f0       	breq	.+12     	; 0x2a3e <EXTI_u8Enable+0x250>
    2a32:	2c 81       	ldd	r18, Y+4	; 0x04
    2a34:	3d 81       	ldd	r19, Y+5	; 0x05
    2a36:	23 30       	cpi	r18, 0x03	; 3
    2a38:	31 05       	cpc	r19, r1
    2a3a:	49 f0       	breq	.+18     	; 0x2a4e <EXTI_u8Enable+0x260>
    2a3c:	10 c0       	rjmp	.+32     	; 0x2a5e <EXTI_u8Enable+0x270>
		{
		case EXTI_FALLING_EDGE:
			CLR_BIT(MCUCSR_REG,ISC2_BIT);
    2a3e:	a4 e5       	ldi	r26, 0x54	; 84
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e4 e5       	ldi	r30, 0x54	; 84
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	8f 7b       	andi	r24, 0xBF	; 191
    2a4a:	8c 93       	st	X, r24
    2a4c:	0a c0       	rjmp	.+20     	; 0x2a62 <EXTI_u8Enable+0x274>
			break;
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCSR_REG,ISC2_BIT);
    2a4e:	a4 e5       	ldi	r26, 0x54	; 84
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e4 e5       	ldi	r30, 0x54	; 84
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	80 64       	ori	r24, 0x40	; 64
    2a5a:	8c 93       	st	X, r24
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <EXTI_u8Enable+0x274>
			break;
		default:
			u8ErrorState = EXTI_WRONG_TRIGGER_TYPE;
    2a5e:	83 e0       	ldi	r24, 0x03	; 3
    2a60:	89 83       	std	Y+1, r24	; 0x01
		}
		SET_BIT(GICR_REG,INT2_BIT);
    2a62:	ab e5       	ldi	r26, 0x5B	; 91
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	eb e5       	ldi	r30, 0x5B	; 91
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	80 62       	ori	r24, 0x20	; 32
    2a6e:	8c 93       	st	X, r24
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <EXTI_u8Enable+0x288>
		break;
	default:
		u8ErrorState =EXTI_WRONG_INT_NUMBER;
    2a72:	82 e0       	ldi	r24, 0x02	; 2
    2a74:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(SREG_REG,I_BIT);
    2a76:	af e5       	ldi	r26, 0x5F	; 95
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	ef e5       	ldi	r30, 0x5F	; 95
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	80 68       	ori	r24, 0x80	; 128
    2a82:	8c 93       	st	X, r24

	return u8ErrorState;
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a86:	2b 96       	adiw	r28, 0x0b	; 11
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	f8 94       	cli
    2a8c:	de bf       	out	0x3e, r29	; 62
    2a8e:	0f be       	out	0x3f, r0	; 63
    2a90:	cd bf       	out	0x3d, r28	; 61
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	08 95       	ret

00002a98 <DIO_u8SetPinDirection>:
#include "../../LIB/atmega32.h"
#include "DIO_interface.h"

// function to set direction of pin 
uint8_t DIO_u8SetPinDirection(DIOPort_t u8_PortName, DIOPin_t u8_PinNum,
		DIODir_t u8_PinDir) {
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	cd b7       	in	r28, 0x3d	; 61
    2a9e:	de b7       	in	r29, 0x3e	; 62
    2aa0:	2e 97       	sbiw	r28, 0x0e	; 14
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	8a 83       	std	Y+2, r24	; 0x02
    2aae:	6b 83       	std	Y+3, r22	; 0x03
    2ab0:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	89 83       	std	Y+1, r24	; 0x01

	/*Check if the inputs are in the right range*/
	if (u8_PinNum < DIO_PINS_NUMBER && u8_PortName < DIO_PORTS_NUMBER) {
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	88 30       	cpi	r24, 0x08	; 8
    2aba:	08 f0       	brcs	.+2      	; 0x2abe <DIO_u8SetPinDirection+0x26>
    2abc:	2c c2       	rjmp	.+1112   	; 0x2f16 <DIO_u8SetPinDirection+0x47e>
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	84 30       	cpi	r24, 0x04	; 4
    2ac2:	08 f0       	brcs	.+2      	; 0x2ac6 <DIO_u8SetPinDirection+0x2e>
    2ac4:	28 c2       	rjmp	.+1104   	; 0x2f16 <DIO_u8SetPinDirection+0x47e>
		/*Check which port */
		switch (u8_PortName) {
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	3e 87       	std	Y+14, r19	; 0x0e
    2ace:	2d 87       	std	Y+13, r18	; 0x0d
    2ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad4:	81 30       	cpi	r24, 0x01	; 1
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <DIO_u8SetPinDirection+0x44>
    2ada:	98 c0       	rjmp	.+304    	; 0x2c0c <DIO_u8SetPinDirection+0x174>
    2adc:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ade:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ae0:	22 30       	cpi	r18, 0x02	; 2
    2ae2:	31 05       	cpc	r19, r1
    2ae4:	2c f4       	brge	.+10     	; 0x2af0 <DIO_u8SetPinDirection+0x58>
    2ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	71 f0       	breq	.+28     	; 0x2b0a <DIO_u8SetPinDirection+0x72>
    2aee:	11 c2       	rjmp	.+1058   	; 0x2f12 <DIO_u8SetPinDirection+0x47a>
    2af0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2af2:	3e 85       	ldd	r19, Y+14	; 0x0e
    2af4:	22 30       	cpi	r18, 0x02	; 2
    2af6:	31 05       	cpc	r19, r1
    2af8:	09 f4       	brne	.+2      	; 0x2afc <DIO_u8SetPinDirection+0x64>
    2afa:	09 c1       	rjmp	.+530    	; 0x2d0e <DIO_u8SetPinDirection+0x276>
    2afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b00:	83 30       	cpi	r24, 0x03	; 3
    2b02:	91 05       	cpc	r25, r1
    2b04:	09 f4       	brne	.+2      	; 0x2b08 <DIO_u8SetPinDirection+0x70>
    2b06:	84 c1       	rjmp	.+776    	; 0x2e10 <DIO_u8SetPinDirection+0x378>
    2b08:	04 c2       	rjmp	.+1032   	; 0x2f12 <DIO_u8SetPinDirection+0x47a>
		case PORTA:
			/*Check which Direction the user wants the pin to be in */
			switch (u8_PinDir) {
    2b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0c:	28 2f       	mov	r18, r24
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	3c 87       	std	Y+12, r19	; 0x0c
    2b12:	2b 87       	std	Y+11, r18	; 0x0b
    2b14:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b16:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b18:	81 30       	cpi	r24, 0x01	; 1
    2b1a:	91 05       	cpc	r25, r1
    2b1c:	99 f1       	breq	.+102    	; 0x2b84 <DIO_u8SetPinDirection+0xec>
    2b1e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b20:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b22:	22 30       	cpi	r18, 0x02	; 2
    2b24:	31 05       	cpc	r19, r1
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <DIO_u8SetPinDirection+0x92>
    2b28:	5b c0       	rjmp	.+182    	; 0x2be0 <DIO_u8SetPinDirection+0x148>
    2b2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	09 f0       	breq	.+2      	; 0x2b34 <DIO_u8SetPinDirection+0x9c>
    2b32:	6a c0       	rjmp	.+212    	; 0x2c08 <DIO_u8SetPinDirection+0x170>

			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRA_REG, u8_PinNum);
    2b34:	aa e3       	ldi	r26, 0x3A	; 58
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	ea e3       	ldi	r30, 0x3A	; 58
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	48 2f       	mov	r20, r24
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <DIO_u8SetPinDirection+0xb8>
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	2a 95       	dec	r18
    2b52:	e2 f7       	brpl	.-8      	; 0x2b4c <DIO_u8SetPinDirection+0xb4>
    2b54:	80 95       	com	r24
    2b56:	84 23       	and	r24, r20
    2b58:	8c 93       	st	X, r24
				CLR_BIT(PORTA_REG, u8_PinNum);
    2b5a:	ab e3       	ldi	r26, 0x3B	; 59
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	eb e3       	ldi	r30, 0x3B	; 59
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	48 2f       	mov	r20, r24
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	28 2f       	mov	r18, r24
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	02 2e       	mov	r0, r18
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <DIO_u8SetPinDirection+0xe0>
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	0a 94       	dec	r0
    2b7a:	e2 f7       	brpl	.-8      	; 0x2b74 <DIO_u8SetPinDirection+0xdc>
    2b7c:	80 95       	com	r24
    2b7e:	84 23       	and	r24, r20
    2b80:	8c 93       	st	X, r24
    2b82:	ca c1       	rjmp	.+916    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    2b84:	a0 e5       	ldi	r26, 0x50	; 80
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	e0 e5       	ldi	r30, 0x50	; 80
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	8b 7f       	andi	r24, 0xFB	; 251
    2b90:	8c 93       	st	X, r24
				CLR_BIT(DDRA_REG, u8_PinNum);
    2b92:	aa e3       	ldi	r26, 0x3A	; 58
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	ea e3       	ldi	r30, 0x3A	; 58
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	48 2f       	mov	r20, r24
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	28 2f       	mov	r18, r24
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <DIO_u8SetPinDirection+0x116>
    2baa:	88 0f       	add	r24, r24
    2bac:	99 1f       	adc	r25, r25
    2bae:	2a 95       	dec	r18
    2bb0:	e2 f7       	brpl	.-8      	; 0x2baa <DIO_u8SetPinDirection+0x112>
    2bb2:	80 95       	com	r24
    2bb4:	84 23       	and	r24, r20
    2bb6:	8c 93       	st	X, r24
				SET_BIT(PORTA_REG, u8_PinNum);
    2bb8:	ab e3       	ldi	r26, 0x3B	; 59
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	eb e3       	ldi	r30, 0x3B	; 59
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	48 2f       	mov	r20, r24
    2bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc6:	28 2f       	mov	r18, r24
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	02 2e       	mov	r0, r18
    2bd0:	02 c0       	rjmp	.+4      	; 0x2bd6 <DIO_u8SetPinDirection+0x13e>
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	0a 94       	dec	r0
    2bd8:	e2 f7       	brpl	.-8      	; 0x2bd2 <DIO_u8SetPinDirection+0x13a>
    2bda:	84 2b       	or	r24, r20
    2bdc:	8c 93       	st	X, r24
    2bde:	9c c1       	rjmp	.+824    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRA_REG, u8_PinNum);
    2be0:	aa e3       	ldi	r26, 0x3A	; 58
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	ea e3       	ldi	r30, 0x3A	; 58
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	48 2f       	mov	r20, r24
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	02 2e       	mov	r0, r18
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <DIO_u8SetPinDirection+0x166>
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	0a 94       	dec	r0
    2c00:	e2 f7       	brpl	.-8      	; 0x2bfa <DIO_u8SetPinDirection+0x162>
    2c02:	84 2b       	or	r24, r20
    2c04:	8c 93       	st	X, r24
    2c06:	88 c1       	rjmp	.+784    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    2c08:	19 82       	std	Y+1, r1	; 0x01
    2c0a:	86 c1       	rjmp	.+780    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
			}
			break;
		case PORTB:
			/*Check if the inputs are in the right range*/
			switch (u8_PinDir) {
    2c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	3a 87       	std	Y+10, r19	; 0x0a
    2c14:	29 87       	std	Y+9, r18	; 0x09
    2c16:	89 85       	ldd	r24, Y+9	; 0x09
    2c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1a:	81 30       	cpi	r24, 0x01	; 1
    2c1c:	91 05       	cpc	r25, r1
    2c1e:	99 f1       	breq	.+102    	; 0x2c86 <DIO_u8SetPinDirection+0x1ee>
    2c20:	29 85       	ldd	r18, Y+9	; 0x09
    2c22:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c24:	22 30       	cpi	r18, 0x02	; 2
    2c26:	31 05       	cpc	r19, r1
    2c28:	09 f4       	brne	.+2      	; 0x2c2c <DIO_u8SetPinDirection+0x194>
    2c2a:	5b c0       	rjmp	.+182    	; 0x2ce2 <DIO_u8SetPinDirection+0x24a>
    2c2c:	89 85       	ldd	r24, Y+9	; 0x09
    2c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <DIO_u8SetPinDirection+0x19e>
    2c34:	6a c0       	rjmp	.+212    	; 0x2d0a <DIO_u8SetPinDirection+0x272>
			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRB_REG, u8_PinNum);
    2c36:	a7 e3       	ldi	r26, 0x37	; 55
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e7 e3       	ldi	r30, 0x37	; 55
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	48 2f       	mov	r20, r24
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	02 c0       	rjmp	.+4      	; 0x2c52 <DIO_u8SetPinDirection+0x1ba>
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	2a 95       	dec	r18
    2c54:	e2 f7       	brpl	.-8      	; 0x2c4e <DIO_u8SetPinDirection+0x1b6>
    2c56:	80 95       	com	r24
    2c58:	84 23       	and	r24, r20
    2c5a:	8c 93       	st	X, r24
				CLR_BIT(PORTB_REG, u8_PinNum);
    2c5c:	a8 e3       	ldi	r26, 0x38	; 56
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	e8 e3       	ldi	r30, 0x38	; 56
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	48 2f       	mov	r20, r24
    2c68:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	02 2e       	mov	r0, r18
    2c74:	02 c0       	rjmp	.+4      	; 0x2c7a <DIO_u8SetPinDirection+0x1e2>
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	0a 94       	dec	r0
    2c7c:	e2 f7       	brpl	.-8      	; 0x2c76 <DIO_u8SetPinDirection+0x1de>
    2c7e:	80 95       	com	r24
    2c80:	84 23       	and	r24, r20
    2c82:	8c 93       	st	X, r24
    2c84:	49 c1       	rjmp	.+658    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    2c86:	a0 e5       	ldi	r26, 0x50	; 80
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	e0 e5       	ldi	r30, 0x50	; 80
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	8b 7f       	andi	r24, 0xFB	; 251
    2c92:	8c 93       	st	X, r24
				CLR_BIT(DDRB_REG, u8_PinNum);
    2c94:	a7 e3       	ldi	r26, 0x37	; 55
    2c96:	b0 e0       	ldi	r27, 0x00	; 0
    2c98:	e7 e3       	ldi	r30, 0x37	; 55
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	48 2f       	mov	r20, r24
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	28 2f       	mov	r18, r24
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <DIO_u8SetPinDirection+0x218>
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	2a 95       	dec	r18
    2cb2:	e2 f7       	brpl	.-8      	; 0x2cac <DIO_u8SetPinDirection+0x214>
    2cb4:	80 95       	com	r24
    2cb6:	84 23       	and	r24, r20
    2cb8:	8c 93       	st	X, r24
				SET_BIT(PORTB_REG, u8_PinNum);
    2cba:	a8 e3       	ldi	r26, 0x38	; 56
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e8 e3       	ldi	r30, 0x38	; 56
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	48 2f       	mov	r20, r24
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	28 2f       	mov	r18, r24
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	02 2e       	mov	r0, r18
    2cd2:	02 c0       	rjmp	.+4      	; 0x2cd8 <DIO_u8SetPinDirection+0x240>
    2cd4:	88 0f       	add	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	0a 94       	dec	r0
    2cda:	e2 f7       	brpl	.-8      	; 0x2cd4 <DIO_u8SetPinDirection+0x23c>
    2cdc:	84 2b       	or	r24, r20
    2cde:	8c 93       	st	X, r24
    2ce0:	1b c1       	rjmp	.+566    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRB_REG, u8_PinNum);
    2ce2:	a7 e3       	ldi	r26, 0x37	; 55
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	e7 e3       	ldi	r30, 0x37	; 55
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	48 2f       	mov	r20, r24
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	02 2e       	mov	r0, r18
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <DIO_u8SetPinDirection+0x268>
    2cfc:	88 0f       	add	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	0a 94       	dec	r0
    2d02:	e2 f7       	brpl	.-8      	; 0x2cfc <DIO_u8SetPinDirection+0x264>
    2d04:	84 2b       	or	r24, r20
    2d06:	8c 93       	st	X, r24
    2d08:	07 c1       	rjmp	.+526    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    2d0a:	19 82       	std	Y+1, r1	; 0x01
    2d0c:	05 c1       	rjmp	.+522    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
			}
			break;
		case PORTC:
			switch (u8_PinDir) {
    2d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d10:	28 2f       	mov	r18, r24
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	38 87       	std	Y+8, r19	; 0x08
    2d16:	2f 83       	std	Y+7, r18	; 0x07
    2d18:	8f 81       	ldd	r24, Y+7	; 0x07
    2d1a:	98 85       	ldd	r25, Y+8	; 0x08
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	91 05       	cpc	r25, r1
    2d20:	99 f1       	breq	.+102    	; 0x2d88 <DIO_u8SetPinDirection+0x2f0>
    2d22:	2f 81       	ldd	r18, Y+7	; 0x07
    2d24:	38 85       	ldd	r19, Y+8	; 0x08
    2d26:	22 30       	cpi	r18, 0x02	; 2
    2d28:	31 05       	cpc	r19, r1
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <DIO_u8SetPinDirection+0x296>
    2d2c:	5b c0       	rjmp	.+182    	; 0x2de4 <DIO_u8SetPinDirection+0x34c>
    2d2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d30:	98 85       	ldd	r25, Y+8	; 0x08
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	09 f0       	breq	.+2      	; 0x2d38 <DIO_u8SetPinDirection+0x2a0>
    2d36:	6a c0       	rjmp	.+212    	; 0x2e0c <DIO_u8SetPinDirection+0x374>
			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRC_REG, u8_PinNum);
    2d38:	a4 e3       	ldi	r26, 0x34	; 52
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	e4 e3       	ldi	r30, 0x34	; 52
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	48 2f       	mov	r20, r24
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	28 2f       	mov	r18, r24
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <DIO_u8SetPinDirection+0x2bc>
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	2a 95       	dec	r18
    2d56:	e2 f7       	brpl	.-8      	; 0x2d50 <DIO_u8SetPinDirection+0x2b8>
    2d58:	80 95       	com	r24
    2d5a:	84 23       	and	r24, r20
    2d5c:	8c 93       	st	X, r24
				CLR_BIT(PORTC_REG, u8_PinNum);
    2d5e:	a5 e3       	ldi	r26, 0x35	; 53
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	e5 e3       	ldi	r30, 0x35	; 53
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	48 2f       	mov	r20, r24
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	02 2e       	mov	r0, r18
    2d76:	02 c0       	rjmp	.+4      	; 0x2d7c <DIO_u8SetPinDirection+0x2e4>
    2d78:	88 0f       	add	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	0a 94       	dec	r0
    2d7e:	e2 f7       	brpl	.-8      	; 0x2d78 <DIO_u8SetPinDirection+0x2e0>
    2d80:	80 95       	com	r24
    2d82:	84 23       	and	r24, r20
    2d84:	8c 93       	st	X, r24
    2d86:	c8 c0       	rjmp	.+400    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    2d88:	a0 e5       	ldi	r26, 0x50	; 80
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	e0 e5       	ldi	r30, 0x50	; 80
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	80 81       	ld	r24, Z
    2d92:	8b 7f       	andi	r24, 0xFB	; 251
    2d94:	8c 93       	st	X, r24
				CLR_BIT(DDRC_REG, u8_PinNum);
    2d96:	a4 e3       	ldi	r26, 0x34	; 52
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	e4 e3       	ldi	r30, 0x34	; 52
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	48 2f       	mov	r20, r24
    2da2:	8b 81       	ldd	r24, Y+3	; 0x03
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <DIO_u8SetPinDirection+0x31a>
    2dae:	88 0f       	add	r24, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	2a 95       	dec	r18
    2db4:	e2 f7       	brpl	.-8      	; 0x2dae <DIO_u8SetPinDirection+0x316>
    2db6:	80 95       	com	r24
    2db8:	84 23       	and	r24, r20
    2dba:	8c 93       	st	X, r24
				SET_BIT(PORTC_REG, u8_PinNum);
    2dbc:	a5 e3       	ldi	r26, 0x35	; 53
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	e5 e3       	ldi	r30, 0x35	; 53
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	48 2f       	mov	r20, r24
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	02 2e       	mov	r0, r18
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <DIO_u8SetPinDirection+0x342>
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	0a 94       	dec	r0
    2ddc:	e2 f7       	brpl	.-8      	; 0x2dd6 <DIO_u8SetPinDirection+0x33e>
    2dde:	84 2b       	or	r24, r20
    2de0:	8c 93       	st	X, r24
    2de2:	9a c0       	rjmp	.+308    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRC_REG, u8_PinNum);
    2de4:	a4 e3       	ldi	r26, 0x34	; 52
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	e4 e3       	ldi	r30, 0x34	; 52
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	48 2f       	mov	r20, r24
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	28 2f       	mov	r18, r24
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	02 2e       	mov	r0, r18
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <DIO_u8SetPinDirection+0x36a>
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	0a 94       	dec	r0
    2e04:	e2 f7       	brpl	.-8      	; 0x2dfe <DIO_u8SetPinDirection+0x366>
    2e06:	84 2b       	or	r24, r20
    2e08:	8c 93       	st	X, r24
    2e0a:	86 c0       	rjmp	.+268    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    2e0c:	19 82       	std	Y+1, r1	; 0x01
    2e0e:	84 c0       	rjmp	.+264    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
			}
			break;
		case PORTD:
			switch (u8_PinDir) {
    2e10:	8c 81       	ldd	r24, Y+4	; 0x04
    2e12:	28 2f       	mov	r18, r24
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	3e 83       	std	Y+6, r19	; 0x06
    2e18:	2d 83       	std	Y+5, r18	; 0x05
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	81 30       	cpi	r24, 0x01	; 1
    2e20:	91 05       	cpc	r25, r1
    2e22:	99 f1       	breq	.+102    	; 0x2e8a <DIO_u8SetPinDirection+0x3f2>
    2e24:	2d 81       	ldd	r18, Y+5	; 0x05
    2e26:	3e 81       	ldd	r19, Y+6	; 0x06
    2e28:	22 30       	cpi	r18, 0x02	; 2
    2e2a:	31 05       	cpc	r19, r1
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <DIO_u8SetPinDirection+0x398>
    2e2e:	5b c0       	rjmp	.+182    	; 0x2ee6 <DIO_u8SetPinDirection+0x44e>
    2e30:	8d 81       	ldd	r24, Y+5	; 0x05
    2e32:	9e 81       	ldd	r25, Y+6	; 0x06
    2e34:	00 97       	sbiw	r24, 0x00	; 0
    2e36:	09 f0       	breq	.+2      	; 0x2e3a <DIO_u8SetPinDirection+0x3a2>
    2e38:	6a c0       	rjmp	.+212    	; 0x2f0e <DIO_u8SetPinDirection+0x476>
			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRD_REG, u8_PinNum);
    2e3a:	a1 e3       	ldi	r26, 0x31	; 49
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	e1 e3       	ldi	r30, 0x31	; 49
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	48 2f       	mov	r20, r24
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	28 2f       	mov	r18, r24
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	02 c0       	rjmp	.+4      	; 0x2e56 <DIO_u8SetPinDirection+0x3be>
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	2a 95       	dec	r18
    2e58:	e2 f7       	brpl	.-8      	; 0x2e52 <DIO_u8SetPinDirection+0x3ba>
    2e5a:	80 95       	com	r24
    2e5c:	84 23       	and	r24, r20
    2e5e:	8c 93       	st	X, r24
				CLR_BIT(PORTA_REG, u8_PinNum);
    2e60:	ab e3       	ldi	r26, 0x3B	; 59
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	eb e3       	ldi	r30, 0x3B	; 59
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	48 2f       	mov	r20, r24
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	02 2e       	mov	r0, r18
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <DIO_u8SetPinDirection+0x3e6>
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	0a 94       	dec	r0
    2e80:	e2 f7       	brpl	.-8      	; 0x2e7a <DIO_u8SetPinDirection+0x3e2>
    2e82:	80 95       	com	r24
    2e84:	84 23       	and	r24, r20
    2e86:	8c 93       	st	X, r24
    2e88:	47 c0       	rjmp	.+142    	; 0x2f18 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    2e8a:	a0 e5       	ldi	r26, 0x50	; 80
    2e8c:	b0 e0       	ldi	r27, 0x00	; 0
    2e8e:	e0 e5       	ldi	r30, 0x50	; 80
    2e90:	f0 e0       	ldi	r31, 0x00	; 0
    2e92:	80 81       	ld	r24, Z
    2e94:	8b 7f       	andi	r24, 0xFB	; 251
    2e96:	8c 93       	st	X, r24
				CLR_BIT(DDRD_REG, u8_PinNum);
    2e98:	a1 e3       	ldi	r26, 0x31	; 49
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e1 e3       	ldi	r30, 0x31	; 49
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	48 2f       	mov	r20, r24
    2ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea6:	28 2f       	mov	r18, r24
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <DIO_u8SetPinDirection+0x41c>
    2eb0:	88 0f       	add	r24, r24
    2eb2:	99 1f       	adc	r25, r25
    2eb4:	2a 95       	dec	r18
    2eb6:	e2 f7       	brpl	.-8      	; 0x2eb0 <DIO_u8SetPinDirection+0x418>
    2eb8:	80 95       	com	r24
    2eba:	84 23       	and	r24, r20
    2ebc:	8c 93       	st	X, r24
				SET_BIT(PORTD_REG, u8_PinNum);
    2ebe:	a2 e3       	ldi	r26, 0x32	; 50
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	e2 e3       	ldi	r30, 0x32	; 50
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	48 2f       	mov	r20, r24
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	28 2f       	mov	r18, r24
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	02 2e       	mov	r0, r18
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <DIO_u8SetPinDirection+0x444>
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	0a 94       	dec	r0
    2ede:	e2 f7       	brpl	.-8      	; 0x2ed8 <DIO_u8SetPinDirection+0x440>
    2ee0:	84 2b       	or	r24, r20
    2ee2:	8c 93       	st	X, r24
    2ee4:	19 c0       	rjmp	.+50     	; 0x2f18 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRD_REG, u8_PinNum);
    2ee6:	a1 e3       	ldi	r26, 0x31	; 49
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e1 e3       	ldi	r30, 0x31	; 49
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	48 2f       	mov	r20, r24
    2ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	02 2e       	mov	r0, r18
    2efe:	02 c0       	rjmp	.+4      	; 0x2f04 <DIO_u8SetPinDirection+0x46c>
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	0a 94       	dec	r0
    2f06:	e2 f7       	brpl	.-8      	; 0x2f00 <DIO_u8SetPinDirection+0x468>
    2f08:	84 2b       	or	r24, r20
    2f0a:	8c 93       	st	X, r24
    2f0c:	05 c0       	rjmp	.+10     	; 0x2f18 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    2f0e:	19 82       	std	Y+1, r1	; 0x01
    2f10:	03 c0       	rjmp	.+6      	; 0x2f18 <DIO_u8SetPinDirection+0x480>
			}
			break;
		default:
			// If the input port is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    2f12:	19 82       	std	Y+1, r1	; 0x01
    2f14:	01 c0       	rjmp	.+2      	; 0x2f18 <DIO_u8SetPinDirection+0x480>
		}
	} else {
		// If the input port or input pin is not suitable return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    2f16:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorState;
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f1a:	2e 96       	adiw	r28, 0x0e	; 14
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <DIO_u8SetPinData>:

// function to assign value to pin 
uint8_t DIO_u8SetPinData(DIOPort_t u8_PortName, DIOPin_t u8_PinNum,
		DIODir_t u8_PinValue) {
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	2e 97       	sbiw	r28, 0x0e	; 14
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	8a 83       	std	Y+2, r24	; 0x02
    2f42:	6b 83       	std	Y+3, r22	; 0x03
    2f44:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	89 83       	std	Y+1, r24	; 0x01
	if (u8_PinNum < DIO_PINS_NUMBER) {
    2f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4c:	88 30       	cpi	r24, 0x08	; 8
    2f4e:	08 f0       	brcs	.+2      	; 0x2f52 <DIO_u8SetPinData+0x26>
    2f50:	06 c1       	rjmp	.+524    	; 0x315e <DIO_u8SetPinData+0x232>
		/*Check which port */
		switch (u8_PortName) {
    2f52:	8a 81       	ldd	r24, Y+2	; 0x02
    2f54:	28 2f       	mov	r18, r24
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	3e 87       	std	Y+14, r19	; 0x0e
    2f5a:	2d 87       	std	Y+13, r18	; 0x0d
    2f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f60:	81 30       	cpi	r24, 0x01	; 1
    2f62:	91 05       	cpc	r25, r1
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <DIO_u8SetPinData+0x3c>
    2f66:	50 c0       	rjmp	.+160    	; 0x3008 <DIO_u8SetPinData+0xdc>
    2f68:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f6a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f6c:	22 30       	cpi	r18, 0x02	; 2
    2f6e:	31 05       	cpc	r19, r1
    2f70:	2c f4       	brge	.+10     	; 0x2f7c <DIO_u8SetPinData+0x50>
    2f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	71 f0       	breq	.+28     	; 0x2f96 <DIO_u8SetPinData+0x6a>
    2f7a:	f2 c0       	rjmp	.+484    	; 0x3160 <DIO_u8SetPinData+0x234>
    2f7c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f7e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f80:	22 30       	cpi	r18, 0x02	; 2
    2f82:	31 05       	cpc	r19, r1
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <DIO_u8SetPinData+0x5c>
    2f86:	79 c0       	rjmp	.+242    	; 0x307a <DIO_u8SetPinData+0x14e>
    2f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8c:	83 30       	cpi	r24, 0x03	; 3
    2f8e:	91 05       	cpc	r25, r1
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <DIO_u8SetPinData+0x68>
    2f92:	ac c0       	rjmp	.+344    	; 0x30ec <DIO_u8SetPinData+0x1c0>
    2f94:	e5 c0       	rjmp	.+458    	; 0x3160 <DIO_u8SetPinData+0x234>
		case PORTA:
			switch (u8_PinValue) {
    2f96:	8c 81       	ldd	r24, Y+4	; 0x04
    2f98:	28 2f       	mov	r18, r24
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	3c 87       	std	Y+12, r19	; 0x0c
    2f9e:	2b 87       	std	Y+11, r18	; 0x0b
    2fa0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fa2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fa4:	00 97       	sbiw	r24, 0x00	; 0
    2fa6:	c9 f0       	breq	.+50     	; 0x2fda <DIO_u8SetPinData+0xae>
    2fa8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2faa:	3c 85       	ldd	r19, Y+12	; 0x0c
    2fac:	21 30       	cpi	r18, 0x01	; 1
    2fae:	31 05       	cpc	r19, r1
    2fb0:	49 f5       	brne	.+82     	; 0x3004 <DIO_u8SetPinData+0xd8>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTA_REG, u8_PinNum);
    2fb2:	ab e3       	ldi	r26, 0x3B	; 59
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	eb e3       	ldi	r30, 0x3B	; 59
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	48 2f       	mov	r20, r24
    2fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	02 2e       	mov	r0, r18
    2fca:	02 c0       	rjmp	.+4      	; 0x2fd0 <DIO_u8SetPinData+0xa4>
    2fcc:	88 0f       	add	r24, r24
    2fce:	99 1f       	adc	r25, r25
    2fd0:	0a 94       	dec	r0
    2fd2:	e2 f7       	brpl	.-8      	; 0x2fcc <DIO_u8SetPinData+0xa0>
    2fd4:	84 2b       	or	r24, r20
    2fd6:	8c 93       	st	X, r24
    2fd8:	c3 c0       	rjmp	.+390    	; 0x3160 <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTA_REG, u8_PinNum);
    2fda:	ab e3       	ldi	r26, 0x3B	; 59
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	eb e3       	ldi	r30, 0x3B	; 59
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	48 2f       	mov	r20, r24
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	28 2f       	mov	r18, r24
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	02 2e       	mov	r0, r18
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <DIO_u8SetPinData+0xcc>
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	0a 94       	dec	r0
    2ffa:	e2 f7       	brpl	.-8      	; 0x2ff4 <DIO_u8SetPinData+0xc8>
    2ffc:	80 95       	com	r24
    2ffe:	84 23       	and	r24, r20
    3000:	8c 93       	st	X, r24
    3002:	ae c0       	rjmp	.+348    	; 0x3160 <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    3004:	19 82       	std	Y+1, r1	; 0x01
    3006:	ac c0       	rjmp	.+344    	; 0x3160 <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTB:
			switch (u8_PinValue) {
    3008:	8c 81       	ldd	r24, Y+4	; 0x04
    300a:	28 2f       	mov	r18, r24
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	3a 87       	std	Y+10, r19	; 0x0a
    3010:	29 87       	std	Y+9, r18	; 0x09
    3012:	89 85       	ldd	r24, Y+9	; 0x09
    3014:	9a 85       	ldd	r25, Y+10	; 0x0a
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	c9 f0       	breq	.+50     	; 0x304c <DIO_u8SetPinData+0x120>
    301a:	29 85       	ldd	r18, Y+9	; 0x09
    301c:	3a 85       	ldd	r19, Y+10	; 0x0a
    301e:	21 30       	cpi	r18, 0x01	; 1
    3020:	31 05       	cpc	r19, r1
    3022:	49 f5       	brne	.+82     	; 0x3076 <DIO_u8SetPinData+0x14a>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTB_REG, u8_PinNum);
    3024:	a8 e3       	ldi	r26, 0x38	; 56
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	e8 e3       	ldi	r30, 0x38	; 56
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	48 2f       	mov	r20, r24
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	02 2e       	mov	r0, r18
    303c:	02 c0       	rjmp	.+4      	; 0x3042 <DIO_u8SetPinData+0x116>
    303e:	88 0f       	add	r24, r24
    3040:	99 1f       	adc	r25, r25
    3042:	0a 94       	dec	r0
    3044:	e2 f7       	brpl	.-8      	; 0x303e <DIO_u8SetPinData+0x112>
    3046:	84 2b       	or	r24, r20
    3048:	8c 93       	st	X, r24
    304a:	8a c0       	rjmp	.+276    	; 0x3160 <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTB_REG, u8_PinNum);
    304c:	a8 e3       	ldi	r26, 0x38	; 56
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	e8 e3       	ldi	r30, 0x38	; 56
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	48 2f       	mov	r20, r24
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	28 2f       	mov	r18, r24
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	02 2e       	mov	r0, r18
    3064:	02 c0       	rjmp	.+4      	; 0x306a <DIO_u8SetPinData+0x13e>
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	0a 94       	dec	r0
    306c:	e2 f7       	brpl	.-8      	; 0x3066 <DIO_u8SetPinData+0x13a>
    306e:	80 95       	com	r24
    3070:	84 23       	and	r24, r20
    3072:	8c 93       	st	X, r24
    3074:	75 c0       	rjmp	.+234    	; 0x3160 <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    3076:	19 82       	std	Y+1, r1	; 0x01
    3078:	73 c0       	rjmp	.+230    	; 0x3160 <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTC:
			switch (u8_PinValue) {
    307a:	8c 81       	ldd	r24, Y+4	; 0x04
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	38 87       	std	Y+8, r19	; 0x08
    3082:	2f 83       	std	Y+7, r18	; 0x07
    3084:	8f 81       	ldd	r24, Y+7	; 0x07
    3086:	98 85       	ldd	r25, Y+8	; 0x08
    3088:	00 97       	sbiw	r24, 0x00	; 0
    308a:	c9 f0       	breq	.+50     	; 0x30be <DIO_u8SetPinData+0x192>
    308c:	2f 81       	ldd	r18, Y+7	; 0x07
    308e:	38 85       	ldd	r19, Y+8	; 0x08
    3090:	21 30       	cpi	r18, 0x01	; 1
    3092:	31 05       	cpc	r19, r1
    3094:	49 f5       	brne	.+82     	; 0x30e8 <DIO_u8SetPinData+0x1bc>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTC_REG, u8_PinNum);
    3096:	a5 e3       	ldi	r26, 0x35	; 53
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	e5 e3       	ldi	r30, 0x35	; 53
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	48 2f       	mov	r20, r24
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
    30a4:	28 2f       	mov	r18, r24
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	02 2e       	mov	r0, r18
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <DIO_u8SetPinData+0x188>
    30b0:	88 0f       	add	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	0a 94       	dec	r0
    30b6:	e2 f7       	brpl	.-8      	; 0x30b0 <DIO_u8SetPinData+0x184>
    30b8:	84 2b       	or	r24, r20
    30ba:	8c 93       	st	X, r24
    30bc:	51 c0       	rjmp	.+162    	; 0x3160 <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTC_REG, u8_PinNum);
    30be:	a5 e3       	ldi	r26, 0x35	; 53
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e5 e3       	ldi	r30, 0x35	; 53
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	48 2f       	mov	r20, r24
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	28 2f       	mov	r18, r24
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	02 2e       	mov	r0, r18
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <DIO_u8SetPinData+0x1b0>
    30d8:	88 0f       	add	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	0a 94       	dec	r0
    30de:	e2 f7       	brpl	.-8      	; 0x30d8 <DIO_u8SetPinData+0x1ac>
    30e0:	80 95       	com	r24
    30e2:	84 23       	and	r24, r20
    30e4:	8c 93       	st	X, r24
    30e6:	3c c0       	rjmp	.+120    	; 0x3160 <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    30e8:	19 82       	std	Y+1, r1	; 0x01
    30ea:	3a c0       	rjmp	.+116    	; 0x3160 <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTD:
			switch (u8_PinValue) {
    30ec:	8c 81       	ldd	r24, Y+4	; 0x04
    30ee:	28 2f       	mov	r18, r24
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	3e 83       	std	Y+6, r19	; 0x06
    30f4:	2d 83       	std	Y+5, r18	; 0x05
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	c9 f0       	breq	.+50     	; 0x3130 <DIO_u8SetPinData+0x204>
    30fe:	2d 81       	ldd	r18, Y+5	; 0x05
    3100:	3e 81       	ldd	r19, Y+6	; 0x06
    3102:	21 30       	cpi	r18, 0x01	; 1
    3104:	31 05       	cpc	r19, r1
    3106:	49 f5       	brne	.+82     	; 0x315a <DIO_u8SetPinData+0x22e>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTD_REG, u8_PinNum);
    3108:	a2 e3       	ldi	r26, 0x32	; 50
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	e2 e3       	ldi	r30, 0x32	; 50
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	48 2f       	mov	r20, r24
    3114:	8b 81       	ldd	r24, Y+3	; 0x03
    3116:	28 2f       	mov	r18, r24
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	02 2e       	mov	r0, r18
    3120:	02 c0       	rjmp	.+4      	; 0x3126 <DIO_u8SetPinData+0x1fa>
    3122:	88 0f       	add	r24, r24
    3124:	99 1f       	adc	r25, r25
    3126:	0a 94       	dec	r0
    3128:	e2 f7       	brpl	.-8      	; 0x3122 <DIO_u8SetPinData+0x1f6>
    312a:	84 2b       	or	r24, r20
    312c:	8c 93       	st	X, r24
    312e:	18 c0       	rjmp	.+48     	; 0x3160 <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTD_REG, u8_PinNum);
    3130:	a2 e3       	ldi	r26, 0x32	; 50
    3132:	b0 e0       	ldi	r27, 0x00	; 0
    3134:	e2 e3       	ldi	r30, 0x32	; 50
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 81       	ld	r24, Z
    313a:	48 2f       	mov	r20, r24
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	28 2f       	mov	r18, r24
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	02 2e       	mov	r0, r18
    3148:	02 c0       	rjmp	.+4      	; 0x314e <DIO_u8SetPinData+0x222>
    314a:	88 0f       	add	r24, r24
    314c:	99 1f       	adc	r25, r25
    314e:	0a 94       	dec	r0
    3150:	e2 f7       	brpl	.-8      	; 0x314a <DIO_u8SetPinData+0x21e>
    3152:	80 95       	com	r24
    3154:	84 23       	and	r24, r20
    3156:	8c 93       	st	X, r24
    3158:	03 c0       	rjmp	.+6      	; 0x3160 <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    315a:	19 82       	std	Y+1, r1	; 0x01
    315c:	01 c0       	rjmp	.+2      	; 0x3160 <DIO_u8SetPinData+0x234>
			}
			break;
		}
	} else {
		// if not suitable port or pin state return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    315e:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorState;
    3160:	89 81       	ldd	r24, Y+1	; 0x01
}
    3162:	2e 96       	adiw	r28, 0x0e	; 14
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	de bf       	out	0x3e, r29	; 62
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	cd bf       	out	0x3d, r28	; 61
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	08 95       	ret

00003174 <DIO_u8GetPinData>:

// function to read value on pin 
uint8_t DIO_u8GetPinData(DIOPort_t u8_PortName, DIOPin_t u8_PinNum,
		uint8_t* pu8_ReturnVar) {
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	cd b7       	in	r28, 0x3d	; 61
    317a:	de b7       	in	r29, 0x3e	; 62
    317c:	27 97       	sbiw	r28, 0x07	; 7
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	cd bf       	out	0x3d, r28	; 61
    3188:	8a 83       	std	Y+2, r24	; 0x02
    318a:	6b 83       	std	Y+3, r22	; 0x03
    318c:	5d 83       	std	Y+5, r21	; 0x05
    318e:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	89 83       	std	Y+1, r24	; 0x01

	if (u8_PinNum < DIO_PINS_NUMBER && pu8_ReturnVar != NULL) {
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	88 30       	cpi	r24, 0x08	; 8
    3198:	08 f0       	brcs	.+2      	; 0x319c <DIO_u8GetPinData+0x28>
    319a:	78 c0       	rjmp	.+240    	; 0x328c <DIO_u8GetPinData+0x118>
    319c:	8c 81       	ldd	r24, Y+4	; 0x04
    319e:	9d 81       	ldd	r25, Y+5	; 0x05
    31a0:	00 97       	sbiw	r24, 0x00	; 0
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <DIO_u8GetPinData+0x32>
    31a4:	73 c0       	rjmp	.+230    	; 0x328c <DIO_u8GetPinData+0x118>
		switch (u8_PortName) {
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	28 2f       	mov	r18, r24
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	3f 83       	std	Y+7, r19	; 0x07
    31ae:	2e 83       	std	Y+6, r18	; 0x06
    31b0:	4e 81       	ldd	r20, Y+6	; 0x06
    31b2:	5f 81       	ldd	r21, Y+7	; 0x07
    31b4:	41 30       	cpi	r20, 0x01	; 1
    31b6:	51 05       	cpc	r21, r1
    31b8:	59 f1       	breq	.+86     	; 0x3210 <DIO_u8GetPinData+0x9c>
    31ba:	8e 81       	ldd	r24, Y+6	; 0x06
    31bc:	9f 81       	ldd	r25, Y+7	; 0x07
    31be:	82 30       	cpi	r24, 0x02	; 2
    31c0:	91 05       	cpc	r25, r1
    31c2:	34 f4       	brge	.+12     	; 0x31d0 <DIO_u8GetPinData+0x5c>
    31c4:	2e 81       	ldd	r18, Y+6	; 0x06
    31c6:	3f 81       	ldd	r19, Y+7	; 0x07
    31c8:	21 15       	cp	r18, r1
    31ca:	31 05       	cpc	r19, r1
    31cc:	69 f0       	breq	.+26     	; 0x31e8 <DIO_u8GetPinData+0x74>
    31ce:	5c c0       	rjmp	.+184    	; 0x3288 <DIO_u8GetPinData+0x114>
    31d0:	4e 81       	ldd	r20, Y+6	; 0x06
    31d2:	5f 81       	ldd	r21, Y+7	; 0x07
    31d4:	42 30       	cpi	r20, 0x02	; 2
    31d6:	51 05       	cpc	r21, r1
    31d8:	79 f1       	breq	.+94     	; 0x3238 <DIO_u8GetPinData+0xc4>
    31da:	8e 81       	ldd	r24, Y+6	; 0x06
    31dc:	9f 81       	ldd	r25, Y+7	; 0x07
    31de:	83 30       	cpi	r24, 0x03	; 3
    31e0:	91 05       	cpc	r25, r1
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <DIO_u8GetPinData+0x72>
    31e4:	3d c0       	rjmp	.+122    	; 0x3260 <DIO_u8GetPinData+0xec>
    31e6:	50 c0       	rjmp	.+160    	; 0x3288 <DIO_u8GetPinData+0x114>
		// get bit value in register to variable depend on port and pin 
		case PORTA:
			*pu8_ReturnVar = GET_BIT(PINA_REG, u8_PinNum);
    31e8:	e9 e3       	ldi	r30, 0x39	; 57
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	28 2f       	mov	r18, r24
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	88 2f       	mov	r24, r24
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	a9 01       	movw	r20, r18
    31fa:	02 c0       	rjmp	.+4      	; 0x3200 <DIO_u8GetPinData+0x8c>
    31fc:	55 95       	asr	r21
    31fe:	47 95       	ror	r20
    3200:	8a 95       	dec	r24
    3202:	e2 f7       	brpl	.-8      	; 0x31fc <DIO_u8GetPinData+0x88>
    3204:	ca 01       	movw	r24, r20
    3206:	81 70       	andi	r24, 0x01	; 1
    3208:	ec 81       	ldd	r30, Y+4	; 0x04
    320a:	fd 81       	ldd	r31, Y+5	; 0x05
    320c:	80 83       	st	Z, r24
    320e:	3f c0       	rjmp	.+126    	; 0x328e <DIO_u8GetPinData+0x11a>
			break;
		case PORTB:
			*pu8_ReturnVar = GET_BIT(PINB_REG, u8_PinNum);
    3210:	e6 e3       	ldi	r30, 0x36	; 54
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	28 2f       	mov	r18, r24
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	88 2f       	mov	r24, r24
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	a9 01       	movw	r20, r18
    3222:	02 c0       	rjmp	.+4      	; 0x3228 <DIO_u8GetPinData+0xb4>
    3224:	55 95       	asr	r21
    3226:	47 95       	ror	r20
    3228:	8a 95       	dec	r24
    322a:	e2 f7       	brpl	.-8      	; 0x3224 <DIO_u8GetPinData+0xb0>
    322c:	ca 01       	movw	r24, r20
    322e:	81 70       	andi	r24, 0x01	; 1
    3230:	ec 81       	ldd	r30, Y+4	; 0x04
    3232:	fd 81       	ldd	r31, Y+5	; 0x05
    3234:	80 83       	st	Z, r24
    3236:	2b c0       	rjmp	.+86     	; 0x328e <DIO_u8GetPinData+0x11a>
			break;
		case PORTC:
			*pu8_ReturnVar = GET_BIT(PINC_REG, u8_PinNum);
    3238:	e3 e3       	ldi	r30, 0x33	; 51
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	28 2f       	mov	r18, r24
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	88 2f       	mov	r24, r24
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	a9 01       	movw	r20, r18
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <DIO_u8GetPinData+0xdc>
    324c:	55 95       	asr	r21
    324e:	47 95       	ror	r20
    3250:	8a 95       	dec	r24
    3252:	e2 f7       	brpl	.-8      	; 0x324c <DIO_u8GetPinData+0xd8>
    3254:	ca 01       	movw	r24, r20
    3256:	81 70       	andi	r24, 0x01	; 1
    3258:	ec 81       	ldd	r30, Y+4	; 0x04
    325a:	fd 81       	ldd	r31, Y+5	; 0x05
    325c:	80 83       	st	Z, r24
    325e:	17 c0       	rjmp	.+46     	; 0x328e <DIO_u8GetPinData+0x11a>
			break;
		case PORTD:
			*pu8_ReturnVar = GET_BIT(PIND_REG, u8_PinNum);
    3260:	e0 e3       	ldi	r30, 0x30	; 48
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	80 81       	ld	r24, Z
    3266:	28 2f       	mov	r18, r24
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	8b 81       	ldd	r24, Y+3	; 0x03
    326c:	88 2f       	mov	r24, r24
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	a9 01       	movw	r20, r18
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <DIO_u8GetPinData+0x104>
    3274:	55 95       	asr	r21
    3276:	47 95       	ror	r20
    3278:	8a 95       	dec	r24
    327a:	e2 f7       	brpl	.-8      	; 0x3274 <DIO_u8GetPinData+0x100>
    327c:	ca 01       	movw	r24, r20
    327e:	81 70       	andi	r24, 0x01	; 1
    3280:	ec 81       	ldd	r30, Y+4	; 0x04
    3282:	fd 81       	ldd	r31, Y+5	; 0x05
    3284:	80 83       	st	Z, r24
    3286:	03 c0       	rjmp	.+6      	; 0x328e <DIO_u8GetPinData+0x11a>
			break;
		default:
			// if not suitable port return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    3288:	19 82       	std	Y+1, r1	; 0x01
    328a:	01 c0       	rjmp	.+2      	; 0x328e <DIO_u8GetPinData+0x11a>
		}
	} else {
		// if return address not passed or not suitable pin number return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    328c:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    328e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3290:	27 96       	adiw	r28, 0x07	; 7
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	cd bf       	out	0x3d, r28	; 61
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	08 95       	ret

000032a2 <DIO_u8SetPortDirection>:

// function to set direction of pin
uint8_t DIO_u8SetPortDirection(DIOPort_t u8_PortName, DIODir_t u8_Dir) {
    32a2:	df 93       	push	r29
    32a4:	cf 93       	push	r28
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	2d 97       	sbiw	r28, 0x0d	; 13
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	8a 83       	std	Y+2, r24	; 0x02
    32b8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	89 83       	std	Y+1, r24	; 0x01
	switch (u8_PortName) {
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	28 2f       	mov	r18, r24
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	3d 87       	std	Y+13, r19	; 0x0d
    32c6:	2c 87       	std	Y+12, r18	; 0x0c
    32c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    32ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    32cc:	81 30       	cpi	r24, 0x01	; 1
    32ce:	91 05       	cpc	r25, r1
    32d0:	09 f4       	brne	.+2      	; 0x32d4 <DIO_u8SetPortDirection+0x32>
    32d2:	4b c0       	rjmp	.+150    	; 0x336a <DIO_u8SetPortDirection+0xc8>
    32d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    32d6:	3d 85       	ldd	r19, Y+13	; 0x0d
    32d8:	22 30       	cpi	r18, 0x02	; 2
    32da:	31 05       	cpc	r19, r1
    32dc:	2c f4       	brge	.+10     	; 0x32e8 <DIO_u8SetPortDirection+0x46>
    32de:	8c 85       	ldd	r24, Y+12	; 0x0c
    32e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    32e2:	00 97       	sbiw	r24, 0x00	; 0
    32e4:	71 f0       	breq	.+28     	; 0x3302 <DIO_u8SetPortDirection+0x60>
    32e6:	dd c0       	rjmp	.+442    	; 0x34a2 <DIO_u8SetPortDirection+0x200>
    32e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    32ea:	3d 85       	ldd	r19, Y+13	; 0x0d
    32ec:	22 30       	cpi	r18, 0x02	; 2
    32ee:	31 05       	cpc	r19, r1
    32f0:	09 f4       	brne	.+2      	; 0x32f4 <DIO_u8SetPortDirection+0x52>
    32f2:	6f c0       	rjmp	.+222    	; 0x33d2 <DIO_u8SetPortDirection+0x130>
    32f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    32f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    32f8:	83 30       	cpi	r24, 0x03	; 3
    32fa:	91 05       	cpc	r25, r1
    32fc:	09 f4       	brne	.+2      	; 0x3300 <DIO_u8SetPortDirection+0x5e>
    32fe:	9d c0       	rjmp	.+314    	; 0x343a <DIO_u8SetPortDirection+0x198>
    3300:	d0 c0       	rjmp	.+416    	; 0x34a2 <DIO_u8SetPortDirection+0x200>
	case PORTA:
		switch (u8_Dir) {
    3302:	8b 81       	ldd	r24, Y+3	; 0x03
    3304:	28 2f       	mov	r18, r24
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	3b 87       	std	Y+11, r19	; 0x0b
    330a:	2a 87       	std	Y+10, r18	; 0x0a
    330c:	8a 85       	ldd	r24, Y+10	; 0x0a
    330e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3310:	81 30       	cpi	r24, 0x01	; 1
    3312:	91 05       	cpc	r25, r1
    3314:	a1 f0       	breq	.+40     	; 0x333e <DIO_u8SetPortDirection+0x9c>
    3316:	2a 85       	ldd	r18, Y+10	; 0x0a
    3318:	3b 85       	ldd	r19, Y+11	; 0x0b
    331a:	22 30       	cpi	r18, 0x02	; 2
    331c:	31 05       	cpc	r19, r1
    331e:	f1 f0       	breq	.+60     	; 0x335c <DIO_u8SetPortDirection+0xba>
    3320:	8a 85       	ldd	r24, Y+10	; 0x0a
    3322:	9b 85       	ldd	r25, Y+11	; 0x0b
    3324:	00 97       	sbiw	r24, 0x00	; 0
    3326:	f9 f4       	brne	.+62     	; 0x3366 <DIO_u8SetPortDirection+0xc4>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRA_REG = DIO_PORT_LOW;
    3328:	ea e3       	ldi	r30, 0x3A	; 58
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    332e:	a0 e5       	ldi	r26, 0x50	; 80
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	e0 e5       	ldi	r30, 0x50	; 80
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	84 60       	ori	r24, 0x04	; 4
    333a:	8c 93       	st	X, r24
    333c:	b3 c0       	rjmp	.+358    	; 0x34a4 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    333e:	a0 e5       	ldi	r26, 0x50	; 80
    3340:	b0 e0       	ldi	r27, 0x00	; 0
    3342:	e0 e5       	ldi	r30, 0x50	; 80
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	80 81       	ld	r24, Z
    3348:	8b 7f       	andi	r24, 0xFB	; 251
    334a:	8c 93       	st	X, r24
			DDRA_REG = DIO_PORT_LOW;
    334c:	ea e3       	ldi	r30, 0x3A	; 58
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	10 82       	st	Z, r1
			PORTA_REG = DIO_PORT_HIGH;
    3352:	eb e3       	ldi	r30, 0x3B	; 59
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	8f ef       	ldi	r24, 0xFF	; 255
    3358:	80 83       	st	Z, r24
    335a:	a4 c0       	rjmp	.+328    	; 0x34a4 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRA_REG = DIO_PORT_HIGH;
    335c:	ea e3       	ldi	r30, 0x3A	; 58
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	8f ef       	ldi	r24, 0xFF	; 255
    3362:	80 83       	st	Z, r24
    3364:	9f c0       	rjmp	.+318    	; 0x34a4 <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    3366:	19 82       	std	Y+1, r1	; 0x01
    3368:	9d c0       	rjmp	.+314    	; 0x34a4 <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTB:
		switch (u8_Dir) {
    336a:	8b 81       	ldd	r24, Y+3	; 0x03
    336c:	28 2f       	mov	r18, r24
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	39 87       	std	Y+9, r19	; 0x09
    3372:	28 87       	std	Y+8, r18	; 0x08
    3374:	88 85       	ldd	r24, Y+8	; 0x08
    3376:	99 85       	ldd	r25, Y+9	; 0x09
    3378:	81 30       	cpi	r24, 0x01	; 1
    337a:	91 05       	cpc	r25, r1
    337c:	a1 f0       	breq	.+40     	; 0x33a6 <DIO_u8SetPortDirection+0x104>
    337e:	28 85       	ldd	r18, Y+8	; 0x08
    3380:	39 85       	ldd	r19, Y+9	; 0x09
    3382:	22 30       	cpi	r18, 0x02	; 2
    3384:	31 05       	cpc	r19, r1
    3386:	f1 f0       	breq	.+60     	; 0x33c4 <DIO_u8SetPortDirection+0x122>
    3388:	88 85       	ldd	r24, Y+8	; 0x08
    338a:	99 85       	ldd	r25, Y+9	; 0x09
    338c:	00 97       	sbiw	r24, 0x00	; 0
    338e:	f9 f4       	brne	.+62     	; 0x33ce <DIO_u8SetPortDirection+0x12c>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRB_REG = DIO_PORT_LOW;
    3390:	e7 e3       	ldi	r30, 0x37	; 55
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    3396:	a0 e5       	ldi	r26, 0x50	; 80
    3398:	b0 e0       	ldi	r27, 0x00	; 0
    339a:	e0 e5       	ldi	r30, 0x50	; 80
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	80 81       	ld	r24, Z
    33a0:	84 60       	ori	r24, 0x04	; 4
    33a2:	8c 93       	st	X, r24
    33a4:	7f c0       	rjmp	.+254    	; 0x34a4 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    33a6:	a0 e5       	ldi	r26, 0x50	; 80
    33a8:	b0 e0       	ldi	r27, 0x00	; 0
    33aa:	e0 e5       	ldi	r30, 0x50	; 80
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	8b 7f       	andi	r24, 0xFB	; 251
    33b2:	8c 93       	st	X, r24
			DDRB_REG = DIO_PORT_LOW;
    33b4:	e7 e3       	ldi	r30, 0x37	; 55
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	10 82       	st	Z, r1
			PORTB_REG = DIO_PORT_HIGH;
    33ba:	e8 e3       	ldi	r30, 0x38	; 56
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	8f ef       	ldi	r24, 0xFF	; 255
    33c0:	80 83       	st	Z, r24
    33c2:	70 c0       	rjmp	.+224    	; 0x34a4 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRB_REG = DIO_PORT_HIGH;
    33c4:	e7 e3       	ldi	r30, 0x37	; 55
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	8f ef       	ldi	r24, 0xFF	; 255
    33ca:	80 83       	st	Z, r24
    33cc:	6b c0       	rjmp	.+214    	; 0x34a4 <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    33ce:	19 82       	std	Y+1, r1	; 0x01
    33d0:	69 c0       	rjmp	.+210    	; 0x34a4 <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTC:
		switch (u8_Dir) {
    33d2:	8b 81       	ldd	r24, Y+3	; 0x03
    33d4:	28 2f       	mov	r18, r24
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	3f 83       	std	Y+7, r19	; 0x07
    33da:	2e 83       	std	Y+6, r18	; 0x06
    33dc:	8e 81       	ldd	r24, Y+6	; 0x06
    33de:	9f 81       	ldd	r25, Y+7	; 0x07
    33e0:	81 30       	cpi	r24, 0x01	; 1
    33e2:	91 05       	cpc	r25, r1
    33e4:	a1 f0       	breq	.+40     	; 0x340e <DIO_u8SetPortDirection+0x16c>
    33e6:	2e 81       	ldd	r18, Y+6	; 0x06
    33e8:	3f 81       	ldd	r19, Y+7	; 0x07
    33ea:	22 30       	cpi	r18, 0x02	; 2
    33ec:	31 05       	cpc	r19, r1
    33ee:	f1 f0       	breq	.+60     	; 0x342c <DIO_u8SetPortDirection+0x18a>
    33f0:	8e 81       	ldd	r24, Y+6	; 0x06
    33f2:	9f 81       	ldd	r25, Y+7	; 0x07
    33f4:	00 97       	sbiw	r24, 0x00	; 0
    33f6:	f9 f4       	brne	.+62     	; 0x3436 <DIO_u8SetPortDirection+0x194>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRC_REG = DIO_PORT_LOW;
    33f8:	e4 e3       	ldi	r30, 0x34	; 52
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    33fe:	a0 e5       	ldi	r26, 0x50	; 80
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	e0 e5       	ldi	r30, 0x50	; 80
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	80 81       	ld	r24, Z
    3408:	84 60       	ori	r24, 0x04	; 4
    340a:	8c 93       	st	X, r24
    340c:	4b c0       	rjmp	.+150    	; 0x34a4 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    340e:	a0 e5       	ldi	r26, 0x50	; 80
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	e0 e5       	ldi	r30, 0x50	; 80
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	8b 7f       	andi	r24, 0xFB	; 251
    341a:	8c 93       	st	X, r24
			DDRC_REG = DIO_PORT_LOW;
    341c:	e4 e3       	ldi	r30, 0x34	; 52
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	10 82       	st	Z, r1
			PORTC_REG = DIO_PORT_HIGH;
    3422:	e5 e3       	ldi	r30, 0x35	; 53
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	8f ef       	ldi	r24, 0xFF	; 255
    3428:	80 83       	st	Z, r24
    342a:	3c c0       	rjmp	.+120    	; 0x34a4 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRC_REG = DIO_PORT_HIGH;
    342c:	e4 e3       	ldi	r30, 0x34	; 52
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	8f ef       	ldi	r24, 0xFF	; 255
    3432:	80 83       	st	Z, r24
    3434:	37 c0       	rjmp	.+110    	; 0x34a4 <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    3436:	19 82       	std	Y+1, r1	; 0x01
    3438:	35 c0       	rjmp	.+106    	; 0x34a4 <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTD:
		switch (u8_Dir) {
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	28 2f       	mov	r18, r24
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	3d 83       	std	Y+5, r19	; 0x05
    3442:	2c 83       	std	Y+4, r18	; 0x04
    3444:	8c 81       	ldd	r24, Y+4	; 0x04
    3446:	9d 81       	ldd	r25, Y+5	; 0x05
    3448:	81 30       	cpi	r24, 0x01	; 1
    344a:	91 05       	cpc	r25, r1
    344c:	a1 f0       	breq	.+40     	; 0x3476 <DIO_u8SetPortDirection+0x1d4>
    344e:	2c 81       	ldd	r18, Y+4	; 0x04
    3450:	3d 81       	ldd	r19, Y+5	; 0x05
    3452:	22 30       	cpi	r18, 0x02	; 2
    3454:	31 05       	cpc	r19, r1
    3456:	f1 f0       	breq	.+60     	; 0x3494 <DIO_u8SetPortDirection+0x1f2>
    3458:	8c 81       	ldd	r24, Y+4	; 0x04
    345a:	9d 81       	ldd	r25, Y+5	; 0x05
    345c:	00 97       	sbiw	r24, 0x00	; 0
    345e:	f9 f4       	brne	.+62     	; 0x349e <DIO_u8SetPortDirection+0x1fc>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRD_REG = DIO_PORT_LOW;
    3460:	e1 e3       	ldi	r30, 0x31	; 49
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    3466:	a0 e5       	ldi	r26, 0x50	; 80
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e0 e5       	ldi	r30, 0x50	; 80
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	84 60       	ori	r24, 0x04	; 4
    3472:	8c 93       	st	X, r24
    3474:	17 c0       	rjmp	.+46     	; 0x34a4 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    3476:	a0 e5       	ldi	r26, 0x50	; 80
    3478:	b0 e0       	ldi	r27, 0x00	; 0
    347a:	e0 e5       	ldi	r30, 0x50	; 80
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	8b 7f       	andi	r24, 0xFB	; 251
    3482:	8c 93       	st	X, r24
			DDRD_REG = DIO_PORT_LOW;
    3484:	e1 e3       	ldi	r30, 0x31	; 49
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	10 82       	st	Z, r1
			PORTD_REG = DIO_PORT_HIGH;
    348a:	e2 e3       	ldi	r30, 0x32	; 50
    348c:	f0 e0       	ldi	r31, 0x00	; 0
    348e:	8f ef       	ldi	r24, 0xFF	; 255
    3490:	80 83       	st	Z, r24
    3492:	08 c0       	rjmp	.+16     	; 0x34a4 <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRD_REG = DIO_PORT_HIGH;
    3494:	e1 e3       	ldi	r30, 0x31	; 49
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	8f ef       	ldi	r24, 0xFF	; 255
    349a:	80 83       	st	Z, r24
    349c:	03 c0       	rjmp	.+6      	; 0x34a4 <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    349e:	19 82       	std	Y+1, r1	; 0x01
    34a0:	01 c0       	rjmp	.+2      	; 0x34a4 <DIO_u8SetPortDirection+0x202>
		}
		break;
	default:
		// If the input port is not one of the above cases return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    34a2:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    34a6:	2d 96       	adiw	r28, 0x0d	; 13
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	cf 91       	pop	r28
    34b4:	df 91       	pop	r29
    34b6:	08 95       	ret

000034b8 <DIO_u8SetPortData>:

// function to assign value to port
uint8_t DIO_u8SetPortData(DIOPort_t u8_PortName, DIODir_t u8_Value) {
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	00 d0       	rcall	.+0      	; 0x34be <DIO_u8SetPortData+0x6>
    34be:	00 d0       	rcall	.+0      	; 0x34c0 <DIO_u8SetPortData+0x8>
    34c0:	0f 92       	push	r0
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
    34c6:	8a 83       	std	Y+2, r24	; 0x02
    34c8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	89 83       	std	Y+1, r24	; 0x01
	if (u8_Value == DIO_PORT_HIGH || u8_Value == DIO_PORT_LOW) {
    34ce:	8b 81       	ldd	r24, Y+3	; 0x03
    34d0:	8f 3f       	cpi	r24, 0xFF	; 255
    34d2:	19 f0       	breq	.+6      	; 0x34da <DIO_u8SetPortData+0x22>
    34d4:	8b 81       	ldd	r24, Y+3	; 0x03
    34d6:	88 23       	and	r24, r24
    34d8:	a9 f5       	brne	.+106    	; 0x3544 <DIO_u8SetPortData+0x8c>
		// check if value of port HIGH or LOW and assign it to the port 
		switch (u8_PortName) {
    34da:	8a 81       	ldd	r24, Y+2	; 0x02
    34dc:	28 2f       	mov	r18, r24
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	3d 83       	std	Y+5, r19	; 0x05
    34e2:	2c 83       	std	Y+4, r18	; 0x04
    34e4:	8c 81       	ldd	r24, Y+4	; 0x04
    34e6:	9d 81       	ldd	r25, Y+5	; 0x05
    34e8:	81 30       	cpi	r24, 0x01	; 1
    34ea:	91 05       	cpc	r25, r1
    34ec:	d1 f0       	breq	.+52     	; 0x3522 <DIO_u8SetPortData+0x6a>
    34ee:	2c 81       	ldd	r18, Y+4	; 0x04
    34f0:	3d 81       	ldd	r19, Y+5	; 0x05
    34f2:	22 30       	cpi	r18, 0x02	; 2
    34f4:	31 05       	cpc	r19, r1
    34f6:	2c f4       	brge	.+10     	; 0x3502 <DIO_u8SetPortData+0x4a>
    34f8:	8c 81       	ldd	r24, Y+4	; 0x04
    34fa:	9d 81       	ldd	r25, Y+5	; 0x05
    34fc:	00 97       	sbiw	r24, 0x00	; 0
    34fe:	61 f0       	breq	.+24     	; 0x3518 <DIO_u8SetPortData+0x60>
    3500:	1f c0       	rjmp	.+62     	; 0x3540 <DIO_u8SetPortData+0x88>
    3502:	2c 81       	ldd	r18, Y+4	; 0x04
    3504:	3d 81       	ldd	r19, Y+5	; 0x05
    3506:	22 30       	cpi	r18, 0x02	; 2
    3508:	31 05       	cpc	r19, r1
    350a:	81 f0       	breq	.+32     	; 0x352c <DIO_u8SetPortData+0x74>
    350c:	8c 81       	ldd	r24, Y+4	; 0x04
    350e:	9d 81       	ldd	r25, Y+5	; 0x05
    3510:	83 30       	cpi	r24, 0x03	; 3
    3512:	91 05       	cpc	r25, r1
    3514:	81 f0       	breq	.+32     	; 0x3536 <DIO_u8SetPortData+0x7e>
    3516:	14 c0       	rjmp	.+40     	; 0x3540 <DIO_u8SetPortData+0x88>
		case PORTA:
			PORTA_REG = u8_Value;
    3518:	eb e3       	ldi	r30, 0x3B	; 59
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	8b 81       	ldd	r24, Y+3	; 0x03
    351e:	80 83       	st	Z, r24
    3520:	12 c0       	rjmp	.+36     	; 0x3546 <DIO_u8SetPortData+0x8e>
			break;
		case PORTB:
			PORTB_REG = u8_Value;
    3522:	e8 e3       	ldi	r30, 0x38	; 56
    3524:	f0 e0       	ldi	r31, 0x00	; 0
    3526:	8b 81       	ldd	r24, Y+3	; 0x03
    3528:	80 83       	st	Z, r24
    352a:	0d c0       	rjmp	.+26     	; 0x3546 <DIO_u8SetPortData+0x8e>
			break;
		case PORTC:
			PORTC_REG = u8_Value;
    352c:	e5 e3       	ldi	r30, 0x35	; 53
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	8b 81       	ldd	r24, Y+3	; 0x03
    3532:	80 83       	st	Z, r24
    3534:	08 c0       	rjmp	.+16     	; 0x3546 <DIO_u8SetPortData+0x8e>
			break;
		case PORTD:
			PORTD_REG = u8_Value;
    3536:	e2 e3       	ldi	r30, 0x32	; 50
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	8b 81       	ldd	r24, Y+3	; 0x03
    353c:	80 83       	st	Z, r24
    353e:	03 c0       	rjmp	.+6      	; 0x3546 <DIO_u8SetPortData+0x8e>
			break;
		default:
			// if input port is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    3540:	19 82       	std	Y+1, r1	; 0x01
    3542:	01 c0       	rjmp	.+2      	; 0x3546 <DIO_u8SetPortData+0x8e>
		}
	} else {
		// if Value not HIGH or LOW return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    3544:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    3546:	89 81       	ldd	r24, Y+1	; 0x01
}
    3548:	0f 90       	pop	r0
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	cf 91       	pop	r28
    3554:	df 91       	pop	r29
    3556:	08 95       	ret

00003558 <DIO_u8GetPortData>:

// function to read value on port
uint8_t DIO_u8GetPortData(DIOPort_t u8_PortName, uint8_t* pu8_ReturnVar) {
    3558:	df 93       	push	r29
    355a:	cf 93       	push	r28
    355c:	00 d0       	rcall	.+0      	; 0x355e <DIO_u8GetPortData+0x6>
    355e:	00 d0       	rcall	.+0      	; 0x3560 <DIO_u8GetPortData+0x8>
    3560:	00 d0       	rcall	.+0      	; 0x3562 <DIO_u8GetPortData+0xa>
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	8a 83       	std	Y+2, r24	; 0x02
    3568:	7c 83       	std	Y+4, r23	; 0x04
    356a:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	89 83       	std	Y+1, r24	; 0x01
	if (pu8_ReturnVar != NULL) {
    3570:	8b 81       	ldd	r24, Y+3	; 0x03
    3572:	9c 81       	ldd	r25, Y+4	; 0x04
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	e9 f1       	breq	.+122    	; 0x35f2 <DIO_u8GetPortData+0x9a>
		// get port value in register to variable depend on port and pin 
		switch (u8_PortName) {
    3578:	8a 81       	ldd	r24, Y+2	; 0x02
    357a:	28 2f       	mov	r18, r24
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	3e 83       	std	Y+6, r19	; 0x06
    3580:	2d 83       	std	Y+5, r18	; 0x05
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	81 30       	cpi	r24, 0x01	; 1
    3588:	91 05       	cpc	r25, r1
    358a:	e1 f0       	breq	.+56     	; 0x35c4 <DIO_u8GetPortData+0x6c>
    358c:	2d 81       	ldd	r18, Y+5	; 0x05
    358e:	3e 81       	ldd	r19, Y+6	; 0x06
    3590:	22 30       	cpi	r18, 0x02	; 2
    3592:	31 05       	cpc	r19, r1
    3594:	2c f4       	brge	.+10     	; 0x35a0 <DIO_u8GetPortData+0x48>
    3596:	8d 81       	ldd	r24, Y+5	; 0x05
    3598:	9e 81       	ldd	r25, Y+6	; 0x06
    359a:	00 97       	sbiw	r24, 0x00	; 0
    359c:	61 f0       	breq	.+24     	; 0x35b6 <DIO_u8GetPortData+0x5e>
    359e:	27 c0       	rjmp	.+78     	; 0x35ee <DIO_u8GetPortData+0x96>
    35a0:	2d 81       	ldd	r18, Y+5	; 0x05
    35a2:	3e 81       	ldd	r19, Y+6	; 0x06
    35a4:	22 30       	cpi	r18, 0x02	; 2
    35a6:	31 05       	cpc	r19, r1
    35a8:	a1 f0       	breq	.+40     	; 0x35d2 <DIO_u8GetPortData+0x7a>
    35aa:	8d 81       	ldd	r24, Y+5	; 0x05
    35ac:	9e 81       	ldd	r25, Y+6	; 0x06
    35ae:	83 30       	cpi	r24, 0x03	; 3
    35b0:	91 05       	cpc	r25, r1
    35b2:	b1 f0       	breq	.+44     	; 0x35e0 <DIO_u8GetPortData+0x88>
    35b4:	1c c0       	rjmp	.+56     	; 0x35ee <DIO_u8GetPortData+0x96>
		case PORTA:
			*pu8_ReturnVar = PORTA_REG;
    35b6:	eb e3       	ldi	r30, 0x3B	; 59
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	80 81       	ld	r24, Z
    35bc:	eb 81       	ldd	r30, Y+3	; 0x03
    35be:	fc 81       	ldd	r31, Y+4	; 0x04
    35c0:	80 83       	st	Z, r24
    35c2:	18 c0       	rjmp	.+48     	; 0x35f4 <DIO_u8GetPortData+0x9c>
			break;
		case PORTB:
			*pu8_ReturnVar = PORTB_REG;
    35c4:	e8 e3       	ldi	r30, 0x38	; 56
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	80 81       	ld	r24, Z
    35ca:	eb 81       	ldd	r30, Y+3	; 0x03
    35cc:	fc 81       	ldd	r31, Y+4	; 0x04
    35ce:	80 83       	st	Z, r24
    35d0:	11 c0       	rjmp	.+34     	; 0x35f4 <DIO_u8GetPortData+0x9c>
			break;
		case PORTC:
			*pu8_ReturnVar = PORTC_REG;
    35d2:	e5 e3       	ldi	r30, 0x35	; 53
    35d4:	f0 e0       	ldi	r31, 0x00	; 0
    35d6:	80 81       	ld	r24, Z
    35d8:	eb 81       	ldd	r30, Y+3	; 0x03
    35da:	fc 81       	ldd	r31, Y+4	; 0x04
    35dc:	80 83       	st	Z, r24
    35de:	0a c0       	rjmp	.+20     	; 0x35f4 <DIO_u8GetPortData+0x9c>
			break;
		case PORTD:
			*pu8_ReturnVar = PORTD_REG;
    35e0:	e2 e3       	ldi	r30, 0x32	; 50
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	80 81       	ld	r24, Z
    35e6:	eb 81       	ldd	r30, Y+3	; 0x03
    35e8:	fc 81       	ldd	r31, Y+4	; 0x04
    35ea:	80 83       	st	Z, r24
    35ec:	03 c0       	rjmp	.+6      	; 0x35f4 <DIO_u8GetPortData+0x9c>
			break;
		default:
			// if not suitable port return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    35ee:	19 82       	std	Y+1, r1	; 0x01
    35f0:	01 c0       	rjmp	.+2      	; 0x35f4 <DIO_u8GetPortData+0x9c>
		}
	} else {
		// if no address passed to function return error state NOK 
		u8ErrorState = STD_TYPES_NOK;
    35f2:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    35f6:	26 96       	adiw	r28, 0x06	; 6
    35f8:	0f b6       	in	r0, 0x3f	; 63
    35fa:	f8 94       	cli
    35fc:	de bf       	out	0x3e, r29	; 62
    35fe:	0f be       	out	0x3f, r0	; 63
    3600:	cd bf       	out	0x3d, r28	; 61
    3602:	cf 91       	pop	r28
    3604:	df 91       	pop	r29
    3606:	08 95       	ret

00003608 <DIO_u8TogglePinData>:

// function to toggle pin state
uint8_t DIO_u8TogglePinData(DIOPort_t u8_PortName, DIOPin_t u8_PinNum) {
    3608:	df 93       	push	r29
    360a:	cf 93       	push	r28
    360c:	00 d0       	rcall	.+0      	; 0x360e <DIO_u8TogglePinData+0x6>
    360e:	00 d0       	rcall	.+0      	; 0x3610 <DIO_u8TogglePinData+0x8>
    3610:	0f 92       	push	r0
    3612:	cd b7       	in	r28, 0x3d	; 61
    3614:	de b7       	in	r29, 0x3e	; 62
    3616:	8a 83       	std	Y+2, r24	; 0x02
    3618:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t u8ErrorState = STD_TYPES_OK;
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	89 83       	std	Y+1, r24	; 0x01
	switch (u8_PortName) {
    361e:	8a 81       	ldd	r24, Y+2	; 0x02
    3620:	28 2f       	mov	r18, r24
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	3d 83       	std	Y+5, r19	; 0x05
    3626:	2c 83       	std	Y+4, r18	; 0x04
    3628:	8c 81       	ldd	r24, Y+4	; 0x04
    362a:	9d 81       	ldd	r25, Y+5	; 0x05
    362c:	81 30       	cpi	r24, 0x01	; 1
    362e:	91 05       	cpc	r25, r1
    3630:	49 f1       	breq	.+82     	; 0x3684 <DIO_u8TogglePinData+0x7c>
    3632:	2c 81       	ldd	r18, Y+4	; 0x04
    3634:	3d 81       	ldd	r19, Y+5	; 0x05
    3636:	22 30       	cpi	r18, 0x02	; 2
    3638:	31 05       	cpc	r19, r1
    363a:	2c f4       	brge	.+10     	; 0x3646 <DIO_u8TogglePinData+0x3e>
    363c:	8c 81       	ldd	r24, Y+4	; 0x04
    363e:	9d 81       	ldd	r25, Y+5	; 0x05
    3640:	00 97       	sbiw	r24, 0x00	; 0
    3642:	61 f0       	breq	.+24     	; 0x365c <DIO_u8TogglePinData+0x54>
    3644:	5b c0       	rjmp	.+182    	; 0x36fc <DIO_u8TogglePinData+0xf4>
    3646:	2c 81       	ldd	r18, Y+4	; 0x04
    3648:	3d 81       	ldd	r19, Y+5	; 0x05
    364a:	22 30       	cpi	r18, 0x02	; 2
    364c:	31 05       	cpc	r19, r1
    364e:	71 f1       	breq	.+92     	; 0x36ac <DIO_u8TogglePinData+0xa4>
    3650:	8c 81       	ldd	r24, Y+4	; 0x04
    3652:	9d 81       	ldd	r25, Y+5	; 0x05
    3654:	83 30       	cpi	r24, 0x03	; 3
    3656:	91 05       	cpc	r25, r1
    3658:	e9 f1       	breq	.+122    	; 0x36d4 <DIO_u8TogglePinData+0xcc>
    365a:	50 c0       	rjmp	.+160    	; 0x36fc <DIO_u8TogglePinData+0xf4>
	// toogle bit value depend on port and pin 
	case PORTA:
		Toggle_BIT(PORTA_REG, u8_PinNum);
    365c:	ab e3       	ldi	r26, 0x3B	; 59
    365e:	b0 e0       	ldi	r27, 0x00	; 0
    3660:	eb e3       	ldi	r30, 0x3B	; 59
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	80 81       	ld	r24, Z
    3666:	48 2f       	mov	r20, r24
    3668:	8b 81       	ldd	r24, Y+3	; 0x03
    366a:	28 2f       	mov	r18, r24
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	02 2e       	mov	r0, r18
    3674:	02 c0       	rjmp	.+4      	; 0x367a <DIO_u8TogglePinData+0x72>
    3676:	88 0f       	add	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	0a 94       	dec	r0
    367c:	e2 f7       	brpl	.-8      	; 0x3676 <DIO_u8TogglePinData+0x6e>
    367e:	84 27       	eor	r24, r20
    3680:	8c 93       	st	X, r24
    3682:	3d c0       	rjmp	.+122    	; 0x36fe <DIO_u8TogglePinData+0xf6>
		break;
	case PORTB:
		Toggle_BIT(PORTB_REG, u8_PinNum);
    3684:	a8 e3       	ldi	r26, 0x38	; 56
    3686:	b0 e0       	ldi	r27, 0x00	; 0
    3688:	e8 e3       	ldi	r30, 0x38	; 56
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	80 81       	ld	r24, Z
    368e:	48 2f       	mov	r20, r24
    3690:	8b 81       	ldd	r24, Y+3	; 0x03
    3692:	28 2f       	mov	r18, r24
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	02 2e       	mov	r0, r18
    369c:	02 c0       	rjmp	.+4      	; 0x36a2 <DIO_u8TogglePinData+0x9a>
    369e:	88 0f       	add	r24, r24
    36a0:	99 1f       	adc	r25, r25
    36a2:	0a 94       	dec	r0
    36a4:	e2 f7       	brpl	.-8      	; 0x369e <DIO_u8TogglePinData+0x96>
    36a6:	84 27       	eor	r24, r20
    36a8:	8c 93       	st	X, r24
    36aa:	29 c0       	rjmp	.+82     	; 0x36fe <DIO_u8TogglePinData+0xf6>
		break;
	case PORTC:
		Toggle_BIT(PORTC_REG, u8_PinNum);
    36ac:	a5 e3       	ldi	r26, 0x35	; 53
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	e5 e3       	ldi	r30, 0x35	; 53
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 81       	ld	r24, Z
    36b6:	48 2f       	mov	r20, r24
    36b8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ba:	28 2f       	mov	r18, r24
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	02 2e       	mov	r0, r18
    36c4:	02 c0       	rjmp	.+4      	; 0x36ca <DIO_u8TogglePinData+0xc2>
    36c6:	88 0f       	add	r24, r24
    36c8:	99 1f       	adc	r25, r25
    36ca:	0a 94       	dec	r0
    36cc:	e2 f7       	brpl	.-8      	; 0x36c6 <DIO_u8TogglePinData+0xbe>
    36ce:	84 27       	eor	r24, r20
    36d0:	8c 93       	st	X, r24
    36d2:	15 c0       	rjmp	.+42     	; 0x36fe <DIO_u8TogglePinData+0xf6>
		break;
	case PORTD:
		Toggle_BIT(PORTD_REG, u8_PinNum);
    36d4:	a2 e3       	ldi	r26, 0x32	; 50
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	e2 e3       	ldi	r30, 0x32	; 50
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	48 2f       	mov	r20, r24
    36e0:	8b 81       	ldd	r24, Y+3	; 0x03
    36e2:	28 2f       	mov	r18, r24
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	02 2e       	mov	r0, r18
    36ec:	02 c0       	rjmp	.+4      	; 0x36f2 <DIO_u8TogglePinData+0xea>
    36ee:	88 0f       	add	r24, r24
    36f0:	99 1f       	adc	r25, r25
    36f2:	0a 94       	dec	r0
    36f4:	e2 f7       	brpl	.-8      	; 0x36ee <DIO_u8TogglePinData+0xe6>
    36f6:	84 27       	eor	r24, r20
    36f8:	8c 93       	st	X, r24
    36fa:	01 c0       	rjmp	.+2      	; 0x36fe <DIO_u8TogglePinData+0xf6>
		break;
	default:
		// if input port is not one of the above cases return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    36fc:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	0f 90       	pop	r0
    3706:	0f 90       	pop	r0
    3708:	0f 90       	pop	r0
    370a:	cf 91       	pop	r28
    370c:	df 91       	pop	r29
    370e:	08 95       	ret

00003710 <TIMER0_u8Init>:

/*
 * brief: This function is used to initialize Timer 0 to use CTC mode and 64 prescaler
 * return: (output) the Error state of the function 0 if an error happens and 1 otherwise
 */
uint8_t TIMER0_u8Init(void) {
    3710:	df 93       	push	r29
    3712:	cf 93       	push	r28
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG = (1 << WGM01) | (1 << CS01) | (1 << CS00);
    3718:	e3 e5       	ldi	r30, 0x53	; 83
    371a:	f0 e0       	ldi	r31, 0x00	; 0
    371c:	8b e0       	ldi	r24, 0x0B	; 11
    371e:	80 83       	st	Z, r24
	return DELAY_OK;
    3720:	81 e0       	ldi	r24, 0x01	; 1
}
    3722:	cf 91       	pop	r28
    3724:	df 91       	pop	r29
    3726:	08 95       	ret

00003728 <TIMER0_u8InterruptDelay>:
 * brief: This function is used to initialize an interrupt delay if the Timer isn't busy
 * param.: (input) the delay to be set in ms
 * param.: (input) a pointer to a function to be called when the delay is over
 * return: (output) the Error state of the function 0 if an error happens, 2 if the timer is busy and 1 otherwise
 */
uint8_t TIMER0_u8InterruptDelay(uint16_t delay, void (*fnCallBack)(void)) {
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	00 d0       	rcall	.+0      	; 0x372e <TIMER0_u8InterruptDelay+0x6>
    372e:	00 d0       	rcall	.+0      	; 0x3730 <TIMER0_u8InterruptDelay+0x8>
    3730:	0f 92       	push	r0
    3732:	cd b7       	in	r28, 0x3d	; 61
    3734:	de b7       	in	r29, 0x3e	; 62
    3736:	9a 83       	std	Y+2, r25	; 0x02
    3738:	89 83       	std	Y+1, r24	; 0x01
    373a:	7c 83       	std	Y+4, r23	; 0x04
    373c:	6b 83       	std	Y+3, r22	; 0x03
	if (delay_stat == DELAY_BUSY) {
    373e:	80 91 db 01 	lds	r24, 0x01DB
    3742:	82 30       	cpi	r24, 0x02	; 2
    3744:	21 f4       	brne	.+8      	; 0x374e <TIMER0_u8InterruptDelay+0x26>
		return delay_stat;
    3746:	80 91 db 01 	lds	r24, 0x01DB
    374a:	8d 83       	std	Y+5, r24	; 0x05
    374c:	29 c0       	rjmp	.+82     	; 0x37a0 <TIMER0_u8InterruptDelay+0x78>
	}
	delay_stat = DELAY_BUSY;
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	80 93 db 01 	sts	0x01DB, r24
	compare = delay;
    3754:	89 81       	ldd	r24, Y+1	; 0x01
    3756:	9a 81       	ldd	r25, Y+2	; 0x02
    3758:	90 93 f9 01 	sts	0x01F9, r25
    375c:	80 93 f8 01 	sts	0x01F8, r24
	if (fnCallBack != NULL) {
    3760:	8b 81       	ldd	r24, Y+3	; 0x03
    3762:	9c 81       	ldd	r25, Y+4	; 0x04
    3764:	00 97       	sbiw	r24, 0x00	; 0
    3766:	d9 f0       	breq	.+54     	; 0x379e <TIMER0_u8InterruptDelay+0x76>
		delayCallBack = fnCallBack;
    3768:	8b 81       	ldd	r24, Y+3	; 0x03
    376a:	9c 81       	ldd	r25, Y+4	; 0x04
    376c:	90 93 fd 01 	sts	0x01FD, r25
    3770:	80 93 fc 01 	sts	0x01FC, r24
		OCR0_REG = (F_CPU / PRESCALER);
    3774:	ec e5       	ldi	r30, 0x5C	; 92
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	8d e7       	ldi	r24, 0x7D	; 125
    377a:	80 83       	st	Z, r24
		SET_BIT(TIMSK_REG, OCIE0);
    377c:	a9 e5       	ldi	r26, 0x59	; 89
    377e:	b0 e0       	ldi	r27, 0x00	; 0
    3780:	e9 e5       	ldi	r30, 0x59	; 89
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	80 81       	ld	r24, Z
    3786:	82 60       	ori	r24, 0x02	; 2
    3788:	8c 93       	st	X, r24
		SET_BIT(SREG_REG, I_BIT);
    378a:	af e5       	ldi	r26, 0x5F	; 95
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	ef e5       	ldi	r30, 0x5F	; 95
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	80 81       	ld	r24, Z
    3794:	80 68       	ori	r24, 0x80	; 128
    3796:	8c 93       	st	X, r24
		return DELAY_OK;
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	8d 83       	std	Y+5, r24	; 0x05
    379c:	01 c0       	rjmp	.+2      	; 0x37a0 <TIMER0_u8InterruptDelay+0x78>
	} else {
		return DELAY_ERR;
    379e:	1d 82       	std	Y+5, r1	; 0x05
    37a0:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    37a2:	0f 90       	pop	r0
    37a4:	0f 90       	pop	r0
    37a6:	0f 90       	pop	r0
    37a8:	0f 90       	pop	r0
    37aa:	0f 90       	pop	r0
    37ac:	cf 91       	pop	r28
    37ae:	df 91       	pop	r29
    37b0:	08 95       	ret

000037b2 <TIMER0_u8PollingDelay>:
/*
 * brief: This function is used to initialize a polling delay if the Timer isn't busy
 * param.: (input) the delay to be set in ms
 * return: (output) the Error state of the function 0 if an error happens, 2 if the timer is busy and 1 otherwise
 */
uint8_t TIMER0_u8PollingDelay(uint16_t delay) {
    37b2:	df 93       	push	r29
    37b4:	cf 93       	push	r28
    37b6:	00 d0       	rcall	.+0      	; 0x37b8 <TIMER0_u8PollingDelay+0x6>
    37b8:	0f 92       	push	r0
    37ba:	cd b7       	in	r28, 0x3d	; 61
    37bc:	de b7       	in	r29, 0x3e	; 62
    37be:	9a 83       	std	Y+2, r25	; 0x02
    37c0:	89 83       	std	Y+1, r24	; 0x01
	if (delay_stat == DELAY_BUSY) {
    37c2:	80 91 db 01 	lds	r24, 0x01DB
    37c6:	82 30       	cpi	r24, 0x02	; 2
    37c8:	21 f4       	brne	.+8      	; 0x37d2 <TIMER0_u8PollingDelay+0x20>
		return delay_stat;
    37ca:	80 91 db 01 	lds	r24, 0x01DB
    37ce:	8b 83       	std	Y+3, r24	; 0x03
    37d0:	3b c0       	rjmp	.+118    	; 0x3848 <TIMER0_u8PollingDelay+0x96>
	}
	delay_stat = DELAY_BUSY;
    37d2:	82 e0       	ldi	r24, 0x02	; 2
    37d4:	80 93 db 01 	sts	0x01DB, r24
	counter = 0;						// reset counter to 0
    37d8:	10 92 fb 01 	sts	0x01FB, r1
    37dc:	10 92 fa 01 	sts	0x01FA, r1
	compare = delay;
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
    37e2:	9a 81       	ldd	r25, Y+2	; 0x02
    37e4:	90 93 f9 01 	sts	0x01F9, r25
    37e8:	80 93 f8 01 	sts	0x01F8, r24
	TIMER0_u8Init();				// initialize timer0
    37ec:	0e 94 88 1b 	call	0x3710	; 0x3710 <TIMER0_u8Init>
	TCNT0_REG = 0;
    37f0:	e2 e5       	ldi	r30, 0x52	; 82
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	10 82       	st	Z, r1
	OCR0_REG = (F_CPU / PRESCALER);		// set OCR0_REG value
    37f6:	ec e5       	ldi	r30, 0x5C	; 92
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	8d e7       	ldi	r24, 0x7D	; 125
    37fc:	80 83       	st	Z, r24
	SET_BIT(TIMSK_REG, OCIE0);			// enable interrupt
    37fe:	a9 e5       	ldi	r26, 0x59	; 89
    3800:	b0 e0       	ldi	r27, 0x00	; 0
    3802:	e9 e5       	ldi	r30, 0x59	; 89
    3804:	f0 e0       	ldi	r31, 0x00	; 0
    3806:	80 81       	ld	r24, Z
    3808:	82 60       	ori	r24, 0x02	; 2
    380a:	8c 93       	st	X, r24
	SET_BIT(SREG_REG, I_BIT);
    380c:	af e5       	ldi	r26, 0x5F	; 95
    380e:	b0 e0       	ldi	r27, 0x00	; 0
    3810:	ef e5       	ldi	r30, 0x5F	; 95
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	80 81       	ld	r24, Z
    3816:	80 68       	ori	r24, 0x80	; 128
    3818:	8c 93       	st	X, r24
	while (counter <= compare)
    381a:	20 91 fa 01 	lds	r18, 0x01FA
    381e:	30 91 fb 01 	lds	r19, 0x01FB
    3822:	80 91 f8 01 	lds	r24, 0x01F8
    3826:	90 91 f9 01 	lds	r25, 0x01F9
    382a:	82 17       	cp	r24, r18
    382c:	93 07       	cpc	r25, r19
    382e:	a8 f7       	brcc	.-22     	; 0x381a <TIMER0_u8PollingDelay+0x68>
		;			// stop if delay not finished
	CLR_BIT(TIMSK_REG, OCIE0);
    3830:	a9 e5       	ldi	r26, 0x59	; 89
    3832:	b0 e0       	ldi	r27, 0x00	; 0
    3834:	e9 e5       	ldi	r30, 0x59	; 89
    3836:	f0 e0       	ldi	r31, 0x00	; 0
    3838:	80 81       	ld	r24, Z
    383a:	8d 7f       	andi	r24, 0xFD	; 253
    383c:	8c 93       	st	X, r24
	delay_stat = DELAY_OK;
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	80 93 db 01 	sts	0x01DB, r24
	return DELAY_OK;
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	8b 83       	std	Y+3, r24	; 0x03
    3848:	8b 81       	ldd	r24, Y+3	; 0x03
}
    384a:	0f 90       	pop	r0
    384c:	0f 90       	pop	r0
    384e:	0f 90       	pop	r0
    3850:	cf 91       	pop	r28
    3852:	df 91       	pop	r29
    3854:	08 95       	ret

00003856 <__vector_10>:
void __vector_10(void) {
    3856:	1f 92       	push	r1
    3858:	0f 92       	push	r0
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	0f 92       	push	r0
    385e:	11 24       	eor	r1, r1
    3860:	2f 93       	push	r18
    3862:	3f 93       	push	r19
    3864:	4f 93       	push	r20
    3866:	5f 93       	push	r21
    3868:	6f 93       	push	r22
    386a:	7f 93       	push	r23
    386c:	8f 93       	push	r24
    386e:	9f 93       	push	r25
    3870:	af 93       	push	r26
    3872:	bf 93       	push	r27
    3874:	ef 93       	push	r30
    3876:	ff 93       	push	r31
    3878:	df 93       	push	r29
    387a:	cf 93       	push	r28
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
	counter++;
    3880:	80 91 fa 01 	lds	r24, 0x01FA
    3884:	90 91 fb 01 	lds	r25, 0x01FB
    3888:	01 96       	adiw	r24, 0x01	; 1
    388a:	90 93 fb 01 	sts	0x01FB, r25
    388e:	80 93 fa 01 	sts	0x01FA, r24
	if (counter == compare && delayCallBack != NULL) {
    3892:	20 91 fa 01 	lds	r18, 0x01FA
    3896:	30 91 fb 01 	lds	r19, 0x01FB
    389a:	80 91 f8 01 	lds	r24, 0x01F8
    389e:	90 91 f9 01 	lds	r25, 0x01F9
    38a2:	28 17       	cp	r18, r24
    38a4:	39 07       	cpc	r19, r25
    38a6:	c9 f4       	brne	.+50     	; 0x38da <__vector_10+0x84>
    38a8:	80 91 fc 01 	lds	r24, 0x01FC
    38ac:	90 91 fd 01 	lds	r25, 0x01FD
    38b0:	00 97       	sbiw	r24, 0x00	; 0
    38b2:	99 f0       	breq	.+38     	; 0x38da <__vector_10+0x84>
		counter = 0;
    38b4:	10 92 fb 01 	sts	0x01FB, r1
    38b8:	10 92 fa 01 	sts	0x01FA, r1
		CLR_BIT(TIMSK_REG, OCIE0);
    38bc:	a9 e5       	ldi	r26, 0x59	; 89
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	e9 e5       	ldi	r30, 0x59	; 89
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	80 81       	ld	r24, Z
    38c6:	8d 7f       	andi	r24, 0xFD	; 253
    38c8:	8c 93       	st	X, r24
		delay_stat = DELAY_OK;
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	80 93 db 01 	sts	0x01DB, r24
		delayCallBack();
    38d0:	e0 91 fc 01 	lds	r30, 0x01FC
    38d4:	f0 91 fd 01 	lds	r31, 0x01FD
    38d8:	09 95       	icall
	}
}
    38da:	cf 91       	pop	r28
    38dc:	df 91       	pop	r29
    38de:	ff 91       	pop	r31
    38e0:	ef 91       	pop	r30
    38e2:	bf 91       	pop	r27
    38e4:	af 91       	pop	r26
    38e6:	9f 91       	pop	r25
    38e8:	8f 91       	pop	r24
    38ea:	7f 91       	pop	r23
    38ec:	6f 91       	pop	r22
    38ee:	5f 91       	pop	r21
    38f0:	4f 91       	pop	r20
    38f2:	3f 91       	pop	r19
    38f4:	2f 91       	pop	r18
    38f6:	0f 90       	pop	r0
    38f8:	0f be       	out	0x3f, r0	; 63
    38fa:	0f 90       	pop	r0
    38fc:	1f 90       	pop	r1
    38fe:	18 95       	reti

00003900 <ADC_u8Init>:
#include "../../LIB/atmega32.h"
#include "../DELAY/TIMER0.h"
#include "ADC_interface.h"

static void (*ADC_callBack)(void);
uint8_t ADC_u8Init(void) {
    3900:	df 93       	push	r29
    3902:	cf 93       	push	r28
    3904:	0f 92       	push	r0
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = ADC_OK;
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	89 83       	std	Y+1, r24	; 0x01
	if (ADC_VREF== 0 || ADC_VREF==1 || ADC_VREF == 3)
	{
		ADMUX_REG &= ~ ADC_VREF_MASK;
    390e:	a7 e2       	ldi	r26, 0x27	; 39
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e7 e2       	ldi	r30, 0x27	; 39
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	8f 73       	andi	r24, 0x3F	; 63
    391a:	8c 93       	st	X, r24
		ADMUX_REG |= (ADC_VREF << REFS0_BIT);
    391c:	a7 e2       	ldi	r26, 0x27	; 39
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	e7 e2       	ldi	r30, 0x27	; 39
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	80 81       	ld	r24, Z
    3926:	80 64       	ori	r24, 0x40	; 64
    3928:	8c 93       	st	X, r24
	}
	// Set the Data Adjustment of the ADC depending on the ADC_DATA_ADJUSMENT configured in the ADC configuration file
	if (ADC_DATA_ADJUSMENT == ADC_LEFT_ADJUST) {
	SET_BIT(ADMUX_REG, ADLAR_BIT);
	} else {
	CLR_BIT(ADMUX_REG, ADLAR_BIT);
    392a:	a7 e2       	ldi	r26, 0x27	; 39
    392c:	b0 e0       	ldi	r27, 0x00	; 0
    392e:	e7 e2       	ldi	r30, 0x27	; 39
    3930:	f0 e0       	ldi	r31, 0x00	; 0
    3932:	80 81       	ld	r24, Z
    3934:	8f 7d       	andi	r24, 0xDF	; 223
    3936:	8c 93       	st	X, r24

	//Set the prescaler of the ADC depending on the ADC_PRESCALAR configured in the ADC configuration file
	if (ADC_PRESCALAR>0 && ADC_PRESCALAR<8)
	{
		//ADCSRA_REG &= ADC_PRESCALAR_MASK;
		ADMUX_REG &= ~ ADC_PRESCALAR_MASK;
    3938:	a7 e2       	ldi	r26, 0x27	; 39
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	e7 e2       	ldi	r30, 0x27	; 39
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	80 81       	ld	r24, Z
    3942:	88 7f       	andi	r24, 0xF8	; 248
    3944:	8c 93       	st	X, r24
		ADMUX_REG |= (ADC_PRESCALAR << ADC_PRESCALAR_BITS);
    3946:	a7 e2       	ldi	r26, 0x27	; 39
    3948:	b0 e0       	ldi	r27, 0x00	; 0
    394a:	e7 e2       	ldi	r30, 0x27	; 39
    394c:	f0 e0       	ldi	r31, 0x00	; 0
    394e:	80 81       	ld	r24, Z
    3950:	87 60       	ori	r24, 0x07	; 7
    3952:	8c 93       	st	X, r24
	}else
	{
		u8ErrorState = ADC_WRONG_PRESCALAR;
	}

	return u8ErrorState;
    3954:	89 81       	ldd	r24, Y+1	; 0x01
}
    3956:	0f 90       	pop	r0
    3958:	cf 91       	pop	r28
    395a:	df 91       	pop	r29
    395c:	08 95       	ret

0000395e <ADC_u8StartConversion>:

uint8_t ADC_u8StartConversion(ADCChannel_t* st_ChannelConfig) {
    395e:	df 93       	push	r29
    3960:	cf 93       	push	r28
    3962:	00 d0       	rcall	.+0      	; 0x3964 <ADC_u8StartConversion+0x6>
    3964:	0f 92       	push	r0
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	9b 83       	std	Y+3, r25	; 0x03
    396c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = ADC_OK;
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	89 83       	std	Y+1, r24	; 0x01

	if (st_ChannelConfig != NULL) {
    3972:	8a 81       	ldd	r24, Y+2	; 0x02
    3974:	9b 81       	ldd	r25, Y+3	; 0x03
    3976:	00 97       	sbiw	r24, 0x00	; 0
    3978:	09 f4       	brne	.+2      	; 0x397c <ADC_u8StartConversion+0x1e>
    397a:	55 c0       	rjmp	.+170    	; 0x3a26 <ADC_u8StartConversion+0xc8>
		// Choose the ADC Channel to convert from
		ADMUX_REG &= ~ ADC_MUX_MASK;
    397c:	a7 e2       	ldi	r26, 0x27	; 39
    397e:	b0 e0       	ldi	r27, 0x00	; 0
    3980:	e7 e2       	ldi	r30, 0x27	; 39
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	80 81       	ld	r24, Z
    3986:	80 7e       	andi	r24, 0xE0	; 224
    3988:	8c 93       	st	X, r24
		ADMUX_REG |= (st_ChannelConfig->pin << ADC_MUX_BITS);
    398a:	a7 e2       	ldi	r26, 0x27	; 39
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	e7 e2       	ldi	r30, 0x27	; 39
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	90 81       	ld	r25, Z
    3994:	ea 81       	ldd	r30, Y+2	; 0x02
    3996:	fb 81       	ldd	r31, Y+3	; 0x03
    3998:	81 81       	ldd	r24, Z+1	; 0x01
    399a:	89 2b       	or	r24, r25
    399c:	8c 93       	st	X, r24

		//After configuring the conversion enable the ADC to start the conversion process
		SET_BIT(ADCSRA_REG, ADEN_BIT);
    399e:	a6 e2       	ldi	r26, 0x26	; 38
    39a0:	b0 e0       	ldi	r27, 0x00	; 0
    39a2:	e6 e2       	ldi	r30, 0x26	; 38
    39a4:	f0 e0       	ldi	r31, 0x00	; 0
    39a6:	80 81       	ld	r24, Z
    39a8:	80 68       	ori	r24, 0x80	; 128
    39aa:	8c 93       	st	X, r24
		//Set the conversion mode and trigger source
		if (st_ChannelConfig->triggerSource == ADC_SINGLE_CONVERSION) {
    39ac:	ea 81       	ldd	r30, Y+2	; 0x02
    39ae:	fb 81       	ldd	r31, Y+3	; 0x03
    39b0:	82 81       	ldd	r24, Z+2	; 0x02
    39b2:	88 30       	cpi	r24, 0x08	; 8
    39b4:	41 f4       	brne	.+16     	; 0x39c6 <ADC_u8StartConversion+0x68>
			// if the conversion mode is single conversion disable the auto trigger then give the start signal
			//CLR_BIT(ADCSRA_REG, ADATE_BIT);
			SET_BIT(ADCSRA_REG, ADSC_BIT);
    39b6:	a6 e2       	ldi	r26, 0x26	; 38
    39b8:	b0 e0       	ldi	r27, 0x00	; 0
    39ba:	e6 e2       	ldi	r30, 0x26	; 38
    39bc:	f0 e0       	ldi	r31, 0x00	; 0
    39be:	80 81       	ld	r24, Z
    39c0:	80 64       	ori	r24, 0x40	; 64
    39c2:	8c 93       	st	X, r24
    39c4:	32 c0       	rjmp	.+100    	; 0x3a2a <ADC_u8StartConversion+0xcc>
		} else {
			//if the conversion is not single then enable the Auto trigger mode
			SET_BIT(ADCSRA_REG, ADATE_BIT);
    39c6:	a6 e2       	ldi	r26, 0x26	; 38
    39c8:	b0 e0       	ldi	r27, 0x00	; 0
    39ca:	e6 e2       	ldi	r30, 0x26	; 38
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	80 81       	ld	r24, Z
    39d0:	80 62       	ori	r24, 0x20	; 32
    39d2:	8c 93       	st	X, r24
			// After Enabling the auto trigger mode Set the trigger source
			SFIOR_REG &= ~ ADC_TRIGGER_SOURCE_MASK;
    39d4:	a0 e5       	ldi	r26, 0x50	; 80
    39d6:	b0 e0       	ldi	r27, 0x00	; 0
    39d8:	e0 e5       	ldi	r30, 0x50	; 80
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	80 81       	ld	r24, Z
    39de:	8f 71       	andi	r24, 0x1F	; 31
    39e0:	8c 93       	st	X, r24
			SFIOR_REG |= (st_ChannelConfig->triggerSource << ADTS0_BIT);
    39e2:	a0 e5       	ldi	r26, 0x50	; 80
    39e4:	b0 e0       	ldi	r27, 0x00	; 0
    39e6:	e0 e5       	ldi	r30, 0x50	; 80
    39e8:	f0 e0       	ldi	r31, 0x00	; 0
    39ea:	80 81       	ld	r24, Z
    39ec:	28 2f       	mov	r18, r24
    39ee:	ea 81       	ldd	r30, Y+2	; 0x02
    39f0:	fb 81       	ldd	r31, Y+3	; 0x03
    39f2:	82 81       	ldd	r24, Z+2	; 0x02
    39f4:	88 2f       	mov	r24, r24
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	88 0f       	add	r24, r24
    39fa:	99 1f       	adc	r25, r25
    39fc:	82 95       	swap	r24
    39fe:	92 95       	swap	r25
    3a00:	90 7f       	andi	r25, 0xF0	; 240
    3a02:	98 27       	eor	r25, r24
    3a04:	80 7f       	andi	r24, 0xF0	; 240
    3a06:	98 27       	eor	r25, r24
    3a08:	82 2b       	or	r24, r18
    3a0a:	8c 93       	st	X, r24
			//if the trigger source is the ending of the current conversion (free running) then you need to start the first conversion manually
			if (st_ChannelConfig->triggerSource == ADC_FREE_RUNNIG) {
    3a0c:	ea 81       	ldd	r30, Y+2	; 0x02
    3a0e:	fb 81       	ldd	r31, Y+3	; 0x03
    3a10:	82 81       	ldd	r24, Z+2	; 0x02
    3a12:	88 23       	and	r24, r24
    3a14:	51 f4       	brne	.+20     	; 0x3a2a <ADC_u8StartConversion+0xcc>
				SET_BIT(ADCSRA_REG, ADSC_BIT);
    3a16:	a6 e2       	ldi	r26, 0x26	; 38
    3a18:	b0 e0       	ldi	r27, 0x00	; 0
    3a1a:	e6 e2       	ldi	r30, 0x26	; 38
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	80 81       	ld	r24, Z
    3a20:	80 64       	ori	r24, 0x40	; 64
    3a22:	8c 93       	st	X, r24
    3a24:	02 c0       	rjmp	.+4      	; 0x3a2a <ADC_u8StartConversion+0xcc>
			}
		}

	} else {

		u8ErrorState = ADC_NULL_INPUT;
    3a26:	87 e5       	ldi	r24, 0x57	; 87
    3a28:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a2c:	0f 90       	pop	r0
    3a2e:	0f 90       	pop	r0
    3a30:	0f 90       	pop	r0
    3a32:	cf 91       	pop	r28
    3a34:	df 91       	pop	r29
    3a36:	08 95       	ret

00003a38 <ADC_u8GetRead>:


uint8_t ADC_u8GetRead(uint16_t* u16_ADCReading) {
    3a38:	df 93       	push	r29
    3a3a:	cf 93       	push	r28
    3a3c:	00 d0       	rcall	.+0      	; 0x3a3e <ADC_u8GetRead+0x6>
    3a3e:	0f 92       	push	r0
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
    3a44:	9b 83       	std	Y+3, r25	; 0x03
    3a46:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t u8ErrorState = ADC_OK;
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	89 83       	std	Y+1, r24	; 0x01

	if (u16_ADCReading != NULL) // Check if the pointer is pointing to NULL or not
    3a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	09 f4       	brne	.+2      	; 0x3a56 <ADC_u8GetRead+0x1e>
    3a54:	4a c0       	rjmp	.+148    	; 0x3aea <ADC_u8GetRead+0xb2>
	{
		// wait until the current conversion is finished

		while ( GET_BIT(ADCSRA_REG,ADIF_BIT) != 1);
    3a56:	e6 e2       	ldi	r30, 0x26	; 38
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	80 81       	ld	r24, Z
    3a5c:	82 95       	swap	r24
    3a5e:	8f 70       	andi	r24, 0x0F	; 15
    3a60:	88 2f       	mov	r24, r24
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	81 70       	andi	r24, 0x01	; 1
    3a66:	90 70       	andi	r25, 0x00	; 0
    3a68:	00 97       	sbiw	r24, 0x00	; 0
    3a6a:	a9 f3       	breq	.-22     	; 0x3a56 <ADC_u8GetRead+0x1e>
		//first check for the data adjustment then Get the data from the ADC data registers
		if (GET_BIT(ADMUX_REG,ADLAR_BIT)==1)
    3a6c:	e7 e2       	ldi	r30, 0x27	; 39
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	80 81       	ld	r24, Z
    3a72:	82 95       	swap	r24
    3a74:	86 95       	lsr	r24
    3a76:	87 70       	andi	r24, 0x07	; 7
    3a78:	88 2f       	mov	r24, r24
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	81 70       	andi	r24, 0x01	; 1
    3a7e:	90 70       	andi	r25, 0x00	; 0
    3a80:	88 23       	and	r24, r24
    3a82:	c9 f0       	breq	.+50     	; 0x3ab6 <ADC_u8GetRead+0x7e>
		{
			//if the data is left ADJUSTED then
			*u16_ADCReading=(ADCL_REG>>6)|(ADCH_REG<<2);
    3a84:	e4 e2       	ldi	r30, 0x24	; 36
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	80 81       	ld	r24, Z
    3a8a:	82 95       	swap	r24
    3a8c:	86 95       	lsr	r24
    3a8e:	86 95       	lsr	r24
    3a90:	83 70       	andi	r24, 0x03	; 3
    3a92:	28 2f       	mov	r18, r24
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	e5 e2       	ldi	r30, 0x25	; 37
    3a98:	f0 e0       	ldi	r31, 0x00	; 0
    3a9a:	80 81       	ld	r24, Z
    3a9c:	88 2f       	mov	r24, r24
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	88 0f       	add	r24, r24
    3aa2:	99 1f       	adc	r25, r25
    3aa4:	88 0f       	add	r24, r24
    3aa6:	99 1f       	adc	r25, r25
    3aa8:	82 2b       	or	r24, r18
    3aaa:	93 2b       	or	r25, r19
    3aac:	ea 81       	ldd	r30, Y+2	; 0x02
    3aae:	fb 81       	ldd	r31, Y+3	; 0x03
    3ab0:	91 83       	std	Z+1, r25	; 0x01
    3ab2:	80 83       	st	Z, r24
    3ab4:	12 c0       	rjmp	.+36     	; 0x3ada <ADC_u8GetRead+0xa2>
		}else
		{
			//if the data is right ADJUSTED then
			*u16_ADCReading = ADCL_REG | ( ADCH_REG << 8);
    3ab6:	e4 e2       	ldi	r30, 0x24	; 36
    3ab8:	f0 e0       	ldi	r31, 0x00	; 0
    3aba:	80 81       	ld	r24, Z
    3abc:	28 2f       	mov	r18, r24
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	e5 e2       	ldi	r30, 0x25	; 37
    3ac2:	f0 e0       	ldi	r31, 0x00	; 0
    3ac4:	80 81       	ld	r24, Z
    3ac6:	88 2f       	mov	r24, r24
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	98 2f       	mov	r25, r24
    3acc:	88 27       	eor	r24, r24
    3ace:	82 2b       	or	r24, r18
    3ad0:	93 2b       	or	r25, r19
    3ad2:	ea 81       	ldd	r30, Y+2	; 0x02
    3ad4:	fb 81       	ldd	r31, Y+3	; 0x03
    3ad6:	91 83       	std	Z+1, r25	; 0x01
    3ad8:	80 83       	st	Z, r24
		}
		// Clear the flag after reading
		CLR_BIT(ADCSRA_REG, ADIF);
    3ada:	a6 e2       	ldi	r26, 0x26	; 38
    3adc:	b0 e0       	ldi	r27, 0x00	; 0
    3ade:	e6 e2       	ldi	r30, 0x26	; 38
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	80 81       	ld	r24, Z
    3ae4:	8f 7e       	andi	r24, 0xEF	; 239
    3ae6:	8c 93       	st	X, r24
    3ae8:	02 c0       	rjmp	.+4      	; 0x3aee <ADC_u8GetRead+0xb6>
	}
	else
	{
		u8ErrorState = ADC_NULL_INPUT;
    3aea:	87 e5       	ldi	r24, 0x57	; 87
    3aec:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
}
    3af0:	0f 90       	pop	r0
    3af2:	0f 90       	pop	r0
    3af4:	0f 90       	pop	r0
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	08 95       	ret

00003afc <ADC_u8GetVolt>:

uint8_t ADC_u8GetVolt(uint16_t* f32_ADCVolt) {
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	00 d0       	rcall	.+0      	; 0x3b02 <ADC_u8GetVolt+0x6>
    3b02:	00 d0       	rcall	.+0      	; 0x3b04 <ADC_u8GetVolt+0x8>
    3b04:	0f 92       	push	r0
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	9d 83       	std	Y+5, r25	; 0x05
    3b0c:	8c 83       	std	Y+4, r24	; 0x04

	uint8_t u8ErrorState = ADC_OK;
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	89 83       	std	Y+1, r24	; 0x01
	uint16_t u16_ADCReading = 0;
    3b12:	1b 82       	std	Y+3, r1	; 0x03
    3b14:	1a 82       	std	Y+2, r1	; 0x02

	if (f32_ADCVolt !=NULL)
    3b16:	8c 81       	ldd	r24, Y+4	; 0x04
    3b18:	9d 81       	ldd	r25, Y+5	; 0x05
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	a1 f0       	breq	.+40     	; 0x3b46 <ADC_u8GetVolt+0x4a>
	{
		//Get the ADC data to convert to voltage
		if (ADC_u8GetRead(&u16_ADCReading) == ADC_OK)
    3b1e:	ce 01       	movw	r24, r28
    3b20:	02 96       	adiw	r24, 0x02	; 2
    3b22:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <ADC_u8GetRead>
    3b26:	81 30       	cpi	r24, 0x01	; 1
    3b28:	59 f4       	brne	.+22     	; 0x3b40 <ADC_u8GetVolt+0x44>
		{
			// if the data is fetched correctly then calculate the volt using the equation volt = ADCread * (Vref/resolution)
			*f32_ADCVolt = ((uint16_t)u16_ADCReading * (ADC_MAX_VOLT / ADC_RESOLUTION));
    3b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b2e:	88 0f       	add	r24, r24
    3b30:	99 1f       	adc	r25, r25
    3b32:	88 0f       	add	r24, r24
    3b34:	99 1f       	adc	r25, r25
    3b36:	ec 81       	ldd	r30, Y+4	; 0x04
    3b38:	fd 81       	ldd	r31, Y+5	; 0x05
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24
    3b3e:	05 c0       	rjmp	.+10     	; 0x3b4a <ADC_u8GetVolt+0x4e>
			//*f32_ADCVolt = u16_ADCReading;
		}
		else
		{
			u8ErrorState = ADC_GetVolt_Error;
    3b40:	84 e5       	ldi	r24, 0x54	; 84
    3b42:	89 83       	std	Y+1, r24	; 0x01
    3b44:	02 c0       	rjmp	.+4      	; 0x3b4a <ADC_u8GetVolt+0x4e>
		}
	}
	else
	{
		u8ErrorState = ADC_NULL_INPUT;
    3b46:	87 e5       	ldi	r24, 0x57	; 87
    3b48:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    3b4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b4c:	0f 90       	pop	r0
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	cf 91       	pop	r28
    3b58:	df 91       	pop	r29
    3b5a:	08 95       	ret

00003b5c <ADC_u8EnableInterrupt>:

uint8_t ADC_u8EnableInterrupt(void (*fnCallBack)(void)) {
    3b5c:	df 93       	push	r29
    3b5e:	cf 93       	push	r28
    3b60:	00 d0       	rcall	.+0      	; 0x3b62 <ADC_u8EnableInterrupt+0x6>
    3b62:	0f 92       	push	r0
    3b64:	cd b7       	in	r28, 0x3d	; 61
    3b66:	de b7       	in	r29, 0x3e	; 62
    3b68:	9b 83       	std	Y+3, r25	; 0x03
    3b6a:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t u8ErrorState = ADC_OK;
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
    3b6e:	89 83       	std	Y+1, r24	; 0x01
	if (fnCallBack != NULL) // Check that the pointer is not pointing to NULL
    3b70:	8a 81       	ldd	r24, Y+2	; 0x02
    3b72:	9b 81       	ldd	r25, Y+3	; 0x03
    3b74:	00 97       	sbiw	r24, 0x00	; 0
    3b76:	41 f1       	breq	.+80     	; 0x3bc8 <ADC_u8EnableInterrupt+0x6c>
	{
		//Set the Call Back Function for the Interrupt
		ADC_callBack = fnCallBack;
    3b78:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b7c:	90 93 ff 01 	sts	0x01FF, r25
    3b80:	80 93 fe 01 	sts	0x01FE, r24
		//Enable Global Interrupt
		SET_BIT(SREG_REG, I_BIT);
    3b84:	af e5       	ldi	r26, 0x5F	; 95
    3b86:	b0 e0       	ldi	r27, 0x00	; 0
    3b88:	ef e5       	ldi	r30, 0x5F	; 95
    3b8a:	f0 e0       	ldi	r31, 0x00	; 0
    3b8c:	80 81       	ld	r24, Z
    3b8e:	80 68       	ori	r24, 0x80	; 128
    3b90:	8c 93       	st	X, r24
		//Enable ADC Interrupt
		SET_BIT(ADCSRA_REG, ADIE);
    3b92:	a6 e2       	ldi	r26, 0x26	; 38
    3b94:	b0 e0       	ldi	r27, 0x00	; 0
    3b96:	e6 e2       	ldi	r30, 0x26	; 38
    3b98:	f0 e0       	ldi	r31, 0x00	; 0
    3b9a:	80 81       	ld	r24, Z
    3b9c:	88 60       	ori	r24, 0x08	; 8
    3b9e:	8c 93       	st	X, r24

		//Check that change took place
		if ((GET_BIT(SREG_REG, I_BIT) == 0) || (GET_BIT(ADCSRA_REG,ADIE) == 0))
    3ba0:	ef e5       	ldi	r30, 0x5F	; 95
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	80 81       	ld	r24, Z
    3ba6:	88 23       	and	r24, r24
    3ba8:	64 f4       	brge	.+24     	; 0x3bc2 <ADC_u8EnableInterrupt+0x66>
    3baa:	e6 e2       	ldi	r30, 0x26	; 38
    3bac:	f0 e0       	ldi	r31, 0x00	; 0
    3bae:	80 81       	ld	r24, Z
    3bb0:	86 95       	lsr	r24
    3bb2:	86 95       	lsr	r24
    3bb4:	86 95       	lsr	r24
    3bb6:	88 2f       	mov	r24, r24
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	81 70       	andi	r24, 0x01	; 1
    3bbc:	90 70       	andi	r25, 0x00	; 0
    3bbe:	00 97       	sbiw	r24, 0x00	; 0
    3bc0:	29 f4       	brne	.+10     	; 0x3bcc <ADC_u8EnableInterrupt+0x70>
		{
			u8ErrorState = ADC_EnableInterrupt_Error;
    3bc2:	85 e5       	ldi	r24, 0x55	; 85
    3bc4:	89 83       	std	Y+1, r24	; 0x01
    3bc6:	02 c0       	rjmp	.+4      	; 0x3bcc <ADC_u8EnableInterrupt+0x70>
		}

	}
	else
	{
		u8ErrorState = ADC_NULL_INPUT;
    3bc8:	87 e5       	ldi	r24, 0x57	; 87
    3bca:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
    3bcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bce:	0f 90       	pop	r0
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	cf 91       	pop	r28
    3bd6:	df 91       	pop	r29
    3bd8:	08 95       	ret

00003bda <ADC_u8DisableInterrupt>:

uint8_t ADC_u8DisableInterrupt(void) {
    3bda:	df 93       	push	r29
    3bdc:	cf 93       	push	r28
    3bde:	0f 92       	push	r0
    3be0:	cd b7       	in	r28, 0x3d	; 61
    3be2:	de b7       	in	r29, 0x3e	; 62

	uint8_t u8ErrorState = ADC_OK;
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	89 83       	std	Y+1, r24	; 0x01

	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG, ADIE);
    3be8:	a6 e2       	ldi	r26, 0x26	; 38
    3bea:	b0 e0       	ldi	r27, 0x00	; 0
    3bec:	e6 e2       	ldi	r30, 0x26	; 38
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	80 81       	ld	r24, Z
    3bf2:	87 7f       	andi	r24, 0xF7	; 247
    3bf4:	8c 93       	st	X, r24

	//Check that change took place
	if ( GET_BIT(ADCSRA_REG,ADIE) != 0)
    3bf6:	e6 e2       	ldi	r30, 0x26	; 38
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	80 81       	ld	r24, Z
    3bfc:	86 95       	lsr	r24
    3bfe:	86 95       	lsr	r24
    3c00:	86 95       	lsr	r24
    3c02:	88 2f       	mov	r24, r24
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	81 70       	andi	r24, 0x01	; 1
    3c08:	90 70       	andi	r25, 0x00	; 0
    3c0a:	88 23       	and	r24, r24
    3c0c:	11 f0       	breq	.+4      	; 0x3c12 <ADC_u8DisableInterrupt+0x38>
	{
		//if the interrupt is not disabled then return Error
		u8ErrorState = ADC_DisableInterrupt_Error;
    3c0e:	86 e5       	ldi	r24, 0x56	; 86
    3c10:	89 83       	std	Y+1, r24	; 0x01
	}else
	{
		//NOP
	}

	return u8ErrorState;
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c14:	0f 90       	pop	r0
    3c16:	cf 91       	pop	r28
    3c18:	df 91       	pop	r29
    3c1a:	08 95       	ret

00003c1c <__vector_16>:

void __vector_16(void) {
    3c1c:	1f 92       	push	r1
    3c1e:	0f 92       	push	r0
    3c20:	0f b6       	in	r0, 0x3f	; 63
    3c22:	0f 92       	push	r0
    3c24:	11 24       	eor	r1, r1
    3c26:	2f 93       	push	r18
    3c28:	3f 93       	push	r19
    3c2a:	4f 93       	push	r20
    3c2c:	5f 93       	push	r21
    3c2e:	6f 93       	push	r22
    3c30:	7f 93       	push	r23
    3c32:	8f 93       	push	r24
    3c34:	9f 93       	push	r25
    3c36:	af 93       	push	r26
    3c38:	bf 93       	push	r27
    3c3a:	ef 93       	push	r30
    3c3c:	ff 93       	push	r31
    3c3e:	df 93       	push	r29
    3c40:	cf 93       	push	r28
    3c42:	cd b7       	in	r28, 0x3d	; 61
    3c44:	de b7       	in	r29, 0x3e	; 62
	if (ADC_callBack != NULL) {
    3c46:	80 91 fe 01 	lds	r24, 0x01FE
    3c4a:	90 91 ff 01 	lds	r25, 0x01FF
    3c4e:	00 97       	sbiw	r24, 0x00	; 0
    3c50:	29 f0       	breq	.+10     	; 0x3c5c <__vector_16+0x40>
		ADC_callBack();
    3c52:	e0 91 fe 01 	lds	r30, 0x01FE
    3c56:	f0 91 ff 01 	lds	r31, 0x01FF
    3c5a:	09 95       	icall
	}
}
    3c5c:	cf 91       	pop	r28
    3c5e:	df 91       	pop	r29
    3c60:	ff 91       	pop	r31
    3c62:	ef 91       	pop	r30
    3c64:	bf 91       	pop	r27
    3c66:	af 91       	pop	r26
    3c68:	9f 91       	pop	r25
    3c6a:	8f 91       	pop	r24
    3c6c:	7f 91       	pop	r23
    3c6e:	6f 91       	pop	r22
    3c70:	5f 91       	pop	r21
    3c72:	4f 91       	pop	r20
    3c74:	3f 91       	pop	r19
    3c76:	2f 91       	pop	r18
    3c78:	0f 90       	pop	r0
    3c7a:	0f be       	out	0x3f, r0	; 63
    3c7c:	0f 90       	pop	r0
    3c7e:	1f 90       	pop	r1
    3c80:	18 95       	reti

00003c82 <TEMP_u8Init>:




void TEMP_u8Init(void)
{
    3c82:	df 93       	push	r29
    3c84:	cf 93       	push	r28
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTA,PIN0,DIO_INPUT);
    3c8a:	80 e0       	ldi	r24, 0x00	; 0
    3c8c:	60 e0       	ldi	r22, 0x00	; 0
    3c8e:	40 e0       	ldi	r20, 0x00	; 0
    3c90:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>


	ADC_u8Init();
    3c94:	0e 94 80 1c 	call	0x3900	; 0x3900 <ADC_u8Init>
}
    3c98:	cf 91       	pop	r28
    3c9a:	df 91       	pop	r29
    3c9c:	08 95       	ret

00003c9e <TEMP_u8GetRead>:


uint8_t TEMP_u8GetRead(TEMPElement_t* TempElement, uint16_t* f32TempReading)
{
    3c9e:	df 93       	push	r29
    3ca0:	cf 93       	push	r28
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
    3ca6:	2b 97       	sbiw	r28, 0x0b	; 11
    3ca8:	0f b6       	in	r0, 0x3f	; 63
    3caa:	f8 94       	cli
    3cac:	de bf       	out	0x3e, r29	; 62
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	cd bf       	out	0x3d, r28	; 61
    3cb2:	99 87       	std	Y+9, r25	; 0x09
    3cb4:	88 87       	std	Y+8, r24	; 0x08
    3cb6:	7b 87       	std	Y+11, r23	; 0x0b
    3cb8:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t u8ErrorState = TEMP_OK;
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16PreRead=0;
    3cbe:	1b 82       	std	Y+3, r1	; 0x03
    3cc0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8ReadingCounts=0;
    3cc2:	19 82       	std	Y+1, r1	; 0x01
	if (TempElement!= NULL && f32TempReading !=NULL )
    3cc4:	88 85       	ldd	r24, Y+8	; 0x08
    3cc6:	99 85       	ldd	r25, Y+9	; 0x09
    3cc8:	00 97       	sbiw	r24, 0x00	; 0
    3cca:	09 f4       	brne	.+2      	; 0x3cce <TEMP_u8GetRead+0x30>
    3ccc:	47 c0       	rjmp	.+142    	; 0x3d5c <TEMP_u8GetRead+0xbe>
    3cce:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cd2:	00 97       	sbiw	r24, 0x00	; 0
    3cd4:	09 f4       	brne	.+2      	; 0x3cd8 <TEMP_u8GetRead+0x3a>
    3cd6:	42 c0       	rjmp	.+132    	; 0x3d5c <TEMP_u8GetRead+0xbe>
	{
		ADCChannel_t TempSensor = {TempElement->port,TempElement->pin, ADC_SINGLE_CONVERSION};
    3cd8:	e8 85       	ldd	r30, Y+8	; 0x08
    3cda:	f9 85       	ldd	r31, Y+9	; 0x09
    3cdc:	90 81       	ld	r25, Z
    3cde:	e8 85       	ldd	r30, Y+8	; 0x08
    3ce0:	f9 85       	ldd	r31, Y+9	; 0x09
    3ce2:	81 81       	ldd	r24, Z+1	; 0x01
    3ce4:	9d 83       	std	Y+5, r25	; 0x05
    3ce6:	8e 83       	std	Y+6, r24	; 0x06
    3ce8:	88 e0       	ldi	r24, 0x08	; 8
    3cea:	8f 83       	std	Y+7, r24	; 0x07
		if (ADC_u8StartConversion(&TempSensor) != ADC_OK)
    3cec:	ce 01       	movw	r24, r28
    3cee:	05 96       	adiw	r24, 0x05	; 5
    3cf0:	0e 94 af 1c 	call	0x395e	; 0x395e <ADC_u8StartConversion>
    3cf4:	81 30       	cpi	r24, 0x01	; 1
    3cf6:	11 f1       	breq	.+68     	; 0x3d3c <TEMP_u8GetRead+0x9e>
		{
			u8ErrorState = TEMP_ADC_Error;
    3cf8:	83 e0       	ldi	r24, 0x03	; 3
    3cfa:	8c 83       	std	Y+4, r24	; 0x04
    3cfc:	31 c0       	rjmp	.+98     	; 0x3d60 <TEMP_u8GetRead+0xc2>
		}else
		{
			while (u8ReadingCounts< TOTAL_READINGS_COUNT )
			{
				ADC_u8GetVolt(f32TempReading);
    3cfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d00:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d02:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <ADC_u8GetVolt>
				*f32TempReading = ((uint16_t)*f32TempReading/10);
    3d06:	ea 85       	ldd	r30, Y+10	; 0x0a
    3d08:	fb 85       	ldd	r31, Y+11	; 0x0b
    3d0a:	80 81       	ld	r24, Z
    3d0c:	91 81       	ldd	r25, Z+1	; 0x01
    3d0e:	2a e0       	ldi	r18, 0x0A	; 10
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	b9 01       	movw	r22, r18
    3d14:	0e 94 76 27 	call	0x4eec	; 0x4eec <__udivmodhi4>
    3d18:	cb 01       	movw	r24, r22
    3d1a:	ea 85       	ldd	r30, Y+10	; 0x0a
    3d1c:	fb 85       	ldd	r31, Y+11	; 0x0b
    3d1e:	91 83       	std	Z+1, r25	; 0x01
    3d20:	80 83       	st	Z, r24
				u8ReadingCounts++;
    3d22:	89 81       	ldd	r24, Y+1	; 0x01
    3d24:	8f 5f       	subi	r24, 0xFF	; 255
    3d26:	89 83       	std	Y+1, r24	; 0x01
				u16PreRead += *f32TempReading;
    3d28:	ea 85       	ldd	r30, Y+10	; 0x0a
    3d2a:	fb 85       	ldd	r31, Y+11	; 0x0b
    3d2c:	20 81       	ld	r18, Z
    3d2e:	31 81       	ldd	r19, Z+1	; 0x01
    3d30:	8a 81       	ldd	r24, Y+2	; 0x02
    3d32:	9b 81       	ldd	r25, Y+3	; 0x03
    3d34:	82 0f       	add	r24, r18
    3d36:	93 1f       	adc	r25, r19
    3d38:	9b 83       	std	Y+3, r25	; 0x03
    3d3a:	8a 83       	std	Y+2, r24	; 0x02
		if (ADC_u8StartConversion(&TempSensor) != ADC_OK)
		{
			u8ErrorState = TEMP_ADC_Error;
		}else
		{
			while (u8ReadingCounts< TOTAL_READINGS_COUNT )
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	84 36       	cpi	r24, 0x64	; 100
    3d40:	f0 f2       	brcs	.-68     	; 0x3cfe <TEMP_u8GetRead+0x60>
				ADC_u8GetVolt(f32TempReading);
				*f32TempReading = ((uint16_t)*f32TempReading/10);
				u8ReadingCounts++;
				u16PreRead += *f32TempReading;
			}
			*f32TempReading = u16PreRead/TOTAL_READINGS_COUNT;
    3d42:	8a 81       	ldd	r24, Y+2	; 0x02
    3d44:	9b 81       	ldd	r25, Y+3	; 0x03
    3d46:	24 e6       	ldi	r18, 0x64	; 100
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	b9 01       	movw	r22, r18
    3d4c:	0e 94 76 27 	call	0x4eec	; 0x4eec <__udivmodhi4>
    3d50:	cb 01       	movw	r24, r22
    3d52:	ea 85       	ldd	r30, Y+10	; 0x0a
    3d54:	fb 85       	ldd	r31, Y+11	; 0x0b
    3d56:	91 83       	std	Z+1, r25	; 0x01
    3d58:	80 83       	st	Z, r24
    3d5a:	02 c0       	rjmp	.+4      	; 0x3d60 <TEMP_u8GetRead+0xc2>

		}

	}else
	{
		u8ErrorState = TEMP_NULL_INPUT;
    3d5c:	82 e0       	ldi	r24, 0x02	; 2
    3d5e:	8c 83       	std	Y+4, r24	; 0x04
	}

	return u8ErrorState;
    3d60:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3d62:	2b 96       	adiw	r28, 0x0b	; 11
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61
    3d6e:	cf 91       	pop	r28
    3d70:	df 91       	pop	r29
    3d72:	08 95       	ret

00003d74 <MOTOR_init>:
 */

#include "MOTOR_interface.h"

// function to initialze motor 
uint8_t MOTOR_init(MotorDef_t* MotorElement) {
    3d74:	df 93       	push	r29
    3d76:	cf 93       	push	r28
    3d78:	00 d0       	rcall	.+0      	; 0x3d7a <MOTOR_init+0x6>
    3d7a:	00 d0       	rcall	.+0      	; 0x3d7c <MOTOR_init+0x8>
    3d7c:	0f 92       	push	r0
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
    3d82:	9d 83       	std	Y+5, r25	; 0x05
    3d84:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	89 83       	std	Y+1, r24	; 0x01
	// set PWM pin channel to motor 
	PWMPin_t MotorDef = { MotorElement->port, MotorElement->ENPin };
    3d8a:	ec 81       	ldd	r30, Y+4	; 0x04
    3d8c:	fd 81       	ldd	r31, Y+5	; 0x05
    3d8e:	90 81       	ld	r25, Z
    3d90:	ec 81       	ldd	r30, Y+4	; 0x04
    3d92:	fd 81       	ldd	r31, Y+5	; 0x05
    3d94:	83 81       	ldd	r24, Z+3	; 0x03
    3d96:	9a 83       	std	Y+2, r25	; 0x02
    3d98:	8b 83       	std	Y+3, r24	; 0x03
	// set direction of motor's pins as OUTPUT pins
	u8ErrorState = DIO_u8SetPinDirection(MotorElement->port,
    3d9a:	ec 81       	ldd	r30, Y+4	; 0x04
    3d9c:	fd 81       	ldd	r31, Y+5	; 0x05
    3d9e:	80 81       	ld	r24, Z
    3da0:	ec 81       	ldd	r30, Y+4	; 0x04
    3da2:	fd 81       	ldd	r31, Y+5	; 0x05
    3da4:	91 81       	ldd	r25, Z+1	; 0x01
    3da6:	69 2f       	mov	r22, r25
    3da8:	42 e0       	ldi	r20, 0x02	; 2
    3daa:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
    3dae:	89 83       	std	Y+1, r24	; 0x01
			MotorElement->DirPinA, DIO_OUTPUT);
	if (u8ErrorState == STD_TYPES_OK) {
    3db0:	89 81       	ldd	r24, Y+1	; 0x01
    3db2:	81 30       	cpi	r24, 0x01	; 1
    3db4:	59 f4       	brne	.+22     	; 0x3dcc <MOTOR_init+0x58>
		u8ErrorState = DIO_u8SetPinDirection(MotorElement->port,
    3db6:	ec 81       	ldd	r30, Y+4	; 0x04
    3db8:	fd 81       	ldd	r31, Y+5	; 0x05
    3dba:	80 81       	ld	r24, Z
    3dbc:	ec 81       	ldd	r30, Y+4	; 0x04
    3dbe:	fd 81       	ldd	r31, Y+5	; 0x05
    3dc0:	92 81       	ldd	r25, Z+2	; 0x02
    3dc2:	69 2f       	mov	r22, r25
    3dc4:	42 e0       	ldi	r20, 0x02	; 2
    3dc6:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
    3dca:	89 83       	std	Y+1, r24	; 0x01
				MotorElement->DirPinB, DIO_OUTPUT);
	}
	if (u8ErrorState == STD_TYPES_OK) {
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	81 30       	cpi	r24, 0x01	; 1
    3dd0:	59 f4       	brne	.+22     	; 0x3de8 <MOTOR_init+0x74>
		u8ErrorState = DIO_u8SetPinDirection(MotorElement->port,
    3dd2:	ec 81       	ldd	r30, Y+4	; 0x04
    3dd4:	fd 81       	ldd	r31, Y+5	; 0x05
    3dd6:	80 81       	ld	r24, Z
    3dd8:	ec 81       	ldd	r30, Y+4	; 0x04
    3dda:	fd 81       	ldd	r31, Y+5	; 0x05
    3ddc:	93 81       	ldd	r25, Z+3	; 0x03
    3dde:	69 2f       	mov	r22, r25
    3de0:	42 e0       	ldi	r20, 0x02	; 2
    3de2:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
    3de6:	89 83       	std	Y+1, r24	; 0x01
				MotorElement->ENPin, DIO_OUTPUT);
	}
	// initialize PWM 
	PWM_u8Init(MotorElement->ChannelNum, &MotorDef);
    3de8:	ec 81       	ldd	r30, Y+4	; 0x04
    3dea:	fd 81       	ldd	r31, Y+5	; 0x05
    3dec:	84 81       	ldd	r24, Z+4	; 0x04
    3dee:	9e 01       	movw	r18, r28
    3df0:	2e 5f       	subi	r18, 0xFE	; 254
    3df2:	3f 4f       	sbci	r19, 0xFF	; 255
    3df4:	b9 01       	movw	r22, r18
    3df6:	0e 94 6e 11 	call	0x22dc	; 0x22dc <PWM_u8Init>
	return u8ErrorState;
    3dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dfc:	0f 90       	pop	r0
    3dfe:	0f 90       	pop	r0
    3e00:	0f 90       	pop	r0
    3e02:	0f 90       	pop	r0
    3e04:	0f 90       	pop	r0
    3e06:	cf 91       	pop	r28
    3e08:	df 91       	pop	r29
    3e0a:	08 95       	ret

00003e0c <MOTOR_Move>:

// function make motor move with specific speed and direction
uint8_t MOTOR_Move(MotorDef_t* MotorElement, uint8_t MotorSpeed,
		uint8_t MotorDir) {
    3e0c:	df 93       	push	r29
    3e0e:	cf 93       	push	r28
    3e10:	cd b7       	in	r28, 0x3d	; 61
    3e12:	de b7       	in	r29, 0x3e	; 62
    3e14:	27 97       	sbiw	r28, 0x07	; 7
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	f8 94       	cli
    3e1a:	de bf       	out	0x3e, r29	; 62
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	cd bf       	out	0x3d, r28	; 61
    3e20:	9b 83       	std	Y+3, r25	; 0x03
    3e22:	8a 83       	std	Y+2, r24	; 0x02
    3e24:	6c 83       	std	Y+4, r22	; 0x04
    3e26:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t u8ErrorState = STD_TYPES_OK;
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	89 83       	std	Y+1, r24	; 0x01

	if (MotorElement != NULL && MotorSpeed > 0 && MotorSpeed < 100) {
    3e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e30:	00 97       	sbiw	r24, 0x00	; 0
    3e32:	09 f4       	brne	.+2      	; 0x3e36 <MOTOR_Move+0x2a>
    3e34:	5d c0       	rjmp	.+186    	; 0x3ef0 <MOTOR_Move+0xe4>
    3e36:	8c 81       	ldd	r24, Y+4	; 0x04
    3e38:	88 23       	and	r24, r24
    3e3a:	09 f4       	brne	.+2      	; 0x3e3e <MOTOR_Move+0x32>
    3e3c:	59 c0       	rjmp	.+178    	; 0x3ef0 <MOTOR_Move+0xe4>
    3e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e40:	84 36       	cpi	r24, 0x64	; 100
    3e42:	08 f0       	brcs	.+2      	; 0x3e46 <MOTOR_Move+0x3a>
    3e44:	55 c0       	rjmp	.+170    	; 0x3ef0 <MOTOR_Move+0xe4>
		switch (MotorDir) {
    3e46:	8d 81       	ldd	r24, Y+5	; 0x05
    3e48:	28 2f       	mov	r18, r24
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	3f 83       	std	Y+7, r19	; 0x07
    3e4e:	2e 83       	std	Y+6, r18	; 0x06
    3e50:	8e 81       	ldd	r24, Y+6	; 0x06
    3e52:	9f 81       	ldd	r25, Y+7	; 0x07
    3e54:	00 97       	sbiw	r24, 0x00	; 0
    3e56:	31 f0       	breq	.+12     	; 0x3e64 <MOTOR_Move+0x58>
    3e58:	2e 81       	ldd	r18, Y+6	; 0x06
    3e5a:	3f 81       	ldd	r19, Y+7	; 0x07
    3e5c:	21 30       	cpi	r18, 0x01	; 1
    3e5e:	31 05       	cpc	r19, r1
    3e60:	19 f1       	breq	.+70     	; 0x3ea8 <MOTOR_Move+0x9c>
    3e62:	44 c0       	rjmp	.+136    	; 0x3eec <MOTOR_Move+0xe0>
		// set direction pins and duty cycle to control in speed and direction 
		case CLOCKWISE:
			DIO_u8SetPinData(MotorElement->port, MotorElement->DirPinA,
    3e64:	ea 81       	ldd	r30, Y+2	; 0x02
    3e66:	fb 81       	ldd	r31, Y+3	; 0x03
    3e68:	80 81       	ld	r24, Z
    3e6a:	ea 81       	ldd	r30, Y+2	; 0x02
    3e6c:	fb 81       	ldd	r31, Y+3	; 0x03
    3e6e:	91 81       	ldd	r25, Z+1	; 0x01
    3e70:	69 2f       	mov	r22, r25
    3e72:	41 e0       	ldi	r20, 0x01	; 1
    3e74:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
					DIO_HIGH);
			DIO_u8SetPinData(MotorElement->port, MotorElement->DirPinB,
    3e78:	ea 81       	ldd	r30, Y+2	; 0x02
    3e7a:	fb 81       	ldd	r31, Y+3	; 0x03
    3e7c:	80 81       	ld	r24, Z
    3e7e:	ea 81       	ldd	r30, Y+2	; 0x02
    3e80:	fb 81       	ldd	r31, Y+3	; 0x03
    3e82:	92 81       	ldd	r25, Z+2	; 0x02
    3e84:	69 2f       	mov	r22, r25
    3e86:	40 e0       	ldi	r20, 0x00	; 0
    3e88:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
					DIO_LOW);
			PWM_u8DutyCycle(MotorElement->ChannelNum, MotorSpeed);
    3e8c:	ea 81       	ldd	r30, Y+2	; 0x02
    3e8e:	fb 81       	ldd	r31, Y+3	; 0x03
    3e90:	94 81       	ldd	r25, Z+4	; 0x04
    3e92:	8c 81       	ldd	r24, Y+4	; 0x04
    3e94:	28 2f       	mov	r18, r24
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	40 e0       	ldi	r20, 0x00	; 0
    3e9a:	50 e0       	ldi	r21, 0x00	; 0
    3e9c:	89 2f       	mov	r24, r25
    3e9e:	ba 01       	movw	r22, r20
    3ea0:	a9 01       	movw	r20, r18
    3ea2:	0e 94 a8 11 	call	0x2350	; 0x2350 <PWM_u8DutyCycle>
    3ea6:	25 c0       	rjmp	.+74     	; 0x3ef2 <MOTOR_Move+0xe6>
			break;
		case ANTI_CLOCKWISE:
			DIO_u8SetPinData(MotorElement->port, MotorElement->DirPinA,
    3ea8:	ea 81       	ldd	r30, Y+2	; 0x02
    3eaa:	fb 81       	ldd	r31, Y+3	; 0x03
    3eac:	80 81       	ld	r24, Z
    3eae:	ea 81       	ldd	r30, Y+2	; 0x02
    3eb0:	fb 81       	ldd	r31, Y+3	; 0x03
    3eb2:	91 81       	ldd	r25, Z+1	; 0x01
    3eb4:	69 2f       	mov	r22, r25
    3eb6:	40 e0       	ldi	r20, 0x00	; 0
    3eb8:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
					DIO_LOW);
			DIO_u8SetPinData(MotorElement->port, MotorElement->DirPinB,
    3ebc:	ea 81       	ldd	r30, Y+2	; 0x02
    3ebe:	fb 81       	ldd	r31, Y+3	; 0x03
    3ec0:	80 81       	ld	r24, Z
    3ec2:	ea 81       	ldd	r30, Y+2	; 0x02
    3ec4:	fb 81       	ldd	r31, Y+3	; 0x03
    3ec6:	92 81       	ldd	r25, Z+2	; 0x02
    3ec8:	69 2f       	mov	r22, r25
    3eca:	41 e0       	ldi	r20, 0x01	; 1
    3ecc:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
					DIO_HIGH);
			PWM_u8DutyCycle(MotorElement->ChannelNum, MotorSpeed);
    3ed0:	ea 81       	ldd	r30, Y+2	; 0x02
    3ed2:	fb 81       	ldd	r31, Y+3	; 0x03
    3ed4:	94 81       	ldd	r25, Z+4	; 0x04
    3ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ed8:	28 2f       	mov	r18, r24
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	40 e0       	ldi	r20, 0x00	; 0
    3ede:	50 e0       	ldi	r21, 0x00	; 0
    3ee0:	89 2f       	mov	r24, r25
    3ee2:	ba 01       	movw	r22, r20
    3ee4:	a9 01       	movw	r20, r18
    3ee6:	0e 94 a8 11 	call	0x2350	; 0x2350 <PWM_u8DutyCycle>
    3eea:	03 c0       	rjmp	.+6      	; 0x3ef2 <MOTOR_Move+0xe6>
			break;
		default:
			u8ErrorState = STD_TYPES_NOK;
    3eec:	19 82       	std	Y+1, r1	; 0x01
    3eee:	01 c0       	rjmp	.+2      	; 0x3ef2 <MOTOR_Move+0xe6>
			break;
		}

	} else {
		u8ErrorState = STD_TYPES_NOK;
    3ef0:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ef4:	27 96       	adiw	r28, 0x07	; 7
    3ef6:	0f b6       	in	r0, 0x3f	; 63
    3ef8:	f8 94       	cli
    3efa:	de bf       	out	0x3e, r29	; 62
    3efc:	0f be       	out	0x3f, r0	; 63
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	cf 91       	pop	r28
    3f02:	df 91       	pop	r29
    3f04:	08 95       	ret

00003f06 <MOTOR_Stop>:

// function make motor stop 
uint8_t MOTOR_Stop(MotorDef_t* MotorElement) {
    3f06:	df 93       	push	r29
    3f08:	cf 93       	push	r28
    3f0a:	00 d0       	rcall	.+0      	; 0x3f0c <MOTOR_Stop+0x6>
    3f0c:	0f 92       	push	r0
    3f0e:	cd b7       	in	r28, 0x3d	; 61
    3f10:	de b7       	in	r29, 0x3e	; 62
    3f12:	9b 83       	std	Y+3, r25	; 0x03
    3f14:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = STD_TYPES_OK;
    3f16:	81 e0       	ldi	r24, 0x01	; 1
    3f18:	89 83       	std	Y+1, r24	; 0x01
	if (MotorElement != NULL) {
    3f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f1e:	00 97       	sbiw	r24, 0x00	; 0
    3f20:	a9 f0       	breq	.+42     	; 0x3f4c <MOTOR_Stop+0x46>
		// make 2 pins LOW force motor to stop 
		DIO_u8SetPinData(MotorElement->port, MotorElement->DirPinA, DIO_LOW);
    3f22:	ea 81       	ldd	r30, Y+2	; 0x02
    3f24:	fb 81       	ldd	r31, Y+3	; 0x03
    3f26:	80 81       	ld	r24, Z
    3f28:	ea 81       	ldd	r30, Y+2	; 0x02
    3f2a:	fb 81       	ldd	r31, Y+3	; 0x03
    3f2c:	91 81       	ldd	r25, Z+1	; 0x01
    3f2e:	69 2f       	mov	r22, r25
    3f30:	40 e0       	ldi	r20, 0x00	; 0
    3f32:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
		DIO_u8SetPinData(MotorElement->port, MotorElement->DirPinB, DIO_LOW);
    3f36:	ea 81       	ldd	r30, Y+2	; 0x02
    3f38:	fb 81       	ldd	r31, Y+3	; 0x03
    3f3a:	80 81       	ld	r24, Z
    3f3c:	ea 81       	ldd	r30, Y+2	; 0x02
    3f3e:	fb 81       	ldd	r31, Y+3	; 0x03
    3f40:	92 81       	ldd	r25, Z+2	; 0x02
    3f42:	69 2f       	mov	r22, r25
    3f44:	40 e0       	ldi	r20, 0x00	; 0
    3f46:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    3f4a:	01 c0       	rjmp	.+2      	; 0x3f4e <MOTOR_Stop+0x48>
	} else {
		u8ErrorState = STD_TYPES_NOK;
    3f4c:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    3f4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
    3f56:	cf 91       	pop	r28
    3f58:	df 91       	pop	r29
    3f5a:	08 95       	ret

00003f5c <LED_u8Init>:
 */

#include "LED.h"

// function to initialize LED 
uint8_t LED_u8Init(LED_t* led) {
    3f5c:	df 93       	push	r29
    3f5e:	cf 93       	push	r28
    3f60:	00 d0       	rcall	.+0      	; 0x3f62 <LED_u8Init+0x6>
    3f62:	cd b7       	in	r28, 0x3d	; 61
    3f64:	de b7       	in	r29, 0x3e	; 62
    3f66:	9a 83       	std	Y+2, r25	; 0x02
    3f68:	89 83       	std	Y+1, r24	; 0x01
	// set direction of LED's pin to OUTPUT 
	return DIO_u8SetPinDirection(led->port, led->pin, DIO_OUTPUT);
    3f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    3f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    3f6e:	80 81       	ld	r24, Z
    3f70:	e9 81       	ldd	r30, Y+1	; 0x01
    3f72:	fa 81       	ldd	r31, Y+2	; 0x02
    3f74:	91 81       	ldd	r25, Z+1	; 0x01
    3f76:	69 2f       	mov	r22, r25
    3f78:	42 e0       	ldi	r20, 0x02	; 2
    3f7a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
}
    3f7e:	0f 90       	pop	r0
    3f80:	0f 90       	pop	r0
    3f82:	cf 91       	pop	r28
    3f84:	df 91       	pop	r29
    3f86:	08 95       	ret

00003f88 <LED_u8On>:

// function ta turn LED on
uint8_t LED_u8On(LED_t* led) {
    3f88:	df 93       	push	r29
    3f8a:	cf 93       	push	r28
    3f8c:	00 d0       	rcall	.+0      	; 0x3f8e <LED_u8On+0x6>
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	9a 83       	std	Y+2, r25	; 0x02
    3f94:	89 83       	std	Y+1, r24	; 0x01
	// set LED's pin to HIGH 
	return DIO_u8SetPinData(led->port, led->pin, DIO_HIGH);
    3f96:	e9 81       	ldd	r30, Y+1	; 0x01
    3f98:	fa 81       	ldd	r31, Y+2	; 0x02
    3f9a:	80 81       	ld	r24, Z
    3f9c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f9e:	fa 81       	ldd	r31, Y+2	; 0x02
    3fa0:	91 81       	ldd	r25, Z+1	; 0x01
    3fa2:	69 2f       	mov	r22, r25
    3fa4:	41 e0       	ldi	r20, 0x01	; 1
    3fa6:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
}
    3faa:	0f 90       	pop	r0
    3fac:	0f 90       	pop	r0
    3fae:	cf 91       	pop	r28
    3fb0:	df 91       	pop	r29
    3fb2:	08 95       	ret

00003fb4 <LED_u8Off>:

// function ta turn LED off
uint8_t LED_u8Off(LED_t* led) {
    3fb4:	df 93       	push	r29
    3fb6:	cf 93       	push	r28
    3fb8:	00 d0       	rcall	.+0      	; 0x3fba <LED_u8Off+0x6>
    3fba:	cd b7       	in	r28, 0x3d	; 61
    3fbc:	de b7       	in	r29, 0x3e	; 62
    3fbe:	9a 83       	std	Y+2, r25	; 0x02
    3fc0:	89 83       	std	Y+1, r24	; 0x01
	// set LED's pin to LOW
	return DIO_u8SetPinData(led->port, led->pin, DIO_LOW);
    3fc2:	e9 81       	ldd	r30, Y+1	; 0x01
    3fc4:	fa 81       	ldd	r31, Y+2	; 0x02
    3fc6:	80 81       	ld	r24, Z
    3fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    3fca:	fa 81       	ldd	r31, Y+2	; 0x02
    3fcc:	91 81       	ldd	r25, Z+1	; 0x01
    3fce:	69 2f       	mov	r22, r25
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
    3fd2:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
}
    3fd6:	0f 90       	pop	r0
    3fd8:	0f 90       	pop	r0
    3fda:	cf 91       	pop	r28
    3fdc:	df 91       	pop	r29
    3fde:	08 95       	ret

00003fe0 <LED_u8Toggle>:

// function to toggle LED state
uint8_t LED_u8Toggle(LED_t* led) {
    3fe0:	df 93       	push	r29
    3fe2:	cf 93       	push	r28
    3fe4:	00 d0       	rcall	.+0      	; 0x3fe6 <LED_u8Toggle+0x6>
    3fe6:	cd b7       	in	r28, 0x3d	; 61
    3fe8:	de b7       	in	r29, 0x3e	; 62
    3fea:	9a 83       	std	Y+2, r25	; 0x02
    3fec:	89 83       	std	Y+1, r24	; 0x01
	// toggle LED's pin state 
	return DIO_u8TogglePinData(led->port, led->pin);
    3fee:	e9 81       	ldd	r30, Y+1	; 0x01
    3ff0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ff2:	80 81       	ld	r24, Z
    3ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ff8:	91 81       	ldd	r25, Z+1	; 0x01
    3ffa:	69 2f       	mov	r22, r25
    3ffc:	0e 94 04 1b 	call	0x3608	; 0x3608 <DIO_u8TogglePinData>
}
    4000:	0f 90       	pop	r0
    4002:	0f 90       	pop	r0
    4004:	cf 91       	pop	r28
    4006:	df 91       	pop	r29
    4008:	08 95       	ret

0000400a <LCD_u8Init>:
#include "../LED/LED.h"
/*
* brief: This function is used to initialize pin directions of the LCD as defined in the configurations and in 4-Bit Mode
* return: (output) the Error state of the function 0 if an error happens and 1 otherwise
*/
uint8_t LCD_u8Init(void) {
    400a:	df 93       	push	r29
    400c:	cf 93       	push	r28
    400e:	0f 92       	push	r0
    4010:	cd b7       	in	r28, 0x3d	; 61
    4012:	de b7       	in	r29, 0x3e	; 62
	uint8_t state = STD_TYPES_OK;
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	89 83       	std	Y+1, r24	; 0x01
	state = DIO_u8SetPinDirection(RS_PORT, RS_PIN, DIO_OUTPUT);
    4018:	80 e0       	ldi	r24, 0x00	; 0
    401a:	61 e0       	ldi	r22, 0x01	; 1
    401c:	42 e0       	ldi	r20, 0x02	; 2
    401e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
    4022:	89 83       	std	Y+1, r24	; 0x01
	if(state == STD_TYPES_OK){
    4024:	89 81       	ldd	r24, Y+1	; 0x01
    4026:	81 30       	cpi	r24, 0x01	; 1
    4028:	31 f4       	brne	.+12     	; 0x4036 <LCD_u8Init+0x2c>
		state = DIO_u8SetPinDirection(RW_PORT, RW_PIN, DIO_OUTPUT);
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	62 e0       	ldi	r22, 0x02	; 2
    402e:	42 e0       	ldi	r20, 0x02	; 2
    4030:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
    4034:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	81 30       	cpi	r24, 0x01	; 1
    403a:	31 f4       	brne	.+12     	; 0x4048 <LCD_u8Init+0x3e>
		state = DIO_u8SetPinDirection(E_PORT, E_PIN, DIO_OUTPUT);
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	63 e0       	ldi	r22, 0x03	; 3
    4040:	42 e0       	ldi	r20, 0x02	; 2
    4042:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
    4046:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    4048:	89 81       	ldd	r24, Y+1	; 0x01
    404a:	81 30       	cpi	r24, 0x01	; 1
    404c:	31 f4       	brne	.+12     	; 0x405a <LCD_u8Init+0x50>
		state = DIO_u8SetPinDirection(D4_PORT, D4_PIN, DIO_OUTPUT);
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	64 e0       	ldi	r22, 0x04	; 4
    4052:	42 e0       	ldi	r20, 0x02	; 2
    4054:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
    4058:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    405a:	89 81       	ldd	r24, Y+1	; 0x01
    405c:	81 30       	cpi	r24, 0x01	; 1
    405e:	31 f4       	brne	.+12     	; 0x406c <LCD_u8Init+0x62>
		state = DIO_u8SetPinDirection(D4_PORT, D5_PIN, DIO_OUTPUT);
    4060:	80 e0       	ldi	r24, 0x00	; 0
    4062:	65 e0       	ldi	r22, 0x05	; 5
    4064:	42 e0       	ldi	r20, 0x02	; 2
    4066:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
    406a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    406c:	89 81       	ldd	r24, Y+1	; 0x01
    406e:	81 30       	cpi	r24, 0x01	; 1
    4070:	31 f4       	brne	.+12     	; 0x407e <LCD_u8Init+0x74>
		state = DIO_u8SetPinDirection(D4_PORT, D6_PIN, DIO_OUTPUT);
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	66 e0       	ldi	r22, 0x06	; 6
    4076:	42 e0       	ldi	r20, 0x02	; 2
    4078:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
    407c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	81 30       	cpi	r24, 0x01	; 1
    4082:	31 f4       	brne	.+12     	; 0x4090 <LCD_u8Init+0x86>
		state = DIO_u8SetPinDirection(D4_PORT, D7_PIN, DIO_OUTPUT);
    4084:	80 e0       	ldi	r24, 0x00	; 0
    4086:	67 e0       	ldi	r22, 0x07	; 7
    4088:	42 e0       	ldi	r20, 0x02	; 2
    408a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
    408e:	89 83       	std	Y+1, r24	; 0x01
	}

	if(state == STD_TYPES_OK){
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	81 30       	cpi	r24, 0x01	; 1
    4094:	21 f4       	brne	.+8      	; 0x409e <LCD_u8Init+0x94>
		state = LCD_u8SendCommand(0x33);
    4096:	83 e3       	ldi	r24, 0x33	; 51
    4098:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_u8SendCommand>
    409c:	89 83       	std	Y+1, r24	; 0x01
	}

	if(state == STD_TYPES_OK){
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	81 30       	cpi	r24, 0x01	; 1
    40a2:	21 f4       	brne	.+8      	; 0x40ac <LCD_u8Init+0xa2>
		state = LCD_u8SendCommand(0x32);
    40a4:	82 e3       	ldi	r24, 0x32	; 50
    40a6:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_u8SendCommand>
    40aa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	81 30       	cpi	r24, 0x01	; 1
    40b0:	21 f4       	brne	.+8      	; 0x40ba <LCD_u8Init+0xb0>
		state = LCD_u8SendCommand(0x28);
    40b2:	88 e2       	ldi	r24, 0x28	; 40
    40b4:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_u8SendCommand>
    40b8:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    40ba:	89 81       	ldd	r24, Y+1	; 0x01
    40bc:	81 30       	cpi	r24, 0x01	; 1
    40be:	21 f4       	brne	.+8      	; 0x40c8 <LCD_u8Init+0xbe>
		state = LCD_u8SendCommand(0x0c);
    40c0:	8c e0       	ldi	r24, 0x0C	; 12
    40c2:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_u8SendCommand>
    40c6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	81 30       	cpi	r24, 0x01	; 1
    40cc:	21 f4       	brne	.+8      	; 0x40d6 <LCD_u8Init+0xcc>
		state = LCD_u8SendCommand(0x06);
    40ce:	86 e0       	ldi	r24, 0x06	; 6
    40d0:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_u8SendCommand>
    40d4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    40d6:	89 81       	ldd	r24, Y+1	; 0x01
    40d8:	81 30       	cpi	r24, 0x01	; 1
    40da:	21 f4       	brne	.+8      	; 0x40e4 <LCD_u8Init+0xda>
		state = LCD_u8SendCommand(0x01);
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_u8SendCommand>
    40e2:	89 83       	std	Y+1, r24	; 0x01
	}

	return state;
    40e4:	89 81       	ldd	r24, Y+1	; 0x01

}
    40e6:	0f 90       	pop	r0
    40e8:	cf 91       	pop	r28
    40ea:	df 91       	pop	r29
    40ec:	08 95       	ret

000040ee <LCD_u8SendCommand>:
/*
* brief: This function is used to send a command to the LCD
* param.: (input) the command to be sent
* return: (output) the Error state of the function 0 if an error happens and 1 otherwise
*/
uint8_t LCD_u8SendCommand(uint8_t command){
    40ee:	df 93       	push	r29
    40f0:	cf 93       	push	r28
    40f2:	00 d0       	rcall	.+0      	; 0x40f4 <LCD_u8SendCommand+0x6>
    40f4:	0f 92       	push	r0
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
    40fa:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t state = STD_TYPES_OK;	
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t bit = GET_BIT(command, 4);
    4100:	8b 81       	ldd	r24, Y+3	; 0x03
    4102:	82 95       	swap	r24
    4104:	8f 70       	andi	r24, 0x0F	; 15
    4106:	81 70       	andi	r24, 0x01	; 1
    4108:	89 83       	std	Y+1, r24	; 0x01
	state = DIO_u8SetPinData(D4_PORT,D4_PIN,bit);
    410a:	80 e0       	ldi	r24, 0x00	; 0
    410c:	64 e0       	ldi	r22, 0x04	; 4
    410e:	49 81       	ldd	r20, Y+1	; 0x01
    4110:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    4114:	8a 83       	std	Y+2, r24	; 0x02
	if(state == STD_TYPES_OK){
    4116:	8a 81       	ldd	r24, Y+2	; 0x02
    4118:	81 30       	cpi	r24, 0x01	; 1
    411a:	61 f4       	brne	.+24     	; 0x4134 <LCD_u8SendCommand+0x46>
		bit = GET_BIT(command, 5);
    411c:	8b 81       	ldd	r24, Y+3	; 0x03
    411e:	82 95       	swap	r24
    4120:	86 95       	lsr	r24
    4122:	87 70       	andi	r24, 0x07	; 7
    4124:	81 70       	andi	r24, 0x01	; 1
    4126:	89 83       	std	Y+1, r24	; 0x01
		state = DIO_u8SetPinData(D5_PORT,D5_PIN,bit);
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	65 e0       	ldi	r22, 0x05	; 5
    412c:	49 81       	ldd	r20, Y+1	; 0x01
    412e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    4132:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(state == STD_TYPES_OK){
    4134:	8a 81       	ldd	r24, Y+2	; 0x02
    4136:	81 30       	cpi	r24, 0x01	; 1
    4138:	61 f4       	brne	.+24     	; 0x4152 <LCD_u8SendCommand+0x64>
		bit = GET_BIT(command, 6);
    413a:	8b 81       	ldd	r24, Y+3	; 0x03
    413c:	82 95       	swap	r24
    413e:	86 95       	lsr	r24
    4140:	86 95       	lsr	r24
    4142:	83 70       	andi	r24, 0x03	; 3
    4144:	81 70       	andi	r24, 0x01	; 1
    4146:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D6_PORT,D6_PIN,bit);
    4148:	80 e0       	ldi	r24, 0x00	; 0
    414a:	66 e0       	ldi	r22, 0x06	; 6
    414c:	49 81       	ldd	r20, Y+1	; 0x01
    414e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    4152:	8a 81       	ldd	r24, Y+2	; 0x02
    4154:	81 30       	cpi	r24, 0x01	; 1
    4156:	51 f4       	brne	.+20     	; 0x416c <LCD_u8SendCommand+0x7e>
		bit = GET_BIT(command, 7);
    4158:	8b 81       	ldd	r24, Y+3	; 0x03
    415a:	88 1f       	adc	r24, r24
    415c:	88 27       	eor	r24, r24
    415e:	88 1f       	adc	r24, r24
    4160:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D7_PORT,D7_PIN,bit);
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	67 e0       	ldi	r22, 0x07	; 7
    4166:	49 81       	ldd	r20, Y+1	; 0x01
    4168:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    416c:	8a 81       	ldd	r24, Y+2	; 0x02
    416e:	81 30       	cpi	r24, 0x01	; 1
    4170:	31 f4       	brne	.+12     	; 0x417e <LCD_u8SendCommand+0x90>
		state = DIO_u8SetPinData(RS_PORT,RS_PIN,DIO_LOW);
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	61 e0       	ldi	r22, 0x01	; 1
    4176:	40 e0       	ldi	r20, 0x00	; 0
    4178:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    417c:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    417e:	8a 81       	ldd	r24, Y+2	; 0x02
    4180:	81 30       	cpi	r24, 0x01	; 1
    4182:	31 f4       	brne	.+12     	; 0x4190 <LCD_u8SendCommand+0xa2>
		state = DIO_u8SetPinData(RW_PORT,RW_PIN,DIO_LOW);
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	62 e0       	ldi	r22, 0x02	; 2
    4188:	40 e0       	ldi	r20, 0x00	; 0
    418a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    418e:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    4190:	8a 81       	ldd	r24, Y+2	; 0x02
    4192:	81 30       	cpi	r24, 0x01	; 1
    4194:	31 f4       	brne	.+12     	; 0x41a2 <LCD_u8SendCommand+0xb4>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_HIGH);
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	63 e0       	ldi	r22, 0x03	; 3
    419a:	41 e0       	ldi	r20, 0x01	; 1
    419c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    41a0:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(state == STD_TYPES_OK){
    41a2:	8a 81       	ldd	r24, Y+2	; 0x02
    41a4:	81 30       	cpi	r24, 0x01	; 1
    41a6:	51 f4       	brne	.+20     	; 0x41bc <LCD_u8SendCommand+0xce>
		TIMER0_u8PollingDelay(2);
    41a8:	82 e0       	ldi	r24, 0x02	; 2
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_LOW);
    41b0:	80 e0       	ldi	r24, 0x00	; 0
    41b2:	63 e0       	ldi	r22, 0x03	; 3
    41b4:	40 e0       	ldi	r20, 0x00	; 0
    41b6:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    41ba:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(state == STD_TYPES_OK){
    41bc:	8a 81       	ldd	r24, Y+2	; 0x02
    41be:	81 30       	cpi	r24, 0x01	; 1
    41c0:	49 f4       	brne	.+18     	; 0x41d4 <LCD_u8SendCommand+0xe6>
		bit = GET_BIT(command, 0);
    41c2:	8b 81       	ldd	r24, Y+3	; 0x03
    41c4:	81 70       	andi	r24, 0x01	; 1
    41c6:	89 83       	std	Y+1, r24	; 0x01
		state = DIO_u8SetPinData(D4_PORT,D4_PIN,bit);
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	64 e0       	ldi	r22, 0x04	; 4
    41cc:	49 81       	ldd	r20, Y+1	; 0x01
    41ce:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    41d2:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    41d4:	8a 81       	ldd	r24, Y+2	; 0x02
    41d6:	81 30       	cpi	r24, 0x01	; 1
    41d8:	49 f4       	brne	.+18     	; 0x41ec <LCD_u8SendCommand+0xfe>
		bit = GET_BIT(command, 1);
    41da:	8b 81       	ldd	r24, Y+3	; 0x03
    41dc:	86 95       	lsr	r24
    41de:	81 70       	andi	r24, 0x01	; 1
    41e0:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D5_PORT,D5_PIN,bit);
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	65 e0       	ldi	r22, 0x05	; 5
    41e6:	49 81       	ldd	r20, Y+1	; 0x01
    41e8:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    41ec:	8a 81       	ldd	r24, Y+2	; 0x02
    41ee:	81 30       	cpi	r24, 0x01	; 1
    41f0:	51 f4       	brne	.+20     	; 0x4206 <LCD_u8SendCommand+0x118>
		bit = GET_BIT(command, 2);
    41f2:	8b 81       	ldd	r24, Y+3	; 0x03
    41f4:	86 95       	lsr	r24
    41f6:	86 95       	lsr	r24
    41f8:	81 70       	andi	r24, 0x01	; 1
    41fa:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D6_PORT,D6_PIN,bit);
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	66 e0       	ldi	r22, 0x06	; 6
    4200:	49 81       	ldd	r20, Y+1	; 0x01
    4202:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    4206:	8a 81       	ldd	r24, Y+2	; 0x02
    4208:	81 30       	cpi	r24, 0x01	; 1
    420a:	59 f4       	brne	.+22     	; 0x4222 <LCD_u8SendCommand+0x134>
		bit = GET_BIT(command, 3);
    420c:	8b 81       	ldd	r24, Y+3	; 0x03
    420e:	86 95       	lsr	r24
    4210:	86 95       	lsr	r24
    4212:	86 95       	lsr	r24
    4214:	81 70       	andi	r24, 0x01	; 1
    4216:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D7_PORT,D7_PIN,bit);
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	67 e0       	ldi	r22, 0x07	; 7
    421c:	49 81       	ldd	r20, Y+1	; 0x01
    421e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    4222:	8a 81       	ldd	r24, Y+2	; 0x02
    4224:	81 30       	cpi	r24, 0x01	; 1
    4226:	31 f4       	brne	.+12     	; 0x4234 <LCD_u8SendCommand+0x146>
		state = DIO_u8SetPinData(RS_PORT,RS_PIN,DIO_LOW);
    4228:	80 e0       	ldi	r24, 0x00	; 0
    422a:	61 e0       	ldi	r22, 0x01	; 1
    422c:	40 e0       	ldi	r20, 0x00	; 0
    422e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    4232:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    4234:	8a 81       	ldd	r24, Y+2	; 0x02
    4236:	81 30       	cpi	r24, 0x01	; 1
    4238:	31 f4       	brne	.+12     	; 0x4246 <LCD_u8SendCommand+0x158>
		state = DIO_u8SetPinData(RW_PORT,RW_PIN,DIO_LOW);
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	62 e0       	ldi	r22, 0x02	; 2
    423e:	40 e0       	ldi	r20, 0x00	; 0
    4240:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    4244:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    4246:	8a 81       	ldd	r24, Y+2	; 0x02
    4248:	81 30       	cpi	r24, 0x01	; 1
    424a:	31 f4       	brne	.+12     	; 0x4258 <LCD_u8SendCommand+0x16a>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_HIGH);
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	63 e0       	ldi	r22, 0x03	; 3
    4250:	41 e0       	ldi	r20, 0x01	; 1
    4252:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    4256:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    4258:	8a 81       	ldd	r24, Y+2	; 0x02
    425a:	81 30       	cpi	r24, 0x01	; 1
    425c:	51 f4       	brne	.+20     	; 0x4272 <LCD_u8SendCommand+0x184>
		TIMER0_u8PollingDelay(2);
    425e:	82 e0       	ldi	r24, 0x02	; 2
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_LOW);
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	63 e0       	ldi	r22, 0x03	; 3
    426a:	40 e0       	ldi	r20, 0x00	; 0
    426c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    4270:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    4272:	8a 81       	ldd	r24, Y+2	; 0x02
    4274:	81 30       	cpi	r24, 0x01	; 1
    4276:	29 f4       	brne	.+10     	; 0x4282 <LCD_u8SendCommand+0x194>
		state = TIMER0_u8PollingDelay(5);	
    4278:	85 e0       	ldi	r24, 0x05	; 5
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
    4280:	8a 83       	std	Y+2, r24	; 0x02
	}
	return state;
    4282:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
    4288:	0f 90       	pop	r0
    428a:	cf 91       	pop	r28
    428c:	df 91       	pop	r29
    428e:	08 95       	ret

00004290 <LCD_u8SendData>:
/*
* brief: This function is used to send a data character to he LCD
* param.: (input) the data to be sent
* return: (output) the Error state of the function 0 if an error happens and 1 otherwise
*/
uint8_t LCD_u8SendData(uint8_t data) {
    4290:	df 93       	push	r29
    4292:	cf 93       	push	r28
    4294:	00 d0       	rcall	.+0      	; 0x4296 <LCD_u8SendData+0x6>
    4296:	0f 92       	push	r0
    4298:	cd b7       	in	r28, 0x3d	; 61
    429a:	de b7       	in	r29, 0x3e	; 62
    429c:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t state = STD_TYPES_OK;
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t bit = GET_BIT(data, 4);
    42a2:	8b 81       	ldd	r24, Y+3	; 0x03
    42a4:	82 95       	swap	r24
    42a6:	8f 70       	andi	r24, 0x0F	; 15
    42a8:	81 70       	andi	r24, 0x01	; 1
    42aa:	89 83       	std	Y+1, r24	; 0x01
	state = DIO_u8SetPinData(D4_PORT,D4_PIN,bit);
    42ac:	80 e0       	ldi	r24, 0x00	; 0
    42ae:	64 e0       	ldi	r22, 0x04	; 4
    42b0:	49 81       	ldd	r20, Y+1	; 0x01
    42b2:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    42b6:	8a 83       	std	Y+2, r24	; 0x02
	if(state == STD_TYPES_OK){
    42b8:	8a 81       	ldd	r24, Y+2	; 0x02
    42ba:	81 30       	cpi	r24, 0x01	; 1
    42bc:	61 f4       	brne	.+24     	; 0x42d6 <LCD_u8SendData+0x46>
		bit = GET_BIT(data, 5);
    42be:	8b 81       	ldd	r24, Y+3	; 0x03
    42c0:	82 95       	swap	r24
    42c2:	86 95       	lsr	r24
    42c4:	87 70       	andi	r24, 0x07	; 7
    42c6:	81 70       	andi	r24, 0x01	; 1
    42c8:	89 83       	std	Y+1, r24	; 0x01
		state = DIO_u8SetPinData(D5_PORT,D5_PIN,bit);
    42ca:	80 e0       	ldi	r24, 0x00	; 0
    42cc:	65 e0       	ldi	r22, 0x05	; 5
    42ce:	49 81       	ldd	r20, Y+1	; 0x01
    42d0:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    42d4:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    42d6:	8a 81       	ldd	r24, Y+2	; 0x02
    42d8:	81 30       	cpi	r24, 0x01	; 1
    42da:	61 f4       	brne	.+24     	; 0x42f4 <LCD_u8SendData+0x64>
		bit = GET_BIT(data, 6);
    42dc:	8b 81       	ldd	r24, Y+3	; 0x03
    42de:	82 95       	swap	r24
    42e0:	86 95       	lsr	r24
    42e2:	86 95       	lsr	r24
    42e4:	83 70       	andi	r24, 0x03	; 3
    42e6:	81 70       	andi	r24, 0x01	; 1
    42e8:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D6_PORT,D6_PIN,bit);
    42ea:	80 e0       	ldi	r24, 0x00	; 0
    42ec:	66 e0       	ldi	r22, 0x06	; 6
    42ee:	49 81       	ldd	r20, Y+1	; 0x01
    42f0:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    42f4:	8a 81       	ldd	r24, Y+2	; 0x02
    42f6:	81 30       	cpi	r24, 0x01	; 1
    42f8:	51 f4       	brne	.+20     	; 0x430e <LCD_u8SendData+0x7e>
		bit = GET_BIT(data, 7);
    42fa:	8b 81       	ldd	r24, Y+3	; 0x03
    42fc:	88 1f       	adc	r24, r24
    42fe:	88 27       	eor	r24, r24
    4300:	88 1f       	adc	r24, r24
    4302:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D7_PORT,D7_PIN,bit);
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	67 e0       	ldi	r22, 0x07	; 7
    4308:	49 81       	ldd	r20, Y+1	; 0x01
    430a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    430e:	8a 81       	ldd	r24, Y+2	; 0x02
    4310:	81 30       	cpi	r24, 0x01	; 1
    4312:	31 f4       	brne	.+12     	; 0x4320 <LCD_u8SendData+0x90>
		state = DIO_u8SetPinData(RS_PORT,RS_PIN,DIO_HIGH);
    4314:	80 e0       	ldi	r24, 0x00	; 0
    4316:	61 e0       	ldi	r22, 0x01	; 1
    4318:	41 e0       	ldi	r20, 0x01	; 1
    431a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    431e:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    4320:	8a 81       	ldd	r24, Y+2	; 0x02
    4322:	81 30       	cpi	r24, 0x01	; 1
    4324:	31 f4       	brne	.+12     	; 0x4332 <LCD_u8SendData+0xa2>
		state = DIO_u8SetPinData(RW_PORT,RW_PIN,DIO_LOW);
    4326:	80 e0       	ldi	r24, 0x00	; 0
    4328:	62 e0       	ldi	r22, 0x02	; 2
    432a:	40 e0       	ldi	r20, 0x00	; 0
    432c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    4330:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    4332:	8a 81       	ldd	r24, Y+2	; 0x02
    4334:	81 30       	cpi	r24, 0x01	; 1
    4336:	31 f4       	brne	.+12     	; 0x4344 <LCD_u8SendData+0xb4>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_HIGH);
    4338:	80 e0       	ldi	r24, 0x00	; 0
    433a:	63 e0       	ldi	r22, 0x03	; 3
    433c:	41 e0       	ldi	r20, 0x01	; 1
    433e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    4342:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    4344:	8a 81       	ldd	r24, Y+2	; 0x02
    4346:	81 30       	cpi	r24, 0x01	; 1
    4348:	51 f4       	brne	.+20     	; 0x435e <LCD_u8SendData+0xce>
		TIMER0_u8PollingDelay(2);
    434a:	82 e0       	ldi	r24, 0x02	; 2
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_LOW);
    4352:	80 e0       	ldi	r24, 0x00	; 0
    4354:	63 e0       	ldi	r22, 0x03	; 3
    4356:	40 e0       	ldi	r20, 0x00	; 0
    4358:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    435c:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(state == STD_TYPES_OK){
    435e:	8a 81       	ldd	r24, Y+2	; 0x02
    4360:	81 30       	cpi	r24, 0x01	; 1
    4362:	49 f4       	brne	.+18     	; 0x4376 <LCD_u8SendData+0xe6>
		bit = GET_BIT(data, 0);
    4364:	8b 81       	ldd	r24, Y+3	; 0x03
    4366:	81 70       	andi	r24, 0x01	; 1
    4368:	89 83       	std	Y+1, r24	; 0x01
		state = DIO_u8SetPinData(D4_PORT,D4_PIN,bit);
    436a:	80 e0       	ldi	r24, 0x00	; 0
    436c:	64 e0       	ldi	r22, 0x04	; 4
    436e:	49 81       	ldd	r20, Y+1	; 0x01
    4370:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    4374:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    4376:	8a 81       	ldd	r24, Y+2	; 0x02
    4378:	81 30       	cpi	r24, 0x01	; 1
    437a:	49 f4       	brne	.+18     	; 0x438e <LCD_u8SendData+0xfe>
		bit = GET_BIT(data, 1);
    437c:	8b 81       	ldd	r24, Y+3	; 0x03
    437e:	86 95       	lsr	r24
    4380:	81 70       	andi	r24, 0x01	; 1
    4382:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D5_PORT,D5_PIN,bit);
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	65 e0       	ldi	r22, 0x05	; 5
    4388:	49 81       	ldd	r20, Y+1	; 0x01
    438a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    438e:	8a 81       	ldd	r24, Y+2	; 0x02
    4390:	81 30       	cpi	r24, 0x01	; 1
    4392:	51 f4       	brne	.+20     	; 0x43a8 <LCD_u8SendData+0x118>
		bit = GET_BIT(data, 2);
    4394:	8b 81       	ldd	r24, Y+3	; 0x03
    4396:	86 95       	lsr	r24
    4398:	86 95       	lsr	r24
    439a:	81 70       	andi	r24, 0x01	; 1
    439c:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D6_PORT,D6_PIN,bit);
    439e:	80 e0       	ldi	r24, 0x00	; 0
    43a0:	66 e0       	ldi	r22, 0x06	; 6
    43a2:	49 81       	ldd	r20, Y+1	; 0x01
    43a4:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    43a8:	8a 81       	ldd	r24, Y+2	; 0x02
    43aa:	81 30       	cpi	r24, 0x01	; 1
    43ac:	59 f4       	brne	.+22     	; 0x43c4 <LCD_u8SendData+0x134>
		bit = GET_BIT(data, 3);
    43ae:	8b 81       	ldd	r24, Y+3	; 0x03
    43b0:	86 95       	lsr	r24
    43b2:	86 95       	lsr	r24
    43b4:	86 95       	lsr	r24
    43b6:	81 70       	andi	r24, 0x01	; 1
    43b8:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D7_PORT,D7_PIN,bit);
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	67 e0       	ldi	r22, 0x07	; 7
    43be:	49 81       	ldd	r20, Y+1	; 0x01
    43c0:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    43c4:	8a 81       	ldd	r24, Y+2	; 0x02
    43c6:	81 30       	cpi	r24, 0x01	; 1
    43c8:	31 f4       	brne	.+12     	; 0x43d6 <LCD_u8SendData+0x146>
		state = DIO_u8SetPinData(RS_PORT,RS_PIN,DIO_HIGH);
    43ca:	80 e0       	ldi	r24, 0x00	; 0
    43cc:	61 e0       	ldi	r22, 0x01	; 1
    43ce:	41 e0       	ldi	r20, 0x01	; 1
    43d0:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    43d4:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    43d6:	8a 81       	ldd	r24, Y+2	; 0x02
    43d8:	81 30       	cpi	r24, 0x01	; 1
    43da:	31 f4       	brne	.+12     	; 0x43e8 <LCD_u8SendData+0x158>
		state = DIO_u8SetPinData(RW_PORT,RW_PIN,DIO_LOW);
    43dc:	80 e0       	ldi	r24, 0x00	; 0
    43de:	62 e0       	ldi	r22, 0x02	; 2
    43e0:	40 e0       	ldi	r20, 0x00	; 0
    43e2:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    43e6:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    43e8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ea:	81 30       	cpi	r24, 0x01	; 1
    43ec:	31 f4       	brne	.+12     	; 0x43fa <LCD_u8SendData+0x16a>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_HIGH);
    43ee:	80 e0       	ldi	r24, 0x00	; 0
    43f0:	63 e0       	ldi	r22, 0x03	; 3
    43f2:	41 e0       	ldi	r20, 0x01	; 1
    43f4:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    43f8:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    43fa:	8a 81       	ldd	r24, Y+2	; 0x02
    43fc:	81 30       	cpi	r24, 0x01	; 1
    43fe:	51 f4       	brne	.+20     	; 0x4414 <LCD_u8SendData+0x184>
		TIMER0_u8PollingDelay(2);
    4400:	82 e0       	ldi	r24, 0x02	; 2
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_LOW);
    4408:	80 e0       	ldi	r24, 0x00	; 0
    440a:	63 e0       	ldi	r22, 0x03	; 3
    440c:	40 e0       	ldi	r20, 0x00	; 0
    440e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
    4412:	8a 83       	std	Y+2, r24	; 0x02
	}
	state = TIMER0_u8PollingDelay(5);
    4414:	85 e0       	ldi	r24, 0x05	; 5
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
    441c:	8a 83       	std	Y+2, r24	; 0x02
	return state;
    441e:	8a 81       	ldd	r24, Y+2	; 0x02

}
    4420:	0f 90       	pop	r0
    4422:	0f 90       	pop	r0
    4424:	0f 90       	pop	r0
    4426:	cf 91       	pop	r28
    4428:	df 91       	pop	r29
    442a:	08 95       	ret

0000442c <LCD_u8SendString>:
/*
* brief: This function is used to send a string to the LCD
* param.: (input) a pointer to char pointing to the string
* return: (output) the Error state of the function 0 if an error happens and 1 otherwise
*/
uint8_t LCD_u8SendString(uint8_t *str){
    442c:	df 93       	push	r29
    442e:	cf 93       	push	r28
    4430:	00 d0       	rcall	.+0      	; 0x4432 <LCD_u8SendString+0x6>
    4432:	00 d0       	rcall	.+0      	; 0x4434 <LCD_u8SendString+0x8>
    4434:	0f 92       	push	r0
    4436:	cd b7       	in	r28, 0x3d	; 61
    4438:	de b7       	in	r29, 0x3e	; 62
    443a:	9d 83       	std	Y+5, r25	; 0x05
    443c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t state = STD_TYPES_OK;
    443e:	81 e0       	ldi	r24, 0x01	; 1
    4440:	8b 83       	std	Y+3, r24	; 0x03
	if(str == NULL){
    4442:	8c 81       	ldd	r24, Y+4	; 0x04
    4444:	9d 81       	ldd	r25, Y+5	; 0x05
    4446:	00 97       	sbiw	r24, 0x00	; 0
    4448:	11 f4       	brne	.+4      	; 0x444e <LCD_u8SendString+0x22>
		state = STD_TYPES_NOK;
    444a:	1b 82       	std	Y+3, r1	; 0x03
    444c:	1d c0       	rjmp	.+58     	; 0x4488 <LCD_u8SendString+0x5c>
	}
	else{
		uint8_t* iterator = str;
    444e:	8c 81       	ldd	r24, Y+4	; 0x04
    4450:	9d 81       	ldd	r25, Y+5	; 0x05
    4452:	9a 83       	std	Y+2, r25	; 0x02
    4454:	89 83       	std	Y+1, r24	; 0x01
    4456:	10 c0       	rjmp	.+32     	; 0x4478 <LCD_u8SendString+0x4c>
		while(*iterator != '\0' && state == STD_TYPES_OK){
			state = LCD_u8SendData(*iterator);
    4458:	e9 81       	ldd	r30, Y+1	; 0x01
    445a:	fa 81       	ldd	r31, Y+2	; 0x02
    445c:	80 81       	ld	r24, Z
    445e:	0e 94 48 21 	call	0x4290	; 0x4290 <LCD_u8SendData>
    4462:	8b 83       	std	Y+3, r24	; 0x03
			state = TIMER0_u8PollingDelay(1);
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
    446c:	8b 83       	std	Y+3, r24	; 0x03
			iterator++;
    446e:	89 81       	ldd	r24, Y+1	; 0x01
    4470:	9a 81       	ldd	r25, Y+2	; 0x02
    4472:	01 96       	adiw	r24, 0x01	; 1
    4474:	9a 83       	std	Y+2, r25	; 0x02
    4476:	89 83       	std	Y+1, r24	; 0x01
	if(str == NULL){
		state = STD_TYPES_NOK;
	}
	else{
		uint8_t* iterator = str;
		while(*iterator != '\0' && state == STD_TYPES_OK){
    4478:	e9 81       	ldd	r30, Y+1	; 0x01
    447a:	fa 81       	ldd	r31, Y+2	; 0x02
    447c:	80 81       	ld	r24, Z
    447e:	88 23       	and	r24, r24
    4480:	19 f0       	breq	.+6      	; 0x4488 <LCD_u8SendString+0x5c>
    4482:	8b 81       	ldd	r24, Y+3	; 0x03
    4484:	81 30       	cpi	r24, 0x01	; 1
    4486:	41 f3       	breq	.-48     	; 0x4458 <LCD_u8SendString+0x2c>
			state = LCD_u8SendData(*iterator);
			state = TIMER0_u8PollingDelay(1);
			iterator++;
		}	
	}
	return state;
    4488:	8b 81       	ldd	r24, Y+3	; 0x03

}
    448a:	0f 90       	pop	r0
    448c:	0f 90       	pop	r0
    448e:	0f 90       	pop	r0
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	cf 91       	pop	r28
    4496:	df 91       	pop	r29
    4498:	08 95       	ret

0000449a <LCD_u8SendNumber>:
* brief: This function is used to send a positive integer to the LCD
* param.: (input) the integer to be sent
* return: (output) the Error state of the function 0 if an error happens and 1 otherwise
*/
void LCD_u8SendNumber(uint16_t num)
{
    449a:	df 93       	push	r29
    449c:	cf 93       	push	r28
    449e:	00 d0       	rcall	.+0      	; 0x44a0 <LCD_u8SendNumber+0x6>
    44a0:	00 d0       	rcall	.+0      	; 0x44a2 <LCD_u8SendNumber+0x8>
    44a2:	cd b7       	in	r28, 0x3d	; 61
    44a4:	de b7       	in	r29, 0x3e	; 62
    44a6:	9c 83       	std	Y+4, r25	; 0x04
    44a8:	8b 83       	std	Y+3, r24	; 0x03

	uint16_t y = 1;
    44aa:	81 e0       	ldi	r24, 0x01	; 1
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	9a 83       	std	Y+2, r25	; 0x02
    44b0:	89 83       	std	Y+1, r24	; 0x01
	do{
		y = (y * 10) + (num % 10);
    44b2:	89 81       	ldd	r24, Y+1	; 0x01
    44b4:	9a 81       	ldd	r25, Y+2	; 0x02
    44b6:	9c 01       	movw	r18, r24
    44b8:	22 0f       	add	r18, r18
    44ba:	33 1f       	adc	r19, r19
    44bc:	c9 01       	movw	r24, r18
    44be:	88 0f       	add	r24, r24
    44c0:	99 1f       	adc	r25, r25
    44c2:	88 0f       	add	r24, r24
    44c4:	99 1f       	adc	r25, r25
    44c6:	f9 01       	movw	r30, r18
    44c8:	e8 0f       	add	r30, r24
    44ca:	f9 1f       	adc	r31, r25
    44cc:	8b 81       	ldd	r24, Y+3	; 0x03
    44ce:	9c 81       	ldd	r25, Y+4	; 0x04
    44d0:	2a e0       	ldi	r18, 0x0A	; 10
    44d2:	30 e0       	ldi	r19, 0x00	; 0
    44d4:	b9 01       	movw	r22, r18
    44d6:	0e 94 76 27 	call	0x4eec	; 0x4eec <__udivmodhi4>
    44da:	8e 0f       	add	r24, r30
    44dc:	9f 1f       	adc	r25, r31
    44de:	9a 83       	std	Y+2, r25	; 0x02
    44e0:	89 83       	std	Y+1, r24	; 0x01
		num = num /10;
    44e2:	8b 81       	ldd	r24, Y+3	; 0x03
    44e4:	9c 81       	ldd	r25, Y+4	; 0x04
    44e6:	2a e0       	ldi	r18, 0x0A	; 10
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	b9 01       	movw	r22, r18
    44ec:	0e 94 76 27 	call	0x4eec	; 0x4eec <__udivmodhi4>
    44f0:	cb 01       	movw	r24, r22
    44f2:	9c 83       	std	Y+4, r25	; 0x04
    44f4:	8b 83       	std	Y+3, r24	; 0x03
	}while(num > 0);
    44f6:	8b 81       	ldd	r24, Y+3	; 0x03
    44f8:	9c 81       	ldd	r25, Y+4	; 0x04
    44fa:	00 97       	sbiw	r24, 0x00	; 0
    44fc:	d1 f6       	brne	.-76     	; 0x44b2 <LCD_u8SendNumber+0x18>
    44fe:	14 c0       	rjmp	.+40     	; 0x4528 <LCD_u8SendNumber+0x8e>
	
	while(y>1)
	{
		LCD_u8SendData((y%10)+48);
    4500:	89 81       	ldd	r24, Y+1	; 0x01
    4502:	9a 81       	ldd	r25, Y+2	; 0x02
    4504:	2a e0       	ldi	r18, 0x0A	; 10
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	b9 01       	movw	r22, r18
    450a:	0e 94 76 27 	call	0x4eec	; 0x4eec <__udivmodhi4>
    450e:	80 5d       	subi	r24, 0xD0	; 208
    4510:	0e 94 48 21 	call	0x4290	; 0x4290 <LCD_u8SendData>
		y=y/10;
    4514:	89 81       	ldd	r24, Y+1	; 0x01
    4516:	9a 81       	ldd	r25, Y+2	; 0x02
    4518:	2a e0       	ldi	r18, 0x0A	; 10
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	b9 01       	movw	r22, r18
    451e:	0e 94 76 27 	call	0x4eec	; 0x4eec <__udivmodhi4>
    4522:	cb 01       	movw	r24, r22
    4524:	9a 83       	std	Y+2, r25	; 0x02
    4526:	89 83       	std	Y+1, r24	; 0x01
	do{
		y = (y * 10) + (num % 10);
		num = num /10;
	}while(num > 0);
	
	while(y>1)
    4528:	89 81       	ldd	r24, Y+1	; 0x01
    452a:	9a 81       	ldd	r25, Y+2	; 0x02
    452c:	82 30       	cpi	r24, 0x02	; 2
    452e:	91 05       	cpc	r25, r1
    4530:	38 f7       	brcc	.-50     	; 0x4500 <LCD_u8SendNumber+0x66>
	{
		LCD_u8SendData((y%10)+48);
		y=y/10;
	}
}
    4532:	0f 90       	pop	r0
    4534:	0f 90       	pop	r0
    4536:	0f 90       	pop	r0
    4538:	0f 90       	pop	r0
    453a:	cf 91       	pop	r28
    453c:	df 91       	pop	r29
    453e:	08 95       	ret

00004540 <LCD_u8SetCursor>:
* param.: (input) the row to set the cursor at, should be 0 or 1
* param.: (input) the column to set the cursor at, should be an integer between 0 and 15
* return: (output) the Error state of the function 0 if an error happens and 1 otherwise
*/
uint8_t LCD_u8SetCursor(uint8_t row, uint8_t col)
{	uint8_t state = STD_TYPES_OK;
    4540:	df 93       	push	r29
    4542:	cf 93       	push	r28
    4544:	00 d0       	rcall	.+0      	; 0x4546 <LCD_u8SetCursor+0x6>
    4546:	00 d0       	rcall	.+0      	; 0x4548 <LCD_u8SetCursor+0x8>
    4548:	0f 92       	push	r0
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
    454e:	8a 83       	std	Y+2, r24	; 0x02
    4550:	6b 83       	std	Y+3, r22	; 0x03
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	89 83       	std	Y+1, r24	; 0x01
	if(col > 15){
    4556:	8b 81       	ldd	r24, Y+3	; 0x03
    4558:	80 31       	cpi	r24, 0x10	; 16
    455a:	10 f0       	brcs	.+4      	; 0x4560 <LCD_u8SetCursor+0x20>
		state = STD_TYPES_NOK;
    455c:	19 82       	std	Y+1, r1	; 0x01
    455e:	18 c0       	rjmp	.+48     	; 0x4590 <LCD_u8SetCursor+0x50>
	}
	else{
		switch (row)
    4560:	8a 81       	ldd	r24, Y+2	; 0x02
    4562:	28 2f       	mov	r18, r24
    4564:	30 e0       	ldi	r19, 0x00	; 0
    4566:	3d 83       	std	Y+5, r19	; 0x05
    4568:	2c 83       	std	Y+4, r18	; 0x04
    456a:	8c 81       	ldd	r24, Y+4	; 0x04
    456c:	9d 81       	ldd	r25, Y+5	; 0x05
    456e:	00 97       	sbiw	r24, 0x00	; 0
    4570:	31 f0       	breq	.+12     	; 0x457e <LCD_u8SetCursor+0x3e>
    4572:	2c 81       	ldd	r18, Y+4	; 0x04
    4574:	3d 81       	ldd	r19, Y+5	; 0x05
    4576:	21 30       	cpi	r18, 0x01	; 1
    4578:	31 05       	cpc	r19, r1
    457a:	29 f0       	breq	.+10     	; 0x4586 <LCD_u8SetCursor+0x46>
    457c:	08 c0       	rjmp	.+16     	; 0x458e <LCD_u8SetCursor+0x4e>
		{
			case 0:
			col |= 0x80;
    457e:	8b 81       	ldd	r24, Y+3	; 0x03
    4580:	80 68       	ori	r24, 0x80	; 128
    4582:	8b 83       	std	Y+3, r24	; 0x03
    4584:	05 c0       	rjmp	.+10     	; 0x4590 <LCD_u8SetCursor+0x50>
			break;
			case 1:
			col |= 0xC0;
    4586:	8b 81       	ldd	r24, Y+3	; 0x03
    4588:	80 6c       	ori	r24, 0xC0	; 192
    458a:	8b 83       	std	Y+3, r24	; 0x03
    458c:	01 c0       	rjmp	.+2      	; 0x4590 <LCD_u8SetCursor+0x50>
			break;
			default:
			state = STD_TYPES_NOK;
    458e:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	if(state == STD_TYPES_OK){
    4590:	89 81       	ldd	r24, Y+1	; 0x01
    4592:	81 30       	cpi	r24, 0x01	; 1
    4594:	21 f4       	brne	.+8      	; 0x459e <LCD_u8SetCursor+0x5e>
		state = LCD_u8SendCommand(col);
    4596:	8b 81       	ldd	r24, Y+3	; 0x03
    4598:	0e 94 77 20 	call	0x40ee	; 0x40ee <LCD_u8SendCommand>
    459c:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    459e:	89 81       	ldd	r24, Y+1	; 0x01
}
    45a0:	0f 90       	pop	r0
    45a2:	0f 90       	pop	r0
    45a4:	0f 90       	pop	r0
    45a6:	0f 90       	pop	r0
    45a8:	0f 90       	pop	r0
    45aa:	cf 91       	pop	r28
    45ac:	df 91       	pop	r29
    45ae:	08 95       	ret

000045b0 <KEYPAD_u8Init>:
#include "../../MCAL/DELAY/TIMER0.h"
#include "KEYPAD_interface.h"
#include "KEYPAD_cfg.h"

// function to initialize keypad 
uint8_t KEYPAD_u8Init(void) {
    45b0:	df 93       	push	r29
    45b2:	cf 93       	push	r28
    45b4:	0f 92       	push	r0
    45b6:	cd b7       	in	r28, 0x3d	; 61
    45b8:	de b7       	in	r29, 0x3e	; 62
	/*step 1 : config Col pins as output*/
	DIO_u8SetPinDirection(COL_PORT, COL_PIN0, DIO_OUTPUT);
    45ba:	82 e0       	ldi	r24, 0x02	; 2
    45bc:	65 e0       	ldi	r22, 0x05	; 5
    45be:	42 e0       	ldi	r20, 0x02	; 2
    45c0:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(COL_PORT, COL_PIN1, DIO_OUTPUT);
    45c4:	82 e0       	ldi	r24, 0x02	; 2
    45c6:	66 e0       	ldi	r22, 0x06	; 6
    45c8:	42 e0       	ldi	r20, 0x02	; 2
    45ca:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(COL_PORT, COL_PIN2, DIO_OUTPUT);
    45ce:	82 e0       	ldi	r24, 0x02	; 2
    45d0:	67 e0       	ldi	r22, 0x07	; 7
    45d2:	42 e0       	ldi	r20, 0x02	; 2
    45d4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
	/*step 2 : config Rows pins as inputs , pull ups*/
	DIO_u8SetPinDirection(ROW_PORT, ROW_PIN0, DIO_INPUT_PULLUP);
    45d8:	82 e0       	ldi	r24, 0x02	; 2
    45da:	62 e0       	ldi	r22, 0x02	; 2
    45dc:	41 e0       	ldi	r20, 0x01	; 1
    45de:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(ROW_PORT, ROW_PIN1, DIO_INPUT_PULLUP);
    45e2:	82 e0       	ldi	r24, 0x02	; 2
    45e4:	63 e0       	ldi	r22, 0x03	; 3
    45e6:	41 e0       	ldi	r20, 0x01	; 1
    45e8:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(ROW_PORT, ROW_PIN2, DIO_INPUT_PULLUP);
    45ec:	82 e0       	ldi	r24, 0x02	; 2
    45ee:	64 e0       	ldi	r22, 0x04	; 4
    45f0:	41 e0       	ldi	r20, 0x01	; 1
    45f2:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
	/*step 3 : Initialize Col pins -> HIGH*/
	DIO_u8SetPinData(COL_PORT, COL_PIN0, DIO_HIGH);
    45f6:	82 e0       	ldi	r24, 0x02	; 2
    45f8:	65 e0       	ldi	r22, 0x05	; 5
    45fa:	41 e0       	ldi	r20, 0x01	; 1
    45fc:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	DIO_u8SetPinData(COL_PORT, COL_PIN1, DIO_HIGH);
    4600:	82 e0       	ldi	r24, 0x02	; 2
    4602:	66 e0       	ldi	r22, 0x06	; 6
    4604:	41 e0       	ldi	r20, 0x01	; 1
    4606:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	DIO_u8SetPinData(COL_PORT, COL_PIN2, DIO_HIGH);
    460a:	82 e0       	ldi	r24, 0x02	; 2
    460c:	67 e0       	ldi	r22, 0x07	; 7
    460e:	41 e0       	ldi	r20, 0x01	; 1
    4610:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
}
    4614:	0f 90       	pop	r0
    4616:	cf 91       	pop	r28
    4618:	df 91       	pop	r29
    461a:	08 95       	ret

0000461c <KEYPAD_u8GetPressedKey>:

// function to check which key is pressed 
uint8_t KEYPAD_u8GetPressedKey(uint8_t* KeyPressed) {
    461c:	df 93       	push	r29
    461e:	cf 93       	push	r28
    4620:	cd b7       	in	r28, 0x3d	; 61
    4622:	de b7       	in	r29, 0x3e	; 62
    4624:	65 97       	sbiw	r28, 0x15	; 21
    4626:	0f b6       	in	r0, 0x3f	; 63
    4628:	f8 94       	cli
    462a:	de bf       	out	0x3e, r29	; 62
    462c:	0f be       	out	0x3f, r0	; 63
    462e:	cd bf       	out	0x3d, r28	; 61
    4630:	98 8b       	std	Y+16, r25	; 0x10
    4632:	8f 87       	std	Y+15, r24	; 0x0f
	uint8_t u8ErrorState = STD_TYPES_OK;
    4634:	81 e0       	ldi	r24, 0x01	; 1
    4636:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t LOC_u8ReturnVal = KEYPAD_NO_PRESSED_KEY;
    4638:	8f ef       	ldi	r24, 0xFF	; 255
    463a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t col_indx;
	uint8_t row_indx;
	uint8_t Pin_State;
	uint8_t LOC_u8KEYPAD_Arr[KEYPAD_ROWS][KEYPAD_COL] = KEYPAD_VALUES;
    463c:	ce 01       	movw	r24, r28
    463e:	06 96       	adiw	r24, 0x06	; 6
    4640:	9a 8b       	std	Y+18, r25	; 0x12
    4642:	89 8b       	std	Y+17, r24	; 0x11
    4644:	ed ed       	ldi	r30, 0xDD	; 221
    4646:	f1 e0       	ldi	r31, 0x01	; 1
    4648:	fc 8b       	std	Y+20, r31	; 0x14
    464a:	eb 8b       	std	Y+19, r30	; 0x13
    464c:	f9 e0       	ldi	r31, 0x09	; 9
    464e:	fd 8b       	std	Y+21, r31	; 0x15
    4650:	eb 89       	ldd	r30, Y+19	; 0x13
    4652:	fc 89       	ldd	r31, Y+20	; 0x14
    4654:	00 80       	ld	r0, Z
    4656:	8b 89       	ldd	r24, Y+19	; 0x13
    4658:	9c 89       	ldd	r25, Y+20	; 0x14
    465a:	01 96       	adiw	r24, 0x01	; 1
    465c:	9c 8b       	std	Y+20, r25	; 0x14
    465e:	8b 8b       	std	Y+19, r24	; 0x13
    4660:	e9 89       	ldd	r30, Y+17	; 0x11
    4662:	fa 89       	ldd	r31, Y+18	; 0x12
    4664:	00 82       	st	Z, r0
    4666:	89 89       	ldd	r24, Y+17	; 0x11
    4668:	9a 89       	ldd	r25, Y+18	; 0x12
    466a:	01 96       	adiw	r24, 0x01	; 1
    466c:	9a 8b       	std	Y+18, r25	; 0x12
    466e:	89 8b       	std	Y+17, r24	; 0x11
    4670:	9d 89       	ldd	r25, Y+21	; 0x15
    4672:	91 50       	subi	r25, 0x01	; 1
    4674:	9d 8b       	std	Y+21, r25	; 0x15
    4676:	ed 89       	ldd	r30, Y+21	; 0x15
    4678:	ee 23       	and	r30, r30
    467a:	51 f7       	brne	.-44     	; 0x4650 <KEYPAD_u8GetPressedKey+0x34>

	if (KeyPressed != NULL) {
    467c:	8f 85       	ldd	r24, Y+15	; 0x0f
    467e:	98 89       	ldd	r25, Y+16	; 0x10
    4680:	00 97       	sbiw	r24, 0x00	; 0
    4682:	09 f4       	brne	.+2      	; 0x4686 <KEYPAD_u8GetPressedKey+0x6a>
    4684:	4d c0       	rjmp	.+154    	; 0x4720 <KEYPAD_u8GetPressedKey+0x104>
		for (col_indx = COL_S; col_indx < COL_MAX; col_indx++) {
    4686:	85 e0       	ldi	r24, 0x05	; 5
    4688:	8a 83       	std	Y+2, r24	; 0x02
    468a:	41 c0       	rjmp	.+130    	; 0x470e <KEYPAD_u8GetPressedKey+0xf2>
			/*select column and output low*/
			DIO_u8SetPinData(COL_PORT, col_indx, DIO_LOW);
    468c:	82 e0       	ldi	r24, 0x02	; 2
    468e:	6a 81       	ldd	r22, Y+2	; 0x02
    4690:	40 e0       	ldi	r20, 0x00	; 0
    4692:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
			for (row_indx = ROW_S; row_indx < ROW_MAX; row_indx++) {
    4696:	82 e0       	ldi	r24, 0x02	; 2
    4698:	89 83       	std	Y+1, r24	; 0x01
    469a:	2e c0       	rjmp	.+92     	; 0x46f8 <KEYPAD_u8GetPressedKey+0xdc>
				DIO_u8GetPinData(ROW_PORT, row_indx, &Pin_State);
    469c:	9e 01       	movw	r18, r28
    469e:	2b 5f       	subi	r18, 0xFB	; 251
    46a0:	3f 4f       	sbci	r19, 0xFF	; 255
    46a2:	82 e0       	ldi	r24, 0x02	; 2
    46a4:	69 81       	ldd	r22, Y+1	; 0x01
    46a6:	a9 01       	movw	r20, r18
    46a8:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_u8GetPinData>
				if (Pin_State == 0) /*if true -> PB is pressed*/
    46ac:	8d 81       	ldd	r24, Y+5	; 0x05
    46ae:	88 23       	and	r24, r24
    46b0:	01 f5       	brne	.+64     	; 0x46f2 <KEYPAD_u8GetPressedKey+0xd6>
				{
					LOC_u8ReturnVal =
    46b2:	89 81       	ldd	r24, Y+1	; 0x01
    46b4:	88 2f       	mov	r24, r24
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	9c 01       	movw	r18, r24
    46ba:	22 50       	subi	r18, 0x02	; 2
    46bc:	30 40       	sbci	r19, 0x00	; 0
    46be:	8a 81       	ldd	r24, Y+2	; 0x02
    46c0:	88 2f       	mov	r24, r24
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	ac 01       	movw	r20, r24
    46c6:	45 50       	subi	r20, 0x05	; 5
    46c8:	50 40       	sbci	r21, 0x00	; 0
    46ca:	c9 01       	movw	r24, r18
    46cc:	88 0f       	add	r24, r24
    46ce:	99 1f       	adc	r25, r25
    46d0:	82 0f       	add	r24, r18
    46d2:	93 1f       	adc	r25, r19
    46d4:	9e 01       	movw	r18, r28
    46d6:	2f 5f       	subi	r18, 0xFF	; 255
    46d8:	3f 4f       	sbci	r19, 0xFF	; 255
    46da:	82 0f       	add	r24, r18
    46dc:	93 1f       	adc	r25, r19
    46de:	84 0f       	add	r24, r20
    46e0:	95 1f       	adc	r25, r21
    46e2:	fc 01       	movw	r30, r24
    46e4:	35 96       	adiw	r30, 0x05	; 5
    46e6:	80 81       	ld	r24, Z
    46e8:	8b 83       	std	Y+3, r24	; 0x03
							LOC_u8KEYPAD_Arr[row_indx - ROW_S][col_indx - COL_S];
					/*busy waiting loop*/

					/*debouncing button */
					TIMER0_u8PollingDelay(10);
    46ea:	8a e0       	ldi	r24, 0x0A	; 10
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>

	if (KeyPressed != NULL) {
		for (col_indx = COL_S; col_indx < COL_MAX; col_indx++) {
			/*select column and output low*/
			DIO_u8SetPinData(COL_PORT, col_indx, DIO_LOW);
			for (row_indx = ROW_S; row_indx < ROW_MAX; row_indx++) {
    46f2:	89 81       	ldd	r24, Y+1	; 0x01
    46f4:	8f 5f       	subi	r24, 0xFF	; 255
    46f6:	89 83       	std	Y+1, r24	; 0x01
    46f8:	89 81       	ldd	r24, Y+1	; 0x01
    46fa:	85 30       	cpi	r24, 0x05	; 5
    46fc:	78 f2       	brcs	.-98     	; 0x469c <KEYPAD_u8GetPressedKey+0x80>
					/*debouncing button */
					TIMER0_u8PollingDelay(10);

				}
			}
			DIO_u8SetPinData(COL_PORT, col_indx, DIO_HIGH);
    46fe:	82 e0       	ldi	r24, 0x02	; 2
    4700:	6a 81       	ldd	r22, Y+2	; 0x02
    4702:	41 e0       	ldi	r20, 0x01	; 1
    4704:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <DIO_u8SetPinData>
	uint8_t row_indx;
	uint8_t Pin_State;
	uint8_t LOC_u8KEYPAD_Arr[KEYPAD_ROWS][KEYPAD_COL] = KEYPAD_VALUES;

	if (KeyPressed != NULL) {
		for (col_indx = COL_S; col_indx < COL_MAX; col_indx++) {
    4708:	8a 81       	ldd	r24, Y+2	; 0x02
    470a:	8f 5f       	subi	r24, 0xFF	; 255
    470c:	8a 83       	std	Y+2, r24	; 0x02
    470e:	8a 81       	ldd	r24, Y+2	; 0x02
    4710:	88 30       	cpi	r24, 0x08	; 8
    4712:	08 f4       	brcc	.+2      	; 0x4716 <KEYPAD_u8GetPressedKey+0xfa>
    4714:	bb cf       	rjmp	.-138    	; 0x468c <KEYPAD_u8GetPressedKey+0x70>
				}
			}
			DIO_u8SetPinData(COL_PORT, col_indx, DIO_HIGH);
		}

		*KeyPressed = LOC_u8ReturnVal;
    4716:	ef 85       	ldd	r30, Y+15	; 0x0f
    4718:	f8 89       	ldd	r31, Y+16	; 0x10
    471a:	8b 81       	ldd	r24, Y+3	; 0x03
    471c:	80 83       	st	Z, r24
    471e:	01 c0       	rjmp	.+2      	; 0x4722 <KEYPAD_u8GetPressedKey+0x106>
	} else {
		u8ErrorState = STD_TYPES_NOK;
    4720:	1c 82       	std	Y+4, r1	; 0x04
	}
	return u8ErrorState;
    4722:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4724:	65 96       	adiw	r28, 0x15	; 21
    4726:	0f b6       	in	r0, 0x3f	; 63
    4728:	f8 94       	cli
    472a:	de bf       	out	0x3e, r29	; 62
    472c:	0f be       	out	0x3f, r0	; 63
    472e:	cd bf       	out	0x3d, r28	; 61
    4730:	cf 91       	pop	r28
    4732:	df 91       	pop	r29
    4734:	08 95       	ret

00004736 <INTERFACE_u8Init>:
 *  Author: Khaled Ali
 */ 
#include "INTERFACE_SLAVE.h"


uint8_t INTERFACE_u8Init(void){
    4736:	df 93       	push	r29
    4738:	cf 93       	push	r28
    473a:	cd b7       	in	r28, 0x3d	; 61
    473c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTB, PIN4, DIO_INPUT);
    473e:	81 e0       	ldi	r24, 0x01	; 1
    4740:	64 e0       	ldi	r22, 0x04	; 4
    4742:	40 e0       	ldi	r20, 0x00	; 0
    4744:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTB, PIN5, DIO_INPUT);
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	65 e0       	ldi	r22, 0x05	; 5
    474c:	40 e0       	ldi	r20, 0x00	; 0
    474e:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTB, PIN6, DIO_OUTPUT);
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	66 e0       	ldi	r22, 0x06	; 6
    4756:	42 e0       	ldi	r20, 0x02	; 2
    4758:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTB, PIN7, DIO_INPUT);
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	67 e0       	ldi	r22, 0x07	; 7
    4760:	40 e0       	ldi	r20, 0x00	; 0
    4762:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>
	SPI_u8Init(SPI_MASTER);
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <SPI_u8Init>
	return 1; //To be Changed
    476c:	81 e0       	ldi	r24, 0x01	; 1
}
    476e:	cf 91       	pop	r28
    4770:	df 91       	pop	r29
    4772:	08 95       	ret

00004774 <INTERFACE_u8SendData>:

uint8_t INTERFACE_u8SendData(uint8_t* str){
    4774:	df 93       	push	r29
    4776:	cf 93       	push	r28
    4778:	00 d0       	rcall	.+0      	; 0x477a <INTERFACE_u8SendData+0x6>
    477a:	0f 92       	push	r0
    477c:	cd b7       	in	r28, 0x3d	; 61
    477e:	de b7       	in	r29, 0x3e	; 62
    4780:	9b 83       	std	Y+3, r25	; 0x03
    4782:	8a 83       	std	Y+2, r24	; 0x02
	//if slave selected
	uint8_t StrNav;

	DIO_u8GetPinData(PORTB, PIN4, &StrNav);
    4784:	81 e0       	ldi	r24, 0x01	; 1
    4786:	64 e0       	ldi	r22, 0x04	; 4
    4788:	9e 01       	movw	r18, r28
    478a:	2f 5f       	subi	r18, 0xFF	; 255
    478c:	3f 4f       	sbci	r19, 0xFF	; 255
    478e:	a9 01       	movw	r20, r18
    4790:	0e 94 ba 18 	call	0x3174	; 0x3174 <DIO_u8GetPinData>

	if(StrNav == 0){
    4794:	89 81       	ldd	r24, Y+1	; 0x01
    4796:	88 23       	and	r24, r24
    4798:	21 f4       	brne	.+8      	; 0x47a2 <INTERFACE_u8SendData+0x2e>
		//UART_u8SendString("Sended once");
		//UART_u8SendByte(0x0D);
		SPI_u8SendString(str);
    479a:	8a 81       	ldd	r24, Y+2	; 0x02
    479c:	9b 81       	ldd	r25, Y+3	; 0x03
    479e:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <SPI_u8SendString>
	{
		SPI_SetData(str[StrNav]);
		StrNav++;
	}
*/
	return 1; //To be Changed
    47a2:	81 e0       	ldi	r24, 0x01	; 1
}
    47a4:	0f 90       	pop	r0
    47a6:	0f 90       	pop	r0
    47a8:	0f 90       	pop	r0
    47aa:	cf 91       	pop	r28
    47ac:	df 91       	pop	r29
    47ae:	08 95       	ret

000047b0 <TERMINAL_u8Init>:
 */ 
#include "TERMINAL_SLAVE.h"



uint8_t TERMINAL_u8Init(void){
    47b0:	df 93       	push	r29
    47b2:	cf 93       	push	r28
    47b4:	cd b7       	in	r28, 0x3d	; 61
    47b6:	de b7       	in	r29, 0x3e	; 62
	UART_u8Init(9600);
    47b8:	60 e8       	ldi	r22, 0x80	; 128
    47ba:	75 e2       	ldi	r23, 0x25	; 37
    47bc:	80 e0       	ldi	r24, 0x00	; 0
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	0e 94 20 09 	call	0x1240	; 0x1240 <UART_u8Init>
	return 1;
    47c4:	81 e0       	ldi	r24, 0x01	; 1
}
    47c6:	cf 91       	pop	r28
    47c8:	df 91       	pop	r29
    47ca:	08 95       	ret

000047cc <TERMINAL_u8Interface>:

uint8_t TERMINAL_u8Interface(Card_t* card){
    47cc:	df 93       	push	r29
    47ce:	cf 93       	push	r28
    47d0:	00 d0       	rcall	.+0      	; 0x47d2 <TERMINAL_u8Interface+0x6>
    47d2:	cd b7       	in	r28, 0x3d	; 61
    47d4:	de b7       	in	r29, 0x3e	; 62
    47d6:	9a 83       	std	Y+2, r25	; 0x02
    47d8:	89 83       	std	Y+1, r24	; 0x01

	UART_u8SendString((uint8_t*) "Enter Card Holder Name: \r\n");
    47da:	80 e6       	ldi	r24, 0x60	; 96
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <UART_u8SendString>
	UART_u8ReceiveCountedString(card->NAME,9);
    47e2:	89 81       	ldd	r24, Y+1	; 0x01
    47e4:	9a 81       	ldd	r25, Y+2	; 0x02
    47e6:	69 e0       	ldi	r22, 0x09	; 9
    47e8:	70 e0       	ldi	r23, 0x00	; 0
    47ea:	0e 94 0c 0c 	call	0x1818	; 0x1818 <UART_u8ReceiveCountedString>
	UART_u8SendString((uint8_t*) "Enter Primary Account Number: \r\n");
    47ee:	8b e7       	ldi	r24, 0x7B	; 123
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <UART_u8SendString>
	UART_u8ReceiveCountedString(card->PAN,9);
    47f6:	89 81       	ldd	r24, Y+1	; 0x01
    47f8:	9a 81       	ldd	r25, Y+2	; 0x02
    47fa:	0a 96       	adiw	r24, 0x0a	; 10
    47fc:	69 e0       	ldi	r22, 0x09	; 9
    47fe:	70 e0       	ldi	r23, 0x00	; 0
    4800:	0e 94 0c 0c 	call	0x1818	; 0x1818 <UART_u8ReceiveCountedString>
	UART_u8SendByte(0x0D);
    4804:	8d e0       	ldi	r24, 0x0D	; 13
    4806:	0e 94 bb 09 	call	0x1376	; 0x1376 <UART_u8SendByte>
	UART_u8SendString((uint8_t*) "Enter PIN: \r\n");
    480a:	8c e9       	ldi	r24, 0x9C	; 156
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <UART_u8SendString>
	UART_u8ReceiveCountedString(card->PIN,4);
    4812:	89 81       	ldd	r24, Y+1	; 0x01
    4814:	9a 81       	ldd	r25, Y+2	; 0x02
    4816:	46 96       	adiw	r24, 0x16	; 22
    4818:	64 e0       	ldi	r22, 0x04	; 4
    481a:	70 e0       	ldi	r23, 0x00	; 0
    481c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <UART_u8ReceiveCountedString>
	UART_u8SendByte(0x0D);
    4820:	8d e0       	ldi	r24, 0x0D	; 13
    4822:	0e 94 bb 09 	call	0x1376	; 0x1376 <UART_u8SendByte>
	return 1; //To be Changed
    4826:	81 e0       	ldi	r24, 0x01	; 1
}
    4828:	0f 90       	pop	r0
    482a:	0f 90       	pop	r0
    482c:	cf 91       	pop	r28
    482e:	df 91       	pop	r29
    4830:	08 95       	ret

00004832 <TERMINAL_u8EnableInterrupt>:

uint8_t TERMINAL_u8EnableInterrupt(void (*pfnCallBack)(void)){
    4832:	df 93       	push	r29
    4834:	cf 93       	push	r28
    4836:	00 d0       	rcall	.+0      	; 0x4838 <TERMINAL_u8EnableInterrupt+0x6>
    4838:	cd b7       	in	r28, 0x3d	; 61
    483a:	de b7       	in	r29, 0x3e	; 62
    483c:	9a 83       	std	Y+2, r25	; 0x02
    483e:	89 83       	std	Y+1, r24	; 0x01
	UART_u8EnableRecievingInterrupt(pfnCallBack);
    4840:	89 81       	ldd	r24, Y+1	; 0x01
    4842:	9a 81       	ldd	r25, Y+2	; 0x02
    4844:	0e 94 4d 0c 	call	0x189a	; 0x189a <UART_u8EnableRecievingInterrupt>
	return 1;
    4848:	81 e0       	ldi	r24, 0x01	; 1
}
    484a:	0f 90       	pop	r0
    484c:	0f 90       	pop	r0
    484e:	cf 91       	pop	r28
    4850:	df 91       	pop	r29
    4852:	08 95       	ret

00004854 <TERMINAL_u8DisableInterrupt>:

uint8_t TERMINAL_u8DisableInterrupt(void){
    4854:	df 93       	push	r29
    4856:	cf 93       	push	r28
    4858:	cd b7       	in	r28, 0x3d	; 61
    485a:	de b7       	in	r29, 0x3e	; 62
	UART_u8DisableReceivingInterrupt();
    485c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <UART_u8DisableReceivingInterrupt>
	return 1;
    4860:	81 e0       	ldi	r24, 0x01	; 1
}
    4862:	cf 91       	pop	r28
    4864:	df 91       	pop	r29
    4866:	08 95       	ret

00004868 <EEPROM_Init>:
	uint8_t u8Bytes[4];
}Data_t;


void EEPROM_Init(void)
{
    4868:	df 93       	push	r29
    486a:	cf 93       	push	r28
    486c:	cd b7       	in	r28, 0x3d	; 61
    486e:	de b7       	in	r29, 0x3e	; 62
	I2C_u8Init();
    4870:	0e 94 2b 12 	call	0x2456	; 0x2456 <I2C_u8Init>
}
    4874:	cf 91       	pop	r28
    4876:	df 91       	pop	r29
    4878:	08 95       	ret

0000487a <EEPROM_u8WriteByteTo>:

uint8_t EEPROM_u8WriteByteTo(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint8_t u8Data)
{
    487a:	df 93       	push	r29
    487c:	cf 93       	push	r28
    487e:	cd b7       	in	r28, 0x3d	; 61
    4880:	de b7       	in	r29, 0x3e	; 62
    4882:	28 97       	sbiw	r28, 0x08	; 8
    4884:	0f b6       	in	r0, 0x3f	; 63
    4886:	f8 94       	cli
    4888:	de bf       	out	0x3e, r29	; 62
    488a:	0f be       	out	0x3f, r0	; 63
    488c:	cd bf       	out	0x3d, r28	; 61
    488e:	8c 83       	std	Y+4, r24	; 0x04
    4890:	7e 83       	std	Y+6, r23	; 0x06
    4892:	6d 83       	std	Y+5, r22	; 0x05
    4894:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t u8OperationAddress = (EEPROM_CONTROL_BYTE_HIGH_NIBBLE_MASK|(u8ChipAddress<<EEPROM_FIRST_CHIP_SELECT_BIT));
    4896:	8c 81       	ldd	r24, Y+4	; 0x04
    4898:	88 2f       	mov	r24, r24
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	88 0f       	add	r24, r24
    489e:	99 1f       	adc	r25, r25
    48a0:	80 6a       	ori	r24, 0xA0	; 160
    48a2:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ByteAddressHigh = (u16ByteAddress>>8);
    48a4:	8d 81       	ldd	r24, Y+5	; 0x05
    48a6:	9e 81       	ldd	r25, Y+6	; 0x06
    48a8:	89 2f       	mov	r24, r25
    48aa:	99 27       	eor	r25, r25
    48ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ByteAddressLow = u16ByteAddress;
    48ae:	8d 81       	ldd	r24, Y+5	; 0x05
    48b0:	89 83       	std	Y+1, r24	; 0x01

	I2C_u8MasterSendStart();
    48b2:	0e 94 be 12 	call	0x257c	; 0x257c <I2C_u8MasterSendStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
    48b6:	8b 81       	ldd	r24, Y+3	; 0x03
    48b8:	60 e0       	ldi	r22, 0x00	; 0
    48ba:	0e 94 6e 12 	call	0x24dc	; 0x24dc <I2C_u8MasterSendSLA>
	I2C_u8MasterSendByte(u8ByteAddressHigh);
    48be:	8a 81       	ldd	r24, Y+2	; 0x02
    48c0:	0e 94 9f 12 	call	0x253e	; 0x253e <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8ByteAddressLow);
    48c4:	89 81       	ldd	r24, Y+1	; 0x01
    48c6:	0e 94 9f 12 	call	0x253e	; 0x253e <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8Data);
    48ca:	8f 81       	ldd	r24, Y+7	; 0x07
    48cc:	0e 94 9f 12 	call	0x253e	; 0x253e <I2C_u8MasterSendByte>

	I2C_u8Stop();
    48d0:	0e 94 85 13 	call	0x270a	; 0x270a <I2C_u8Stop>
}
    48d4:	28 96       	adiw	r28, 0x08	; 8
    48d6:	0f b6       	in	r0, 0x3f	; 63
    48d8:	f8 94       	cli
    48da:	de bf       	out	0x3e, r29	; 62
    48dc:	0f be       	out	0x3f, r0	; 63
    48de:	cd bf       	out	0x3d, r28	; 61
    48e0:	cf 91       	pop	r28
    48e2:	df 91       	pop	r29
    48e4:	08 95       	ret

000048e6 <EEPROM_u8RandonReadFrom>:


uint8_t EEPROM_u8RandonReadFrom(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint8_t* u8Data)
{
    48e6:	df 93       	push	r29
    48e8:	cf 93       	push	r28
    48ea:	cd b7       	in	r28, 0x3d	; 61
    48ec:	de b7       	in	r29, 0x3e	; 62
    48ee:	29 97       	sbiw	r28, 0x09	; 9
    48f0:	0f b6       	in	r0, 0x3f	; 63
    48f2:	f8 94       	cli
    48f4:	de bf       	out	0x3e, r29	; 62
    48f6:	0f be       	out	0x3f, r0	; 63
    48f8:	cd bf       	out	0x3d, r28	; 61
    48fa:	8c 83       	std	Y+4, r24	; 0x04
    48fc:	7e 83       	std	Y+6, r23	; 0x06
    48fe:	6d 83       	std	Y+5, r22	; 0x05
    4900:	58 87       	std	Y+8, r21	; 0x08
    4902:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t u8OperationAddress = (EEPROM_CONTROL_BYTE_HIGH_NIBBLE_MASK|(u8ChipAddress<<EEPROM_FIRST_CHIP_SELECT_BIT));
    4904:	8c 81       	ldd	r24, Y+4	; 0x04
    4906:	88 2f       	mov	r24, r24
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	88 0f       	add	r24, r24
    490c:	99 1f       	adc	r25, r25
    490e:	80 6a       	ori	r24, 0xA0	; 160
    4910:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ByteAddressHigh = (u16ByteAddress>>8);
    4912:	8d 81       	ldd	r24, Y+5	; 0x05
    4914:	9e 81       	ldd	r25, Y+6	; 0x06
    4916:	89 2f       	mov	r24, r25
    4918:	99 27       	eor	r25, r25
    491a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ByteAddressLow =u16ByteAddress;
    491c:	8d 81       	ldd	r24, Y+5	; 0x05
    491e:	89 83       	std	Y+1, r24	; 0x01


	I2C_u8MasterSendStart();
    4920:	0e 94 be 12 	call	0x257c	; 0x257c <I2C_u8MasterSendStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
    4924:	8b 81       	ldd	r24, Y+3	; 0x03
    4926:	60 e0       	ldi	r22, 0x00	; 0
    4928:	0e 94 6e 12 	call	0x24dc	; 0x24dc <I2C_u8MasterSendSLA>
	I2C_u8MasterSendByte(u8ByteAddressHigh);
    492c:	8a 81       	ldd	r24, Y+2	; 0x02
    492e:	0e 94 9f 12 	call	0x253e	; 0x253e <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8ByteAddressLow);
    4932:	89 81       	ldd	r24, Y+1	; 0x01
    4934:	0e 94 9f 12 	call	0x253e	; 0x253e <I2C_u8MasterSendByte>
	I2C_u8SendRepeatedStart();
    4938:	0e 94 dd 12 	call	0x25ba	; 0x25ba <I2C_u8SendRepeatedStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_READ);
    493c:	8b 81       	ldd	r24, Y+3	; 0x03
    493e:	61 e0       	ldi	r22, 0x01	; 1
    4940:	0e 94 6e 12 	call	0x24dc	; 0x24dc <I2C_u8MasterSendSLA>
	I2C_u8MasterReceiveWithNAK(u8Data);
    4944:	8f 81       	ldd	r24, Y+7	; 0x07
    4946:	98 85       	ldd	r25, Y+8	; 0x08
    4948:	0e 94 45 13 	call	0x268a	; 0x268a <I2C_u8MasterReceiveWithNAK>
	I2C_u8Stop();
    494c:	0e 94 85 13 	call	0x270a	; 0x270a <I2C_u8Stop>
	TIMER0_u8PollingDelay(10);
    4950:	8a e0       	ldi	r24, 0x0A	; 10
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>

}
    4958:	29 96       	adiw	r28, 0x09	; 9
    495a:	0f b6       	in	r0, 0x3f	; 63
    495c:	f8 94       	cli
    495e:	de bf       	out	0x3e, r29	; 62
    4960:	0f be       	out	0x3f, r0	; 63
    4962:	cd bf       	out	0x3d, r28	; 61
    4964:	cf 91       	pop	r28
    4966:	df 91       	pop	r29
    4968:	08 95       	ret

0000496a <EEPROM_u8WriteStringTo>:


uint8_t EEPROM_u8WriteStringTo(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint8_t* u8Data)
{
    496a:	df 93       	push	r29
    496c:	cf 93       	push	r28
    496e:	cd b7       	in	r28, 0x3d	; 61
    4970:	de b7       	in	r29, 0x3e	; 62
    4972:	2a 97       	sbiw	r28, 0x0a	; 10
    4974:	0f b6       	in	r0, 0x3f	; 63
    4976:	f8 94       	cli
    4978:	de bf       	out	0x3e, r29	; 62
    497a:	0f be       	out	0x3f, r0	; 63
    497c:	cd bf       	out	0x3d, r28	; 61
    497e:	8d 83       	std	Y+5, r24	; 0x05
    4980:	7f 83       	std	Y+7, r23	; 0x07
    4982:	6e 83       	std	Y+6, r22	; 0x06
    4984:	59 87       	std	Y+9, r21	; 0x09
    4986:	48 87       	std	Y+8, r20	; 0x08
	uint8_t u8OperationAddress = (EEPROM_CONTROL_BYTE_HIGH_NIBBLE_MASK|(u8ChipAddress<<EEPROM_FIRST_CHIP_SELECT_BIT));
    4988:	8d 81       	ldd	r24, Y+5	; 0x05
    498a:	88 2f       	mov	r24, r24
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	88 0f       	add	r24, r24
    4990:	99 1f       	adc	r25, r25
    4992:	80 6a       	ori	r24, 0xA0	; 160
    4994:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ByteAddressHigh = (u16ByteAddress>>8);
    4996:	8e 81       	ldd	r24, Y+6	; 0x06
    4998:	9f 81       	ldd	r25, Y+7	; 0x07
    499a:	89 2f       	mov	r24, r25
    499c:	99 27       	eor	r25, r25
    499e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ByteAddressLow = u16ByteAddress;
    49a0:	8e 81       	ldd	r24, Y+6	; 0x06
    49a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8BytesCounter=0;
    49a4:	19 82       	std	Y+1, r1	; 0x01

	I2C_u8MasterSendStart();
    49a6:	0e 94 be 12 	call	0x257c	; 0x257c <I2C_u8MasterSendStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
    49aa:	8c 81       	ldd	r24, Y+4	; 0x04
    49ac:	60 e0       	ldi	r22, 0x00	; 0
    49ae:	0e 94 6e 12 	call	0x24dc	; 0x24dc <I2C_u8MasterSendSLA>
	I2C_u8MasterSendByte(u8ByteAddressHigh);
    49b2:	8b 81       	ldd	r24, Y+3	; 0x03
    49b4:	0e 94 9f 12 	call	0x253e	; 0x253e <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8ByteAddressLow);
    49b8:	8a 81       	ldd	r24, Y+2	; 0x02
    49ba:	0e 94 9f 12 	call	0x253e	; 0x253e <I2C_u8MasterSendByte>
    49be:	0e c0       	rjmp	.+28     	; 0x49dc <EEPROM_u8WriteStringTo+0x72>
	while (u8Data[u8BytesCounter]!='\0' && u8BytesCounter!=63)
	{
		I2C_u8MasterSendByte(u8Data[u8BytesCounter]);
    49c0:	89 81       	ldd	r24, Y+1	; 0x01
    49c2:	28 2f       	mov	r18, r24
    49c4:	30 e0       	ldi	r19, 0x00	; 0
    49c6:	88 85       	ldd	r24, Y+8	; 0x08
    49c8:	99 85       	ldd	r25, Y+9	; 0x09
    49ca:	fc 01       	movw	r30, r24
    49cc:	e2 0f       	add	r30, r18
    49ce:	f3 1f       	adc	r31, r19
    49d0:	80 81       	ld	r24, Z
    49d2:	0e 94 9f 12 	call	0x253e	; 0x253e <I2C_u8MasterSendByte>
		u8BytesCounter++;
    49d6:	89 81       	ldd	r24, Y+1	; 0x01
    49d8:	8f 5f       	subi	r24, 0xFF	; 255
    49da:	89 83       	std	Y+1, r24	; 0x01

	I2C_u8MasterSendStart();
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
	I2C_u8MasterSendByte(u8ByteAddressHigh);
	I2C_u8MasterSendByte(u8ByteAddressLow);
	while (u8Data[u8BytesCounter]!='\0' && u8BytesCounter!=63)
    49dc:	89 81       	ldd	r24, Y+1	; 0x01
    49de:	28 2f       	mov	r18, r24
    49e0:	30 e0       	ldi	r19, 0x00	; 0
    49e2:	88 85       	ldd	r24, Y+8	; 0x08
    49e4:	99 85       	ldd	r25, Y+9	; 0x09
    49e6:	fc 01       	movw	r30, r24
    49e8:	e2 0f       	add	r30, r18
    49ea:	f3 1f       	adc	r31, r19
    49ec:	80 81       	ld	r24, Z
    49ee:	88 23       	and	r24, r24
    49f0:	19 f0       	breq	.+6      	; 0x49f8 <EEPROM_u8WriteStringTo+0x8e>
    49f2:	89 81       	ldd	r24, Y+1	; 0x01
    49f4:	8f 33       	cpi	r24, 0x3F	; 63
    49f6:	21 f7       	brne	.-56     	; 0x49c0 <EEPROM_u8WriteStringTo+0x56>
	{
		I2C_u8MasterSendByte(u8Data[u8BytesCounter]);
		u8BytesCounter++;
	}
	I2C_u8MasterSendByte('\0');
    49f8:	80 e0       	ldi	r24, 0x00	; 0
    49fa:	0e 94 9f 12 	call	0x253e	; 0x253e <I2C_u8MasterSendByte>

	I2C_u8Stop();
    49fe:	0e 94 85 13 	call	0x270a	; 0x270a <I2C_u8Stop>
	TIMER0_u8PollingDelay(10);
    4a02:	8a e0       	ldi	r24, 0x0A	; 10
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>

}
    4a0a:	2a 96       	adiw	r28, 0x0a	; 10
    4a0c:	0f b6       	in	r0, 0x3f	; 63
    4a0e:	f8 94       	cli
    4a10:	de bf       	out	0x3e, r29	; 62
    4a12:	0f be       	out	0x3f, r0	; 63
    4a14:	cd bf       	out	0x3d, r28	; 61
    4a16:	cf 91       	pop	r28
    4a18:	df 91       	pop	r29
    4a1a:	08 95       	ret

00004a1c <EEPROM_u8ReadStringFrom>:

uint8_t EEPROM_u8ReadStringFrom(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint8_t* u8Data)
{
    4a1c:	df 93       	push	r29
    4a1e:	cf 93       	push	r28
    4a20:	cd b7       	in	r28, 0x3d	; 61
    4a22:	de b7       	in	r29, 0x3e	; 62
    4a24:	2b 97       	sbiw	r28, 0x0b	; 11
    4a26:	0f b6       	in	r0, 0x3f	; 63
    4a28:	f8 94       	cli
    4a2a:	de bf       	out	0x3e, r29	; 62
    4a2c:	0f be       	out	0x3f, r0	; 63
    4a2e:	cd bf       	out	0x3d, r28	; 61
    4a30:	8e 83       	std	Y+6, r24	; 0x06
    4a32:	78 87       	std	Y+8, r23	; 0x08
    4a34:	6f 83       	std	Y+7, r22	; 0x07
    4a36:	5a 87       	std	Y+10, r21	; 0x0a
    4a38:	49 87       	std	Y+9, r20	; 0x09
	uint8_t u8OperationAddress = (EEPROM_CONTROL_BYTE_HIGH_NIBBLE_MASK|(u8ChipAddress<<EEPROM_FIRST_CHIP_SELECT_BIT));
    4a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a3c:	88 2f       	mov	r24, r24
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	88 0f       	add	r24, r24
    4a42:	99 1f       	adc	r25, r25
    4a44:	80 6a       	ori	r24, 0xA0	; 160
    4a46:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ByteAddressHigh = (u16ByteAddress>>8);
    4a48:	8f 81       	ldd	r24, Y+7	; 0x07
    4a4a:	98 85       	ldd	r25, Y+8	; 0x08
    4a4c:	89 2f       	mov	r24, r25
    4a4e:	99 27       	eor	r25, r25
    4a50:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ByteAddressLow =u16ByteAddress;
    4a52:	8f 81       	ldd	r24, Y+7	; 0x07
    4a54:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8BytesCounter=0;
    4a56:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Flush;

	I2C_u8MasterSendStart();
    4a58:	0e 94 be 12 	call	0x257c	; 0x257c <I2C_u8MasterSendStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
    4a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a5e:	60 e0       	ldi	r22, 0x00	; 0
    4a60:	0e 94 6e 12 	call	0x24dc	; 0x24dc <I2C_u8MasterSendSLA>
	I2C_u8MasterSendByte(u8ByteAddressHigh);
    4a64:	8b 81       	ldd	r24, Y+3	; 0x03
    4a66:	0e 94 9f 12 	call	0x253e	; 0x253e <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8ByteAddressLow);
    4a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6c:	0e 94 9f 12 	call	0x253e	; 0x253e <I2C_u8MasterSendByte>
	I2C_u8SendRepeatedStart();
    4a70:	0e 94 dd 12 	call	0x25ba	; 0x25ba <I2C_u8SendRepeatedStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_READ);
    4a74:	8c 81       	ldd	r24, Y+4	; 0x04
    4a76:	61 e0       	ldi	r22, 0x01	; 1
    4a78:	0e 94 6e 12 	call	0x24dc	; 0x24dc <I2C_u8MasterSendSLA>
	do{
		I2C_u8MasterReceiveWithACK(&u8Data[u8BytesCounter]);
    4a7c:	89 81       	ldd	r24, Y+1	; 0x01
    4a7e:	28 2f       	mov	r18, r24
    4a80:	30 e0       	ldi	r19, 0x00	; 0
    4a82:	89 85       	ldd	r24, Y+9	; 0x09
    4a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a86:	82 0f       	add	r24, r18
    4a88:	93 1f       	adc	r25, r19
    4a8a:	0e 94 01 13 	call	0x2602	; 0x2602 <I2C_u8MasterReceiveWithACK>
		u8BytesCounter++;
    4a8e:	89 81       	ldd	r24, Y+1	; 0x01
    4a90:	8f 5f       	subi	r24, 0xFF	; 255
    4a92:	89 83       	std	Y+1, r24	; 0x01
	}while (u8Data[u8BytesCounter-1]!='\0');
    4a94:	89 81       	ldd	r24, Y+1	; 0x01
    4a96:	88 2f       	mov	r24, r24
    4a98:	90 e0       	ldi	r25, 0x00	; 0
    4a9a:	9c 01       	movw	r18, r24
    4a9c:	21 50       	subi	r18, 0x01	; 1
    4a9e:	30 40       	sbci	r19, 0x00	; 0
    4aa0:	89 85       	ldd	r24, Y+9	; 0x09
    4aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aa4:	fc 01       	movw	r30, r24
    4aa6:	e2 0f       	add	r30, r18
    4aa8:	f3 1f       	adc	r31, r19
    4aaa:	80 81       	ld	r24, Z
    4aac:	88 23       	and	r24, r24
    4aae:	31 f7       	brne	.-52     	; 0x4a7c <EEPROM_u8ReadStringFrom+0x60>
	I2C_u8MasterReceiveWithNAK(&u8Flush);
    4ab0:	ce 01       	movw	r24, r28
    4ab2:	05 96       	adiw	r24, 0x05	; 5
    4ab4:	0e 94 45 13 	call	0x268a	; 0x268a <I2C_u8MasterReceiveWithNAK>
	I2C_u8Stop();
    4ab8:	0e 94 85 13 	call	0x270a	; 0x270a <I2C_u8Stop>

}
    4abc:	2b 96       	adiw	r28, 0x0b	; 11
    4abe:	0f b6       	in	r0, 0x3f	; 63
    4ac0:	f8 94       	cli
    4ac2:	de bf       	out	0x3e, r29	; 62
    4ac4:	0f be       	out	0x3f, r0	; 63
    4ac6:	cd bf       	out	0x3d, r28	; 61
    4ac8:	cf 91       	pop	r28
    4aca:	df 91       	pop	r29
    4acc:	08 95       	ret

00004ace <EEPROM_u8WriteIntTo>:

uint8_t EEPROM_u8WriteIntTo(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint32_t u8Data)
{
    4ace:	df 93       	push	r29
    4ad0:	cf 93       	push	r28
    4ad2:	cd b7       	in	r28, 0x3d	; 61
    4ad4:	de b7       	in	r29, 0x3e	; 62
    4ad6:	2c 97       	sbiw	r28, 0x0c	; 12
    4ad8:	0f b6       	in	r0, 0x3f	; 63
    4ada:	f8 94       	cli
    4adc:	de bf       	out	0x3e, r29	; 62
    4ade:	0f be       	out	0x3f, r0	; 63
    4ae0:	cd bf       	out	0x3d, r28	; 61
    4ae2:	8d 83       	std	Y+5, r24	; 0x05
    4ae4:	7f 83       	std	Y+7, r23	; 0x07
    4ae6:	6e 83       	std	Y+6, r22	; 0x06
    4ae8:	28 87       	std	Y+8, r18	; 0x08
    4aea:	39 87       	std	Y+9, r19	; 0x09
    4aec:	4a 87       	std	Y+10, r20	; 0x0a
    4aee:	5b 87       	std	Y+11, r21	; 0x0b
	Data_t New;
	New.u32Data=u8Data;
    4af0:	88 85       	ldd	r24, Y+8	; 0x08
    4af2:	99 85       	ldd	r25, Y+9	; 0x09
    4af4:	aa 85       	ldd	r26, Y+10	; 0x0a
    4af6:	bb 85       	ldd	r27, Y+11	; 0x0b
    4af8:	89 83       	std	Y+1, r24	; 0x01
    4afa:	9a 83       	std	Y+2, r25	; 0x02
    4afc:	ab 83       	std	Y+3, r26	; 0x03
    4afe:	bc 83       	std	Y+4, r27	; 0x04
	EEPROM_u8WriteByteTo(u8ChipAddress,u16ByteAddress,New.u8Bytes[3]);
    4b00:	9c 81       	ldd	r25, Y+4	; 0x04
    4b02:	2e 81       	ldd	r18, Y+6	; 0x06
    4b04:	3f 81       	ldd	r19, Y+7	; 0x07
    4b06:	8d 81       	ldd	r24, Y+5	; 0x05
    4b08:	b9 01       	movw	r22, r18
    4b0a:	49 2f       	mov	r20, r25
    4b0c:	0e 94 3d 24 	call	0x487a	; 0x487a <EEPROM_u8WriteByteTo>
	TIMER0_u8PollingDelay(10);
    4b10:	8a e0       	ldi	r24, 0x0A	; 10
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
	EEPROM_u8WriteByteTo(u8ChipAddress,u16ByteAddress+1,New.u8Bytes[2]);
    4b18:	8e 81       	ldd	r24, Y+6	; 0x06
    4b1a:	9f 81       	ldd	r25, Y+7	; 0x07
    4b1c:	9c 01       	movw	r18, r24
    4b1e:	2f 5f       	subi	r18, 0xFF	; 255
    4b20:	3f 4f       	sbci	r19, 0xFF	; 255
    4b22:	9b 81       	ldd	r25, Y+3	; 0x03
    4b24:	8d 81       	ldd	r24, Y+5	; 0x05
    4b26:	b9 01       	movw	r22, r18
    4b28:	49 2f       	mov	r20, r25
    4b2a:	0e 94 3d 24 	call	0x487a	; 0x487a <EEPROM_u8WriteByteTo>
	TIMER0_u8PollingDelay(10);
    4b2e:	8a e0       	ldi	r24, 0x0A	; 10
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
	EEPROM_u8WriteByteTo(u8ChipAddress,u16ByteAddress+2,New.u8Bytes[1]);
    4b36:	8e 81       	ldd	r24, Y+6	; 0x06
    4b38:	9f 81       	ldd	r25, Y+7	; 0x07
    4b3a:	9c 01       	movw	r18, r24
    4b3c:	2e 5f       	subi	r18, 0xFE	; 254
    4b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b40:	9a 81       	ldd	r25, Y+2	; 0x02
    4b42:	8d 81       	ldd	r24, Y+5	; 0x05
    4b44:	b9 01       	movw	r22, r18
    4b46:	49 2f       	mov	r20, r25
    4b48:	0e 94 3d 24 	call	0x487a	; 0x487a <EEPROM_u8WriteByteTo>
	TIMER0_u8PollingDelay(10);
    4b4c:	8a e0       	ldi	r24, 0x0A	; 10
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
	EEPROM_u8WriteByteTo(u8ChipAddress,u16ByteAddress+3,New.u8Bytes[0]);
    4b54:	8e 81       	ldd	r24, Y+6	; 0x06
    4b56:	9f 81       	ldd	r25, Y+7	; 0x07
    4b58:	9c 01       	movw	r18, r24
    4b5a:	2d 5f       	subi	r18, 0xFD	; 253
    4b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b5e:	99 81       	ldd	r25, Y+1	; 0x01
    4b60:	8d 81       	ldd	r24, Y+5	; 0x05
    4b62:	b9 01       	movw	r22, r18
    4b64:	49 2f       	mov	r20, r25
    4b66:	0e 94 3d 24 	call	0x487a	; 0x487a <EEPROM_u8WriteByteTo>
	TIMER0_u8PollingDelay(10);
    4b6a:	8a e0       	ldi	r24, 0x0A	; 10
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
}
    4b72:	2c 96       	adiw	r28, 0x0c	; 12
    4b74:	0f b6       	in	r0, 0x3f	; 63
    4b76:	f8 94       	cli
    4b78:	de bf       	out	0x3e, r29	; 62
    4b7a:	0f be       	out	0x3f, r0	; 63
    4b7c:	cd bf       	out	0x3d, r28	; 61
    4b7e:	cf 91       	pop	r28
    4b80:	df 91       	pop	r29
    4b82:	08 95       	ret

00004b84 <EEPROM_u8ReadIntFrom>:

uint8_t EEPROM_u8ReadIntFrom(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint32_t* u8Data)
{
    4b84:	df 93       	push	r29
    4b86:	cf 93       	push	r28
    4b88:	cd b7       	in	r28, 0x3d	; 61
    4b8a:	de b7       	in	r29, 0x3e	; 62
    4b8c:	2a 97       	sbiw	r28, 0x0a	; 10
    4b8e:	0f b6       	in	r0, 0x3f	; 63
    4b90:	f8 94       	cli
    4b92:	de bf       	out	0x3e, r29	; 62
    4b94:	0f be       	out	0x3f, r0	; 63
    4b96:	cd bf       	out	0x3d, r28	; 61
    4b98:	8d 83       	std	Y+5, r24	; 0x05
    4b9a:	7f 83       	std	Y+7, r23	; 0x07
    4b9c:	6e 83       	std	Y+6, r22	; 0x06
    4b9e:	59 87       	std	Y+9, r21	; 0x09
    4ba0:	48 87       	std	Y+8, r20	; 0x08
	Data_t Received;
	EEPROM_u8RandonReadFrom(u8ChipAddress,u16ByteAddress,&Received.u8Bytes[3]);
    4ba2:	2e 81       	ldd	r18, Y+6	; 0x06
    4ba4:	3f 81       	ldd	r19, Y+7	; 0x07
    4ba6:	ae 01       	movw	r20, r28
    4ba8:	4c 5f       	subi	r20, 0xFC	; 252
    4baa:	5f 4f       	sbci	r21, 0xFF	; 255
    4bac:	8d 81       	ldd	r24, Y+5	; 0x05
    4bae:	b9 01       	movw	r22, r18
    4bb0:	0e 94 73 24 	call	0x48e6	; 0x48e6 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    4bb4:	8a e0       	ldi	r24, 0x0A	; 10
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
	EEPROM_u8RandonReadFrom(u8ChipAddress,u16ByteAddress+1,&Received.u8Bytes[2]);
    4bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    4bbe:	9f 81       	ldd	r25, Y+7	; 0x07
    4bc0:	9c 01       	movw	r18, r24
    4bc2:	2f 5f       	subi	r18, 0xFF	; 255
    4bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    4bc6:	ae 01       	movw	r20, r28
    4bc8:	4d 5f       	subi	r20, 0xFD	; 253
    4bca:	5f 4f       	sbci	r21, 0xFF	; 255
    4bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    4bce:	b9 01       	movw	r22, r18
    4bd0:	0e 94 73 24 	call	0x48e6	; 0x48e6 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    4bd4:	8a e0       	ldi	r24, 0x0A	; 10
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
	EEPROM_u8RandonReadFrom(u8ChipAddress,u16ByteAddress+2,&Received.u8Bytes[1]);
    4bdc:	8e 81       	ldd	r24, Y+6	; 0x06
    4bde:	9f 81       	ldd	r25, Y+7	; 0x07
    4be0:	9c 01       	movw	r18, r24
    4be2:	2e 5f       	subi	r18, 0xFE	; 254
    4be4:	3f 4f       	sbci	r19, 0xFF	; 255
    4be6:	ae 01       	movw	r20, r28
    4be8:	4e 5f       	subi	r20, 0xFE	; 254
    4bea:	5f 4f       	sbci	r21, 0xFF	; 255
    4bec:	8d 81       	ldd	r24, Y+5	; 0x05
    4bee:	b9 01       	movw	r22, r18
    4bf0:	0e 94 73 24 	call	0x48e6	; 0x48e6 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    4bf4:	8a e0       	ldi	r24, 0x0A	; 10
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
	EEPROM_u8RandonReadFrom(u8ChipAddress,u16ByteAddress+3,&Received.u8Bytes[0]);
    4bfc:	8e 81       	ldd	r24, Y+6	; 0x06
    4bfe:	9f 81       	ldd	r25, Y+7	; 0x07
    4c00:	9c 01       	movw	r18, r24
    4c02:	2d 5f       	subi	r18, 0xFD	; 253
    4c04:	3f 4f       	sbci	r19, 0xFF	; 255
    4c06:	8d 81       	ldd	r24, Y+5	; 0x05
    4c08:	b9 01       	movw	r22, r18
    4c0a:	9e 01       	movw	r18, r28
    4c0c:	2f 5f       	subi	r18, 0xFF	; 255
    4c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c10:	a9 01       	movw	r20, r18
    4c12:	0e 94 73 24 	call	0x48e6	; 0x48e6 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    4c16:	8a e0       	ldi	r24, 0x0A	; 10
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>
	*u8Data = Received.u32Data;
    4c1e:	89 81       	ldd	r24, Y+1	; 0x01
    4c20:	9a 81       	ldd	r25, Y+2	; 0x02
    4c22:	ab 81       	ldd	r26, Y+3	; 0x03
    4c24:	bc 81       	ldd	r27, Y+4	; 0x04
    4c26:	e8 85       	ldd	r30, Y+8	; 0x08
    4c28:	f9 85       	ldd	r31, Y+9	; 0x09
    4c2a:	80 83       	st	Z, r24
    4c2c:	91 83       	std	Z+1, r25	; 0x01
    4c2e:	a2 83       	std	Z+2, r26	; 0x02
    4c30:	b3 83       	std	Z+3, r27	; 0x03
}
    4c32:	2a 96       	adiw	r28, 0x0a	; 10
    4c34:	0f b6       	in	r0, 0x3f	; 63
    4c36:	f8 94       	cli
    4c38:	de bf       	out	0x3e, r29	; 62
    4c3a:	0f be       	out	0x3f, r0	; 63
    4c3c:	cd bf       	out	0x3d, r28	; 61
    4c3e:	cf 91       	pop	r28
    4c40:	df 91       	pop	r29
    4c42:	08 95       	ret

00004c44 <Card_init>:
uint8_t *PAN;
uint8_t *PIN;
uint8_t volatile counter=0;

void Card_init()
{
    4c44:	df 93       	push	r29
    4c46:	cf 93       	push	r28
    4c48:	0f 92       	push	r0
    4c4a:	cd b7       	in	r28, 0x3d	; 61
    4c4c:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8FirstTimeCheck;
	//uint8_t test[10];
	TERMINAL_u8Init();
    4c4e:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <TERMINAL_u8Init>
	INTERFACE_u8Init();
    4c52:	0e 94 9b 23 	call	0x4736	; 0x4736 <INTERFACE_u8Init>
	EEPROM_Init();
    4c56:	0e 94 34 24 	call	0x4868	; 0x4868 <EEPROM_Init>
	TERMINAL_u8EnableInterrupt(UART_callBack);
    4c5a:	87 ed       	ldi	r24, 0xD7	; 215
    4c5c:	96 e2       	ldi	r25, 0x26	; 38
    4c5e:	0e 94 19 24 	call	0x4832	; 0x4832 <TERMINAL_u8EnableInterrupt>


	EXTI_u8Enable(INT2,EXTI_RISING_EDGE);
    4c62:	82 e0       	ldi	r24, 0x02	; 2
    4c64:	63 e0       	ldi	r22, 0x03	; 3
    4c66:	0e 94 f7 13 	call	0x27ee	; 0x27ee <EXTI_u8Enable>

	EEPROM_u8RandonReadFrom(CARD_EEPROM_ADDRESS,CARD_EEPROM_FIRST_TIME_ADDRESS,&u8FirstTimeCheck);
    4c6a:	80 e0       	ldi	r24, 0x00	; 0
    4c6c:	6f ef       	ldi	r22, 0xFF	; 255
    4c6e:	70 e0       	ldi	r23, 0x00	; 0
    4c70:	9e 01       	movw	r18, r28
    4c72:	2f 5f       	subi	r18, 0xFF	; 255
    4c74:	3f 4f       	sbci	r19, 0xFF	; 255
    4c76:	a9 01       	movw	r20, r18
    4c78:	0e 94 73 24 	call	0x48e6	; 0x48e6 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    4c7c:	8a e0       	ldi	r24, 0x0A	; 10
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <TIMER0_u8PollingDelay>

	if (u8FirstTimeCheck!=CARD_EEPROM_FIRST_TIME_DATA)
    4c84:	89 81       	ldd	r24, Y+1	; 0x01
    4c86:	81 3a       	cpi	r24, 0xA1	; 161
    4c88:	69 f0       	breq	.+26     	; 0x4ca4 <Card_init+0x60>
	{
		u8State = PROGRAMMING;
    4c8a:	81 e0       	ldi	r24, 0x01	; 1
    4c8c:	80 93 dc 01 	sts	0x01DC, r24
		card.MODE=CARD_PROGRAMMING_MODE;
    4c90:	82 e0       	ldi	r24, 0x02	; 2
    4c92:	80 93 1c 02 	sts	0x021C, r24
		EEPROM_u8WriteByteTo(CARD_EEPROM_ADDRESS,CARD_EEPROM_FIRST_TIME_ADDRESS,CARD_EEPROM_FIRST_TIME_DATA);
    4c96:	80 e0       	ldi	r24, 0x00	; 0
    4c98:	6f ef       	ldi	r22, 0xFF	; 255
    4c9a:	70 e0       	ldi	r23, 0x00	; 0
    4c9c:	41 ea       	ldi	r20, 0xA1	; 161
    4c9e:	0e 94 3d 24 	call	0x487a	; 0x487a <EEPROM_u8WriteByteTo>
    4ca2:	18 c0       	rjmp	.+48     	; 0x4cd4 <Card_init+0x90>
	}else{

		//u8State = USER;
		EEPROM_u8ReadStringFrom(CARD_EEPROM_ADDRESS, CARD_HOLDER_NAME_ADDRESS,card.NAME);
    4ca4:	21 e0       	ldi	r18, 0x01	; 1
    4ca6:	32 e0       	ldi	r19, 0x02	; 2
    4ca8:	80 e0       	ldi	r24, 0x00	; 0
    4caa:	61 e0       	ldi	r22, 0x01	; 1
    4cac:	70 e0       	ldi	r23, 0x00	; 0
    4cae:	a9 01       	movw	r20, r18
    4cb0:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <EEPROM_u8ReadStringFrom>
		EEPROM_u8ReadStringFrom(CARD_EEPROM_ADDRESS, CARD_PAN_ADDRESS, card.PAN);
    4cb4:	2b e0       	ldi	r18, 0x0B	; 11
    4cb6:	32 e0       	ldi	r19, 0x02	; 2
    4cb8:	80 e0       	ldi	r24, 0x00	; 0
    4cba:	61 e2       	ldi	r22, 0x21	; 33
    4cbc:	70 e0       	ldi	r23, 0x00	; 0
    4cbe:	a9 01       	movw	r20, r18
    4cc0:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <EEPROM_u8ReadStringFrom>
		EEPROM_u8ReadStringFrom(CARD_EEPROM_ADDRESS, CARD_PIN_ADDRESS, card.PIN);
    4cc4:	27 e1       	ldi	r18, 0x17	; 23
    4cc6:	32 e0       	ldi	r19, 0x02	; 2
    4cc8:	80 e0       	ldi	r24, 0x00	; 0
    4cca:	61 e4       	ldi	r22, 0x41	; 65
    4ccc:	70 e0       	ldi	r23, 0x00	; 0
    4cce:	a9 01       	movw	r20, r18
    4cd0:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <EEPROM_u8ReadStringFrom>

		//TERMINAL_u8EnableInterrupt(UART_callBack);
	}
	DIO_u8SetPinDirection(PORTB, PIN2, DIO_INPUT);
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	62 e0       	ldi	r22, 0x02	; 2
    4cd8:	40 e0       	ldi	r20, 0x00	; 0
    4cda:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <DIO_u8SetPinDirection>


}
    4cde:	0f 90       	pop	r0
    4ce0:	cf 91       	pop	r28
    4ce2:	df 91       	pop	r29
    4ce4:	08 95       	ret

00004ce6 <Card_App>:



void Card_App(void){
    4ce6:	df 93       	push	r29
    4ce8:	cf 93       	push	r28
    4cea:	00 d0       	rcall	.+0      	; 0x4cec <Card_App+0x6>
    4cec:	00 d0       	rcall	.+0      	; 0x4cee <Card_App+0x8>
    4cee:	cd b7       	in	r28, 0x3d	; 61
    4cf0:	de b7       	in	r29, 0x3e	; 62

	while(1){
		switch(u8State){
    4cf2:	80 91 dc 01 	lds	r24, 0x01DC
    4cf6:	28 2f       	mov	r18, r24
    4cf8:	30 e0       	ldi	r19, 0x00	; 0
    4cfa:	3c 83       	std	Y+4, r19	; 0x04
    4cfc:	2b 83       	std	Y+3, r18	; 0x03
    4cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    4d00:	9c 81       	ldd	r25, Y+4	; 0x04
    4d02:	81 30       	cpi	r24, 0x01	; 1
    4d04:	91 05       	cpc	r25, r1
    4d06:	31 f0       	breq	.+12     	; 0x4d14 <Card_App+0x2e>
    4d08:	2b 81       	ldd	r18, Y+3	; 0x03
    4d0a:	3c 81       	ldd	r19, Y+4	; 0x04
    4d0c:	22 30       	cpi	r18, 0x02	; 2
    4d0e:	31 05       	cpc	r19, r1
    4d10:	69 f1       	breq	.+90     	; 0x4d6c <Card_App+0x86>
    4d12:	ef cf       	rjmp	.-34     	; 0x4cf2 <Card_App+0xc>
			case PROGRAMMING:
			//Enter Programming mode
				TERMINAL_u8DisableInterrupt();
    4d14:	0e 94 2a 24 	call	0x4854	; 0x4854 <TERMINAL_u8DisableInterrupt>
				HoldeName=(uint8_t*)"INACCESSIBLE";
    4d18:	8a ea       	ldi	r24, 0xAA	; 170
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	90 93 20 02 	sts	0x0220, r25
    4d20:	80 93 1f 02 	sts	0x021F, r24
				TERMINAL_u8Interface(&card);
    4d24:	81 e0       	ldi	r24, 0x01	; 1
    4d26:	92 e0       	ldi	r25, 0x02	; 2
    4d28:	0e 94 e6 23 	call	0x47cc	; 0x47cc <TERMINAL_u8Interface>
				EEPROM_u8WriteStringTo(CARD_EEPROM_ADDRESS, CARD_HOLDER_NAME_ADDRESS, card.NAME);
    4d2c:	21 e0       	ldi	r18, 0x01	; 1
    4d2e:	32 e0       	ldi	r19, 0x02	; 2
    4d30:	80 e0       	ldi	r24, 0x00	; 0
    4d32:	61 e0       	ldi	r22, 0x01	; 1
    4d34:	70 e0       	ldi	r23, 0x00	; 0
    4d36:	a9 01       	movw	r20, r18
    4d38:	0e 94 b5 24 	call	0x496a	; 0x496a <EEPROM_u8WriteStringTo>
				EEPROM_u8WriteStringTo(CARD_EEPROM_ADDRESS, CARD_PAN_ADDRESS,card.PAN);
    4d3c:	2b e0       	ldi	r18, 0x0B	; 11
    4d3e:	32 e0       	ldi	r19, 0x02	; 2
    4d40:	80 e0       	ldi	r24, 0x00	; 0
    4d42:	61 e2       	ldi	r22, 0x21	; 33
    4d44:	70 e0       	ldi	r23, 0x00	; 0
    4d46:	a9 01       	movw	r20, r18
    4d48:	0e 94 b5 24 	call	0x496a	; 0x496a <EEPROM_u8WriteStringTo>
				EEPROM_u8WriteStringTo(CARD_EEPROM_ADDRESS, CARD_PIN_ADDRESS, card.PIN);
    4d4c:	27 e1       	ldi	r18, 0x17	; 23
    4d4e:	32 e0       	ldi	r19, 0x02	; 2
    4d50:	80 e0       	ldi	r24, 0x00	; 0
    4d52:	61 e4       	ldi	r22, 0x41	; 65
    4d54:	70 e0       	ldi	r23, 0x00	; 0
    4d56:	a9 01       	movw	r20, r18
    4d58:	0e 94 b5 24 	call	0x496a	; 0x496a <EEPROM_u8WriteStringTo>
				u8State = USER;
    4d5c:	82 e0       	ldi	r24, 0x02	; 2
    4d5e:	80 93 dc 01 	sts	0x01DC, r24
				TERMINAL_u8EnableInterrupt(UART_callBack);
    4d62:	87 ed       	ldi	r24, 0xD7	; 215
    4d64:	96 e2       	ldi	r25, 0x26	; 38
    4d66:	0e 94 19 24 	call	0x4832	; 0x4832 <TERMINAL_u8EnableInterrupt>
    4d6a:	c3 cf       	rjmp	.-122    	; 0x4cf2 <Card_App+0xc>
			break;
			case USER:
				switch(counter)
    4d6c:	80 91 00 02 	lds	r24, 0x0200
    4d70:	28 2f       	mov	r18, r24
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	3a 83       	std	Y+2, r19	; 0x02
    4d76:	29 83       	std	Y+1, r18	; 0x01
    4d78:	89 81       	ldd	r24, Y+1	; 0x01
    4d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d7c:	00 97       	sbiw	r24, 0x00	; 0
    4d7e:	31 f0       	breq	.+12     	; 0x4d8c <Card_App+0xa6>
    4d80:	29 81       	ldd	r18, Y+1	; 0x01
    4d82:	3a 81       	ldd	r19, Y+2	; 0x02
    4d84:	21 30       	cpi	r18, 0x01	; 1
    4d86:	31 05       	cpc	r19, r1
    4d88:	41 f0       	breq	.+16     	; 0x4d9a <Card_App+0xb4>
    4d8a:	0e c0       	rjmp	.+28     	; 0x4da8 <Card_App+0xc2>
				{
				case 0:
					HoldeName = card.PAN;
    4d8c:	8b e0       	ldi	r24, 0x0B	; 11
    4d8e:	92 e0       	ldi	r25, 0x02	; 2
    4d90:	90 93 20 02 	sts	0x0220, r25
    4d94:	80 93 1f 02 	sts	0x021F, r24
    4d98:	ac cf       	rjmp	.-168    	; 0x4cf2 <Card_App+0xc>
					break;
				case 1:
					HoldeName = card.PIN;
    4d9a:	87 e1       	ldi	r24, 0x17	; 23
    4d9c:	92 e0       	ldi	r25, 0x02	; 2
    4d9e:	90 93 20 02 	sts	0x0220, r25
    4da2:	80 93 1f 02 	sts	0x021F, r24
    4da6:	a5 cf       	rjmp	.-182    	; 0x4cf2 <Card_App+0xc>
					break;
				default:
					counter=0;
    4da8:	10 92 00 02 	sts	0x0200, r1
    4dac:	a2 cf       	rjmp	.-188    	; 0x4cf2 <Card_App+0xc>

00004dae <UART_callBack>:
		}	
	}
}


void UART_callBack(void){
    4dae:	df 93       	push	r29
    4db0:	cf 93       	push	r28
    4db2:	cd b7       	in	r28, 0x3d	; 61
    4db4:	de b7       	in	r29, 0x3e	; 62
    4db6:	2a 97       	sbiw	r28, 0x0a	; 10
    4db8:	0f b6       	in	r0, 0x3f	; 63
    4dba:	f8 94       	cli
    4dbc:	de bf       	out	0x3e, r29	; 62
    4dbe:	0f be       	out	0x3f, r0	; 63
    4dc0:	cd bf       	out	0x3d, r28	; 61

	uint8_t au8TerminalCommand[10];		// array to hold the command entered on the terminal

	// Receive the command
	UART_u8RecieveString(au8TerminalCommand);
    4dc2:	ce 01       	movw	r24, r28
    4dc4:	01 96       	adiw	r24, 0x01	; 1
    4dc6:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <UART_u8RecieveString>
	UART_u8SendString(au8TerminalCommand);
    4dca:	ce 01       	movw	r24, r28
    4dcc:	01 96       	adiw	r24, 0x01	; 1
    4dce:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <UART_u8SendString>
	if (STR_CMP(au8TerminalCommand,(uint8_t*)"ADMIN"))
    4dd2:	27 eb       	ldi	r18, 0xB7	; 183
    4dd4:	30 e0       	ldi	r19, 0x00	; 0
    4dd6:	ce 01       	movw	r24, r28
    4dd8:	01 96       	adiw	r24, 0x01	; 1
    4dda:	b9 01       	movw	r22, r18
    4ddc:	0e 94 15 07 	call	0xe2a	; 0xe2a <STR_CMP>
    4de0:	88 23       	and	r24, r24
    4de2:	21 f0       	breq	.+8      	; 0x4dec <UART_callBack+0x3e>
	{
		u8State = PROGRAMMING;
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	80 93 dc 01 	sts	0x01DC, r24
    4dea:	11 c0       	rjmp	.+34     	; 0x4e0e <UART_callBack+0x60>
	}else if(STR_CMP(au8TerminalCommand,(uint8_t*)"USER"))
    4dec:	2d eb       	ldi	r18, 0xBD	; 189
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	ce 01       	movw	r24, r28
    4df2:	01 96       	adiw	r24, 0x01	; 1
    4df4:	b9 01       	movw	r22, r18
    4df6:	0e 94 15 07 	call	0xe2a	; 0xe2a <STR_CMP>
    4dfa:	88 23       	and	r24, r24
    4dfc:	21 f0       	breq	.+8      	; 0x4e06 <UART_callBack+0x58>
	{
		u8State = USER;
    4dfe:	82 e0       	ldi	r24, 0x02	; 2
    4e00:	80 93 dc 01 	sts	0x01DC, r24
    4e04:	04 c0       	rjmp	.+8      	; 0x4e0e <UART_callBack+0x60>
	}else
	{
		UART_u8SendString((uint8_t*)"WRONG INPUT");
    4e06:	82 ec       	ldi	r24, 0xC2	; 194
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <UART_u8SendString>
	}
}
    4e0e:	2a 96       	adiw	r28, 0x0a	; 10
    4e10:	0f b6       	in	r0, 0x3f	; 63
    4e12:	f8 94       	cli
    4e14:	de bf       	out	0x3e, r29	; 62
    4e16:	0f be       	out	0x3f, r0	; 63
    4e18:	cd bf       	out	0x3d, r28	; 61
    4e1a:	cf 91       	pop	r28
    4e1c:	df 91       	pop	r29
    4e1e:	08 95       	ret

00004e20 <__vector_3>:


void __vector_3(void) __attribute__ ((signal, used));

void __vector_3(void)
{
    4e20:	1f 92       	push	r1
    4e22:	0f 92       	push	r0
    4e24:	0f b6       	in	r0, 0x3f	; 63
    4e26:	0f 92       	push	r0
    4e28:	11 24       	eor	r1, r1
    4e2a:	2f 93       	push	r18
    4e2c:	3f 93       	push	r19
    4e2e:	4f 93       	push	r20
    4e30:	5f 93       	push	r21
    4e32:	6f 93       	push	r22
    4e34:	7f 93       	push	r23
    4e36:	8f 93       	push	r24
    4e38:	9f 93       	push	r25
    4e3a:	af 93       	push	r26
    4e3c:	bf 93       	push	r27
    4e3e:	ef 93       	push	r30
    4e40:	ff 93       	push	r31
    4e42:	df 93       	push	r29
    4e44:	cf 93       	push	r28
    4e46:	cd b7       	in	r28, 0x3d	; 61
    4e48:	de b7       	in	r29, 0x3e	; 62
	SPI_u8SendString(HoldeName);
    4e4a:	80 91 1f 02 	lds	r24, 0x021F
    4e4e:	90 91 20 02 	lds	r25, 0x0220
    4e52:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <SPI_u8SendString>
	counter++;
    4e56:	80 91 00 02 	lds	r24, 0x0200
    4e5a:	8f 5f       	subi	r24, 0xFF	; 255
    4e5c:	80 93 00 02 	sts	0x0200, r24
	CLR_BIT(GIFR_REG,5);
    4e60:	aa e5       	ldi	r26, 0x5A	; 90
    4e62:	b0 e0       	ldi	r27, 0x00	; 0
    4e64:	ea e5       	ldi	r30, 0x5A	; 90
    4e66:	f0 e0       	ldi	r31, 0x00	; 0
    4e68:	80 81       	ld	r24, Z
    4e6a:	8f 7d       	andi	r24, 0xDF	; 223
    4e6c:	8c 93       	st	X, r24
}
    4e6e:	cf 91       	pop	r28
    4e70:	df 91       	pop	r29
    4e72:	ff 91       	pop	r31
    4e74:	ef 91       	pop	r30
    4e76:	bf 91       	pop	r27
    4e78:	af 91       	pop	r26
    4e7a:	9f 91       	pop	r25
    4e7c:	8f 91       	pop	r24
    4e7e:	7f 91       	pop	r23
    4e80:	6f 91       	pop	r22
    4e82:	5f 91       	pop	r21
    4e84:	4f 91       	pop	r20
    4e86:	3f 91       	pop	r19
    4e88:	2f 91       	pop	r18
    4e8a:	0f 90       	pop	r0
    4e8c:	0f be       	out	0x3f, r0	; 63
    4e8e:	0f 90       	pop	r0
    4e90:	1f 90       	pop	r1
    4e92:	18 95       	reti

00004e94 <main>:
#include "../APP/Card.h"



int main(void)
{
    4e94:	df 93       	push	r29
    4e96:	cf 93       	push	r28
    4e98:	cd b7       	in	r28, 0x3d	; 61
    4e9a:	de b7       	in	r29, 0x3e	; 62
	Card_init();
    4e9c:	0e 94 22 26 	call	0x4c44	; 0x4c44 <Card_init>
	Card_App();
    4ea0:	0e 94 73 26 	call	0x4ce6	; 0x4ce6 <Card_App>
    4ea4:	80 e0       	ldi	r24, 0x00	; 0
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
}
    4ea8:	cf 91       	pop	r28
    4eaa:	df 91       	pop	r29
    4eac:	08 95       	ret

00004eae <__mulsi3>:
    4eae:	62 9f       	mul	r22, r18
    4eb0:	d0 01       	movw	r26, r0
    4eb2:	73 9f       	mul	r23, r19
    4eb4:	f0 01       	movw	r30, r0
    4eb6:	82 9f       	mul	r24, r18
    4eb8:	e0 0d       	add	r30, r0
    4eba:	f1 1d       	adc	r31, r1
    4ebc:	64 9f       	mul	r22, r20
    4ebe:	e0 0d       	add	r30, r0
    4ec0:	f1 1d       	adc	r31, r1
    4ec2:	92 9f       	mul	r25, r18
    4ec4:	f0 0d       	add	r31, r0
    4ec6:	83 9f       	mul	r24, r19
    4ec8:	f0 0d       	add	r31, r0
    4eca:	74 9f       	mul	r23, r20
    4ecc:	f0 0d       	add	r31, r0
    4ece:	65 9f       	mul	r22, r21
    4ed0:	f0 0d       	add	r31, r0
    4ed2:	99 27       	eor	r25, r25
    4ed4:	72 9f       	mul	r23, r18
    4ed6:	b0 0d       	add	r27, r0
    4ed8:	e1 1d       	adc	r30, r1
    4eda:	f9 1f       	adc	r31, r25
    4edc:	63 9f       	mul	r22, r19
    4ede:	b0 0d       	add	r27, r0
    4ee0:	e1 1d       	adc	r30, r1
    4ee2:	f9 1f       	adc	r31, r25
    4ee4:	bd 01       	movw	r22, r26
    4ee6:	cf 01       	movw	r24, r30
    4ee8:	11 24       	eor	r1, r1
    4eea:	08 95       	ret

00004eec <__udivmodhi4>:
    4eec:	aa 1b       	sub	r26, r26
    4eee:	bb 1b       	sub	r27, r27
    4ef0:	51 e1       	ldi	r21, 0x11	; 17
    4ef2:	07 c0       	rjmp	.+14     	; 0x4f02 <__udivmodhi4_ep>

00004ef4 <__udivmodhi4_loop>:
    4ef4:	aa 1f       	adc	r26, r26
    4ef6:	bb 1f       	adc	r27, r27
    4ef8:	a6 17       	cp	r26, r22
    4efa:	b7 07       	cpc	r27, r23
    4efc:	10 f0       	brcs	.+4      	; 0x4f02 <__udivmodhi4_ep>
    4efe:	a6 1b       	sub	r26, r22
    4f00:	b7 0b       	sbc	r27, r23

00004f02 <__udivmodhi4_ep>:
    4f02:	88 1f       	adc	r24, r24
    4f04:	99 1f       	adc	r25, r25
    4f06:	5a 95       	dec	r21
    4f08:	a9 f7       	brne	.-22     	; 0x4ef4 <__udivmodhi4_loop>
    4f0a:	80 95       	com	r24
    4f0c:	90 95       	com	r25
    4f0e:	bc 01       	movw	r22, r24
    4f10:	cd 01       	movw	r24, r26
    4f12:	08 95       	ret

00004f14 <__udivmodsi4>:
    4f14:	a1 e2       	ldi	r26, 0x21	; 33
    4f16:	1a 2e       	mov	r1, r26
    4f18:	aa 1b       	sub	r26, r26
    4f1a:	bb 1b       	sub	r27, r27
    4f1c:	fd 01       	movw	r30, r26
    4f1e:	0d c0       	rjmp	.+26     	; 0x4f3a <__udivmodsi4_ep>

00004f20 <__udivmodsi4_loop>:
    4f20:	aa 1f       	adc	r26, r26
    4f22:	bb 1f       	adc	r27, r27
    4f24:	ee 1f       	adc	r30, r30
    4f26:	ff 1f       	adc	r31, r31
    4f28:	a2 17       	cp	r26, r18
    4f2a:	b3 07       	cpc	r27, r19
    4f2c:	e4 07       	cpc	r30, r20
    4f2e:	f5 07       	cpc	r31, r21
    4f30:	20 f0       	brcs	.+8      	; 0x4f3a <__udivmodsi4_ep>
    4f32:	a2 1b       	sub	r26, r18
    4f34:	b3 0b       	sbc	r27, r19
    4f36:	e4 0b       	sbc	r30, r20
    4f38:	f5 0b       	sbc	r31, r21

00004f3a <__udivmodsi4_ep>:
    4f3a:	66 1f       	adc	r22, r22
    4f3c:	77 1f       	adc	r23, r23
    4f3e:	88 1f       	adc	r24, r24
    4f40:	99 1f       	adc	r25, r25
    4f42:	1a 94       	dec	r1
    4f44:	69 f7       	brne	.-38     	; 0x4f20 <__udivmodsi4_loop>
    4f46:	60 95       	com	r22
    4f48:	70 95       	com	r23
    4f4a:	80 95       	com	r24
    4f4c:	90 95       	com	r25
    4f4e:	9b 01       	movw	r18, r22
    4f50:	ac 01       	movw	r20, r24
    4f52:	bd 01       	movw	r22, r26
    4f54:	cf 01       	movw	r24, r30
    4f56:	08 95       	ret

00004f58 <__prologue_saves__>:
    4f58:	2f 92       	push	r2
    4f5a:	3f 92       	push	r3
    4f5c:	4f 92       	push	r4
    4f5e:	5f 92       	push	r5
    4f60:	6f 92       	push	r6
    4f62:	7f 92       	push	r7
    4f64:	8f 92       	push	r8
    4f66:	9f 92       	push	r9
    4f68:	af 92       	push	r10
    4f6a:	bf 92       	push	r11
    4f6c:	cf 92       	push	r12
    4f6e:	df 92       	push	r13
    4f70:	ef 92       	push	r14
    4f72:	ff 92       	push	r15
    4f74:	0f 93       	push	r16
    4f76:	1f 93       	push	r17
    4f78:	cf 93       	push	r28
    4f7a:	df 93       	push	r29
    4f7c:	cd b7       	in	r28, 0x3d	; 61
    4f7e:	de b7       	in	r29, 0x3e	; 62
    4f80:	ca 1b       	sub	r28, r26
    4f82:	db 0b       	sbc	r29, r27
    4f84:	0f b6       	in	r0, 0x3f	; 63
    4f86:	f8 94       	cli
    4f88:	de bf       	out	0x3e, r29	; 62
    4f8a:	0f be       	out	0x3f, r0	; 63
    4f8c:	cd bf       	out	0x3d, r28	; 61
    4f8e:	09 94       	ijmp

00004f90 <__epilogue_restores__>:
    4f90:	2a 88       	ldd	r2, Y+18	; 0x12
    4f92:	39 88       	ldd	r3, Y+17	; 0x11
    4f94:	48 88       	ldd	r4, Y+16	; 0x10
    4f96:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f98:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4fa0:	aa 84       	ldd	r10, Y+10	; 0x0a
    4fa2:	b9 84       	ldd	r11, Y+9	; 0x09
    4fa4:	c8 84       	ldd	r12, Y+8	; 0x08
    4fa6:	df 80       	ldd	r13, Y+7	; 0x07
    4fa8:	ee 80       	ldd	r14, Y+6	; 0x06
    4faa:	fd 80       	ldd	r15, Y+5	; 0x05
    4fac:	0c 81       	ldd	r16, Y+4	; 0x04
    4fae:	1b 81       	ldd	r17, Y+3	; 0x03
    4fb0:	aa 81       	ldd	r26, Y+2	; 0x02
    4fb2:	b9 81       	ldd	r27, Y+1	; 0x01
    4fb4:	ce 0f       	add	r28, r30
    4fb6:	d1 1d       	adc	r29, r1
    4fb8:	0f b6       	in	r0, 0x3f	; 63
    4fba:	f8 94       	cli
    4fbc:	de bf       	out	0x3e, r29	; 62
    4fbe:	0f be       	out	0x3f, r0	; 63
    4fc0:	cd bf       	out	0x3d, r28	; 61
    4fc2:	ed 01       	movw	r28, r26
    4fc4:	08 95       	ret

00004fc6 <_exit>:
    4fc6:	f8 94       	cli

00004fc8 <__stop_program>:
    4fc8:	ff cf       	rjmp	.-2      	; 0x4fc8 <__stop_program>
