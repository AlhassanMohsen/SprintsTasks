
CARD_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004846  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00004846  000048da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  008001ca  008001ca  00004a44  2**0
                  ALLOC
  3 .stab         000074b8  00000000  00000000  00004a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000042b6  00000000  00000000  0000befc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000101b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  00010312  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  000104c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  000123d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  000134a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000144d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  00014658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0001493e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 42 23 	jmp	0x4684	; 0x4684 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__vector_7>
      20:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__vector_8>
      24:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_9>
      28:	0c 94 70 18 	jmp	0x30e0	; 0x30e0 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__vector_12>
      34:	0c 94 9c 0a 	jmp	0x1538	; 0x1538 <__vector_13>
      38:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 23 	call	0x4710	; 0x4710 <main>
      8a:	0c 94 21 24 	jmp	0x4842	; 0x4842 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ea 23 	jmp	0x47d4	; 0x47d4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 eb       	ldi	r26, 0xB2	; 178
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 06 24 	jmp	0x480c	; 0x480c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 12 24 	jmp	0x4824	; 0x4824 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 12 24 	jmp	0x4824	; 0x4824 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ea 23 	jmp	0x47d4	; 0x47d4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 eb       	ldi	r24, 0xB2	; 178
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 06 24 	jmp	0x480c	; 0x480c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 eb       	ldi	r22, 0xB2	; 178
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0e 24 	jmp	0x481c	; 0x481c <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f6 23 	jmp	0x47ec	; 0x47ec <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 12 24 	jmp	0x4824	; 0x4824 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fa 23 	jmp	0x47f4	; 0x47f4 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 16 24 	jmp	0x482c	; 0x482c <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 f2 23 	jmp	0x47e4	; 0x47e4 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 0e 24 	jmp	0x481c	; 0x481c <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e6 54       	subi	r30, 0x46	; 70
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <UART_u8Init>:
/**
 * @fn uint8_t UART_u8Init(uint32_t UART_u32BaudRate)
 * @brief This function is used to Initiate the UART Peripheral
 */
uint8_t UART_u8Init(uint32_t UART_u32BaudRate)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	27 97       	sbiw	r28, 0x07	; 7
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	6c 83       	std	Y+4, r22	; 0x04
     d84:	7d 83       	std	Y+5, r23	; 0x05
     d86:	8e 83       	std	Y+6, r24	; 0x06
     d88:	9f 83       	std	Y+7, r25	; 0x07
	uint8_t u8ErrorState = UART_OK;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t u16UBBR;  /// A Temporary Variable used to hold the calculated value of the UBBR register depending on the Baudrate

	// Make the Access to UCSRC Register
	SET_BIT(UCSRC_REG,URSEL_BIT);
     d8e:	a0 e4       	ldi	r26, 0x40	; 64
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e0 e4       	ldi	r30, 0x40	; 64
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	80 68       	ori	r24, 0x80	; 128
     d9a:	8c 93       	st	X, r24

	/*
	 * Set the operation mode of the UART Depending on the chosen UART_OPERATION_MODE Configuration
	 */
#if   UART_OPERATION_MODE == UART_ASYNC_NORMAL_SPEED
	CLR_BIT(UCSRC_REG,UMSEL_BIT);
     d9c:	a0 e4       	ldi	r26, 0x40	; 64
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e0 e4       	ldi	r30, 0x40	; 64
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8f 7b       	andi	r24, 0xBF	; 191
     da8:	8c 93       	st	X, r24
	CLR_BIT(UCSRA_REG,U2X_BIT);
     daa:	ab e2       	ldi	r26, 0x2B	; 43
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	eb e2       	ldi	r30, 0x2B	; 43
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	8d 7f       	andi	r24, 0xFD	; 253
     db6:	8c 93       	st	X, r24
	//Calculate the UBBR Value depending on the CPU frequency and the input desired baudrate
	// in the UART_ASYNC_NORMAL_SPEED the baudrate divisor is 16
	u16UBBR = (UART_F_CPU/(16UL*UART_u32BaudRate)-1);
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	9d 81       	ldd	r25, Y+5	; 0x05
     dbc:	ae 81       	ldd	r26, Y+6	; 0x06
     dbe:	bf 81       	ldd	r27, Y+7	; 0x07
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	aa 1f       	adc	r26, r26
     dc6:	bb 1f       	adc	r27, r27
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	aa 1f       	adc	r26, r26
     dce:	bb 1f       	adc	r27, r27
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	aa 1f       	adc	r26, r26
     dd6:	bb 1f       	adc	r27, r27
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	aa 1f       	adc	r26, r26
     dde:	bb 1f       	adc	r27, r27
     de0:	9c 01       	movw	r18, r24
     de2:	ad 01       	movw	r20, r26
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	92 e1       	ldi	r25, 0x12	; 18
     de8:	aa e7       	ldi	r26, 0x7A	; 122
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	bc 01       	movw	r22, r24
     dee:	cd 01       	movw	r24, r26
     df0:	0e 94 c8 23 	call	0x4790	; 0x4790 <__udivmodsi4>
     df4:	da 01       	movw	r26, r20
     df6:	c9 01       	movw	r24, r18
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	9a 83       	std	Y+2, r25	; 0x02
     dfc:	89 83       	std	Y+1, r24	; 0x01
#elif UART_CHARACTER_SIZE == UART_7_BIT_CHARACTER
	CLR_BIT(UCSRC_REG,UCSZ0_BIT);
	SET_BIT(UCSRC_REG,UCSZ1_BIT);
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
#elif UART_CHARACTER_SIZE == UART_8_BIT_CHARACTER
	SET_BIT(UCSRC_REG,UCSZ0_BIT);
     dfe:	a0 e4       	ldi	r26, 0x40	; 64
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e0 e4       	ldi	r30, 0x40	; 64
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	82 60       	ori	r24, 0x02	; 2
     e0a:	8c 93       	st	X, r24
	SET_BIT(UCSRC_REG,UCSZ1_BIT);
     e0c:	a0 e4       	ldi	r26, 0x40	; 64
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e0 e4       	ldi	r30, 0x40	; 64
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	84 60       	ori	r24, 0x04	; 4
     e18:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
     e1a:	aa e2       	ldi	r26, 0x2A	; 42
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ea e2       	ldi	r30, 0x2A	; 42
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8b 7f       	andi	r24, 0xFB	; 251
     e26:	8c 93       	st	X, r24

	/*
	 * Set the Parity mode of the UART Depending on the chosen UART_PARITY_MODE Configuration
	 */
#if UART_PARITY_MODE == UART_DISABLE_PARITY
	CLR_BIT(UCSRC_REG,UPM0_BIT);
     e28:	a0 e4       	ldi	r26, 0x40	; 64
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e0 e4       	ldi	r30, 0x40	; 64
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8f 7e       	andi	r24, 0xEF	; 239
     e34:	8c 93       	st	X, r24
	CLR_BIT(UCSRC_REG,UPM1_BIT);
     e36:	a0 e4       	ldi	r26, 0x40	; 64
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e0 e4       	ldi	r30, 0x40	; 64
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 7d       	andi	r24, 0xDF	; 223
     e42:	8c 93       	st	X, r24

	/*
	 * Set the Stop bits number in the frame of the UART Depending on the chosen UART_STOP_BITS_NUMBER Configuration
	 */
#if UART_STOP_BITS_NUMBER == UART_1_STOP_BIT
	CLR_BIT(UCSRC_REG,USBS_BIT);
     e44:	a0 e4       	ldi	r26, 0x40	; 64
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e0 e4       	ldi	r30, 0x40	; 64
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	8c 93       	st	X, r24
	// if the UART_STOP_BITS_NUMBER is not one of this values then update the Error state
	u8ErrorState = WRONG_STOP_BITS_CFG;
#endif

	// Set the UBRR Register to the calculated value to configure the input baudrate
	UBRRL_REG= u16UBBR;
     e52:	e9 e2       	ldi	r30, 0x29	; 41
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	80 83       	st	Z, r24
	UBRRH_REG= (u16UBBR>>8);
     e5a:	e0 e4       	ldi	r30, 0x40	; 64
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	89 2f       	mov	r24, r25
     e64:	99 27       	eor	r25, r25
     e66:	80 83       	st	Z, r24
	//Enable the Receiving and Transmitting Capabilities in the UART
	SET_BIT(UCSRB_REG,RXEN_BIT);
     e68:	aa e2       	ldi	r26, 0x2A	; 42
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	ea e2       	ldi	r30, 0x2A	; 42
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	80 61       	ori	r24, 0x10	; 16
     e74:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,TXEN_BIT);
     e76:	aa e2       	ldi	r26, 0x2A	; 42
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	ea e2       	ldi	r30, 0x2A	; 42
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	88 60       	ori	r24, 0x08	; 8
     e82:	8c 93       	st	X, r24
	if (u8ErrorState == UART_OK)
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	19 f4       	brne	.+6      	; 0xe90 <UART_u8Init+0x122>
	{
		// if there is no errors happened the Rise the Initialization flag indicating that the Peripherals is Initialized Correctly
		gu8_IntializationFlag = UART_INITIALIZED;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	80 93 ca 01 	sts	0x01CA, r24
	}else
	{
		//NOP
	}
	return u8ErrorState;
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e92:	27 96       	adiw	r28, 0x07	; 7
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <UART_u8SendByte>:
 * @fn uint8_t UART_u8SendByte(uint8_t u8Data)
 * @brief This function is used to Send a Byte by polling mechanism
 * @pre the UART must be initialized
 */
uint8_t UART_u8SendByte(uint8_t u8Data)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <UART_u8SendByte+0x6>
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState;
	if (gu8_IntializationFlag==UART_INITIALIZED) // Check if the UART is initialized
     eb0:	80 91 ca 01 	lds	r24, 0x01CA
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	89 f4       	brne	.+34     	; 0xeda <UART_u8SendByte+0x36>
	{
		// Busy wait until the current UART Transmittion ends and the UDR register is Available
		while(!GET_BIT(UCSRA_REG,UDRE_BIT));
     eb8:	eb e2       	ldi	r30, 0x2B	; 43
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	82 95       	swap	r24
     ec0:	86 95       	lsr	r24
     ec2:	87 70       	andi	r24, 0x07	; 7
     ec4:	88 2f       	mov	r24, r24
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	81 70       	andi	r24, 0x01	; 1
     eca:	90 70       	andi	r25, 0x00	; 0
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	a1 f3       	breq	.-24     	; 0xeb8 <UART_u8SendByte+0x14>
		// After the Register is available Load it with the Data Desired to be sent to initiate a transmission
		UDR_REG = u8Data;
     ed0:	ec e2       	ldi	r30, 0x2C	; 44
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	80 83       	st	Z, r24
     ed8:	02 c0       	rjmp	.+4      	; 0xede <UART_u8SendByte+0x3a>
	}else{
		// if the UART is not initialized then update the Error State
		u8ErrorState=UART_INITIALIZATION_ERROR;
     eda:	88 e0       	ldi	r24, 0x08	; 8
     edc:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <UART_u8SendInt>:
 * 		- the pointer to data not pointing to NULL
 */


uint8_t UART_u8SendInt(uint32_t u32Data)
{
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	ca 57       	subi	r28, 0x7A	; 122
     ef8:	d0 40       	sbci	r29, 0x00	; 0
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	fe 01       	movw	r30, r28
     f06:	ed 58       	subi	r30, 0x8D	; 141
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	60 83       	st	Z, r22
     f0c:	71 83       	std	Z+1, r23	; 0x01
     f0e:	82 83       	std	Z+2, r24	; 0x02
     f10:	93 83       	std	Z+3, r25	; 0x03
	DDRB_REG=0xff;
     f12:	e7 e3       	ldi	r30, 0x37	; 55
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	80 83       	st	Z, r24
	PORTB_REG=u32Data;
     f1a:	a8 e3       	ldi	r26, 0x38	; 56
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	fe 01       	movw	r30, r28
     f20:	ed 58       	subi	r30, 0x8D	; 141
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 81       	ld	r24, Z
     f26:	8c 93       	st	X, r24
	uint8_t au8Number[100]={0};
     f28:	84 e6       	ldi	r24, 0x64	; 100
     f2a:	fe 01       	movw	r30, r28
     f2c:	3f 96       	adiw	r30, 0x0f	; 15
     f2e:	df 01       	movw	r26, r30
     f30:	28 2f       	mov	r18, r24
     f32:	1d 92       	st	X+, r1
     f34:	2a 95       	dec	r18
     f36:	e9 f7       	brne	.-6      	; 0xf32 <UART_u8SendInt+0x48>
	uint64_t u8Counter =1;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	8f 83       	std	Y+7, r24	; 0x07
     f3c:	18 86       	std	Y+8, r1	; 0x08
     f3e:	19 86       	std	Y+9, r1	; 0x09
     f40:	1a 86       	std	Y+10, r1	; 0x0a
     f42:	1b 86       	std	Y+11, r1	; 0x0b
     f44:	1c 86       	std	Y+12, r1	; 0x0c
     f46:	1d 86       	std	Y+13, r1	; 0x0d
     f48:	1e 86       	std	Y+14, r1	; 0x0e
	uint8_t u8NumberASCII;

	    uint8_t i = 0;
     f4a:	1d 82       	std	Y+5, r1	; 0x05
	    /* Handle 0 explicitly, otherwise empty string is printed for 0 */
	    if (u32Data == 0)
     f4c:	fe 01       	movw	r30, r28
     f4e:	ed 58       	subi	r30, 0x8D	; 141
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	a2 81       	ldd	r26, Z+2	; 0x02
     f58:	b3 81       	ldd	r27, Z+3	; 0x03
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	a1 05       	cpc	r26, r1
     f5e:	b1 05       	cpc	r27, r1
     f60:	09 f0       	breq	.+2      	; 0xf64 <UART_u8SendInt+0x7a>
     f62:	5f c0       	rjmp	.+190    	; 0x1022 <UART_u8SendInt+0x138>
	    {
	    	au8Number[i++] = '0';
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	ce 01       	movw	r24, r28
     f6c:	0f 96       	adiw	r24, 0x0f	; 15
     f6e:	fc 01       	movw	r30, r24
     f70:	e2 0f       	add	r30, r18
     f72:	f3 1f       	adc	r31, r19
     f74:	80 e3       	ldi	r24, 0x30	; 48
     f76:	80 83       	st	Z, r24
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	8d 83       	std	Y+5, r24	; 0x05
     f7e:	51 c0       	rjmp	.+162    	; 0x1022 <UART_u8SendInt+0x138>
	    // base 10. Otherwise numbers are considered unsigned.

	    // Process individual digits
	    while (u32Data != 0)
	    {
	    	uint8_t rem = u32Data % 10;
     f80:	fe 01       	movw	r30, r28
     f82:	ed 58       	subi	r30, 0x8D	; 141
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	a2 81       	ldd	r26, Z+2	; 0x02
     f8c:	b3 81       	ldd	r27, Z+3	; 0x03
     f8e:	2a e0       	ldi	r18, 0x0A	; 10
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	50 e0       	ldi	r21, 0x00	; 0
     f96:	bc 01       	movw	r22, r24
     f98:	cd 01       	movw	r24, r26
     f9a:	0e 94 c8 23 	call	0x4790	; 0x4790 <__udivmodsi4>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	89 83       	std	Y+1, r24	; 0x01
	        au8Number[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	a8 2f       	mov	r26, r24
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ea 96       	adiw	r28, 0x3a	; 58
     fac:	bf af       	std	Y+63, r27	; 0x3f
     fae:	ae af       	std	Y+62, r26	; 0x3e
     fb0:	ea 97       	sbiw	r28, 0x3a	; 58
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	8a 30       	cpi	r24, 0x0A	; 10
     fb6:	38 f0       	brcs	.+14     	; 0xfc6 <UART_u8SendInt+0xdc>
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	b8 2f       	mov	r27, r24
     fbc:	b9 5a       	subi	r27, 0xA9	; 169
     fbe:	e8 96       	adiw	r28, 0x38	; 56
     fc0:	bf af       	std	Y+63, r27	; 0x3f
     fc2:	e8 97       	sbiw	r28, 0x38	; 56
     fc4:	06 c0       	rjmp	.+12     	; 0xfd2 <UART_u8SendInt+0xe8>
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	e8 2f       	mov	r30, r24
     fca:	e0 5d       	subi	r30, 0xD0	; 208
     fcc:	e8 96       	adiw	r28, 0x38	; 56
     fce:	ef af       	std	Y+63, r30	; 0x3f
     fd0:	e8 97       	sbiw	r28, 0x38	; 56
     fd2:	ce 01       	movw	r24, r28
     fd4:	0f 96       	adiw	r24, 0x0f	; 15
     fd6:	ea 96       	adiw	r28, 0x3a	; 58
     fd8:	ee ad       	ldd	r30, Y+62	; 0x3e
     fda:	ff ad       	ldd	r31, Y+63	; 0x3f
     fdc:	ea 97       	sbiw	r28, 0x3a	; 58
     fde:	e8 0f       	add	r30, r24
     fe0:	f9 1f       	adc	r31, r25
     fe2:	e8 96       	adiw	r28, 0x38	; 56
     fe4:	2f ad       	ldd	r18, Y+63	; 0x3f
     fe6:	e8 97       	sbiw	r28, 0x38	; 56
     fe8:	20 83       	st	Z, r18
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	8d 83       	std	Y+5, r24	; 0x05
	        u32Data = u32Data/10;
     ff0:	8e 01       	movw	r16, r28
     ff2:	0d 58       	subi	r16, 0x8D	; 141
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	fe 01       	movw	r30, r28
     ff8:	ed 58       	subi	r30, 0x8D	; 141
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	a2 81       	ldd	r26, Z+2	; 0x02
    1002:	b3 81       	ldd	r27, Z+3	; 0x03
    1004:	2a e0       	ldi	r18, 0x0A	; 10
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	0e 94 c8 23 	call	0x4790	; 0x4790 <__udivmodsi4>
    1014:	da 01       	movw	r26, r20
    1016:	c9 01       	movw	r24, r18
    1018:	f8 01       	movw	r30, r16
    101a:	80 83       	st	Z, r24
    101c:	91 83       	std	Z+1, r25	; 0x01
    101e:	a2 83       	std	Z+2, r26	; 0x02
    1020:	b3 83       	std	Z+3, r27	; 0x03

	    // In standard itoa(), negative numbers are handled only with
	    // base 10. Otherwise numbers are considered unsigned.

	    // Process individual digits
	    while (u32Data != 0)
    1022:	fe 01       	movw	r30, r28
    1024:	ed 58       	subi	r30, 0x8D	; 141
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	80 81       	ld	r24, Z
    102a:	91 81       	ldd	r25, Z+1	; 0x01
    102c:	a2 81       	ldd	r26, Z+2	; 0x02
    102e:	b3 81       	ldd	r27, Z+3	; 0x03
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	a1 05       	cpc	r26, r1
    1034:	b1 05       	cpc	r27, r1
    1036:	09 f0       	breq	.+2      	; 0x103a <UART_u8SendInt+0x150>
    1038:	a3 cf       	rjmp	.-186    	; 0xf80 <UART_u8SendInt+0x96>
	        au8Number[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0';
	        u32Data = u32Data/10;
	    }


	    au8Number[i] = '\0'; // Append string terminator
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	ce 01       	movw	r24, r28
    1042:	0f 96       	adiw	r24, 0x0f	; 15
    1044:	fc 01       	movw	r30, r24
    1046:	e2 0f       	add	r30, r18
    1048:	f3 1f       	adc	r31, r19
    104a:	10 82       	st	Z, r1

	    // Reverse the string
	    uint8_t start = 0;
    104c:	1c 82       	std	Y+4, r1	; 0x04
	    uint8_t end = i -1;
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	81 50       	subi	r24, 0x01	; 1
    1052:	8b 83       	std	Y+3, r24	; 0x03
    1054:	28 c0       	rjmp	.+80     	; 0x10a6 <UART_u8SendInt+0x1bc>
	    uint8_t temp;
	    while (start < end)
	    {
	    	temp =*(au8Number+start);
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	fe 01       	movw	r30, r28
    105e:	3f 96       	adiw	r30, 0x0f	; 15
    1060:	e8 0f       	add	r30, r24
    1062:	f9 1f       	adc	r31, r25
    1064:	80 81       	ld	r24, Z
    1066:	8a 83       	std	Y+2, r24	; 0x02
	    	*(au8Number+start) = *(au8Number+end);
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	de 01       	movw	r26, r28
    1070:	1f 96       	adiw	r26, 0x0f	; 15
    1072:	a8 0f       	add	r26, r24
    1074:	b9 1f       	adc	r27, r25
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	fe 01       	movw	r30, r28
    107e:	3f 96       	adiw	r30, 0x0f	; 15
    1080:	e8 0f       	add	r30, r24
    1082:	f9 1f       	adc	r31, r25
    1084:	80 81       	ld	r24, Z
    1086:	8c 93       	st	X, r24
	    	*(au8Number+end) = temp;
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	fe 01       	movw	r30, r28
    1090:	3f 96       	adiw	r30, 0x0f	; 15
    1092:	e8 0f       	add	r30, r24
    1094:	f9 1f       	adc	r31, r25
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	80 83       	st	Z, r24
	        start++;
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	8c 83       	std	Y+4, r24	; 0x04
	        end--;
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	81 50       	subi	r24, 0x01	; 1
    10a4:	8b 83       	std	Y+3, r24	; 0x03

	    // Reverse the string
	    uint8_t start = 0;
	    uint8_t end = i -1;
	    uint8_t temp;
	    while (start < end)
    10a6:	9c 81       	ldd	r25, Y+4	; 0x04
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	98 17       	cp	r25, r24
    10ac:	a0 f2       	brcs	.-88     	; 0x1056 <UART_u8SendInt+0x16c>
	    	*(au8Number+start) = *(au8Number+end);
	    	*(au8Number+end) = temp;
	        start++;
	        end--;
	    }
	    UART_u8SendString(au8Number);
    10ae:	ce 01       	movw	r24, r28
    10b0:	0f 96       	adiw	r24, 0x0f	; 15
    10b2:	0e 94 67 08 	call	0x10ce	; 0x10ce <UART_u8SendString>
		UART_u8SendByte(u8NumberASCII);
		u8Counter=u8Counter/10;
	}

*/
}
    10b6:	c6 58       	subi	r28, 0x86	; 134
    10b8:	df 4f       	sbci	r29, 0xFF	; 255
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	08 95       	ret

000010ce <UART_u8SendString>:


uint8_t UART_u8SendString(uint8_t* pau8Data)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <UART_u8SendString+0x6>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <UART_u8SendString+0x8>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <UART_u8SendString+0xa>
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8ErrorState = UART_OK;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8LastByte; 			/// a variable used to temporarily hold the value of the last character sent
	uint16_t u16StringCounter=0; 	/// counter to navigate the string as array
    10e4:	1a 82       	std	Y+2, r1	; 0x02
    10e6:	19 82       	std	Y+1, r1	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED) // Check if the UART is initialized
    10e8:	80 91 ca 01 	lds	r24, 0x01CA
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	f9 f4       	brne	.+62     	; 0x112e <UART_u8SendString+0x60>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8Data!=NULL)
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	c1 f0       	breq	.+48     	; 0x1128 <UART_u8SendString+0x5a>
		{
			// if not pointing to null
			do{
				//save the value of the character to a temporary variable
				u8LastByte=pau8Data[u16StringCounter];
    10f8:	2d 81       	ldd	r18, Y+5	; 0x05
    10fa:	3e 81       	ldd	r19, Y+6	; 0x06
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1100:	f9 01       	movw	r30, r18
    1102:	e8 0f       	add	r30, r24
    1104:	f9 1f       	adc	r31, r25
    1106:	80 81       	ld	r24, Z
    1108:	8b 83       	std	Y+3, r24	; 0x03
				// Send this character through UART
				UART_u8SendByte(u8LastByte);
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_u8SendByte>
				// increment the array navigator to get the next character
				u16StringCounter++;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	9a 83       	std	Y+2, r25	; 0x02
    1118:	89 83       	std	Y+1, r24	; 0x01

			}while(u8LastByte!=0x0D&&u8LastByte!=0x00);// do the same while the sent byte wasn't a new line
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	8d 30       	cpi	r24, 0x0D	; 13
    111e:	49 f0       	breq	.+18     	; 0x1132 <UART_u8SendString+0x64>
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	88 23       	and	r24, r24
    1124:	49 f7       	brne	.-46     	; 0x10f8 <UART_u8SendString+0x2a>
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <UART_u8SendString+0x64>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    1128:	87 e0       	ldi	r24, 0x07	; 7
    112a:	8c 83       	std	Y+4, r24	; 0x04
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <UART_u8SendString+0x64>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
    112e:	88 e0       	ldi	r24, 0x08	; 8
    1130:	8c 83       	std	Y+4, r24	; 0x04
	}

	return u8ErrorState;
    1132:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1134:	26 96       	adiw	r28, 0x06	; 6
    1136:	0f b6       	in	r0, 0x3f	; 63
    1138:	f8 94       	cli
    113a:	de bf       	out	0x3e, r29	; 62
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	cd bf       	out	0x3d, r28	; 61
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <UART_u8ReceiveByte>:
 * @brief This function is used to Get the Received byte of data by polling mechanism
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */
uint8_t UART_u8ReceiveByte(uint8_t* pu8RecievedData)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <UART_u8ReceiveByte+0x6>
    114c:	0f 92       	push	r0
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9b 83       	std	Y+3, r25	; 0x03
    1154:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	89 83       	std	Y+1, r24	; 0x01
	// Check if the UART is Initialized
	if (gu8_IntializationFlag==UART_INITIALIZED)
    115a:	80 91 ca 01 	lds	r24, 0x01CA
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	99 f4       	brne	.+38     	; 0x1188 <UART_u8ReceiveByte+0x42>
	{
		//if it is initialized then check that the pointer is not pointing to null
		if (pu8RecievedData!=NULL)
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	9b 81       	ldd	r25, Y+3	; 0x03
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	61 f0       	breq	.+24     	; 0x1182 <UART_u8ReceiveByte+0x3c>
		{
			//if not pointing to null
			// Busy wait until the UART Receive a byte
			while (!GET_BIT(UCSRA_REG,RXC_BIT));
    116a:	eb e2       	ldi	r30, 0x2B	; 43
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	88 23       	and	r24, r24
    1172:	dc f7       	brge	.-10     	; 0x116a <UART_u8ReceiveByte+0x24>
			// Then Load the received byte from the UDR register and save it to the data location input
			*pu8RecievedData = UDR_REG;
    1174:	ec e2       	ldi	r30, 0x2C	; 44
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	ea 81       	ldd	r30, Y+2	; 0x02
    117c:	fb 81       	ldd	r31, Y+3	; 0x03
    117e:	80 83       	st	Z, r24
    1180:	05 c0       	rjmp	.+10     	; 0x118c <UART_u8ReceiveByte+0x46>
		}else
		{
			// if the Pointer is pointing to NULL then update the Error State
			u8ErrorState = UART_NULL_INPUT;
    1182:	87 e0       	ldi	r24, 0x07	; 7
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	02 c0       	rjmp	.+4      	; 0x118c <UART_u8ReceiveByte+0x46>
		}
	}else
	{
		// if the UART is not initialized then update the Error State
		u8ErrorState=UART_INITIALIZATION_ERROR;
    1188:	88 e0       	ldi	r24, 0x08	; 8
    118a:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    118c:	89 81       	ldd	r24, Y+1	; 0x01
}
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <UART_u8ReceiveInt>:

uint8_t UART_u8ReceiveInt(uint32_t* pu32ReceivedInt)
{
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	66 97       	sbiw	r28, 0x16	; 22
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	9d 8b       	std	Y+21, r25	; 0x15
    11b8:	8c 8b       	std	Y+20, r24	; 0x14
    uint8_t u8ArrayCounter=0;
    11ba:	18 86       	std	Y+8, r1	; 0x08
    uint32_t u8Multiplier=1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a0 e0       	ldi	r26, 0x00	; 0
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	8c 83       	std	Y+4, r24	; 0x04
    11c6:	9d 83       	std	Y+5, r25	; 0x05
    11c8:	ae 83       	std	Y+6, r26	; 0x06
    11ca:	bf 83       	std	Y+7, r27	; 0x07
    uint8_t ReceivedStr[11];
    *pu32ReceivedInt=0;
    11cc:	ec 89       	ldd	r30, Y+20	; 0x14
    11ce:	fd 89       	ldd	r31, Y+21	; 0x15
    11d0:	10 82       	st	Z, r1
    11d2:	11 82       	std	Z+1, r1	; 0x01
    11d4:	12 82       	std	Z+2, r1	; 0x02
    11d6:	13 82       	std	Z+3, r1	; 0x03
    UART_u8RecieveString(ReceivedStr);
    11d8:	ce 01       	movw	r24, r28
    11da:	09 96       	adiw	r24, 0x09	; 9
    11dc:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <UART_u8RecieveString>
    uint8_t ArrayNav=0;
    11e0:	1b 82       	std	Y+3, r1	; 0x03
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <UART_u8ReceiveInt+0x50>
    //UART_u8SendString(ReceivedStr);
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    {
    	u8ArrayCounter++;
    11e4:	88 85       	ldd	r24, Y+8	; 0x08
    11e6:	8f 5f       	subi	r24, 0xFF	; 255
    11e8:	88 87       	std	Y+8, r24	; 0x08
    uint8_t ReceivedStr[11];
    *pu32ReceivedInt=0;
    UART_u8RecieveString(ReceivedStr);
    uint8_t ArrayNav=0;
    //UART_u8SendString(ReceivedStr);
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    11ea:	88 85       	ldd	r24, Y+8	; 0x08
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	ce 01       	movw	r24, r28
    11f2:	09 96       	adiw	r24, 0x09	; 9
    11f4:	fc 01       	movw	r30, r24
    11f6:	e2 0f       	add	r30, r18
    11f8:	f3 1f       	adc	r31, r19
    11fa:	80 81       	ld	r24, Z
    11fc:	8d 30       	cpi	r24, 0x0D	; 13
    11fe:	91 f7       	brne	.-28     	; 0x11e4 <UART_u8ReceiveInt+0x4a>
    {
    	u8ArrayCounter++;
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    1200:	1a 82       	std	Y+2, r1	; 0x02
    1202:	58 c0       	rjmp	.+176    	; 0x12b4 <UART_u8ReceiveInt+0x11a>
    {

        for(uint8_t multiplier=(u8ArrayCounter-1)-loopCounter;multiplier>0;multiplier--)
    1204:	98 85       	ldd	r25, Y+8	; 0x08
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	29 2f       	mov	r18, r25
    120a:	28 1b       	sub	r18, r24
    120c:	82 2f       	mov	r24, r18
    120e:	81 50       	subi	r24, 0x01	; 1
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	15 c0       	rjmp	.+42     	; 0x123e <UART_u8ReceiveInt+0xa4>
        {
        	u8Multiplier=10*u8Multiplier;
    1214:	8c 81       	ldd	r24, Y+4	; 0x04
    1216:	9d 81       	ldd	r25, Y+5	; 0x05
    1218:	ae 81       	ldd	r26, Y+6	; 0x06
    121a:	bf 81       	ldd	r27, Y+7	; 0x07
    121c:	2a e0       	ldi	r18, 0x0A	; 10
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	bc 01       	movw	r22, r24
    1226:	cd 01       	movw	r24, r26
    1228:	0e 94 95 23 	call	0x472a	; 0x472a <__mulsi3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	8c 83       	std	Y+4, r24	; 0x04
    1232:	9d 83       	std	Y+5, r25	; 0x05
    1234:	ae 83       	std	Y+6, r26	; 0x06
    1236:	bf 83       	std	Y+7, r27	; 0x07
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    {

        for(uint8_t multiplier=(u8ArrayCounter-1)-loopCounter;multiplier>0;multiplier--)
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	81 50       	subi	r24, 0x01	; 1
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	88 23       	and	r24, r24
    1242:	41 f7       	brne	.-48     	; 0x1214 <UART_u8ReceiveInt+0x7a>
        {
        	u8Multiplier=10*u8Multiplier;
        }
        *pu32ReceivedInt = *pu32ReceivedInt + ((ReceivedStr[ArrayNav]-'0')*u8Multiplier);
    1244:	ec 89       	ldd	r30, Y+20	; 0x14
    1246:	fd 89       	ldd	r31, Y+21	; 0x15
    1248:	e0 80       	ld	r14, Z
    124a:	f1 80       	ldd	r15, Z+1	; 0x01
    124c:	02 81       	ldd	r16, Z+2	; 0x02
    124e:	13 81       	ldd	r17, Z+3	; 0x03
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	ce 01       	movw	r24, r28
    1258:	09 96       	adiw	r24, 0x09	; 9
    125a:	fc 01       	movw	r30, r24
    125c:	e2 0f       	add	r30, r18
    125e:	f3 1f       	adc	r31, r19
    1260:	80 81       	ld	r24, Z
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	c0 97       	sbiw	r24, 0x30	; 48
    1268:	aa 27       	eor	r26, r26
    126a:	97 fd       	sbrc	r25, 7
    126c:	a0 95       	com	r26
    126e:	ba 2f       	mov	r27, r26
    1270:	2c 81       	ldd	r18, Y+4	; 0x04
    1272:	3d 81       	ldd	r19, Y+5	; 0x05
    1274:	4e 81       	ldd	r20, Y+6	; 0x06
    1276:	5f 81       	ldd	r21, Y+7	; 0x07
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 95 23 	call	0x472a	; 0x472a <__mulsi3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	8e 0d       	add	r24, r14
    1286:	9f 1d       	adc	r25, r15
    1288:	a0 1f       	adc	r26, r16
    128a:	b1 1f       	adc	r27, r17
    128c:	ec 89       	ldd	r30, Y+20	; 0x14
    128e:	fd 89       	ldd	r31, Y+21	; 0x15
    1290:	80 83       	st	Z, r24
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	a2 83       	std	Z+2, r26	; 0x02
    1296:	b3 83       	std	Z+3, r27	; 0x03
        ArrayNav++;
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	8b 83       	std	Y+3, r24	; 0x03
        u8Multiplier=1;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	a0 e0       	ldi	r26, 0x00	; 0
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	8c 83       	std	Y+4, r24	; 0x04
    12a8:	9d 83       	std	Y+5, r25	; 0x05
    12aa:	ae 83       	std	Y+6, r26	; 0x06
    12ac:	bf 83       	std	Y+7, r27	; 0x07
    while (ReceivedStr[u8ArrayCounter]!=0x0D)
    {
    	u8ArrayCounter++;
    }

    for(uint8_t loopCounter=0;loopCounter<u8ArrayCounter;loopCounter++)
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	8f 5f       	subi	r24, 0xFF	; 255
    12b2:	8a 83       	std	Y+2, r24	; 0x02
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	88 85       	ldd	r24, Y+8	; 0x08
    12b8:	98 17       	cp	r25, r24
    12ba:	08 f4       	brcc	.+2      	; 0x12be <UART_u8ReceiveInt+0x124>
    12bc:	a3 cf       	rjmp	.-186    	; 0x1204 <UART_u8ReceiveInt+0x6a>
        *pu32ReceivedInt = *pu32ReceivedInt + ((ReceivedStr[ArrayNav]-'0')*u8Multiplier);
        ArrayNav++;
        u8Multiplier=1;
    }

}
    12be:	66 96       	adiw	r28, 0x16	; 22
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	08 95       	ret

000012d8 <UART_u8RecieveString>:
 * @brief This function is used to Get a Received String by polling mechanism
 * @pre - the UART must be initialized
 * 		- the pointer to data not pointing to NULL
 */
uint8_t UART_u8RecieveString(uint8_t* pau8RecievedData)
{
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	00 d0       	rcall	.+0      	; 0x12de <UART_u8RecieveString+0x6>
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <UART_u8RecieveString+0x8>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <UART_u8RecieveString+0xa>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	9e 83       	std	Y+6, r25	; 0x06
    12e8:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t u8ErrorState = UART_OK;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8PreReading; 			/// a variable used to temporarily hold the value of the last character received
	uint8_t* Temp=pau8RecievedData; /// a temporarily pointer initialized with the place of the first character of the array to save the received string in
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag == UART_INITIALIZED)// Check if the UART is initialized
    12f6:	80 91 ca 01 	lds	r24, 0x01CA
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	c1 f4       	brne	.+48     	; 0x132e <UART_u8RecieveString+0x56>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8RecievedData!=NULL)
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	89 f0       	breq	.+34     	; 0x1328 <UART_u8RecieveString+0x50>
		{
			do{
				// Receive a character through UART
				UART_u8ReceiveByte(&u8PreReading);
    1306:	ce 01       	movw	r24, r28
    1308:	04 96       	adiw	r24, 0x04	; 4
    130a:	0e 94 a3 08 	call	0x1146	; 0x1146 <UART_u8ReceiveByte>
				//Save the received character to the last empty place in the array
				*Temp =u8PreReading;
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	e9 81       	ldd	r30, Y+1	; 0x01
    1312:	fa 81       	ldd	r31, Y+2	; 0x02
    1314:	80 83       	st	Z, r24
				//Update the last empty place in the array
				Temp++;
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	9a 81       	ldd	r25, Y+2	; 0x02
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
			}while (u8PreReading!=0x0D); // do this while the received byte is not endline
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	8d 30       	cpi	r24, 0x0D	; 13
    1324:	81 f7       	brne	.-32     	; 0x1306 <UART_u8RecieveString+0x2e>
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <UART_u8RecieveString+0x5a>

		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    1328:	87 e0       	ldi	r24, 0x07	; 7
    132a:	8b 83       	std	Y+3, r24	; 0x03
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <UART_u8RecieveString+0x5a>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState= UART_INITIALIZATION_ERROR;
    132e:	88 e0       	ldi	r24, 0x08	; 8
    1330:	8b 83       	std	Y+3, r24	; 0x03
	}

	return u8ErrorState;
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1334:	26 96       	adiw	r28, 0x06	; 6
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <UART_u8ReceiveCountedString>:


uint8_t UART_u8ReceiveCountedString(uint8_t*pau8RecievedData,uint8_t Count)
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	27 97       	sbiw	r28, 0x07	; 7
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	9e 83       	std	Y+6, r25	; 0x06
    135c:	8d 83       	std	Y+5, r24	; 0x05
    135e:	6f 83       	std	Y+7, r22	; 0x07
	uint8_t u8ErrorState = UART_OK;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8PreReading; 			/// a variable used to temporarily hold the value of the last character received
	uint8_t* Temp=pau8RecievedData; /// a temporarily pointer initialized with the place of the first character of the array to save the received string in
    1364:	8d 81       	ldd	r24, Y+5	; 0x05
    1366:	9e 81       	ldd	r25, Y+6	; 0x06
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag == UART_INITIALIZED)// Check if the UART is initialized
    136c:	80 91 ca 01 	lds	r24, 0x01CA
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	f1 f4       	brne	.+60     	; 0x13b0 <UART_u8ReceiveCountedString+0x6a>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pau8RecievedData!=NULL)
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	b9 f0       	breq	.+46     	; 0x13aa <UART_u8ReceiveCountedString+0x64>
		{
			do{
				// Receive a character through UART
				UART_u8ReceiveByte(&u8PreReading);
    137c:	ce 01       	movw	r24, r28
    137e:	04 96       	adiw	r24, 0x04	; 4
    1380:	0e 94 a3 08 	call	0x1146	; 0x1146 <UART_u8ReceiveByte>
				//Save the received character to the last empty place in the array
				*Temp =u8PreReading;
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	e9 81       	ldd	r30, Y+1	; 0x01
    1388:	fa 81       	ldd	r31, Y+2	; 0x02
    138a:	80 83       	st	Z, r24
				//Update the last empty place in the array
				Temp++;
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01
				Count--;
    1396:	8f 81       	ldd	r24, Y+7	; 0x07
    1398:	81 50       	subi	r24, 0x01	; 1
    139a:	8f 83       	std	Y+7, r24	; 0x07
			}while (u8PreReading!=0x0D&&Count!=0); // do this while the received byte is not endline
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	8d 30       	cpi	r24, 0x0D	; 13
    13a0:	49 f0       	breq	.+18     	; 0x13b4 <UART_u8ReceiveCountedString+0x6e>
    13a2:	8f 81       	ldd	r24, Y+7	; 0x07
    13a4:	88 23       	and	r24, r24
    13a6:	51 f7       	brne	.-44     	; 0x137c <UART_u8ReceiveCountedString+0x36>
    13a8:	05 c0       	rjmp	.+10     	; 0x13b4 <UART_u8ReceiveCountedString+0x6e>

		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    13aa:	87 e0       	ldi	r24, 0x07	; 7
    13ac:	8b 83       	std	Y+3, r24	; 0x03
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <UART_u8ReceiveCountedString+0x6e>
		}
	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState= UART_INITIALIZATION_ERROR;
    13b0:	88 e0       	ldi	r24, 0x08	; 8
    13b2:	8b 83       	std	Y+3, r24	; 0x03
	}

	return u8ErrorState;
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    13b6:	27 96       	adiw	r28, 0x07	; 7
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <UART_u8EnableRecievingInterrupt>:
 * @brief This function is called to enable the Receiving complete Interrupt
 * @pre - the UART must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t UART_u8EnableRecievingInterrupt(void (*pfnCallBack)(uint8_t))
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <UART_u8EnableRecievingInterrupt+0x6>
    13ce:	0f 92       	push	r0
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	9b 83       	std	Y+3, r25	; 0x03
    13d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED)// Check if the UART is initialized
    13dc:	80 91 ca 01 	lds	r24, 0x01CA
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	e1 f4       	brne	.+56     	; 0x141c <UART_u8EnableRecievingInterrupt+0x54>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pfnCallBack!=NULL)
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	9b 81       	ldd	r25, Y+3	; 0x03
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	a9 f0       	breq	.+42     	; 0x1416 <UART_u8EnableRecievingInterrupt+0x4e>
		{
			//update the pointer of the CallBack function with the passed address of function
			gpf_RecieveCallBack = pfnCallBack;
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	9b 81       	ldd	r25, Y+3	; 0x03
    13f0:	90 93 cc 01 	sts	0x01CC, r25
    13f4:	80 93 cb 01 	sts	0x01CB, r24
			//Enable the Receiving Interrupt
			SET_BIT(UCSRB_REG,RXCIE_BIT);
    13f8:	aa e2       	ldi	r26, 0x2A	; 42
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ea e2       	ldi	r30, 0x2A	; 42
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 68       	ori	r24, 0x80	; 128
    1404:	8c 93       	st	X, r24
			//Enable the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
    1406:	af e5       	ldi	r26, 0x5F	; 95
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	ef e5       	ldi	r30, 0x5F	; 95
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	80 68       	ori	r24, 0x80	; 128
    1412:	8c 93       	st	X, r24
    1414:	05 c0       	rjmp	.+10     	; 0x1420 <UART_u8EnableRecievingInterrupt+0x58>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    1416:	87 e0       	ldi	r24, 0x07	; 7
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <UART_u8EnableRecievingInterrupt+0x58>
		}

	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
    141c:	88 e0       	ldi	r24, 0x08	; 8
    141e:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <UART_u8EnableSendingInterrupt>:
 * @brief This function is called to enable the Sending complete Interrupt
 * @pre - the UART must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t UART_u8EnableSendingInterrupt(void (*pfnCallBack)(void))
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <UART_u8EnableSendingInterrupt+0x6>
    1434:	0f 92       	push	r0
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	9b 83       	std	Y+3, r25	; 0x03
    143c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = UART_OK;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_IntializationFlag==UART_INITIALIZED)// Check if the UART is initialized
    1442:	80 91 ca 01 	lds	r24, 0x01CA
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	e1 f4       	brne	.+56     	; 0x1482 <UART_u8EnableSendingInterrupt+0x54>
	{
		// if it is then check if the pointer is not pointing to NULL
		if (pfnCallBack!=NULL)
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	9b 81       	ldd	r25, Y+3	; 0x03
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	a9 f0       	breq	.+42     	; 0x147c <UART_u8EnableSendingInterrupt+0x4e>
		{
			//update the pointer of the CallBack function with the passed address of function
			gpf_TransmitCallBack = pfnCallBack;
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	9b 81       	ldd	r25, Y+3	; 0x03
    1456:	90 93 ce 01 	sts	0x01CE, r25
    145a:	80 93 cd 01 	sts	0x01CD, r24
			//Enable the Receiving Interrupt
			SET_BIT(UCSRB_REG,TXCIE_BIT);
    145e:	aa e2       	ldi	r26, 0x2A	; 42
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	ea e2       	ldi	r30, 0x2A	; 42
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	80 64       	ori	r24, 0x40	; 64
    146a:	8c 93       	st	X, r24
			//Enable the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
    146c:	af e5       	ldi	r26, 0x5F	; 95
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ef e5       	ldi	r30, 0x5F	; 95
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 68       	ori	r24, 0x80	; 128
    1478:	8c 93       	st	X, r24
    147a:	05 c0       	rjmp	.+10     	; 0x1486 <UART_u8EnableSendingInterrupt+0x58>
		}else
		{
			// if it is pointing to NULL then Update the Error State
			u8ErrorState = UART_NULL_INPUT;
    147c:	87 e0       	ldi	r24, 0x07	; 7
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <UART_u8EnableSendingInterrupt+0x58>
		}

	}else
	{
		// if the UART is not Initialized then Update the Error State
		u8ErrorState = UART_INITIALIZATION_ERROR;
    1482:	88 e0       	ldi	r24, 0x08	; 8
    1484:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    1486:	89 81       	ldd	r24, Y+1	; 0x01

}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <UART_u8DisableReceivingInterrupt>:
/**
 * @fn UART_u8DisableRecievingInterrupt(void)
 * @brief This function is called to disable the Receiving complete Interrupt
 */
void UART_u8DisableReceivingInterrupt(void)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
	//Reset the pointer to the callback function to NULL
	gpf_RecieveCallBack = NULL;
    149c:	10 92 cc 01 	sts	0x01CC, r1
    14a0:	10 92 cb 01 	sts	0x01CB, r1
	// Clear the Enable bit of the receiving Interrupt
	CLR_BIT(UCSRB_REG,RXCIE_BIT);
    14a4:	aa e2       	ldi	r26, 0x2A	; 42
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	ea e2       	ldi	r30, 0x2A	; 42
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	8f 77       	andi	r24, 0x7F	; 127
    14b0:	8c 93       	st	X, r24
}
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <UART_u8DisableTransmittionInterrupt>:
/**
 * @fn UART_u8DisableTransmittionInterrupt(void)
 * @brief This function is called to disable the Transmission complete Interrupt
 */
void UART_u8DisableTransmittionInterrupt(void)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
	//Reset the pointer to the callback function to NULL
	gpf_TransmitCallBack = NULL;
    14c0:	10 92 ce 01 	sts	0x01CE, r1
    14c4:	10 92 cd 01 	sts	0x01CD, r1
	// Clear the Enable bit of the transmittion complete Interrupt
	CLR_BIT(UCSRB_REG,TXCIE_BIT);
    14c8:	aa e2       	ldi	r26, 0x2A	; 42
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	ea e2       	ldi	r30, 0x2A	; 42
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 7b       	andi	r24, 0xBF	; 191
    14d4:	8c 93       	st	X, r24
}
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <UART_u8Deinit>:
/**
 * @fn UART_u8Deinit(void)
 * @brief This function is called to Stop the UART Peripheral and De-initialize it
 */
void UART_u8Deinit(void)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
	// Disable the UART capabilities of Receiving and transmitting
	CLR_BIT(UCSRB_REG,RXEN_BIT);
    14e4:	aa e2       	ldi	r26, 0x2A	; 42
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ea e2       	ldi	r30, 0x2A	; 42
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 7e       	andi	r24, 0xEF	; 239
    14f0:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG,TXEN_BIT);
    14f2:	aa e2       	ldi	r26, 0x2A	; 42
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	ea e2       	ldi	r30, 0x2A	; 42
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	87 7f       	andi	r24, 0xF7	; 247
    14fe:	8c 93       	st	X, r24
	//Reset the pointer to the transmittion callback function to NULL
	gpf_TransmitCallBack = NULL;
    1500:	10 92 ce 01 	sts	0x01CE, r1
    1504:	10 92 cd 01 	sts	0x01CD, r1
	//Reset the pointer to the Receiving callback function to NULL
	gpf_RecieveCallBack = NULL;
    1508:	10 92 cc 01 	sts	0x01CC, r1
    150c:	10 92 cb 01 	sts	0x01CB, r1
	// Clear the Enable bit of the receiving Interrupt
	CLR_BIT(UCSRB_REG,RXCIE_BIT);
    1510:	aa e2       	ldi	r26, 0x2A	; 42
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ea e2       	ldi	r30, 0x2A	; 42
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8f 77       	andi	r24, 0x7F	; 127
    151c:	8c 93       	st	X, r24
	// Clear the Enable bit of the transmittion complete Interrupt
	CLR_BIT(UCSRB_REG,TXCIE_BIT);
    151e:	aa e2       	ldi	r26, 0x2A	; 42
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	ea e2       	ldi	r30, 0x2A	; 42
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	8f 7b       	andi	r24, 0xBF	; 191
    152a:	8c 93       	st	X, r24
	// Reset the Initialization flag indicating that the UART is not initialized anymore
	gu8_IntializationFlag = UART_INITIALIZED;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	80 93 ca 01 	sts	0x01CA, r24

}
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <__vector_13>:

/**
 * @brief the Receiving Interrupt ISR
 */
void __vector_13(void) {
    1538:	1f 92       	push	r1
    153a:	0f 92       	push	r0
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	0f 92       	push	r0
    1540:	11 24       	eor	r1, r1
    1542:	2f 93       	push	r18
    1544:	3f 93       	push	r19
    1546:	4f 93       	push	r20
    1548:	5f 93       	push	r21
    154a:	6f 93       	push	r22
    154c:	7f 93       	push	r23
    154e:	8f 93       	push	r24
    1550:	9f 93       	push	r25
    1552:	af 93       	push	r26
    1554:	bf 93       	push	r27
    1556:	ef 93       	push	r30
    1558:	ff 93       	push	r31
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	0f 92       	push	r0
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62

	uint8_t UDRFlush; // this is a temporary variable used to read the UDR to clear the receive Complete flag
	if (gpf_RecieveCallBack!=NULL) // check if the pointer to the Callback is pointing to NULL
    1564:	80 91 cb 01 	lds	r24, 0x01CB
    1568:	90 91 cc 01 	lds	r25, 0x01CC
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	49 f0       	breq	.+18     	; 0x1582 <__vector_13+0x4a>
	{
		//if not then call the function pointing to it
		gpf_RecieveCallBack(UDR_REG);
    1570:	e0 91 cb 01 	lds	r30, 0x01CB
    1574:	f0 91 cc 01 	lds	r31, 0x01CC
    1578:	ac e2       	ldi	r26, 0x2C	; 44
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	8c 91       	ld	r24, X
    157e:	09 95       	icall
    1580:	04 c0       	rjmp	.+8      	; 0x158a <__vector_13+0x52>
	}else
	{
		// if it is the just flush the UDR
		UDRFlush = UDR_REG;
    1582:	ec e2       	ldi	r30, 0x2C	; 44
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	89 83       	std	Y+1, r24	; 0x01
	}
}
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	ff 91       	pop	r31
    1592:	ef 91       	pop	r30
    1594:	bf 91       	pop	r27
    1596:	af 91       	pop	r26
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	7f 91       	pop	r23
    159e:	6f 91       	pop	r22
    15a0:	5f 91       	pop	r21
    15a2:	4f 91       	pop	r20
    15a4:	3f 91       	pop	r19
    15a6:	2f 91       	pop	r18
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <__vector_14>:

/**
 * @brief the Transmission Interrupt ISR
 */
void __vector_14(void) {
    15b2:	1f 92       	push	r1
    15b4:	0f 92       	push	r0
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	0f 92       	push	r0
    15ba:	11 24       	eor	r1, r1
    15bc:	2f 93       	push	r18
    15be:	3f 93       	push	r19
    15c0:	4f 93       	push	r20
    15c2:	5f 93       	push	r21
    15c4:	6f 93       	push	r22
    15c6:	7f 93       	push	r23
    15c8:	8f 93       	push	r24
    15ca:	9f 93       	push	r25
    15cc:	af 93       	push	r26
    15ce:	bf 93       	push	r27
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
	if (gpf_TransmitCallBack!=NULL)// check if the pointer to the Callback is pointing to NULL
    15dc:	80 91 cd 01 	lds	r24, 0x01CD
    15e0:	90 91 ce 01 	lds	r25, 0x01CE
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	29 f0       	breq	.+10     	; 0x15f2 <__vector_14+0x40>
	{
		//if not then call the function pointing to it
		gpf_TransmitCallBack();
    15e8:	e0 91 cd 01 	lds	r30, 0x01CD
    15ec:	f0 91 ce 01 	lds	r31, 0x01CE
    15f0:	09 95       	icall
	}
}
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	ff 91       	pop	r31
    15f8:	ef 91       	pop	r30
    15fa:	bf 91       	pop	r27
    15fc:	af 91       	pop	r26
    15fe:	9f 91       	pop	r25
    1600:	8f 91       	pop	r24
    1602:	7f 91       	pop	r23
    1604:	6f 91       	pop	r22
    1606:	5f 91       	pop	r21
    1608:	4f 91       	pop	r20
    160a:	3f 91       	pop	r19
    160c:	2f 91       	pop	r18
    160e:	0f 90       	pop	r0
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	0f 90       	pop	r0
    1614:	1f 90       	pop	r1
    1616:	18 95       	reti

00001618 <TIMER1_u8Init>:

// pointer to function that will be called when COMPB interrupt 	
static void (*COMPB_callBack)(void);

// function to intialize values of control registers 
uint8_t TIMER1_u8Init(void) {
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	TCCR1A_REG = 0;
    1620:	ef e4       	ldi	r30, 0x4F	; 79
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	10 82       	st	Z, r1
	TCCR1B_REG = 0;
    1626:	ee e4       	ldi	r30, 0x4E	; 78
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	10 82       	st	Z, r1
	return 1;
    162c:	81 e0       	ldi	r24, 0x01	; 1
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <TIMER1_u8Start>:

// function to set start counting and set intitial value 
uint8_t TIMER1_u8Start(void) {
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG |= (1 << CS10) | (1 << CS11);
    163c:	ae e4       	ldi	r26, 0x4E	; 78
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ee e4       	ldi	r30, 0x4E	; 78
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	83 60       	ori	r24, 0x03	; 3
    1648:	8c 93       	st	X, r24
	TCNT1_REG = INIT_TIME;
    164a:	ec e4       	ldi	r30, 0x4C	; 76
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	9f ef       	ldi	r25, 0xFF	; 255
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	80 83       	st	Z, r24
	return 1;
    1656:	81 e0       	ldi	r24, 0x01	; 1
}
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <TIMER1_u8SetComapre>:

// function to set channel register ( OCR1X_REG ) value to compare with 
uint8_t TIMER1_u8SetComapre(CHANNEL channel, uint16_t compareValue) {
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <TIMER1_u8SetComapre+0x6>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <TIMER1_u8SetComapre+0x8>
    1666:	00 d0       	rcall	.+0      	; 0x1668 <TIMER1_u8SetComapre+0xa>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	7b 83       	std	Y+3, r23	; 0x03
    1670:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel) {
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	3e 83       	std	Y+6, r19	; 0x06
    167a:	2d 83       	std	Y+5, r18	; 0x05
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	31 f0       	breq	.+12     	; 0x1690 <TIMER1_u8SetComapre+0x32>
    1684:	2d 81       	ldd	r18, Y+5	; 0x05
    1686:	3e 81       	ldd	r19, Y+6	; 0x06
    1688:	21 30       	cpi	r18, 0x01	; 1
    168a:	31 05       	cpc	r19, r1
    168c:	51 f0       	breq	.+20     	; 0x16a2 <TIMER1_u8SetComapre+0x44>
    168e:	12 c0       	rjmp	.+36     	; 0x16b4 <TIMER1_u8SetComapre+0x56>
	case CHANNELA:
		OCR1A_REG = compareValue + INIT_TIME;// set channel register value to compare with 
    1690:	ea e4       	ldi	r30, 0x4A	; 74
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	9b 81       	ldd	r25, Y+3	; 0x03
    1698:	80 50       	subi	r24, 0x00	; 0
    169a:	91 40       	sbci	r25, 0x01	; 1
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	80 83       	st	Z, r24
    16a0:	0b c0       	rjmp	.+22     	; 0x16b8 <TIMER1_u8SetComapre+0x5a>
		break;
	case CHANNELB:
		OCR1B_REG = compareValue + INIT_TIME;// set channel register value to compare with
    16a2:	e8 e4       	ldi	r30, 0x48	; 72
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	9b 81       	ldd	r25, Y+3	; 0x03
    16aa:	80 50       	subi	r24, 0x00	; 0
    16ac:	91 40       	sbci	r25, 0x01	; 1
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <TIMER1_u8SetComapre+0x5a>
		break;
	default:
		return 0;
    16b4:	1c 82       	std	Y+4, r1	; 0x04
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <TIMER1_u8SetComapre+0x5e>
	}
	return 1;
    16b8:	31 e0       	ldi	r19, 0x01	; 1
    16ba:	3c 83       	std	Y+4, r19	; 0x04
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    16be:	26 96       	adiw	r28, 0x06	; 6
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <TIMER1_u8SetChannelInterrupt>:

// function to set pointer to the function run in interrupt
// take channel and pointer to function to run in ISR   
uint8_t TIMER1_u8SetChannelInterrupt(CHANNEL channel, void (*fnCallBack)(void)) {
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <TIMER1_u8SetChannelInterrupt+0x6>
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <TIMER1_u8SetChannelInterrupt+0x8>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <TIMER1_u8SetChannelInterrupt+0xa>
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	7b 83       	std	Y+3, r23	; 0x03
    16e2:	6a 83       	std	Y+2, r22	; 0x02
	if (fnCallBack == NULL) {
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	9b 81       	ldd	r25, Y+3	; 0x03
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	11 f4       	brne	.+4      	; 0x16f0 <TIMER1_u8SetChannelInterrupt+0x20>
		return 0;
    16ec:	1e 82       	std	Y+6, r1	; 0x06
    16ee:	3d c0       	rjmp	.+122    	; 0x176a <TIMER1_u8SetChannelInterrupt+0x9a>
	}
	switch (channel) {
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	3d 83       	std	Y+5, r19	; 0x05
    16f8:	2c 83       	std	Y+4, r18	; 0x04
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	9d 81       	ldd	r25, Y+5	; 0x05
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	31 f0       	breq	.+12     	; 0x170e <TIMER1_u8SetChannelInterrupt+0x3e>
    1702:	2c 81       	ldd	r18, Y+4	; 0x04
    1704:	3d 81       	ldd	r19, Y+5	; 0x05
    1706:	21 30       	cpi	r18, 0x01	; 1
    1708:	31 05       	cpc	r19, r1
    170a:	79 f0       	breq	.+30     	; 0x172a <TIMER1_u8SetChannelInterrupt+0x5a>
    170c:	1c c0       	rjmp	.+56     	; 0x1746 <TIMER1_u8SetChannelInterrupt+0x76>
	case CHANNELA:
		SET_BIT(TIMSK_REG, OCIE1A);			// Enable interrupt when COMPA 
    170e:	a9 e5       	ldi	r26, 0x59	; 89
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e9 e5       	ldi	r30, 0x59	; 89
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	80 61       	ori	r24, 0x10	; 16
    171a:	8c 93       	st	X, r24
		COMPA_callBack = fnCallBack; // set function in interrupt to the passed function
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	9b 81       	ldd	r25, Y+3	; 0x03
    1720:	90 93 d0 01 	sts	0x01D0, r25
    1724:	80 93 cf 01 	sts	0x01CF, r24
    1728:	10 c0       	rjmp	.+32     	; 0x174a <TIMER1_u8SetChannelInterrupt+0x7a>
		break;
	case CHANNELB:
		SET_BIT(TIMSK_REG, OCIE1B);			// Enable interrupt when COMPB 
    172a:	a9 e5       	ldi	r26, 0x59	; 89
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e9 e5       	ldi	r30, 0x59	; 89
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	88 60       	ori	r24, 0x08	; 8
    1736:	8c 93       	st	X, r24
		COMPB_callBack = fnCallBack;// set function in interrupt to the passed function 
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	9b 81       	ldd	r25, Y+3	; 0x03
    173c:	90 93 d2 01 	sts	0x01D2, r25
    1740:	80 93 d1 01 	sts	0x01D1, r24
    1744:	02 c0       	rjmp	.+4      	; 0x174a <TIMER1_u8SetChannelInterrupt+0x7a>
		break;
	default:
		return 0;
    1746:	1e 82       	std	Y+6, r1	; 0x06
    1748:	10 c0       	rjmp	.+32     	; 0x176a <TIMER1_u8SetChannelInterrupt+0x9a>
	}
	SET_BIT(TIMSK_REG, TOIE1);				// Enable interrupt 
    174a:	a9 e5       	ldi	r26, 0x59	; 89
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e9 e5       	ldi	r30, 0x59	; 89
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	84 60       	ori	r24, 0x04	; 4
    1756:	8c 93       	st	X, r24
	SET_BIT(SREG_REG, I_BIT);
    1758:	af e5       	ldi	r26, 0x5F	; 95
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	ef e5       	ldi	r30, 0x5F	; 95
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	80 68       	ori	r24, 0x80	; 128
    1764:	8c 93       	st	X, r24
	return 1;
    1766:	31 e0       	ldi	r19, 0x01	; 1
    1768:	3e 83       	std	Y+6, r19	; 0x06
    176a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    176c:	26 96       	adiw	r28, 0x06	; 6
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <TIMER1_u8StopChannel>:

// function to stop comparing with channel 
uint8_t TIMER1_u8StopChannel(CHANNEL channel) {
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <TIMER1_u8StopChannel+0x6>
    1784:	00 d0       	rcall	.+0      	; 0x1786 <TIMER1_u8StopChannel+0x8>
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	89 83       	std	Y+1, r24	; 0x01
	switch (channel) {
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	3c 83       	std	Y+4, r19	; 0x04
    1794:	2b 83       	std	Y+3, r18	; 0x03
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	31 f0       	breq	.+12     	; 0x17aa <TIMER1_u8StopChannel+0x2c>
    179e:	2b 81       	ldd	r18, Y+3	; 0x03
    17a0:	3c 81       	ldd	r19, Y+4	; 0x04
    17a2:	21 30       	cpi	r18, 0x01	; 1
    17a4:	31 05       	cpc	r19, r1
    17a6:	69 f0       	breq	.+26     	; 0x17c2 <TIMER1_u8StopChannel+0x44>
    17a8:	18 c0       	rjmp	.+48     	; 0x17da <TIMER1_u8StopChannel+0x5c>
	case CHANNELA:
		CLR_BIT(TIMSK_REG, OCIE1A);      // disable interrupt 
    17aa:	a9 e5       	ldi	r26, 0x59	; 89
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e9 e5       	ldi	r30, 0x59	; 89
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	8f 7e       	andi	r24, 0xEF	; 239
    17b6:	8c 93       	st	X, r24
		COMPA_callBack = NULL;      // make sure no function to run in interrupt
    17b8:	10 92 d0 01 	sts	0x01D0, r1
    17bc:	10 92 cf 01 	sts	0x01CF, r1
    17c0:	0e c0       	rjmp	.+28     	; 0x17de <TIMER1_u8StopChannel+0x60>
		break;
	case CHANNELB:
		CLR_BIT(TIMSK_REG, OCIE1B);	 	 // disable interrupt 
    17c2:	a9 e5       	ldi	r26, 0x59	; 89
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e9 e5       	ldi	r30, 0x59	; 89
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	87 7f       	andi	r24, 0xF7	; 247
    17ce:	8c 93       	st	X, r24
		COMPB_callBack = NULL;		// make sure no function to run in interrupt
    17d0:	10 92 d2 01 	sts	0x01D2, r1
    17d4:	10 92 d1 01 	sts	0x01D1, r1
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <TIMER1_u8StopChannel+0x60>
		break;
	default:
		return 0;
    17da:	1a 82       	std	Y+2, r1	; 0x02
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <TIMER1_u8StopChannel+0x64>
	}
	return 1;
    17de:	31 e0       	ldi	r19, 0x01	; 1
    17e0:	3a 83       	std	Y+2, r19	; 0x02
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <__vector_7>:

//ISR for TIMER1 COMPA
void __vector_7(void) {
    17f2:	1f 92       	push	r1
    17f4:	0f 92       	push	r0
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	0f 92       	push	r0
    17fa:	11 24       	eor	r1, r1
    17fc:	2f 93       	push	r18
    17fe:	3f 93       	push	r19
    1800:	4f 93       	push	r20
    1802:	5f 93       	push	r21
    1804:	6f 93       	push	r22
    1806:	7f 93       	push	r23
    1808:	8f 93       	push	r24
    180a:	9f 93       	push	r25
    180c:	af 93       	push	r26
    180e:	bf 93       	push	r27
    1810:	ef 93       	push	r30
    1812:	ff 93       	push	r31
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
	if (COMPA_callBack != NULL) {
    181c:	80 91 cf 01 	lds	r24, 0x01CF
    1820:	90 91 d0 01 	lds	r25, 0x01D0
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	29 f0       	breq	.+10     	; 0x1832 <__vector_7+0x40>
		COMPA_callBack();
    1828:	e0 91 cf 01 	lds	r30, 0x01CF
    182c:	f0 91 d0 01 	lds	r31, 0x01D0
    1830:	09 95       	icall
	}
}
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	ff 91       	pop	r31
    1838:	ef 91       	pop	r30
    183a:	bf 91       	pop	r27
    183c:	af 91       	pop	r26
    183e:	9f 91       	pop	r25
    1840:	8f 91       	pop	r24
    1842:	7f 91       	pop	r23
    1844:	6f 91       	pop	r22
    1846:	5f 91       	pop	r21
    1848:	4f 91       	pop	r20
    184a:	3f 91       	pop	r19
    184c:	2f 91       	pop	r18
    184e:	0f 90       	pop	r0
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	0f 90       	pop	r0
    1854:	1f 90       	pop	r1
    1856:	18 95       	reti

00001858 <__vector_8>:
//ISR for TIMER1 COMPB
void __vector_8(void) {
    1858:	1f 92       	push	r1
    185a:	0f 92       	push	r0
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	0f 92       	push	r0
    1860:	11 24       	eor	r1, r1
    1862:	2f 93       	push	r18
    1864:	3f 93       	push	r19
    1866:	4f 93       	push	r20
    1868:	5f 93       	push	r21
    186a:	6f 93       	push	r22
    186c:	7f 93       	push	r23
    186e:	8f 93       	push	r24
    1870:	9f 93       	push	r25
    1872:	af 93       	push	r26
    1874:	bf 93       	push	r27
    1876:	ef 93       	push	r30
    1878:	ff 93       	push	r31
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
	if (COMPB_callBack != NULL) {
    1882:	80 91 d1 01 	lds	r24, 0x01D1
    1886:	90 91 d2 01 	lds	r25, 0x01D2
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	29 f0       	breq	.+10     	; 0x1898 <__vector_8+0x40>
		COMPB_callBack();
    188e:	e0 91 d1 01 	lds	r30, 0x01D1
    1892:	f0 91 d2 01 	lds	r31, 0x01D2
    1896:	09 95       	icall
	}
}
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	ff 91       	pop	r31
    189e:	ef 91       	pop	r30
    18a0:	bf 91       	pop	r27
    18a2:	af 91       	pop	r26
    18a4:	9f 91       	pop	r25
    18a6:	8f 91       	pop	r24
    18a8:	7f 91       	pop	r23
    18aa:	6f 91       	pop	r22
    18ac:	5f 91       	pop	r21
    18ae:	4f 91       	pop	r20
    18b0:	3f 91       	pop	r19
    18b2:	2f 91       	pop	r18
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	0f 90       	pop	r0
    18ba:	1f 90       	pop	r1
    18bc:	18 95       	reti

000018be <__vector_9>:
//ISR for TIMER1 OVF
void __vector_9(void) {
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG = INIT_TIME;    // reset counter value to initial value 
    18e8:	ec e4       	ldi	r30, 0x4C	; 76
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	9f ef       	ldi	r25, 0xFF	; 255
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
	if (COMPA_callBack != NULL) {
    18f4:	80 91 cf 01 	lds	r24, 0x01CF
    18f8:	90 91 d0 01 	lds	r25, 0x01D0
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	29 f0       	breq	.+10     	; 0x190a <__vector_9+0x4c>
		COMPA_callBack();
    1900:	e0 91 cf 01 	lds	r30, 0x01CF
    1904:	f0 91 d0 01 	lds	r31, 0x01D0
    1908:	09 95       	icall
	}
	if (COMPB_callBack != NULL) {
    190a:	80 91 d1 01 	lds	r24, 0x01D1
    190e:	90 91 d2 01 	lds	r25, 0x01D2
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	29 f0       	breq	.+10     	; 0x1920 <__vector_9+0x62>
		COMPB_callBack();
    1916:	e0 91 d1 01 	lds	r30, 0x01D1
    191a:	f0 91 d2 01 	lds	r31, 0x01D2
    191e:	09 95       	icall
	}
}
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	ff 91       	pop	r31
    1926:	ef 91       	pop	r30
    1928:	bf 91       	pop	r27
    192a:	af 91       	pop	r26
    192c:	9f 91       	pop	r25
    192e:	8f 91       	pop	r24
    1930:	7f 91       	pop	r23
    1932:	6f 91       	pop	r22
    1934:	5f 91       	pop	r21
    1936:	4f 91       	pop	r20
    1938:	3f 91       	pop	r19
    193a:	2f 91       	pop	r18
    193c:	0f 90       	pop	r0
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	0f 90       	pop	r0
    1942:	1f 90       	pop	r1
    1944:	18 95       	reti

00001946 <SPI_u8Init>:
 * @pre This function require
 * 			- the configurations in the peripheral configuration file is configured with allowed options
 * 			- the u8SPIMode should take only two possibilities  SPI_MASTER or SPI_SLAVE
 */
uint8_t SPI_u8Init(SPIMode_t u8SPIMode)
{
    1946:	df 93       	push	r29
    1948:	cf 93       	push	r28
    194a:	00 d0       	rcall	.+0      	; 0x194c <SPI_u8Init+0x6>
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = SPI_OK;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	89 83       	std	Y+1, r24	; 0x01

LED_u8Init(&LEDT);
    1956:	8a eb       	ldi	r24, 0xBA	; 186
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <LED_u8Init>
	/*
	 * Set the transmittion Clock of the SPI as configured by the SPI_CLK_RATE Configuration
	 */
#if SPI_CLK_RATE == SPI_CPU_4
	CLR_BIT(SPCR_REG,SPR0_BIT);
    195e:	ad e2       	ldi	r26, 0x2D	; 45
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	ed e2       	ldi	r30, 0x2D	; 45
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8e 7f       	andi	r24, 0xFE	; 254
    196a:	8c 93       	st	X, r24
	CLR_BIT(SPCR_REG,SPR1_BIT);
    196c:	ad e2       	ldi	r26, 0x2D	; 45
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ed e2       	ldi	r30, 0x2D	; 45
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8d 7f       	andi	r24, 0xFD	; 253
    1978:	8c 93       	st	X, r24
	CLR_BIT(SPSR_REG,SPI2X_BIT);
    197a:	ae e2       	ldi	r26, 0x2E	; 46
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ee e2       	ldi	r30, 0x2E	; 46
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	8e 7f       	andi	r24, 0xFE	; 254
    1986:	8c 93       	st	X, r24

	/*
	 * Set the DATA sampling mode of the SPI as configured by the SPI_DATA_MODE configuration in the configuration file
	 */
#if SPI_DATA_MODE == SPI_SAMPLE_LEADING_RISING
	CLR_BIT(SPCR_REG,CPHA_BIT);
    1988:	ad e2       	ldi	r26, 0x2D	; 45
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ed e2       	ldi	r30, 0x2D	; 45
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8b 7f       	andi	r24, 0xFB	; 251
    1994:	8c 93       	st	X, r24
	CLR_BIT(SPCR_REG,CPOL_BIT);
    1996:	ad e2       	ldi	r26, 0x2D	; 45
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	ed e2       	ldi	r30, 0x2D	; 45
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	87 7f       	andi	r24, 0xF7	; 247
    19a2:	8c 93       	st	X, r24

	/*
	 * Setting the Data bits transmitting order as configured by the SPI_DATA_ORDER configuration in the configuration file
	 */
#if SPI_DATA_ORDER == SPI_LSB_FIRST
	SET_BIT(SPCR_REG,DORD_BIT);
    19a4:	ad e2       	ldi	r26, 0x2D	; 45
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	ed e2       	ldi	r30, 0x2D	; 45
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	80 62       	ori	r24, 0x20	; 32
    19b0:	8c 93       	st	X, r24
#else
	u8ErrorState = SPI_WRONG_DATA_ORDER_CFG;
#endif

	/*Set the SPI Mode and Configure the SPI PINS */
	if (u8SPIMode == SPI_MASTER)
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	81 30       	cpi	r24, 0x01	; 1
    19b6:	21 f5       	brne	.+72     	; 0x1a00 <SPI_u8Init+0xba>
	{
		//Set the SPI mode to master
		SET_BIT(SPCR_REG,MSTR_BIT);
    19b8:	ad e2       	ldi	r26, 0x2D	; 45
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	ed e2       	ldi	r30, 0x2D	; 45
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	80 61       	ori	r24, 0x10	; 16
    19c4:	8c 93       	st	X, r24
		//Configure the MOSI pin as output
		SET_BIT(DDRB_REG,DDB5_BIT);
    19c6:	a7 e3       	ldi	r26, 0x37	; 55
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e7 e3       	ldi	r30, 0x37	; 55
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	80 62       	ori	r24, 0x20	; 32
    19d2:	8c 93       	st	X, r24
		//Configure the Slave Select pin as output
		SET_BIT(DDRB_REG,DDB4_BIT);
    19d4:	a7 e3       	ldi	r26, 0x37	; 55
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e7 e3       	ldi	r30, 0x37	; 55
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	80 61       	ori	r24, 0x10	; 16
    19e0:	8c 93       	st	X, r24
		SET_BIT(PORTB_REG,DDB4_BIT);
    19e2:	a8 e3       	ldi	r26, 0x38	; 56
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e8 e3       	ldi	r30, 0x38	; 56
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	80 61       	ori	r24, 0x10	; 16
    19ee:	8c 93       	st	X, r24
		//Configure the SCK pin as output
		SET_BIT(DDRB_REG,DDB7_BIT);
    19f0:	a7 e3       	ldi	r26, 0x37	; 55
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e7 e3       	ldi	r30, 0x37	; 55
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	80 68       	ori	r24, 0x80	; 128
    19fc:	8c 93       	st	X, r24
    19fe:	14 c0       	rjmp	.+40     	; 0x1a28 <SPI_u8Init+0xe2>

	}else if (u8SPIMode == SPI_SLAVE)
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	82 30       	cpi	r24, 0x02	; 2
    1a04:	79 f4       	brne	.+30     	; 0x1a24 <SPI_u8Init+0xde>
	{
		//Set the SPI mode to Slave
		CLR_BIT(SPCR_REG,MSTR_BIT);
    1a06:	ad e2       	ldi	r26, 0x2D	; 45
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	ed e2       	ldi	r30, 0x2D	; 45
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	8f 7e       	andi	r24, 0xEF	; 239
    1a12:	8c 93       	st	X, r24
		//Configure the MISO pin as output
		SET_BIT(DDRB_REG,DDB6_BIT);
    1a14:	a7 e3       	ldi	r26, 0x37	; 55
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e7 e3       	ldi	r30, 0x37	; 55
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 64       	ori	r24, 0x40	; 64
    1a20:	8c 93       	st	X, r24
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <SPI_u8Init+0xe2>
	}else
	{
		u8ErrorState = SPI_WRONG_MODE;
    1a24:	85 e0       	ldi	r24, 0x05	; 5
    1a26:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check if no error occurred in the previous stages then Enable the SPI with the Written Configurations*/
	if (u8ErrorState==SPI_OK)
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	51 f4       	brne	.+20     	; 0x1a42 <SPI_u8Init+0xfc>
	{
		SET_BIT(SPCR_REG,SPE_BIT);
    1a2e:	ad e2       	ldi	r26, 0x2D	; 45
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	ed e2       	ldi	r30, 0x2D	; 45
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	80 64       	ori	r24, 0x40	; 64
    1a3a:	8c 93       	st	X, r24
		/*Change the state of the SPI to initialized as MASTER/SLAVE indicating that it is initialized and in this mode*/
		gu8_SPIState = u8SPIMode;
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	80 93 d3 01 	sts	0x01D3, r24
	else
	{
		//if not do nothing
	}

	return u8ErrorState;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <SPI_u8SendByte>:
 * @brief This function is used to Send a byte using the SPI peripheral
 * @pre This function require
 * 			- The SPI to be initialized
 */
uint8_t SPI_u8SendByte(uint8_t u8Data)
{
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <SPI_u8SendByte+0x6>
    1a54:	0f 92       	push	r0
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ErrorState = SPI_OK;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t flush_buffer;
	if (gu8_SPIState!=SPI_NOT_INITIALIZED)//check first if the SPI is initialized
    1a60:	80 91 d3 01 	lds	r24, 0x01D3
    1a64:	88 23       	and	r24, r24
    1a66:	a9 f0       	breq	.+42     	; 0x1a92 <SPI_u8SendByte+0x44>
	{
		CLR_BIT(PORTB_REG,DDB4_BIT);
    1a68:	a8 e3       	ldi	r26, 0x38	; 56
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e8 e3       	ldi	r30, 0x38	; 56
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	8f 7e       	andi	r24, 0xEF	; 239
    1a74:	8c 93       	st	X, r24
		//Load the Data to the SPI data Register to initiate the transmission
		SPDR_REG = u8Data;
    1a76:	ef e2       	ldi	r30, 0x2F	; 47
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	80 83       	st	Z, r24
		//Wait until the Transmission is complete
		while (!GET_BIT(SPSR_REG,SPIF_BIT));
    1a7e:	ee e2       	ldi	r30, 0x2E	; 46
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	88 23       	and	r24, r24
    1a86:	dc f7       	brge	.-10     	; 0x1a7e <SPI_u8SendByte+0x30>
		flush_buffer = SPDR_REG;		/* Flush received data */
    1a88:	ef e2       	ldi	r30, 0x2F	; 47
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <SPI_u8SendByte+0x48>
//		SET_BIT(PORTB_REG,DDB4_BIT);
	}else
	{
		u8ErrorState = SPI_INITIALIZATION_ERROR;
    1a92:	86 e0       	ldi	r24, 0x06	; 6
    1a94:	8a 83       	std	Y+2, r24	; 0x02
	}
	return u8ErrorState;
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <SPI_u8SendString>:
 * @pre This function require
 * 			- The SPI to be initialized
 * 			- the pu8Data pointer can not points to NULL
 */
uint8_t SPI_u8SendString(uint8_t* pu8Data)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <SPI_u8SendString+0x6>
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <SPI_u8SendString+0x8>
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	9c 83       	std	Y+4, r25	; 0x04
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ErrorState=SPI_OK;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8CharCounter=0; /// a variable used to navigate the array of the characters
    1ab8:	19 82       	std	Y+1, r1	; 0x01

	if (gu8_SPIState!=SPI_NOT_INITIALIZED)// Check first if the SPI is initialized
    1aba:	80 91 d3 01 	lds	r24, 0x01D3
    1abe:	88 23       	and	r24, r24
    1ac0:	29 f1       	breq	.+74     	; 0x1b0c <SPI_u8SendString+0x68>
	{
		if (pu8Data!=NULL) // if it is initialized then check the pointer is not pointing to NULL
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	f1 f0       	breq	.+60     	; 0x1b06 <SPI_u8SendString+0x62>
    1aca:	0e c0       	rjmp	.+28     	; 0x1ae8 <SPI_u8SendString+0x44>
		{
			while (pu8Data[u8CharCounter]!='\0')
			{
				//While the current character is not endline
				// Send the character through SPI
				SPI_u8SendByte(pu8Data[u8CharCounter]);
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	e2 0f       	add	r30, r18
    1ada:	f3 1f       	adc	r31, r19
    1adc:	80 81       	ld	r24, Z
    1ade:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <SPI_u8SendByte>
				//check the next character
				u8CharCounter++;
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	8f 5f       	subi	r24, 0xFF	; 255
    1ae6:	89 83       	std	Y+1, r24	; 0x01

	if (gu8_SPIState!=SPI_NOT_INITIALIZED)// Check first if the SPI is initialized
	{
		if (pu8Data!=NULL) // if it is initialized then check the pointer is not pointing to NULL
		{
			while (pu8Data[u8CharCounter]!='\0')
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	9c 81       	ldd	r25, Y+4	; 0x04
    1af2:	fc 01       	movw	r30, r24
    1af4:	e2 0f       	add	r30, r18
    1af6:	f3 1f       	adc	r31, r19
    1af8:	80 81       	ld	r24, Z
    1afa:	88 23       	and	r24, r24
    1afc:	39 f7       	brne	.-50     	; 0x1acc <SPI_u8SendString+0x28>
				SPI_u8SendByte(pu8Data[u8CharCounter]);
				//check the next character
				u8CharCounter++;
			}
			//After sending the string send endline character indicating the end of the string
			SPI_u8SendByte('\0');
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <SPI_u8SendByte>
    1b04:	05 c0       	rjmp	.+10     	; 0x1b10 <SPI_u8SendString+0x6c>

		}else
		{
			// if the input pointer is pointing to NULL update the error state
			u8ErrorState = SPI_NULL_INPUT;
    1b06:	87 e0       	ldi	r24, 0x07	; 7
    1b08:	8a 83       	std	Y+2, r24	; 0x02
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <SPI_u8SendString+0x6c>
		}

	}else
	{
		// if the SPI is not initialized then update the error state
		u8ErrorState=SPI_INITIALIZATION_ERROR;
    1b0c:	86 e0       	ldi	r24, 0x06	; 6
    1b0e:	8a 83       	std	Y+2, r24	; 0x02
	}

	return u8ErrorState;
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <SPI_u8ReceiveByte>:
 * @pre This function require
 * 			- The SPI to be initialized
 * 			- the pu8Data pointer can not points to NULL
 */
uint8_t SPI_u8ReceiveByte(uint8_t* pu8Data)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <SPI_u8ReceiveByte+0x6>
    1b26:	0f 92       	push	r0
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	9b 83       	std	Y+3, r25	; 0x03
    1b2e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = SPI_OK;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	89 83       	std	Y+1, r24	; 0x01


	if (gu8_SPIState!=SPI_NOT_INITIALIZED)//check first if the SPI is initialized
    1b34:	80 91 d3 01 	lds	r24, 0x01D3
    1b38:	88 23       	and	r24, r24
    1b3a:	99 f0       	breq	.+38     	; 0x1b62 <SPI_u8ReceiveByte+0x42>
	{
		if (pu8Data!=NULL)//Then Check if the pointer is not pointing to a NULL
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	61 f0       	breq	.+24     	; 0x1b5c <SPI_u8ReceiveByte+0x3c>
		{
			//Wait until the Reception is complete
			while (!GET_BIT(SPSR_REG,SPIF_BIT));
    1b44:	ee e2       	ldi	r30, 0x2E	; 46
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	88 23       	and	r24, r24
    1b4c:	dc f7       	brge	.-10     	; 0x1b44 <SPI_u8ReceiveByte+0x24>
			//Load the SPI data Register to the place the pointer holding its address
			*pu8Data = SPDR_REG;
    1b4e:	ef e2       	ldi	r30, 0x2F	; 47
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	ea 81       	ldd	r30, Y+2	; 0x02
    1b56:	fb 81       	ldd	r31, Y+3	; 0x03
    1b58:	80 83       	st	Z, r24
    1b5a:	05 c0       	rjmp	.+10     	; 0x1b66 <SPI_u8ReceiveByte+0x46>
		}else
		{
			u8ErrorState = SPI_NULL_INPUT;
    1b5c:	87 e0       	ldi	r24, 0x07	; 7
    1b5e:	89 83       	std	Y+1, r24	; 0x01
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <SPI_u8ReceiveByte+0x46>
		}

	}else
	{
		u8ErrorState = SPI_INITIALIZATION_ERROR;
    1b62:	86 e0       	ldi	r24, 0x06	; 6
    1b64:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <SPI_u8ReceiveString>:
 * @pre This function require
 * 			- The SPI to be initialized
 * 			- the pu8Data pointer can not points to NULL
 */
uint8_t SPI_u8ReceiveString(uint8_t* pu8Data)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <SPI_u8ReceiveString+0x6>
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <SPI_u8ReceiveString+0x8>
    1b7c:	0f 92       	push	r0
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	9d 83       	std	Y+5, r25	; 0x05
    1b84:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ErrorState=SPI_OK;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8CharCounter=0;  /// a variable used to navigate the array of the characters
    1b8a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Temp;			/// a variable used to temporarily hold the value of the last character sent

	if (gu8_SPIState!=SPI_NOT_INITIALIZED)// Check first if the SPI is initialized
    1b8c:	80 91 d3 01 	lds	r24, 0x01D3
    1b90:	88 23       	and	r24, r24
    1b92:	31 f1       	breq	.+76     	; 0x1be0 <SPI_u8ReceiveString+0x6c>
	{
		if (pu8Data!=NULL)// if it is initialized then check the pointer is not pointing to NULL
    1b94:	8c 81       	ldd	r24, Y+4	; 0x04
    1b96:	9d 81       	ldd	r25, Y+5	; 0x05
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	f9 f0       	breq	.+62     	; 0x1bda <SPI_u8ReceiveString+0x66>
		{
			do
			{
				//Receive Byte
				SPI_u8ReceiveByte(&u8Temp);
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	03 96       	adiw	r24, 0x03	; 3
    1ba0:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <SPI_u8ReceiveByte>
				//Save the received byte to the first empty place in the array of characters
				pu8Data[u8CharCounter] = u8Temp;
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bac:	9d 81       	ldd	r25, Y+5	; 0x05
    1bae:	fc 01       	movw	r30, r24
    1bb0:	e2 0f       	add	r30, r18
    1bb2:	f3 1f       	adc	r31, r19
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	80 83       	st	Z, r24
				//update the array navigator
				u8CharCounter++;
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	8f 5f       	subi	r24, 0xFF	; 255
    1bbc:	89 83       	std	Y+1, r24	; 0x01
			}while (u8Temp!='\0'); // do this until we receive endline character indicating the end of the string
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	88 23       	and	r24, r24
    1bc2:	61 f7       	brne	.-40     	; 0x1b9c <SPI_u8ReceiveString+0x28>

			// save the endline character in the end of the string
			pu8Data[u8CharCounter] = u8Temp;
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bce:	fc 01       	movw	r30, r24
    1bd0:	e2 0f       	add	r30, r18
    1bd2:	f3 1f       	adc	r31, r19
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	80 83       	st	Z, r24
    1bd8:	05 c0       	rjmp	.+10     	; 0x1be4 <SPI_u8ReceiveString+0x70>

		}else
		{
			// if the input pointer is pointing to NULL update the error state
			u8ErrorState = SPI_NULL_INPUT;
    1bda:	87 e0       	ldi	r24, 0x07	; 7
    1bdc:	8a 83       	std	Y+2, r24	; 0x02
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <SPI_u8ReceiveString+0x70>
		}

	}else
	{
		// if the SPI is not initialized then update the error state
		u8ErrorState=SPI_INITIALIZATION_ERROR;
    1be0:	86 e0       	ldi	r24, 0x06	; 6
    1be2:	8a 83       	std	Y+2, r24	; 0x02
	}

	return u8ErrorState;
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <SPI_u8EnableInterrupt>:
 * @brief This function is called to enable the SPI Transmit complete Interrupt
 * @pre - the SPI must be initialized
 * 		- the pointer to function not pointing to NULL
 */
uint8_t SPI_u8EnableInterrupt(void (*pfnCallBack)(void))
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <SPI_u8EnableInterrupt+0x6>
    1bfc:	0f 92       	push	r0
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	9b 83       	std	Y+3, r25	; 0x03
    1c04:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = SPI_OK;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	89 83       	std	Y+1, r24	; 0x01
	if (gu8_SPIState != SPI_NOT_INITIALIZED)// Check first if the SPI is initialized
    1c0a:	80 91 d3 01 	lds	r24, 0x01D3
    1c0e:	88 23       	and	r24, r24
    1c10:	e1 f0       	breq	.+56     	; 0x1c4a <SPI_u8EnableInterrupt+0x54>
	{
		if (pfnCallBack!=NULL)// if it is initialized then check the pointer is not pointing to NULL
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	9b 81       	ldd	r25, Y+3	; 0x03
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	a9 f0       	breq	.+42     	; 0x1c44 <SPI_u8EnableInterrupt+0x4e>
		{
			// Set the pointer of the call function to the function address passed by the user
			gpf_SPICallBack = pfnCallBack;
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1e:	90 93 d5 01 	sts	0x01D5, r25
    1c22:	80 93 d4 01 	sts	0x01D4, r24
			// Set the Enable bit of the SPI Interrupt
			SET_BIT(SPCR_REG,SPIE_BIT);
    1c26:	ad e2       	ldi	r26, 0x2D	; 45
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	ed e2       	ldi	r30, 0x2D	; 45
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	80 68       	ori	r24, 0x80	; 128
    1c32:	8c 93       	st	X, r24
			// Set the Enable bit of the Global Interrupt
			SET_BIT(SREG_REG,I_BIT);
    1c34:	af e5       	ldi	r26, 0x5F	; 95
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	ef e5       	ldi	r30, 0x5F	; 95
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	8c 93       	st	X, r24
    1c42:	05 c0       	rjmp	.+10     	; 0x1c4e <SPI_u8EnableInterrupt+0x58>
		}else
		{
			// if the input pointer is pointing to NULL update the error state
			u8ErrorState = SPI_NULL_INPUT;
    1c44:	87 e0       	ldi	r24, 0x07	; 7
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <SPI_u8EnableInterrupt+0x58>
		}
	}else
	{
		// if the SPI is not initialized then update the error state
		u8ErrorState = SPI_INITIALIZATION_ERROR;
    1c4a:	86 e0       	ldi	r24, 0x06	; 6
    1c4c:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <SPI_u8DisableInterrupt>:
/**
 * @fn void SPI_u8DisableInterrupt(void)
 * @brief Used to disable the SPI Interrupt
 */
void SPI_u8DisableInterrupt(void)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
	// Reset the pointer of the call function to NULL
	gpf_SPICallBack = NULL;
    1c64:	10 92 d5 01 	sts	0x01D5, r1
    1c68:	10 92 d4 01 	sts	0x01D4, r1
	// Reset the Enable bit of the SPI Interrupt to disable it
	CLR_BIT(SPCR_REG,SPIE_BIT);
    1c6c:	ad e2       	ldi	r26, 0x2D	; 45
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	ed e2       	ldi	r30, 0x2D	; 45
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	8f 77       	andi	r24, 0x7F	; 127
    1c78:	8c 93       	st	X, r24
}
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <SPI_u8Deinit>:
/**
 * @fn void SPI_u8Deinit(void)
 * @brief This function is called to Stop the SPI Peripheral and De-initialize it
 */
void SPI_u8Deinit(void)
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
	// Disable the SPI capabilities of Receiving and transmitting
	CLR_BIT(SPCR_REG,SPE_BIT);
    1c88:	ad e2       	ldi	r26, 0x2D	; 45
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	ed e2       	ldi	r30, 0x2D	; 45
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	8f 7b       	andi	r24, 0xBF	; 191
    1c94:	8c 93       	st	X, r24
	//Reset the pointer to the callback function to NULL
	gpf_SPICallBack = NULL;
    1c96:	10 92 d5 01 	sts	0x01D5, r1
    1c9a:	10 92 d4 01 	sts	0x01D4, r1
	// Clear the Enable bit of the SPI Interrupt
	CLR_BIT(SPCR_REG,SPIE_BIT);
    1c9e:	ad e2       	ldi	r26, 0x2D	; 45
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ed e2       	ldi	r30, 0x2D	; 45
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	8f 77       	andi	r24, 0x7F	; 127
    1caa:	8c 93       	st	X, r24
	// Reset the Initialization flag indicating that the SPI is not initialized anymore
	gu8_SPIState = SPI_NOT_INITIALIZED;
    1cac:	10 92 d3 01 	sts	0x01D3, r1

}
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <SPI_u8ReceiveInt>:


void SPI_u8ReceiveInt(uint32_t* pu8Data)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <SPI_u8ReceiveInt+0x6>
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <SPI_u8ReceiveInt+0x8>
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <SPI_u8ReceiveInt+0xa>
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05

	IntData_t Received;
	SPI_u8ReceiveByte(&Received.u8Bytes[3]);
    1cc8:	ce 01       	movw	r24, r28
    1cca:	04 96       	adiw	r24, 0x04	; 4
    1ccc:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <SPI_u8ReceiveByte>
	//UART_u8SendByte(Received.u8Bytes[0]);
	SPI_u8ReceiveByte(&Received.u8Bytes[2]);
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	03 96       	adiw	r24, 0x03	; 3
    1cd4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <SPI_u8ReceiveByte>
	//UART_u8SendByte(Received.u8Bytes[1]);
	SPI_u8ReceiveByte(&Received.u8Bytes[1]);
    1cd8:	ce 01       	movw	r24, r28
    1cda:	02 96       	adiw	r24, 0x02	; 2
    1cdc:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <SPI_u8ReceiveByte>
	//UART_u8SendByte(Received.u8Bytes[2]);
	SPI_u8ReceiveByte(&Received.u8Bytes[0]);
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <SPI_u8ReceiveByte>
	//UART_u8SendByte(Received.u8Bytes[3]);
	*pu8Data = Received.num;
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	ab 81       	ldd	r26, Y+3	; 0x03
    1cee:	bc 81       	ldd	r27, Y+4	; 0x04
    1cf0:	ed 81       	ldd	r30, Y+5	; 0x05
    1cf2:	fe 81       	ldd	r31, Y+6	; 0x06
    1cf4:	80 83       	st	Z, r24
    1cf6:	91 83       	std	Z+1, r25	; 0x01
    1cf8:	a2 83       	std	Z+2, r26	; 0x02
    1cfa:	b3 83       	std	Z+3, r27	; 0x03
}
    1cfc:	26 96       	adiw	r28, 0x06	; 6
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <SPI_u8SendInt>:


void SPI_u8SendInt(uint32_t u32Data){
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	2c 97       	sbiw	r28, 0x0c	; 12
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	69 87       	std	Y+9, r22	; 0x09
    1d24:	7a 87       	std	Y+10, r23	; 0x0a
    1d26:	8b 87       	std	Y+11, r24	; 0x0b
    1d28:	9c 87       	std	Y+12, r25	; 0x0c

	IntData_t New;
	uint8_t Byte1 = (u32Data);
    1d2a:	89 85       	ldd	r24, Y+9	; 0x09
    1d2c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t Byte2 = (u32Data>>8);
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d34:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d36:	89 2f       	mov	r24, r25
    1d38:	9a 2f       	mov	r25, r26
    1d3a:	ab 2f       	mov	r26, r27
    1d3c:	bb 27       	eor	r27, r27
    1d3e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t Byte3 = (u32Data>>16);
    1d40:	89 85       	ldd	r24, Y+9	; 0x09
    1d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d44:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d46:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d48:	cd 01       	movw	r24, r26
    1d4a:	aa 27       	eor	r26, r26
    1d4c:	bb 27       	eor	r27, r27
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Byte4 = (u32Data>>24);
    1d50:	89 85       	ldd	r24, Y+9	; 0x09
    1d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d54:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d56:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d58:	8b 2f       	mov	r24, r27
    1d5a:	99 27       	eor	r25, r25
    1d5c:	aa 27       	eor	r26, r26
    1d5e:	bb 27       	eor	r27, r27
    1d60:	89 83       	std	Y+1, r24	; 0x01

	New.num=u32Data;
    1d62:	89 85       	ldd	r24, Y+9	; 0x09
    1d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d66:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d68:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	af 83       	std	Y+7, r26	; 0x07
    1d70:	b8 87       	std	Y+8, r27	; 0x08
	UART_u8SendByte(u32Data);
    1d72:	89 85       	ldd	r24, Y+9	; 0x09
    1d74:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_u8SendByte>
	UART_u8SendInt(New.u8Bytes[3]);
    1d78:	88 85       	ldd	r24, Y+8	; 0x08
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e0       	ldi	r26, 0x00	; 0
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	0e 94 75 07 	call	0xeea	; 0xeea <UART_u8SendInt>
	SPI_u8SendByte(New.u8Bytes[3]);
    1d8a:	88 85       	ldd	r24, Y+8	; 0x08
    1d8c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <SPI_u8SendByte>
	SPI_u8SendByte(New.u8Bytes[2]);
    1d90:	8f 81       	ldd	r24, Y+7	; 0x07
    1d92:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <SPI_u8SendByte>
	SPI_u8SendByte(New.u8Bytes[1]);
    1d96:	8e 81       	ldd	r24, Y+6	; 0x06
    1d98:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <SPI_u8SendByte>
	SPI_u8SendByte(New.u8Bytes[0]);
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <SPI_u8SendByte>
}
    1da2:	2c 96       	adiw	r28, 0x0c	; 12
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <__vector_12>:

/**
 * @brief the SPI Interrupt ISR
 */
void __vector_12(void) {
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62

	if (gpf_SPICallBack!=NULL) // check if the pointer to the Callback is pointing to NULL
    1dbc:	80 91 d4 01 	lds	r24, 0x01D4
    1dc0:	90 91 d5 01 	lds	r25, 0x01D5
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	29 f0       	breq	.+10     	; 0x1dd2 <__vector_12+0x1e>
	{
		//if not then call the function pointing to it
		gpf_SPICallBack();
    1dc8:	e0 91 d4 01 	lds	r30, 0x01D4
    1dcc:	f0 91 d5 01 	lds	r31, 0x01D5
    1dd0:	09 95       	icall
	}
}
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	08 95       	ret

00001dd8 <channelA_callBack>:
// creat 2 PWM struct contain port and pin for each channel  
static PWMPin_t PWM1;
static PWMPin_t PWM2;

// function to toggle PWM pin channel 1
void channelA_callBack(void) {
    1dd8:	df 93       	push	r29
    1dda:	cf 93       	push	r28
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
	DIO_u8TogglePinData(PWM1.port, PWM1.pin);
    1de0:	80 91 d6 01 	lds	r24, 0x01D6
    1de4:	90 91 d7 01 	lds	r25, 0x01D7
    1de8:	69 2f       	mov	r22, r25
    1dea:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8TogglePinData>
}
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <channelB_callBack>:

// function to toggle PWM pin channel 2
void channelB_callBack(void) {
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
	DIO_u8TogglePinData(PWM2.port, PWM2.pin);
    1dfc:	80 91 d8 01 	lds	r24, 0x01D8
    1e00:	90 91 d9 01 	lds	r25, 0x01D9
    1e04:	69 2f       	mov	r22, r25
    1e06:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8TogglePinData>
}
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <PWM_u8Init>:

// initialize PWM channel for selected pin 
uint8_t PWM_u8Init(CHANNEL channel, PWMPin_t* pwm) {
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <PWM_u8Init+0x6>
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <PWM_u8Init+0x8>
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <PWM_u8Init+0xa>
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	7b 83       	std	Y+3, r23	; 0x03
    1e22:	6a 83       	std	Y+2, r22	; 0x02
	switch (channel) {
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	3e 83       	std	Y+6, r19	; 0x06
    1e2c:	2d 83       	std	Y+5, r18	; 0x05
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	31 f0       	breq	.+12     	; 0x1e42 <PWM_u8Init+0x32>
    1e36:	2d 81       	ldd	r18, Y+5	; 0x05
    1e38:	3e 81       	ldd	r19, Y+6	; 0x06
    1e3a:	21 30       	cpi	r18, 0x01	; 1
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	51 f0       	breq	.+20     	; 0x1e54 <PWM_u8Init+0x44>
    1e40:	12 c0       	rjmp	.+36     	; 0x1e66 <PWM_u8Init+0x56>
	case CHANNELA:
		PWM1 = *pwm;		// set port and pin value 
    1e42:	ea 81       	ldd	r30, Y+2	; 0x02
    1e44:	fb 81       	ldd	r31, Y+3	; 0x03
    1e46:	80 81       	ld	r24, Z
    1e48:	91 81       	ldd	r25, Z+1	; 0x01
    1e4a:	90 93 d7 01 	sts	0x01D7, r25
    1e4e:	80 93 d6 01 	sts	0x01D6, r24
    1e52:	0b c0       	rjmp	.+22     	; 0x1e6a <PWM_u8Init+0x5a>
		break;
	case CHANNELB:
		PWM2 = *pwm;		// set port and pin value 
    1e54:	ea 81       	ldd	r30, Y+2	; 0x02
    1e56:	fb 81       	ldd	r31, Y+3	; 0x03
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	90 93 d9 01 	sts	0x01D9, r25
    1e60:	80 93 d8 01 	sts	0x01D8, r24
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <PWM_u8Init+0x5a>
		break;
	default:
		return 0;
    1e66:	1c 82       	std	Y+4, r1	; 0x04
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <PWM_u8Init+0x60>
	}
	return TIMER1_u8Init();		// initialize TIMER1
    1e6a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <TIMER1_u8Init>
    1e6e:	8c 83       	std	Y+4, r24	; 0x04
    1e70:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e72:	26 96       	adiw	r28, 0x06	; 6
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <PWM_u8DutyCycle>:

// function set duty cycle on the selected channel 
uint8_t PWM_u8DutyCycle(CHANNEL channel, uint32_t dutyCycle) {
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	2c 97       	sbiw	r28, 0x0c	; 12
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	8d 83       	std	Y+5, r24	; 0x05
    1e9a:	4e 83       	std	Y+6, r20	; 0x06
    1e9c:	5f 83       	std	Y+7, r21	; 0x07
    1e9e:	68 87       	std	Y+8, r22	; 0x08
    1ea0:	79 87       	std	Y+9, r23	; 0x09
	uint32_t dutyValue = ((float) dutyCycle * MAX_VALUE) / MAX_DUTY; // calculate real duty value 
    1ea2:	6e 81       	ldd	r22, Y+6	; 0x06
    1ea4:	7f 81       	ldd	r23, Y+7	; 0x07
    1ea6:	88 85       	ldd	r24, Y+8	; 0x08
    1ea8:	99 85       	ldd	r25, Y+9	; 0x09
    1eaa:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	bc 01       	movw	r22, r24
    1eb4:	cd 01       	movw	r24, r26
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e8       	ldi	r20, 0x80	; 128
    1ebc:	53 e4       	ldi	r21, 0x43	; 67
    1ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	bc 01       	movw	r22, r24
    1ec8:	cd 01       	movw	r24, r26
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	48 ec       	ldi	r20, 0xC8	; 200
    1ed0:	52 e4       	ldi	r21, 0x42	; 66
    1ed2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	9a 83       	std	Y+2, r25	; 0x02
    1eea:	ab 83       	std	Y+3, r26	; 0x03
    1eec:	bc 83       	std	Y+4, r27	; 0x04

	// depend on channel initalize it to HIGH 
	// toggle pin depend on duty cycle and frequency  
	switch (channel) {
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	3c 87       	std	Y+12, r19	; 0x0c
    1ef6:	2b 87       	std	Y+11, r18	; 0x0b
    1ef8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1efa:	9c 85       	ldd	r25, Y+12	; 0x0c
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	31 f0       	breq	.+12     	; 0x1f0c <PWM_u8DutyCycle+0x88>
    1f00:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f02:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f04:	21 30       	cpi	r18, 0x01	; 1
    1f06:	31 05       	cpc	r19, r1
    1f08:	c9 f0       	breq	.+50     	; 0x1f3c <PWM_u8DutyCycle+0xb8>
    1f0a:	30 c0       	rjmp	.+96     	; 0x1f6c <PWM_u8DutyCycle+0xe8>
	case CHANNELA:
		DIO_u8SetPinData(PWM1.port, PWM1.pin, DIO_HIGH);
    1f0c:	80 91 d6 01 	lds	r24, 0x01D6
    1f10:	90 91 d7 01 	lds	r25, 0x01D7
    1f14:	69 2f       	mov	r22, r25
    1f16:	41 e0       	ldi	r20, 0x01	; 1
    1f18:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
		TIMER1_u8StopChannel(channel);
    1f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1e:	0e 94 bf 0b 	call	0x177e	; 0x177e <TIMER1_u8StopChannel>
		TIMER1_u8SetComapre(channel, (uint16_t) dutyValue);
    1f22:	29 81       	ldd	r18, Y+1	; 0x01
    1f24:	3a 81       	ldd	r19, Y+2	; 0x02
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	b9 01       	movw	r22, r18
    1f2a:	0e 94 2f 0b 	call	0x165e	; 0x165e <TIMER1_u8SetComapre>
		TIMER1_u8SetChannelInterrupt(channel, channelA_callBack);
    1f2e:	2c ee       	ldi	r18, 0xEC	; 236
    1f30:	3e e0       	ldi	r19, 0x0E	; 14
    1f32:	8d 81       	ldd	r24, Y+5	; 0x05
    1f34:	b9 01       	movw	r22, r18
    1f36:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <TIMER1_u8SetChannelInterrupt>
    1f3a:	1a c0       	rjmp	.+52     	; 0x1f70 <PWM_u8DutyCycle+0xec>
		break;
	case CHANNELB:
		DIO_u8SetPinData(PWM2.port, PWM2.pin, DIO_HIGH);
    1f3c:	80 91 d8 01 	lds	r24, 0x01D8
    1f40:	90 91 d9 01 	lds	r25, 0x01D9
    1f44:	69 2f       	mov	r22, r25
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
		TIMER1_u8StopChannel(channel);
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	0e 94 bf 0b 	call	0x177e	; 0x177e <TIMER1_u8StopChannel>
		TIMER1_u8SetComapre(channel, (uint16_t) dutyValue);
    1f52:	29 81       	ldd	r18, Y+1	; 0x01
    1f54:	3a 81       	ldd	r19, Y+2	; 0x02
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	b9 01       	movw	r22, r18
    1f5a:	0e 94 2f 0b 	call	0x165e	; 0x165e <TIMER1_u8SetComapre>
		TIMER1_u8SetChannelInterrupt(channel, channelB_callBack);
    1f5e:	2a ef       	ldi	r18, 0xFA	; 250
    1f60:	3e e0       	ldi	r19, 0x0E	; 14
    1f62:	8d 81       	ldd	r24, Y+5	; 0x05
    1f64:	b9 01       	movw	r22, r18
    1f66:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <TIMER1_u8SetChannelInterrupt>
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <PWM_u8DutyCycle+0xec>
		break;
	default:
		return 0;
    1f6c:	1a 86       	std	Y+10, r1	; 0x0a
    1f6e:	03 c0       	rjmp	.+6      	; 0x1f76 <PWM_u8DutyCycle+0xf2>
	}
	return TIMER1_u8Start();
    1f70:	0e 94 1a 0b 	call	0x1634	; 0x1634 <TIMER1_u8Start>
    1f74:	8a 87       	std	Y+10, r24	; 0x0a
    1f76:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1f78:	2c 96       	adiw	r28, 0x0c	; 12
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <I2C_u8Init>:
static volatile uint8_t gu8_I2CState= I2C_NO_INFO;



uint8_t I2C_u8Init()
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	0f 92       	push	r0
    1f90:	cd b7       	in	r28, 0x3d	; 61
    1f92:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = I2C_OK;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	89 83       	std	Y+1, r24	; 0x01

	//Set the clock rate of the I2C bus
	TWBR_REG = I2C_400KHZ;
    1f98:	e0 e2       	ldi	r30, 0x20	; 32
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	88 e4       	ldi	r24, 0x48	; 72
    1f9e:	80 83       	st	Z, r24
	//Set the slave address which it will respond to
	TWAR_REG =I2C_OWN_SLAVE_ADDRESS;
    1fa0:	e2 e2       	ldi	r30, 0x22	; 34
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	80 83       	st	Z, r24
	//Enable the ACK
	SET_BIT(TWCR_REG,TWEA_BIT);
    1fa8:	a6 e5       	ldi	r26, 0x56	; 86
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e6 e5       	ldi	r30, 0x56	; 86
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	80 64       	ori	r24, 0x40	; 64
    1fb4:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWIE_BIT);
    1fb6:	a6 e5       	ldi	r26, 0x56	; 86
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e6 e5       	ldi	r30, 0x56	; 86
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	81 60       	ori	r24, 0x01	; 1
    1fc2:	8c 93       	st	X, r24
	SET_BIT(SREG_REG,I_BIT);
    1fc4:	af e5       	ldi	r26, 0x5F	; 95
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	ef e5       	ldi	r30, 0x5F	; 95
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	80 68       	ori	r24, 0x80	; 128
    1fd0:	8c 93       	st	X, r24
	//Enable the I2C Peripheral
	SET_BIT(TWCR_REG,TWEN_BIT);
    1fd2:	a6 e5       	ldi	r26, 0x56	; 86
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e6 e5       	ldi	r30, 0x56	; 86
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	84 60       	ori	r24, 0x04	; 4
    1fde:	8c 93       	st	X, r24

#ifdef DEBUG_MODE
	LED_u8Init(&LEDTEST1);
    1fe0:	8a ed       	ldi	r24, 0xDA	; 218
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <LED_u8Init>
	LED_u8Init(&LEDTEST2);
    1fe8:	8c eb       	ldi	r24, 0xBC	; 188
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <LED_u8Init>
#endif

	return u8ErrorState;
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <I2C_u8GetStatus>:


uint8_t I2C_u8GetStatus(void)
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
	return TWSR_REG & I2C_PRESCALAR_MASK;
    2002:	e1 e2       	ldi	r30, 0x21	; 33
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	88 7f       	andi	r24, 0xF8	; 248
}
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <I2C_u8MasterSendSLA>:

uint8_t I2C_u8MasterSendSLA(uint8_t u8SlaveAddress,uint8_t u8MasterOperation)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	00 d0       	rcall	.+0      	; 0x2016 <I2C_u8MasterSendSLA+0x6>
    2016:	0f 92       	push	r0
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	8a 83       	std	Y+2, r24	; 0x02
    201e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState= I2C_OK;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	89 83       	std	Y+1, r24	; 0x01
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    2024:	e6 e5       	ldi	r30, 0x56	; 86
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	88 23       	and	r24, r24
    202c:	dc f7       	brge	.-10     	; 0x2024 <I2C_u8MasterSendSLA+0x14>
		if (gu8_I2CState==I2C_MT_START_TRANSMITTED||gu8_I2CState==I2C_MT_REPEATED_START_TRANSMITTED)
    202e:	80 91 be 01 	lds	r24, 0x01BE
    2032:	88 30       	cpi	r24, 0x08	; 8
    2034:	21 f0       	breq	.+8      	; 0x203e <I2C_u8MasterSendSLA+0x2e>
    2036:	80 91 be 01 	lds	r24, 0x01BE
    203a:	80 31       	cpi	r24, 0x10	; 16
    203c:	71 f4       	brne	.+28     	; 0x205a <I2C_u8MasterSendSLA+0x4a>
		{//if it is state that the start condition is successfully sent then load the slave address in the data register and set the mode to write
			TWDR_REG = (u8SlaveAddress|u8MasterOperation);
    203e:	e3 e2       	ldi	r30, 0x23	; 35
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	89 2b       	or	r24, r25
    2048:	80 83       	st	Z, r24
			// Clear the interrupt flag to start the next action by the peripheral
			ASSIGN_HIGH_NIB(TWCR_REG,I2C_CLR_INTERRUPT_FLAG);
    204a:	a6 e5       	ldi	r26, 0x56	; 86
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e6 e5       	ldi	r30, 0x56	; 86
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	8f 70       	andi	r24, 0x0F	; 15
    2056:	80 68       	ori	r24, 0x80	; 128
    2058:	8c 93       	st	X, r24
		}
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    205a:	e6 e5       	ldi	r30, 0x56	; 86
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	88 23       	and	r24, r24
    2062:	dc f7       	brge	.-10     	; 0x205a <I2C_u8MasterSendSLA+0x4a>

	return u8ErrorState;
    2064:	89 81       	ldd	r24, Y+1	; 0x01
}
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <I2C_u8MasterSendByte>:


uint8_t I2C_u8MasterSendByte(uint8_t u8Data)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	00 d0       	rcall	.+0      	; 0x2078 <I2C_u8MasterSendByte+0x6>
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = I2C_OK;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	89 83       	std	Y+1, r24	; 0x01

	//Load the data in the I2C Data Register
	TWDR_REG= u8Data;
    2082:	e3 e2       	ldi	r30, 0x23	; 35
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	80 83       	st	Z, r24
	// Clear the interrupt flag to start the next action by the peripheral
	ASSIGN_HIGH_NIB(TWCR_REG,I2C_CLR_INTERRUPT_FLAG);
    208a:	a6 e5       	ldi	r26, 0x56	; 86
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e6 e5       	ldi	r30, 0x56	; 86
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	8f 70       	andi	r24, 0x0F	; 15
    2096:	80 68       	ori	r24, 0x80	; 128
    2098:	8c 93       	st	X, r24
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    209a:	e6 e5       	ldi	r30, 0x56	; 86
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	88 23       	and	r24, r24
    20a2:	dc f7       	brge	.-10     	; 0x209a <I2C_u8MasterSendByte+0x28>
	//wait until the byte is sent
	return u8ErrorState;
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <I2C_u8MasterSendStart>:

uint8_t I2C_u8MasterSendStart(void)
{
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	0f 92       	push	r0
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState=I2C_OK;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	89 83       	std	Y+1, r24	; 0x01
	if (gu8_I2CState==I2C_NO_INFO)
    20be:	80 91 be 01 	lds	r24, 0x01BE
    20c2:	88 3f       	cpi	r24, 0xF8	; 248
    20c4:	69 f4       	brne	.+26     	; 0x20e0 <I2C_u8MasterSendStart+0x30>
	{// if it is the first communication or after stop condition

		//Send the Start Condition
		SET_BIT(TWCR_REG,TWSTA_BIT);
    20c6:	a6 e5       	ldi	r26, 0x56	; 86
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e6 e5       	ldi	r30, 0x56	; 86
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	80 62       	ori	r24, 0x20	; 32
    20d2:	8c 93       	st	X, r24
		//Wait until it is sent
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    20d4:	e6 e5       	ldi	r30, 0x56	; 86
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	88 23       	and	r24, r24
    20dc:	dc f7       	brge	.-10     	; 0x20d4 <I2C_u8MasterSendStart+0x24>
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <I2C_u8MasterSendStart+0x34>

	}else
	{
		u8ErrorState= I2C_ILLEGAL_START;
    20e0:	86 e0       	ldi	r24, 0x06	; 6
    20e2:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e6:	0f 90       	pop	r0
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <I2C_u8SendRepeatedStart>:

uint8_t I2C_u8SendRepeatedStart(void)
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	0f 92       	push	r0
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = I2C_OK;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	89 83       	std	Y+1, r24	; 0x01
//	uint8_t u8I2CState= I2C_u8GetStatus();
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    20fc:	e6 e5       	ldi	r30, 0x56	; 86
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	88 23       	and	r24, r24
    2104:	dc f7       	brge	.-10     	; 0x20fc <I2C_u8SendRepeatedStart+0xe>

	if (gu8_I2CState==I2C_MT_DATA_TRANSMITTED_ACK || gu8_I2CState==I2C_MT_DATA_TRANSMITTED_NACK)
    2106:	80 91 be 01 	lds	r24, 0x01BE
    210a:	88 32       	cpi	r24, 0x28	; 40
    210c:	21 f0       	breq	.+8      	; 0x2116 <I2C_u8SendRepeatedStart+0x28>
    210e:	80 91 be 01 	lds	r24, 0x01BE
    2112:	80 33       	cpi	r24, 0x30	; 48
    2114:	49 f4       	brne	.+18     	; 0x2128 <I2C_u8SendRepeatedStart+0x3a>
	{// if the current state is the data byte is sent
		//Then send the Repeated start condition and clear the interrupt flag to send it
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_START_CONDITION);
    2116:	a6 e5       	ldi	r26, 0x56	; 86
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e6 e5       	ldi	r30, 0x56	; 86
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	8f 70       	andi	r24, 0x0F	; 15
    2122:	80 6a       	ori	r24, 0xA0	; 160
    2124:	8c 93       	st	X, r24
    2126:	02 c0       	rjmp	.+4      	; 0x212c <I2C_u8SendRepeatedStart+0x3e>
	}else
	{
		// if not update the error state to indicate that the start condition can not be send here
		u8ErrorState = I2C_START_WRONG_PLACE;
    2128:	85 e0       	ldi	r24, 0x05	; 5
    212a:	89 83       	std	Y+1, r24	; 0x01
	}


	return u8ErrorState;
    212c:	89 81       	ldd	r24, Y+1	; 0x01
}
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <I2C_u8MasterReceiveWithACK>:


uint8_t I2C_u8MasterReceiveWithACK(uint8_t* pu8Data)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <I2C_u8MasterReceiveWithACK+0x6>
    213c:	0f 92       	push	r0
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	9b 83       	std	Y+3, r25	; 0x03
    2144:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState=I2C_OK;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	89 83       	std	Y+1, r24	; 0x01
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    214a:	e6 e5       	ldi	r30, 0x56	; 86
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	88 23       	and	r24, r24
    2152:	dc f7       	brge	.-10     	; 0x214a <I2C_u8MasterReceiveWithACK+0x14>
	if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_ACK||gu8_I2CState==I2C_MR_DATA_RECEIVED_ACK)
    2154:	80 91 be 01 	lds	r24, 0x01BE
    2158:	80 34       	cpi	r24, 0x40	; 64
    215a:	21 f0       	breq	.+8      	; 0x2164 <I2C_u8MasterReceiveWithACK+0x2e>
    215c:	80 91 be 01 	lds	r24, 0x01BE
    2160:	80 35       	cpi	r24, 0x50	; 80
    2162:	c1 f4       	brne	.+48     	; 0x2194 <I2C_u8MasterReceiveWithACK+0x5e>
	{
		LED_u8On(&LEDTEST1);
    2164:	8a ed       	ldi	r24, 0xDA	; 218
    2166:	91 e0       	ldi	r25, 0x01	; 1
    2168:	0e 94 09 1c 	call	0x3812	; 0x3812 <LED_u8On>
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_RECEIVE_WITH_ACK);
    216c:	a6 e5       	ldi	r26, 0x56	; 86
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e6 e5       	ldi	r30, 0x56	; 86
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	8f 70       	andi	r24, 0x0F	; 15
    2178:	80 6c       	ori	r24, 0xC0	; 192
    217a:	8c 93       	st	X, r24
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    217c:	e6 e5       	ldi	r30, 0x56	; 86
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	88 23       	and	r24, r24
    2184:	dc f7       	brge	.-10     	; 0x217c <I2C_u8MasterReceiveWithACK+0x46>
		*pu8Data=TWDR_REG;
    2186:	e3 e2       	ldi	r30, 0x23	; 35
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	ea 81       	ldd	r30, Y+2	; 0x02
    218e:	fb 81       	ldd	r31, Y+3	; 0x03
    2190:	80 83       	st	Z, r24
    2192:	0e c0       	rjmp	.+28     	; 0x21b0 <I2C_u8MasterReceiveWithACK+0x7a>

	}else if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_NACK)
    2194:	80 91 be 01 	lds	r24, 0x01BE
    2198:	88 34       	cpi	r24, 0x48	; 72
    219a:	51 f4       	brne	.+20     	; 0x21b0 <I2C_u8MasterReceiveWithACK+0x7a>
	{
		u8ErrorState= I2C_SLAVE_NOT_AVLBL;
    219c:	87 e0       	ldi	r24, 0x07	; 7
    219e:	89 83       	std	Y+1, r24	; 0x01
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_STOP_CONDITION);
    21a0:	a6 e5       	ldi	r26, 0x56	; 86
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e6 e5       	ldi	r30, 0x56	; 86
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	8f 70       	andi	r24, 0x0F	; 15
    21ac:	80 69       	ori	r24, 0x90	; 144
    21ae:	8c 93       	st	X, r24
	}
	return u8ErrorState;
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <I2C_u8MasterReceiveWithNAK>:

uint8_t I2C_u8MasterReceiveWithNAK(uint8_t* pu8Data)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <I2C_u8MasterReceiveWithNAK+0x6>
    21c4:	0f 92       	push	r0
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	9b 83       	std	Y+3, r25	; 0x03
    21cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState=I2C_OK;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	89 83       	std	Y+1, r24	; 0x01
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    21d2:	e6 e5       	ldi	r30, 0x56	; 86
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	88 23       	and	r24, r24
    21da:	dc f7       	brge	.-10     	; 0x21d2 <I2C_u8MasterReceiveWithNAK+0x14>
	if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_ACK||gu8_I2CState==I2C_MR_DATA_RECEIVED_ACK)
    21dc:	80 91 be 01 	lds	r24, 0x01BE
    21e0:	80 34       	cpi	r24, 0x40	; 64
    21e2:	21 f0       	breq	.+8      	; 0x21ec <I2C_u8MasterReceiveWithNAK+0x2e>
    21e4:	80 91 be 01 	lds	r24, 0x01BE
    21e8:	80 35       	cpi	r24, 0x50	; 80
    21ea:	a1 f4       	brne	.+40     	; 0x2214 <I2C_u8MasterReceiveWithNAK+0x56>
	{
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_CLR_INTERRUPT_FLAG);
    21ec:	a6 e5       	ldi	r26, 0x56	; 86
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e6 e5       	ldi	r30, 0x56	; 86
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	8f 70       	andi	r24, 0x0F	; 15
    21f8:	80 68       	ori	r24, 0x80	; 128
    21fa:	8c 93       	st	X, r24
		while (!GET_BIT(TWCR_REG,TWINT_BIT));
    21fc:	e6 e5       	ldi	r30, 0x56	; 86
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	88 23       	and	r24, r24
    2204:	dc f7       	brge	.-10     	; 0x21fc <I2C_u8MasterReceiveWithNAK+0x3e>
		*pu8Data=TWDR_REG;
    2206:	e3 e2       	ldi	r30, 0x23	; 35
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	ea 81       	ldd	r30, Y+2	; 0x02
    220e:	fb 81       	ldd	r31, Y+3	; 0x03
    2210:	80 83       	st	Z, r24
    2212:	0e c0       	rjmp	.+28     	; 0x2230 <I2C_u8MasterReceiveWithNAK+0x72>

	}else if (gu8_I2CState==I2C_MR_SLAVE_ADDRESS_TRANSMITTED_NACK)
    2214:	80 91 be 01 	lds	r24, 0x01BE
    2218:	88 34       	cpi	r24, 0x48	; 72
    221a:	51 f4       	brne	.+20     	; 0x2230 <I2C_u8MasterReceiveWithNAK+0x72>
	{
		u8ErrorState= I2C_SLAVE_NOT_AVLBL;
    221c:	87 e0       	ldi	r24, 0x07	; 7
    221e:	89 83       	std	Y+1, r24	; 0x01
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_STOP_CONDITION);
    2220:	a6 e5       	ldi	r26, 0x56	; 86
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e6 e5       	ldi	r30, 0x56	; 86
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	8f 70       	andi	r24, 0x0F	; 15
    222c:	80 69       	ori	r24, 0x90	; 144
    222e:	8c 93       	st	X, r24
	}

	return u8ErrorState;
    2230:	89 81       	ldd	r24, Y+1	; 0x01
}
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <I2C_u8Stop>:

uint8_t I2C_u8Stop(void)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	0f 92       	push	r0
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = I2C_OK;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	89 83       	std	Y+1, r24	; 0x01
	//uint8_t u8I2CState= I2C_u8GetStatus();

	if (gu8_I2CState!=I2C_MT_START_TRANSMITTED || gu8_I2CState==I2C_MT_REPEATED_START_TRANSMITTED)
    224c:	80 91 be 01 	lds	r24, 0x01BE
    2250:	88 30       	cpi	r24, 0x08	; 8
    2252:	21 f4       	brne	.+8      	; 0x225c <I2C_u8Stop+0x1e>
    2254:	80 91 be 01 	lds	r24, 0x01BE
    2258:	80 31       	cpi	r24, 0x10	; 16
    225a:	49 f4       	brne	.+18     	; 0x226e <I2C_u8Stop+0x30>
	{// if the current state is not after a start condition

		//Then send the stop condition and clear the interrupt flag to send it
		ASSIGN_HIGH_NIB(TWCR_REG,I2C_SEND_STOP_CONDITION);
    225c:	a6 e5       	ldi	r26, 0x56	; 86
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e6 e5       	ldi	r30, 0x56	; 86
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8f 70       	andi	r24, 0x0F	; 15
    2268:	80 69       	ori	r24, 0x90	; 144
    226a:	8c 93       	st	X, r24
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <I2C_u8Stop+0x34>
	}else
	{
		// if not update the error state to indicate that the start condition can not be send here
		u8ErrorState = I2C_START_WRONG_PLACE;
    226e:	85 e0       	ldi	r24, 0x05	; 5
    2270:	89 83       	std	Y+1, r24	; 0x01
	}
	gu8_I2CState=I2C_NO_INFO;
    2272:	88 ef       	ldi	r24, 0xF8	; 248
    2274:	80 93 be 01 	sts	0x01BE, r24


	return u8ErrorState;
    2278:	89 81       	ldd	r24, Y+1	; 0x01
}
    227a:	0f 90       	pop	r0
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <I2C_u8SlaveGetByte>:

uint8_t I2C_u8SlaveGetByte(uint8_t* pu8Reading)
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	00 d0       	rcall	.+0      	; 0x2288 <I2C_u8SlaveGetByte+0x6>
    2288:	0f 92       	push	r0
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	9a 83       	std	Y+2, r25	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until the Device is addressed*/
	while (!GET_BIT(TWCR_REG,TWINT_BIT));
    2292:	e6 e5       	ldi	r30, 0x56	; 86
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	88 23       	and	r24, r24
    229a:	dc f7       	brge	.-10     	; 0x2292 <I2C_u8SlaveGetByte+0x10>

	/*Assign the high nibble of the I2C control register with value that will make it send a NACK after receiving data*/
	ASSIGN_HIGH_NIB(TWCR_REG,I2C_RECEIVE_WITH_ACK);
    229c:	a6 e5       	ldi	r26, 0x56	; 86
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e6 e5       	ldi	r30, 0x56	; 86
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	8f 70       	andi	r24, 0x0F	; 15
    22a8:	80 6c       	ori	r24, 0xC0	; 192
    22aa:	8c 93       	st	X, r24
	while (!(gu8_I2CState==I2C_SR_DATA_RECIEVED ||gu8_I2CState==I2C_SR_LAST_BYTE_RECIEVED ) );
    22ac:	80 91 be 01 	lds	r24, 0x01BE
    22b0:	80 38       	cpi	r24, 0x80	; 128
    22b2:	21 f0       	breq	.+8      	; 0x22bc <I2C_u8SlaveGetByte+0x3a>
    22b4:	80 91 be 01 	lds	r24, 0x01BE
    22b8:	88 38       	cpi	r24, 0x88	; 136
    22ba:	c1 f7       	brne	.-16     	; 0x22ac <I2C_u8SlaveGetByte+0x2a>
	ASSIGN_HIGH_NIB(TWCR_REG,I2C_RECOGNIZE_SLA_WITH_ACK);
    22bc:	a6 e5       	ldi	r26, 0x56	; 86
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e6 e5       	ldi	r30, 0x56	; 86
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	8f 70       	andi	r24, 0x0F	; 15
    22c8:	80 6c       	ori	r24, 0xC0	; 192
    22ca:	8c 93       	st	X, r24
	gu8_I2CState=I2C_NO_INFO;
    22cc:	88 ef       	ldi	r24, 0xF8	; 248
    22ce:	80 93 be 01 	sts	0x01BE, r24
	*pu8Reading= TWDR_REG;
    22d2:	e3 e2       	ldi	r30, 0x23	; 35
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	e9 81       	ldd	r30, Y+1	; 0x01
    22da:	fa 81       	ldd	r31, Y+2	; 0x02
    22dc:	80 83       	st	Z, r24
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <__vector_19>:



void __vector_19(void) {
    22ea:	1f 92       	push	r1
    22ec:	0f 92       	push	r0
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	0f 92       	push	r0
    22f2:	11 24       	eor	r1, r1
    22f4:	8f 93       	push	r24
    22f6:	ef 93       	push	r30
    22f8:	ff 93       	push	r31
    22fa:	df 93       	push	r29
    22fc:	cf 93       	push	r28
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
	gu8_I2CState = TWSR_REG & I2C_PRESCALAR_MASK;
    2302:	e1 e2       	ldi	r30, 0x21	; 33
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	88 7f       	andi	r24, 0xF8	; 248
    230a:	80 93 be 01 	sts	0x01BE, r24
}
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	ff 91       	pop	r31
    2314:	ef 91       	pop	r30
    2316:	8f 91       	pop	r24
    2318:	0f 90       	pop	r0
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	0f 90       	pop	r0
    231e:	1f 90       	pop	r1
    2320:	18 95       	reti

00002322 <DIO_u8SetPinDirection>:
#include "../../LIB/atmega32.h"
#include "DIO_interface.h"

// function to set direction of pin 
uint8_t DIO_u8SetPinDirection(DIOPort_t u8_PortName, DIOPin_t u8_PinNum,
		DIODir_t u8_PinDir) {
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	2e 97       	sbiw	r28, 0x0e	; 14
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	8a 83       	std	Y+2, r24	; 0x02
    2338:	6b 83       	std	Y+3, r22	; 0x03
    233a:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	89 83       	std	Y+1, r24	; 0x01

	/*Check if the inputs are in the right range*/
	if (u8_PinNum < DIO_PINS_NUMBER && u8_PortName < DIO_PORTS_NUMBER) {
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	88 30       	cpi	r24, 0x08	; 8
    2344:	08 f0       	brcs	.+2      	; 0x2348 <DIO_u8SetPinDirection+0x26>
    2346:	2c c2       	rjmp	.+1112   	; 0x27a0 <DIO_u8SetPinDirection+0x47e>
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	84 30       	cpi	r24, 0x04	; 4
    234c:	08 f0       	brcs	.+2      	; 0x2350 <DIO_u8SetPinDirection+0x2e>
    234e:	28 c2       	rjmp	.+1104   	; 0x27a0 <DIO_u8SetPinDirection+0x47e>
		/*Check which port */
		switch (u8_PortName) {
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	3e 87       	std	Y+14, r19	; 0x0e
    2358:	2d 87       	std	Y+13, r18	; 0x0d
    235a:	8d 85       	ldd	r24, Y+13	; 0x0d
    235c:	9e 85       	ldd	r25, Y+14	; 0x0e
    235e:	81 30       	cpi	r24, 0x01	; 1
    2360:	91 05       	cpc	r25, r1
    2362:	09 f4       	brne	.+2      	; 0x2366 <DIO_u8SetPinDirection+0x44>
    2364:	98 c0       	rjmp	.+304    	; 0x2496 <DIO_u8SetPinDirection+0x174>
    2366:	2d 85       	ldd	r18, Y+13	; 0x0d
    2368:	3e 85       	ldd	r19, Y+14	; 0x0e
    236a:	22 30       	cpi	r18, 0x02	; 2
    236c:	31 05       	cpc	r19, r1
    236e:	2c f4       	brge	.+10     	; 0x237a <DIO_u8SetPinDirection+0x58>
    2370:	8d 85       	ldd	r24, Y+13	; 0x0d
    2372:	9e 85       	ldd	r25, Y+14	; 0x0e
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	71 f0       	breq	.+28     	; 0x2394 <DIO_u8SetPinDirection+0x72>
    2378:	11 c2       	rjmp	.+1058   	; 0x279c <DIO_u8SetPinDirection+0x47a>
    237a:	2d 85       	ldd	r18, Y+13	; 0x0d
    237c:	3e 85       	ldd	r19, Y+14	; 0x0e
    237e:	22 30       	cpi	r18, 0x02	; 2
    2380:	31 05       	cpc	r19, r1
    2382:	09 f4       	brne	.+2      	; 0x2386 <DIO_u8SetPinDirection+0x64>
    2384:	09 c1       	rjmp	.+530    	; 0x2598 <DIO_u8SetPinDirection+0x276>
    2386:	8d 85       	ldd	r24, Y+13	; 0x0d
    2388:	9e 85       	ldd	r25, Y+14	; 0x0e
    238a:	83 30       	cpi	r24, 0x03	; 3
    238c:	91 05       	cpc	r25, r1
    238e:	09 f4       	brne	.+2      	; 0x2392 <DIO_u8SetPinDirection+0x70>
    2390:	84 c1       	rjmp	.+776    	; 0x269a <DIO_u8SetPinDirection+0x378>
    2392:	04 c2       	rjmp	.+1032   	; 0x279c <DIO_u8SetPinDirection+0x47a>
		case PORTA:
			/*Check which Direction the user wants the pin to be in */
			switch (u8_PinDir) {
    2394:	8c 81       	ldd	r24, Y+4	; 0x04
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	3c 87       	std	Y+12, r19	; 0x0c
    239c:	2b 87       	std	Y+11, r18	; 0x0b
    239e:	8b 85       	ldd	r24, Y+11	; 0x0b
    23a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    23a2:	81 30       	cpi	r24, 0x01	; 1
    23a4:	91 05       	cpc	r25, r1
    23a6:	99 f1       	breq	.+102    	; 0x240e <DIO_u8SetPinDirection+0xec>
    23a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    23aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    23ac:	22 30       	cpi	r18, 0x02	; 2
    23ae:	31 05       	cpc	r19, r1
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <DIO_u8SetPinDirection+0x92>
    23b2:	5b c0       	rjmp	.+182    	; 0x246a <DIO_u8SetPinDirection+0x148>
    23b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    23b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	09 f0       	breq	.+2      	; 0x23be <DIO_u8SetPinDirection+0x9c>
    23bc:	6a c0       	rjmp	.+212    	; 0x2492 <DIO_u8SetPinDirection+0x170>

			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRA_REG, u8_PinNum);
    23be:	aa e3       	ldi	r26, 0x3A	; 58
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	ea e3       	ldi	r30, 0x3A	; 58
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	48 2f       	mov	r20, r24
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <DIO_u8SetPinDirection+0xb8>
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	2a 95       	dec	r18
    23dc:	e2 f7       	brpl	.-8      	; 0x23d6 <DIO_u8SetPinDirection+0xb4>
    23de:	80 95       	com	r24
    23e0:	84 23       	and	r24, r20
    23e2:	8c 93       	st	X, r24
				CLR_BIT(PORTA_REG, u8_PinNum);
    23e4:	ab e3       	ldi	r26, 0x3B	; 59
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	eb e3       	ldi	r30, 0x3B	; 59
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	48 2f       	mov	r20, r24
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	02 2e       	mov	r0, r18
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <DIO_u8SetPinDirection+0xe0>
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	0a 94       	dec	r0
    2404:	e2 f7       	brpl	.-8      	; 0x23fe <DIO_u8SetPinDirection+0xdc>
    2406:	80 95       	com	r24
    2408:	84 23       	and	r24, r20
    240a:	8c 93       	st	X, r24
    240c:	ca c1       	rjmp	.+916    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    240e:	a0 e5       	ldi	r26, 0x50	; 80
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e0 e5       	ldi	r30, 0x50	; 80
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	8b 7f       	andi	r24, 0xFB	; 251
    241a:	8c 93       	st	X, r24
				CLR_BIT(DDRA_REG, u8_PinNum);
    241c:	aa e3       	ldi	r26, 0x3A	; 58
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	ea e3       	ldi	r30, 0x3A	; 58
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	48 2f       	mov	r20, r24
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <DIO_u8SetPinDirection+0x116>
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	2a 95       	dec	r18
    243a:	e2 f7       	brpl	.-8      	; 0x2434 <DIO_u8SetPinDirection+0x112>
    243c:	80 95       	com	r24
    243e:	84 23       	and	r24, r20
    2440:	8c 93       	st	X, r24
				SET_BIT(PORTA_REG, u8_PinNum);
    2442:	ab e3       	ldi	r26, 0x3B	; 59
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	eb e3       	ldi	r30, 0x3B	; 59
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	48 2f       	mov	r20, r24
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	02 2e       	mov	r0, r18
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <DIO_u8SetPinDirection+0x13e>
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	0a 94       	dec	r0
    2462:	e2 f7       	brpl	.-8      	; 0x245c <DIO_u8SetPinDirection+0x13a>
    2464:	84 2b       	or	r24, r20
    2466:	8c 93       	st	X, r24
    2468:	9c c1       	rjmp	.+824    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRA_REG, u8_PinNum);
    246a:	aa e3       	ldi	r26, 0x3A	; 58
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	ea e3       	ldi	r30, 0x3A	; 58
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	48 2f       	mov	r20, r24
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	28 2f       	mov	r18, r24
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	02 2e       	mov	r0, r18
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <DIO_u8SetPinDirection+0x166>
    2484:	88 0f       	add	r24, r24
    2486:	99 1f       	adc	r25, r25
    2488:	0a 94       	dec	r0
    248a:	e2 f7       	brpl	.-8      	; 0x2484 <DIO_u8SetPinDirection+0x162>
    248c:	84 2b       	or	r24, r20
    248e:	8c 93       	st	X, r24
    2490:	88 c1       	rjmp	.+784    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    2492:	19 82       	std	Y+1, r1	; 0x01
    2494:	86 c1       	rjmp	.+780    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
			}
			break;
		case PORTB:
			/*Check if the inputs are in the right range*/
			switch (u8_PinDir) {
    2496:	8c 81       	ldd	r24, Y+4	; 0x04
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	3a 87       	std	Y+10, r19	; 0x0a
    249e:	29 87       	std	Y+9, r18	; 0x09
    24a0:	89 85       	ldd	r24, Y+9	; 0x09
    24a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a4:	81 30       	cpi	r24, 0x01	; 1
    24a6:	91 05       	cpc	r25, r1
    24a8:	99 f1       	breq	.+102    	; 0x2510 <DIO_u8SetPinDirection+0x1ee>
    24aa:	29 85       	ldd	r18, Y+9	; 0x09
    24ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    24ae:	22 30       	cpi	r18, 0x02	; 2
    24b0:	31 05       	cpc	r19, r1
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <DIO_u8SetPinDirection+0x194>
    24b4:	5b c0       	rjmp	.+182    	; 0x256c <DIO_u8SetPinDirection+0x24a>
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <DIO_u8SetPinDirection+0x19e>
    24be:	6a c0       	rjmp	.+212    	; 0x2594 <DIO_u8SetPinDirection+0x272>
			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRB_REG, u8_PinNum);
    24c0:	a7 e3       	ldi	r26, 0x37	; 55
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e7 e3       	ldi	r30, 0x37	; 55
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	48 2f       	mov	r20, r24
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <DIO_u8SetPinDirection+0x1ba>
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	2a 95       	dec	r18
    24de:	e2 f7       	brpl	.-8      	; 0x24d8 <DIO_u8SetPinDirection+0x1b6>
    24e0:	80 95       	com	r24
    24e2:	84 23       	and	r24, r20
    24e4:	8c 93       	st	X, r24
				CLR_BIT(PORTB_REG, u8_PinNum);
    24e6:	a8 e3       	ldi	r26, 0x38	; 56
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e8 e3       	ldi	r30, 0x38	; 56
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	48 2f       	mov	r20, r24
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	02 2e       	mov	r0, r18
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <DIO_u8SetPinDirection+0x1e2>
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	0a 94       	dec	r0
    2506:	e2 f7       	brpl	.-8      	; 0x2500 <DIO_u8SetPinDirection+0x1de>
    2508:	80 95       	com	r24
    250a:	84 23       	and	r24, r20
    250c:	8c 93       	st	X, r24
    250e:	49 c1       	rjmp	.+658    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    2510:	a0 e5       	ldi	r26, 0x50	; 80
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	e0 e5       	ldi	r30, 0x50	; 80
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	8b 7f       	andi	r24, 0xFB	; 251
    251c:	8c 93       	st	X, r24
				CLR_BIT(DDRB_REG, u8_PinNum);
    251e:	a7 e3       	ldi	r26, 0x37	; 55
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e7 e3       	ldi	r30, 0x37	; 55
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	48 2f       	mov	r20, r24
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	02 c0       	rjmp	.+4      	; 0x253a <DIO_u8SetPinDirection+0x218>
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	2a 95       	dec	r18
    253c:	e2 f7       	brpl	.-8      	; 0x2536 <DIO_u8SetPinDirection+0x214>
    253e:	80 95       	com	r24
    2540:	84 23       	and	r24, r20
    2542:	8c 93       	st	X, r24
				SET_BIT(PORTB_REG, u8_PinNum);
    2544:	a8 e3       	ldi	r26, 0x38	; 56
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	e8 e3       	ldi	r30, 0x38	; 56
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	48 2f       	mov	r20, r24
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	02 2e       	mov	r0, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <DIO_u8SetPinDirection+0x240>
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	0a 94       	dec	r0
    2564:	e2 f7       	brpl	.-8      	; 0x255e <DIO_u8SetPinDirection+0x23c>
    2566:	84 2b       	or	r24, r20
    2568:	8c 93       	st	X, r24
    256a:	1b c1       	rjmp	.+566    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRB_REG, u8_PinNum);
    256c:	a7 e3       	ldi	r26, 0x37	; 55
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e7 e3       	ldi	r30, 0x37	; 55
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	48 2f       	mov	r20, r24
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	28 2f       	mov	r18, r24
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	02 2e       	mov	r0, r18
    2584:	02 c0       	rjmp	.+4      	; 0x258a <DIO_u8SetPinDirection+0x268>
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	0a 94       	dec	r0
    258c:	e2 f7       	brpl	.-8      	; 0x2586 <DIO_u8SetPinDirection+0x264>
    258e:	84 2b       	or	r24, r20
    2590:	8c 93       	st	X, r24
    2592:	07 c1       	rjmp	.+526    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    2594:	19 82       	std	Y+1, r1	; 0x01
    2596:	05 c1       	rjmp	.+522    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
			}
			break;
		case PORTC:
			switch (u8_PinDir) {
    2598:	8c 81       	ldd	r24, Y+4	; 0x04
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	38 87       	std	Y+8, r19	; 0x08
    25a0:	2f 83       	std	Y+7, r18	; 0x07
    25a2:	8f 81       	ldd	r24, Y+7	; 0x07
    25a4:	98 85       	ldd	r25, Y+8	; 0x08
    25a6:	81 30       	cpi	r24, 0x01	; 1
    25a8:	91 05       	cpc	r25, r1
    25aa:	99 f1       	breq	.+102    	; 0x2612 <DIO_u8SetPinDirection+0x2f0>
    25ac:	2f 81       	ldd	r18, Y+7	; 0x07
    25ae:	38 85       	ldd	r19, Y+8	; 0x08
    25b0:	22 30       	cpi	r18, 0x02	; 2
    25b2:	31 05       	cpc	r19, r1
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <DIO_u8SetPinDirection+0x296>
    25b6:	5b c0       	rjmp	.+182    	; 0x266e <DIO_u8SetPinDirection+0x34c>
    25b8:	8f 81       	ldd	r24, Y+7	; 0x07
    25ba:	98 85       	ldd	r25, Y+8	; 0x08
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	09 f0       	breq	.+2      	; 0x25c2 <DIO_u8SetPinDirection+0x2a0>
    25c0:	6a c0       	rjmp	.+212    	; 0x2696 <DIO_u8SetPinDirection+0x374>
			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRC_REG, u8_PinNum);
    25c2:	a4 e3       	ldi	r26, 0x34	; 52
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e4 e3       	ldi	r30, 0x34	; 52
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	48 2f       	mov	r20, r24
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <DIO_u8SetPinDirection+0x2bc>
    25da:	88 0f       	add	r24, r24
    25dc:	99 1f       	adc	r25, r25
    25de:	2a 95       	dec	r18
    25e0:	e2 f7       	brpl	.-8      	; 0x25da <DIO_u8SetPinDirection+0x2b8>
    25e2:	80 95       	com	r24
    25e4:	84 23       	and	r24, r20
    25e6:	8c 93       	st	X, r24
				CLR_BIT(PORTC_REG, u8_PinNum);
    25e8:	a5 e3       	ldi	r26, 0x35	; 53
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e5 e3       	ldi	r30, 0x35	; 53
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	48 2f       	mov	r20, r24
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	02 2e       	mov	r0, r18
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <DIO_u8SetPinDirection+0x2e4>
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	0a 94       	dec	r0
    2608:	e2 f7       	brpl	.-8      	; 0x2602 <DIO_u8SetPinDirection+0x2e0>
    260a:	80 95       	com	r24
    260c:	84 23       	and	r24, r20
    260e:	8c 93       	st	X, r24
    2610:	c8 c0       	rjmp	.+400    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    2612:	a0 e5       	ldi	r26, 0x50	; 80
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e0 e5       	ldi	r30, 0x50	; 80
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	8b 7f       	andi	r24, 0xFB	; 251
    261e:	8c 93       	st	X, r24
				CLR_BIT(DDRC_REG, u8_PinNum);
    2620:	a4 e3       	ldi	r26, 0x34	; 52
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e4 e3       	ldi	r30, 0x34	; 52
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	48 2f       	mov	r20, r24
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	02 c0       	rjmp	.+4      	; 0x263c <DIO_u8SetPinDirection+0x31a>
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	2a 95       	dec	r18
    263e:	e2 f7       	brpl	.-8      	; 0x2638 <DIO_u8SetPinDirection+0x316>
    2640:	80 95       	com	r24
    2642:	84 23       	and	r24, r20
    2644:	8c 93       	st	X, r24
				SET_BIT(PORTC_REG, u8_PinNum);
    2646:	a5 e3       	ldi	r26, 0x35	; 53
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e5 e3       	ldi	r30, 0x35	; 53
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	48 2f       	mov	r20, r24
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	28 2f       	mov	r18, r24
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	02 2e       	mov	r0, r18
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <DIO_u8SetPinDirection+0x342>
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	0a 94       	dec	r0
    2666:	e2 f7       	brpl	.-8      	; 0x2660 <DIO_u8SetPinDirection+0x33e>
    2668:	84 2b       	or	r24, r20
    266a:	8c 93       	st	X, r24
    266c:	9a c0       	rjmp	.+308    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRC_REG, u8_PinNum);
    266e:	a4 e3       	ldi	r26, 0x34	; 52
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e4 e3       	ldi	r30, 0x34	; 52
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	48 2f       	mov	r20, r24
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	02 2e       	mov	r0, r18
    2686:	02 c0       	rjmp	.+4      	; 0x268c <DIO_u8SetPinDirection+0x36a>
    2688:	88 0f       	add	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	0a 94       	dec	r0
    268e:	e2 f7       	brpl	.-8      	; 0x2688 <DIO_u8SetPinDirection+0x366>
    2690:	84 2b       	or	r24, r20
    2692:	8c 93       	st	X, r24
    2694:	86 c0       	rjmp	.+268    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    2696:	19 82       	std	Y+1, r1	; 0x01
    2698:	84 c0       	rjmp	.+264    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
			}
			break;
		case PORTD:
			switch (u8_PinDir) {
    269a:	8c 81       	ldd	r24, Y+4	; 0x04
    269c:	28 2f       	mov	r18, r24
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	3e 83       	std	Y+6, r19	; 0x06
    26a2:	2d 83       	std	Y+5, r18	; 0x05
    26a4:	8d 81       	ldd	r24, Y+5	; 0x05
    26a6:	9e 81       	ldd	r25, Y+6	; 0x06
    26a8:	81 30       	cpi	r24, 0x01	; 1
    26aa:	91 05       	cpc	r25, r1
    26ac:	99 f1       	breq	.+102    	; 0x2714 <DIO_u8SetPinDirection+0x3f2>
    26ae:	2d 81       	ldd	r18, Y+5	; 0x05
    26b0:	3e 81       	ldd	r19, Y+6	; 0x06
    26b2:	22 30       	cpi	r18, 0x02	; 2
    26b4:	31 05       	cpc	r19, r1
    26b6:	09 f4       	brne	.+2      	; 0x26ba <DIO_u8SetPinDirection+0x398>
    26b8:	5b c0       	rjmp	.+182    	; 0x2770 <DIO_u8SetPinDirection+0x44e>
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <DIO_u8SetPinDirection+0x3a2>
    26c2:	6a c0       	rjmp	.+212    	; 0x2798 <DIO_u8SetPinDirection+0x476>
			case DIO_INPUT:
				// for input tristate mode ({DDxn, PORTxn} = 0b00)
				CLR_BIT(DDRD_REG, u8_PinNum);
    26c4:	a1 e3       	ldi	r26, 0x31	; 49
    26c6:	b0 e0       	ldi	r27, 0x00	; 0
    26c8:	e1 e3       	ldi	r30, 0x31	; 49
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	80 81       	ld	r24, Z
    26ce:	48 2f       	mov	r20, r24
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	02 c0       	rjmp	.+4      	; 0x26e0 <DIO_u8SetPinDirection+0x3be>
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	2a 95       	dec	r18
    26e2:	e2 f7       	brpl	.-8      	; 0x26dc <DIO_u8SetPinDirection+0x3ba>
    26e4:	80 95       	com	r24
    26e6:	84 23       	and	r24, r20
    26e8:	8c 93       	st	X, r24
				CLR_BIT(PORTA_REG, u8_PinNum);
    26ea:	ab e3       	ldi	r26, 0x3B	; 59
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	eb e3       	ldi	r30, 0x3B	; 59
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	48 2f       	mov	r20, r24
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	28 2f       	mov	r18, r24
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	02 2e       	mov	r0, r18
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <DIO_u8SetPinDirection+0x3e6>
    2704:	88 0f       	add	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	0a 94       	dec	r0
    270a:	e2 f7       	brpl	.-8      	; 0x2704 <DIO_u8SetPinDirection+0x3e2>
    270c:	80 95       	com	r24
    270e:	84 23       	and	r24, r20
    2710:	8c 93       	st	X, r24
    2712:	47 c0       	rjmp	.+142    	; 0x27a2 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_INPUT_PULLUP:
				// for input PULLUP mode ({DDxn, PORTxn,PUD} = 0b010)
				CLR_BIT(SFIOR_REG, PUD_BIT);
    2714:	a0 e5       	ldi	r26, 0x50	; 80
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e0 e5       	ldi	r30, 0x50	; 80
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	8b 7f       	andi	r24, 0xFB	; 251
    2720:	8c 93       	st	X, r24
				CLR_BIT(DDRD_REG, u8_PinNum);
    2722:	a1 e3       	ldi	r26, 0x31	; 49
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e1 e3       	ldi	r30, 0x31	; 49
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	48 2f       	mov	r20, r24
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	02 c0       	rjmp	.+4      	; 0x273e <DIO_u8SetPinDirection+0x41c>
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	2a 95       	dec	r18
    2740:	e2 f7       	brpl	.-8      	; 0x273a <DIO_u8SetPinDirection+0x418>
    2742:	80 95       	com	r24
    2744:	84 23       	and	r24, r20
    2746:	8c 93       	st	X, r24
				SET_BIT(PORTD_REG, u8_PinNum);
    2748:	a2 e3       	ldi	r26, 0x32	; 50
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e2 e3       	ldi	r30, 0x32	; 50
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	48 2f       	mov	r20, r24
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	02 2e       	mov	r0, r18
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <DIO_u8SetPinDirection+0x444>
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	0a 94       	dec	r0
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <DIO_u8SetPinDirection+0x440>
    276a:	84 2b       	or	r24, r20
    276c:	8c 93       	st	X, r24
    276e:	19 c0       	rjmp	.+50     	; 0x27a2 <DIO_u8SetPinDirection+0x480>
				break;
			case DIO_OUTPUT:
				// for OUTPUT mode ({DDxn, PORTxn} = 0b1x)
				SET_BIT(DDRD_REG, u8_PinNum);
    2770:	a1 e3       	ldi	r26, 0x31	; 49
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e1 e3       	ldi	r30, 0x31	; 49
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	48 2f       	mov	r20, r24
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	28 2f       	mov	r18, r24
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	02 2e       	mov	r0, r18
    2788:	02 c0       	rjmp	.+4      	; 0x278e <DIO_u8SetPinDirection+0x46c>
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	0a 94       	dec	r0
    2790:	e2 f7       	brpl	.-8      	; 0x278a <DIO_u8SetPinDirection+0x468>
    2792:	84 2b       	or	r24, r20
    2794:	8c 93       	st	X, r24
    2796:	05 c0       	rjmp	.+10     	; 0x27a2 <DIO_u8SetPinDirection+0x480>
				break;
			default:
				// If the input state is not one of the above cases return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    2798:	19 82       	std	Y+1, r1	; 0x01
    279a:	03 c0       	rjmp	.+6      	; 0x27a2 <DIO_u8SetPinDirection+0x480>
			}
			break;
		default:
			// If the input port is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    279c:	19 82       	std	Y+1, r1	; 0x01
    279e:	01 c0       	rjmp	.+2      	; 0x27a2 <DIO_u8SetPinDirection+0x480>
		}
	} else {
		// If the input port or input pin is not suitable return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    27a0:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorState;
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27a4:	2e 96       	adiw	r28, 0x0e	; 14
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <DIO_u8SetPinData>:

// function to assign value to pin 
uint8_t DIO_u8SetPinData(DIOPort_t u8_PortName, DIOPin_t u8_PinNum,
		DIODir_t u8_PinValue) {
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	2e 97       	sbiw	r28, 0x0e	; 14
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	cd bf       	out	0x3d, r28	; 61
    27ca:	8a 83       	std	Y+2, r24	; 0x02
    27cc:	6b 83       	std	Y+3, r22	; 0x03
    27ce:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	89 83       	std	Y+1, r24	; 0x01
	if (u8_PinNum < DIO_PINS_NUMBER) {
    27d4:	8b 81       	ldd	r24, Y+3	; 0x03
    27d6:	88 30       	cpi	r24, 0x08	; 8
    27d8:	08 f0       	brcs	.+2      	; 0x27dc <DIO_u8SetPinData+0x26>
    27da:	06 c1       	rjmp	.+524    	; 0x29e8 <DIO_u8SetPinData+0x232>
		/*Check which port */
		switch (u8_PortName) {
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	28 2f       	mov	r18, r24
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	3e 87       	std	Y+14, r19	; 0x0e
    27e4:	2d 87       	std	Y+13, r18	; 0x0d
    27e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ea:	81 30       	cpi	r24, 0x01	; 1
    27ec:	91 05       	cpc	r25, r1
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <DIO_u8SetPinData+0x3c>
    27f0:	50 c0       	rjmp	.+160    	; 0x2892 <DIO_u8SetPinData+0xdc>
    27f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    27f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    27f6:	22 30       	cpi	r18, 0x02	; 2
    27f8:	31 05       	cpc	r19, r1
    27fa:	2c f4       	brge	.+10     	; 0x2806 <DIO_u8SetPinData+0x50>
    27fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	71 f0       	breq	.+28     	; 0x2820 <DIO_u8SetPinData+0x6a>
    2804:	f2 c0       	rjmp	.+484    	; 0x29ea <DIO_u8SetPinData+0x234>
    2806:	2d 85       	ldd	r18, Y+13	; 0x0d
    2808:	3e 85       	ldd	r19, Y+14	; 0x0e
    280a:	22 30       	cpi	r18, 0x02	; 2
    280c:	31 05       	cpc	r19, r1
    280e:	09 f4       	brne	.+2      	; 0x2812 <DIO_u8SetPinData+0x5c>
    2810:	79 c0       	rjmp	.+242    	; 0x2904 <DIO_u8SetPinData+0x14e>
    2812:	8d 85       	ldd	r24, Y+13	; 0x0d
    2814:	9e 85       	ldd	r25, Y+14	; 0x0e
    2816:	83 30       	cpi	r24, 0x03	; 3
    2818:	91 05       	cpc	r25, r1
    281a:	09 f4       	brne	.+2      	; 0x281e <DIO_u8SetPinData+0x68>
    281c:	ac c0       	rjmp	.+344    	; 0x2976 <DIO_u8SetPinData+0x1c0>
    281e:	e5 c0       	rjmp	.+458    	; 0x29ea <DIO_u8SetPinData+0x234>
		case PORTA:
			switch (u8_PinValue) {
    2820:	8c 81       	ldd	r24, Y+4	; 0x04
    2822:	28 2f       	mov	r18, r24
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	3c 87       	std	Y+12, r19	; 0x0c
    2828:	2b 87       	std	Y+11, r18	; 0x0b
    282a:	8b 85       	ldd	r24, Y+11	; 0x0b
    282c:	9c 85       	ldd	r25, Y+12	; 0x0c
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	c9 f0       	breq	.+50     	; 0x2864 <DIO_u8SetPinData+0xae>
    2832:	2b 85       	ldd	r18, Y+11	; 0x0b
    2834:	3c 85       	ldd	r19, Y+12	; 0x0c
    2836:	21 30       	cpi	r18, 0x01	; 1
    2838:	31 05       	cpc	r19, r1
    283a:	49 f5       	brne	.+82     	; 0x288e <DIO_u8SetPinData+0xd8>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTA_REG, u8_PinNum);
    283c:	ab e3       	ldi	r26, 0x3B	; 59
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	eb e3       	ldi	r30, 0x3B	; 59
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	48 2f       	mov	r20, r24
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	02 2e       	mov	r0, r18
    2854:	02 c0       	rjmp	.+4      	; 0x285a <DIO_u8SetPinData+0xa4>
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	0a 94       	dec	r0
    285c:	e2 f7       	brpl	.-8      	; 0x2856 <DIO_u8SetPinData+0xa0>
    285e:	84 2b       	or	r24, r20
    2860:	8c 93       	st	X, r24
    2862:	c3 c0       	rjmp	.+390    	; 0x29ea <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTA_REG, u8_PinNum);
    2864:	ab e3       	ldi	r26, 0x3B	; 59
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	eb e3       	ldi	r30, 0x3B	; 59
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	48 2f       	mov	r20, r24
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	02 2e       	mov	r0, r18
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <DIO_u8SetPinData+0xcc>
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	0a 94       	dec	r0
    2884:	e2 f7       	brpl	.-8      	; 0x287e <DIO_u8SetPinData+0xc8>
    2886:	80 95       	com	r24
    2888:	84 23       	and	r24, r20
    288a:	8c 93       	st	X, r24
    288c:	ae c0       	rjmp	.+348    	; 0x29ea <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    288e:	19 82       	std	Y+1, r1	; 0x01
    2890:	ac c0       	rjmp	.+344    	; 0x29ea <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTB:
			switch (u8_PinValue) {
    2892:	8c 81       	ldd	r24, Y+4	; 0x04
    2894:	28 2f       	mov	r18, r24
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	3a 87       	std	Y+10, r19	; 0x0a
    289a:	29 87       	std	Y+9, r18	; 0x09
    289c:	89 85       	ldd	r24, Y+9	; 0x09
    289e:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	c9 f0       	breq	.+50     	; 0x28d6 <DIO_u8SetPinData+0x120>
    28a4:	29 85       	ldd	r18, Y+9	; 0x09
    28a6:	3a 85       	ldd	r19, Y+10	; 0x0a
    28a8:	21 30       	cpi	r18, 0x01	; 1
    28aa:	31 05       	cpc	r19, r1
    28ac:	49 f5       	brne	.+82     	; 0x2900 <DIO_u8SetPinData+0x14a>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTB_REG, u8_PinNum);
    28ae:	a8 e3       	ldi	r26, 0x38	; 56
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	e8 e3       	ldi	r30, 0x38	; 56
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	48 2f       	mov	r20, r24
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	02 2e       	mov	r0, r18
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <DIO_u8SetPinData+0x116>
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	0a 94       	dec	r0
    28ce:	e2 f7       	brpl	.-8      	; 0x28c8 <DIO_u8SetPinData+0x112>
    28d0:	84 2b       	or	r24, r20
    28d2:	8c 93       	st	X, r24
    28d4:	8a c0       	rjmp	.+276    	; 0x29ea <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTB_REG, u8_PinNum);
    28d6:	a8 e3       	ldi	r26, 0x38	; 56
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e8 e3       	ldi	r30, 0x38	; 56
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	48 2f       	mov	r20, r24
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	28 2f       	mov	r18, r24
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	02 2e       	mov	r0, r18
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <DIO_u8SetPinData+0x13e>
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	0a 94       	dec	r0
    28f6:	e2 f7       	brpl	.-8      	; 0x28f0 <DIO_u8SetPinData+0x13a>
    28f8:	80 95       	com	r24
    28fa:	84 23       	and	r24, r20
    28fc:	8c 93       	st	X, r24
    28fe:	75 c0       	rjmp	.+234    	; 0x29ea <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    2900:	19 82       	std	Y+1, r1	; 0x01
    2902:	73 c0       	rjmp	.+230    	; 0x29ea <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTC:
			switch (u8_PinValue) {
    2904:	8c 81       	ldd	r24, Y+4	; 0x04
    2906:	28 2f       	mov	r18, r24
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	38 87       	std	Y+8, r19	; 0x08
    290c:	2f 83       	std	Y+7, r18	; 0x07
    290e:	8f 81       	ldd	r24, Y+7	; 0x07
    2910:	98 85       	ldd	r25, Y+8	; 0x08
    2912:	00 97       	sbiw	r24, 0x00	; 0
    2914:	c9 f0       	breq	.+50     	; 0x2948 <DIO_u8SetPinData+0x192>
    2916:	2f 81       	ldd	r18, Y+7	; 0x07
    2918:	38 85       	ldd	r19, Y+8	; 0x08
    291a:	21 30       	cpi	r18, 0x01	; 1
    291c:	31 05       	cpc	r19, r1
    291e:	49 f5       	brne	.+82     	; 0x2972 <DIO_u8SetPinData+0x1bc>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTC_REG, u8_PinNum);
    2920:	a5 e3       	ldi	r26, 0x35	; 53
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e5 e3       	ldi	r30, 0x35	; 53
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	48 2f       	mov	r20, r24
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	28 2f       	mov	r18, r24
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	02 2e       	mov	r0, r18
    2938:	02 c0       	rjmp	.+4      	; 0x293e <DIO_u8SetPinData+0x188>
    293a:	88 0f       	add	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	0a 94       	dec	r0
    2940:	e2 f7       	brpl	.-8      	; 0x293a <DIO_u8SetPinData+0x184>
    2942:	84 2b       	or	r24, r20
    2944:	8c 93       	st	X, r24
    2946:	51 c0       	rjmp	.+162    	; 0x29ea <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTC_REG, u8_PinNum);
    2948:	a5 e3       	ldi	r26, 0x35	; 53
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e5 e3       	ldi	r30, 0x35	; 53
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	48 2f       	mov	r20, r24
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	02 2e       	mov	r0, r18
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <DIO_u8SetPinData+0x1b0>
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	0a 94       	dec	r0
    2968:	e2 f7       	brpl	.-8      	; 0x2962 <DIO_u8SetPinData+0x1ac>
    296a:	80 95       	com	r24
    296c:	84 23       	and	r24, r20
    296e:	8c 93       	st	X, r24
    2970:	3c c0       	rjmp	.+120    	; 0x29ea <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    2972:	19 82       	std	Y+1, r1	; 0x01
    2974:	3a c0       	rjmp	.+116    	; 0x29ea <DIO_u8SetPinData+0x234>
			}
			break;
		case PORTD:
			switch (u8_PinValue) {
    2976:	8c 81       	ldd	r24, Y+4	; 0x04
    2978:	28 2f       	mov	r18, r24
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	3e 83       	std	Y+6, r19	; 0x06
    297e:	2d 83       	std	Y+5, r18	; 0x05
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	c9 f0       	breq	.+50     	; 0x29ba <DIO_u8SetPinData+0x204>
    2988:	2d 81       	ldd	r18, Y+5	; 0x05
    298a:	3e 81       	ldd	r19, Y+6	; 0x06
    298c:	21 30       	cpi	r18, 0x01	; 1
    298e:	31 05       	cpc	r19, r1
    2990:	49 f5       	brne	.+82     	; 0x29e4 <DIO_u8SetPinData+0x22e>
			// set or clear bit depend on PinValue
			case DIO_HIGH:
				SET_BIT(PORTD_REG, u8_PinNum);
    2992:	a2 e3       	ldi	r26, 0x32	; 50
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e2 e3       	ldi	r30, 0x32	; 50
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	48 2f       	mov	r20, r24
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	28 2f       	mov	r18, r24
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	02 2e       	mov	r0, r18
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <DIO_u8SetPinData+0x1fa>
    29ac:	88 0f       	add	r24, r24
    29ae:	99 1f       	adc	r25, r25
    29b0:	0a 94       	dec	r0
    29b2:	e2 f7       	brpl	.-8      	; 0x29ac <DIO_u8SetPinData+0x1f6>
    29b4:	84 2b       	or	r24, r20
    29b6:	8c 93       	st	X, r24
    29b8:	18 c0       	rjmp	.+48     	; 0x29ea <DIO_u8SetPinData+0x234>
				break;
			case DIO_LOW:
				CLR_BIT(PORTD_REG, u8_PinNum);
    29ba:	a2 e3       	ldi	r26, 0x32	; 50
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e2 e3       	ldi	r30, 0x32	; 50
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	48 2f       	mov	r20, r24
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	28 2f       	mov	r18, r24
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	02 2e       	mov	r0, r18
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <DIO_u8SetPinData+0x222>
    29d4:	88 0f       	add	r24, r24
    29d6:	99 1f       	adc	r25, r25
    29d8:	0a 94       	dec	r0
    29da:	e2 f7       	brpl	.-8      	; 0x29d4 <DIO_u8SetPinData+0x21e>
    29dc:	80 95       	com	r24
    29de:	84 23       	and	r24, r20
    29e0:	8c 93       	st	X, r24
    29e2:	03 c0       	rjmp	.+6      	; 0x29ea <DIO_u8SetPinData+0x234>
				break;
			default:
				// If not HIGH or LOW return error state NOK
				u8ErrorState = STD_TYPES_NOK;
    29e4:	19 82       	std	Y+1, r1	; 0x01
    29e6:	01 c0       	rjmp	.+2      	; 0x29ea <DIO_u8SetPinData+0x234>
			}
			break;
		}
	} else {
		// if not suitable port or pin state return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    29e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorState;
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    29ec:	2e 96       	adiw	r28, 0x0e	; 14
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <DIO_u8GetPinData>:

// function to read value on pin 
uint8_t DIO_u8GetPinData(DIOPort_t u8_PortName, DIOPin_t u8_PinNum,
		uint8_t* pu8_ReturnVar) {
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	27 97       	sbiw	r28, 0x07	; 7
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	8a 83       	std	Y+2, r24	; 0x02
    2a14:	6b 83       	std	Y+3, r22	; 0x03
    2a16:	5d 83       	std	Y+5, r21	; 0x05
    2a18:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	89 83       	std	Y+1, r24	; 0x01

	if (u8_PinNum < DIO_PINS_NUMBER && pu8_ReturnVar != NULL) {
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	88 30       	cpi	r24, 0x08	; 8
    2a22:	08 f0       	brcs	.+2      	; 0x2a26 <DIO_u8GetPinData+0x28>
    2a24:	78 c0       	rjmp	.+240    	; 0x2b16 <DIO_u8GetPinData+0x118>
    2a26:	8c 81       	ldd	r24, Y+4	; 0x04
    2a28:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	09 f4       	brne	.+2      	; 0x2a30 <DIO_u8GetPinData+0x32>
    2a2e:	73 c0       	rjmp	.+230    	; 0x2b16 <DIO_u8GetPinData+0x118>
		switch (u8_PortName) {
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	28 2f       	mov	r18, r24
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	3f 83       	std	Y+7, r19	; 0x07
    2a38:	2e 83       	std	Y+6, r18	; 0x06
    2a3a:	4e 81       	ldd	r20, Y+6	; 0x06
    2a3c:	5f 81       	ldd	r21, Y+7	; 0x07
    2a3e:	41 30       	cpi	r20, 0x01	; 1
    2a40:	51 05       	cpc	r21, r1
    2a42:	59 f1       	breq	.+86     	; 0x2a9a <DIO_u8GetPinData+0x9c>
    2a44:	8e 81       	ldd	r24, Y+6	; 0x06
    2a46:	9f 81       	ldd	r25, Y+7	; 0x07
    2a48:	82 30       	cpi	r24, 0x02	; 2
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	34 f4       	brge	.+12     	; 0x2a5a <DIO_u8GetPinData+0x5c>
    2a4e:	2e 81       	ldd	r18, Y+6	; 0x06
    2a50:	3f 81       	ldd	r19, Y+7	; 0x07
    2a52:	21 15       	cp	r18, r1
    2a54:	31 05       	cpc	r19, r1
    2a56:	69 f0       	breq	.+26     	; 0x2a72 <DIO_u8GetPinData+0x74>
    2a58:	5c c0       	rjmp	.+184    	; 0x2b12 <DIO_u8GetPinData+0x114>
    2a5a:	4e 81       	ldd	r20, Y+6	; 0x06
    2a5c:	5f 81       	ldd	r21, Y+7	; 0x07
    2a5e:	42 30       	cpi	r20, 0x02	; 2
    2a60:	51 05       	cpc	r21, r1
    2a62:	79 f1       	breq	.+94     	; 0x2ac2 <DIO_u8GetPinData+0xc4>
    2a64:	8e 81       	ldd	r24, Y+6	; 0x06
    2a66:	9f 81       	ldd	r25, Y+7	; 0x07
    2a68:	83 30       	cpi	r24, 0x03	; 3
    2a6a:	91 05       	cpc	r25, r1
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <DIO_u8GetPinData+0x72>
    2a6e:	3d c0       	rjmp	.+122    	; 0x2aea <DIO_u8GetPinData+0xec>
    2a70:	50 c0       	rjmp	.+160    	; 0x2b12 <DIO_u8GetPinData+0x114>
		// get bit value in register to variable depend on port and pin 
		case PORTA:
			*pu8_ReturnVar = GET_BIT(PINA_REG, u8_PinNum);
    2a72:	e9 e3       	ldi	r30, 0x39	; 57
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	28 2f       	mov	r18, r24
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	88 2f       	mov	r24, r24
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a9 01       	movw	r20, r18
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <DIO_u8GetPinData+0x8c>
    2a86:	55 95       	asr	r21
    2a88:	47 95       	ror	r20
    2a8a:	8a 95       	dec	r24
    2a8c:	e2 f7       	brpl	.-8      	; 0x2a86 <DIO_u8GetPinData+0x88>
    2a8e:	ca 01       	movw	r24, r20
    2a90:	81 70       	andi	r24, 0x01	; 1
    2a92:	ec 81       	ldd	r30, Y+4	; 0x04
    2a94:	fd 81       	ldd	r31, Y+5	; 0x05
    2a96:	80 83       	st	Z, r24
    2a98:	3f c0       	rjmp	.+126    	; 0x2b18 <DIO_u8GetPinData+0x11a>
			break;
		case PORTB:
			*pu8_ReturnVar = GET_BIT(PINB_REG, u8_PinNum);
    2a9a:	e6 e3       	ldi	r30, 0x36	; 54
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa6:	88 2f       	mov	r24, r24
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	a9 01       	movw	r20, r18
    2aac:	02 c0       	rjmp	.+4      	; 0x2ab2 <DIO_u8GetPinData+0xb4>
    2aae:	55 95       	asr	r21
    2ab0:	47 95       	ror	r20
    2ab2:	8a 95       	dec	r24
    2ab4:	e2 f7       	brpl	.-8      	; 0x2aae <DIO_u8GetPinData+0xb0>
    2ab6:	ca 01       	movw	r24, r20
    2ab8:	81 70       	andi	r24, 0x01	; 1
    2aba:	ec 81       	ldd	r30, Y+4	; 0x04
    2abc:	fd 81       	ldd	r31, Y+5	; 0x05
    2abe:	80 83       	st	Z, r24
    2ac0:	2b c0       	rjmp	.+86     	; 0x2b18 <DIO_u8GetPinData+0x11a>
			break;
		case PORTC:
			*pu8_ReturnVar = GET_BIT(PINC_REG, u8_PinNum);
    2ac2:	e3 e3       	ldi	r30, 0x33	; 51
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	88 2f       	mov	r24, r24
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	a9 01       	movw	r20, r18
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <DIO_u8GetPinData+0xdc>
    2ad6:	55 95       	asr	r21
    2ad8:	47 95       	ror	r20
    2ada:	8a 95       	dec	r24
    2adc:	e2 f7       	brpl	.-8      	; 0x2ad6 <DIO_u8GetPinData+0xd8>
    2ade:	ca 01       	movw	r24, r20
    2ae0:	81 70       	andi	r24, 0x01	; 1
    2ae2:	ec 81       	ldd	r30, Y+4	; 0x04
    2ae4:	fd 81       	ldd	r31, Y+5	; 0x05
    2ae6:	80 83       	st	Z, r24
    2ae8:	17 c0       	rjmp	.+46     	; 0x2b18 <DIO_u8GetPinData+0x11a>
			break;
		case PORTD:
			*pu8_ReturnVar = GET_BIT(PIND_REG, u8_PinNum);
    2aea:	e0 e3       	ldi	r30, 0x30	; 48
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	28 2f       	mov	r18, r24
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a9 01       	movw	r20, r18
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <DIO_u8GetPinData+0x104>
    2afe:	55 95       	asr	r21
    2b00:	47 95       	ror	r20
    2b02:	8a 95       	dec	r24
    2b04:	e2 f7       	brpl	.-8      	; 0x2afe <DIO_u8GetPinData+0x100>
    2b06:	ca 01       	movw	r24, r20
    2b08:	81 70       	andi	r24, 0x01	; 1
    2b0a:	ec 81       	ldd	r30, Y+4	; 0x04
    2b0c:	fd 81       	ldd	r31, Y+5	; 0x05
    2b0e:	80 83       	st	Z, r24
    2b10:	03 c0       	rjmp	.+6      	; 0x2b18 <DIO_u8GetPinData+0x11a>
			break;
		default:
			// if not suitable port return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    2b12:	19 82       	std	Y+1, r1	; 0x01
    2b14:	01 c0       	rjmp	.+2      	; 0x2b18 <DIO_u8GetPinData+0x11a>
		}
	} else {
		// if return address not passed or not suitable pin number return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    2b16:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b1a:	27 96       	adiw	r28, 0x07	; 7
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <DIO_u8SetPortDirection>:

// function to set direction of pin
uint8_t DIO_u8SetPortDirection(DIOPort_t u8_PortName, DIODir_t u8_Dir) {
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
    2b34:	2d 97       	sbiw	r28, 0x0d	; 13
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	f8 94       	cli
    2b3a:	de bf       	out	0x3e, r29	; 62
    2b3c:	0f be       	out	0x3f, r0	; 63
    2b3e:	cd bf       	out	0x3d, r28	; 61
    2b40:	8a 83       	std	Y+2, r24	; 0x02
    2b42:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	89 83       	std	Y+1, r24	; 0x01
	switch (u8_PortName) {
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	3d 87       	std	Y+13, r19	; 0x0d
    2b50:	2c 87       	std	Y+12, r18	; 0x0c
    2b52:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b54:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b56:	81 30       	cpi	r24, 0x01	; 1
    2b58:	91 05       	cpc	r25, r1
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <DIO_u8SetPortDirection+0x32>
    2b5c:	4b c0       	rjmp	.+150    	; 0x2bf4 <DIO_u8SetPortDirection+0xc8>
    2b5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b60:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b62:	22 30       	cpi	r18, 0x02	; 2
    2b64:	31 05       	cpc	r19, r1
    2b66:	2c f4       	brge	.+10     	; 0x2b72 <DIO_u8SetPortDirection+0x46>
    2b68:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	71 f0       	breq	.+28     	; 0x2b8c <DIO_u8SetPortDirection+0x60>
    2b70:	dd c0       	rjmp	.+442    	; 0x2d2c <DIO_u8SetPortDirection+0x200>
    2b72:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b74:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b76:	22 30       	cpi	r18, 0x02	; 2
    2b78:	31 05       	cpc	r19, r1
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <DIO_u8SetPortDirection+0x52>
    2b7c:	6f c0       	rjmp	.+222    	; 0x2c5c <DIO_u8SetPortDirection+0x130>
    2b7e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b80:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b82:	83 30       	cpi	r24, 0x03	; 3
    2b84:	91 05       	cpc	r25, r1
    2b86:	09 f4       	brne	.+2      	; 0x2b8a <DIO_u8SetPortDirection+0x5e>
    2b88:	9d c0       	rjmp	.+314    	; 0x2cc4 <DIO_u8SetPortDirection+0x198>
    2b8a:	d0 c0       	rjmp	.+416    	; 0x2d2c <DIO_u8SetPortDirection+0x200>
	case PORTA:
		switch (u8_Dir) {
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	3b 87       	std	Y+11, r19	; 0x0b
    2b94:	2a 87       	std	Y+10, r18	; 0x0a
    2b96:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b98:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b9a:	81 30       	cpi	r24, 0x01	; 1
    2b9c:	91 05       	cpc	r25, r1
    2b9e:	a1 f0       	breq	.+40     	; 0x2bc8 <DIO_u8SetPortDirection+0x9c>
    2ba0:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ba2:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ba4:	22 30       	cpi	r18, 0x02	; 2
    2ba6:	31 05       	cpc	r19, r1
    2ba8:	f1 f0       	breq	.+60     	; 0x2be6 <DIO_u8SetPortDirection+0xba>
    2baa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bac:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	f9 f4       	brne	.+62     	; 0x2bf0 <DIO_u8SetPortDirection+0xc4>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRA_REG = DIO_PORT_LOW;
    2bb2:	ea e3       	ldi	r30, 0x3A	; 58
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    2bb8:	a0 e5       	ldi	r26, 0x50	; 80
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e0 e5       	ldi	r30, 0x50	; 80
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	84 60       	ori	r24, 0x04	; 4
    2bc4:	8c 93       	st	X, r24
    2bc6:	b3 c0       	rjmp	.+358    	; 0x2d2e <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    2bc8:	a0 e5       	ldi	r26, 0x50	; 80
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e0 e5       	ldi	r30, 0x50	; 80
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	8b 7f       	andi	r24, 0xFB	; 251
    2bd4:	8c 93       	st	X, r24
			DDRA_REG = DIO_PORT_LOW;
    2bd6:	ea e3       	ldi	r30, 0x3A	; 58
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	10 82       	st	Z, r1
			PORTA_REG = DIO_PORT_HIGH;
    2bdc:	eb e3       	ldi	r30, 0x3B	; 59
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	8f ef       	ldi	r24, 0xFF	; 255
    2be2:	80 83       	st	Z, r24
    2be4:	a4 c0       	rjmp	.+328    	; 0x2d2e <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRA_REG = DIO_PORT_HIGH;
    2be6:	ea e3       	ldi	r30, 0x3A	; 58
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	8f ef       	ldi	r24, 0xFF	; 255
    2bec:	80 83       	st	Z, r24
    2bee:	9f c0       	rjmp	.+318    	; 0x2d2e <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    2bf0:	19 82       	std	Y+1, r1	; 0x01
    2bf2:	9d c0       	rjmp	.+314    	; 0x2d2e <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTB:
		switch (u8_Dir) {
    2bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	39 87       	std	Y+9, r19	; 0x09
    2bfc:	28 87       	std	Y+8, r18	; 0x08
    2bfe:	88 85       	ldd	r24, Y+8	; 0x08
    2c00:	99 85       	ldd	r25, Y+9	; 0x09
    2c02:	81 30       	cpi	r24, 0x01	; 1
    2c04:	91 05       	cpc	r25, r1
    2c06:	a1 f0       	breq	.+40     	; 0x2c30 <DIO_u8SetPortDirection+0x104>
    2c08:	28 85       	ldd	r18, Y+8	; 0x08
    2c0a:	39 85       	ldd	r19, Y+9	; 0x09
    2c0c:	22 30       	cpi	r18, 0x02	; 2
    2c0e:	31 05       	cpc	r19, r1
    2c10:	f1 f0       	breq	.+60     	; 0x2c4e <DIO_u8SetPortDirection+0x122>
    2c12:	88 85       	ldd	r24, Y+8	; 0x08
    2c14:	99 85       	ldd	r25, Y+9	; 0x09
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	f9 f4       	brne	.+62     	; 0x2c58 <DIO_u8SetPortDirection+0x12c>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRB_REG = DIO_PORT_LOW;
    2c1a:	e7 e3       	ldi	r30, 0x37	; 55
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    2c20:	a0 e5       	ldi	r26, 0x50	; 80
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	e0 e5       	ldi	r30, 0x50	; 80
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	84 60       	ori	r24, 0x04	; 4
    2c2c:	8c 93       	st	X, r24
    2c2e:	7f c0       	rjmp	.+254    	; 0x2d2e <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    2c30:	a0 e5       	ldi	r26, 0x50	; 80
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	e0 e5       	ldi	r30, 0x50	; 80
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	80 81       	ld	r24, Z
    2c3a:	8b 7f       	andi	r24, 0xFB	; 251
    2c3c:	8c 93       	st	X, r24
			DDRB_REG = DIO_PORT_LOW;
    2c3e:	e7 e3       	ldi	r30, 0x37	; 55
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	10 82       	st	Z, r1
			PORTB_REG = DIO_PORT_HIGH;
    2c44:	e8 e3       	ldi	r30, 0x38	; 56
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	8f ef       	ldi	r24, 0xFF	; 255
    2c4a:	80 83       	st	Z, r24
    2c4c:	70 c0       	rjmp	.+224    	; 0x2d2e <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRB_REG = DIO_PORT_HIGH;
    2c4e:	e7 e3       	ldi	r30, 0x37	; 55
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	80 83       	st	Z, r24
    2c56:	6b c0       	rjmp	.+214    	; 0x2d2e <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    2c58:	19 82       	std	Y+1, r1	; 0x01
    2c5a:	69 c0       	rjmp	.+210    	; 0x2d2e <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTC:
		switch (u8_Dir) {
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	3f 83       	std	Y+7, r19	; 0x07
    2c64:	2e 83       	std	Y+6, r18	; 0x06
    2c66:	8e 81       	ldd	r24, Y+6	; 0x06
    2c68:	9f 81       	ldd	r25, Y+7	; 0x07
    2c6a:	81 30       	cpi	r24, 0x01	; 1
    2c6c:	91 05       	cpc	r25, r1
    2c6e:	a1 f0       	breq	.+40     	; 0x2c98 <DIO_u8SetPortDirection+0x16c>
    2c70:	2e 81       	ldd	r18, Y+6	; 0x06
    2c72:	3f 81       	ldd	r19, Y+7	; 0x07
    2c74:	22 30       	cpi	r18, 0x02	; 2
    2c76:	31 05       	cpc	r19, r1
    2c78:	f1 f0       	breq	.+60     	; 0x2cb6 <DIO_u8SetPortDirection+0x18a>
    2c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	f9 f4       	brne	.+62     	; 0x2cc0 <DIO_u8SetPortDirection+0x194>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRC_REG = DIO_PORT_LOW;
    2c82:	e4 e3       	ldi	r30, 0x34	; 52
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    2c88:	a0 e5       	ldi	r26, 0x50	; 80
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e0 e5       	ldi	r30, 0x50	; 80
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	80 81       	ld	r24, Z
    2c92:	84 60       	ori	r24, 0x04	; 4
    2c94:	8c 93       	st	X, r24
    2c96:	4b c0       	rjmp	.+150    	; 0x2d2e <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    2c98:	a0 e5       	ldi	r26, 0x50	; 80
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	e0 e5       	ldi	r30, 0x50	; 80
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8b 7f       	andi	r24, 0xFB	; 251
    2ca4:	8c 93       	st	X, r24
			DDRC_REG = DIO_PORT_LOW;
    2ca6:	e4 e3       	ldi	r30, 0x34	; 52
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	10 82       	st	Z, r1
			PORTC_REG = DIO_PORT_HIGH;
    2cac:	e5 e3       	ldi	r30, 0x35	; 53
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	8f ef       	ldi	r24, 0xFF	; 255
    2cb2:	80 83       	st	Z, r24
    2cb4:	3c c0       	rjmp	.+120    	; 0x2d2e <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRC_REG = DIO_PORT_HIGH;
    2cb6:	e4 e3       	ldi	r30, 0x34	; 52
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	8f ef       	ldi	r24, 0xFF	; 255
    2cbc:	80 83       	st	Z, r24
    2cbe:	37 c0       	rjmp	.+110    	; 0x2d2e <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    2cc0:	19 82       	std	Y+1, r1	; 0x01
    2cc2:	35 c0       	rjmp	.+106    	; 0x2d2e <DIO_u8SetPortDirection+0x202>
		}
		break;
	case PORTD:
		switch (u8_Dir) {
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	3d 83       	std	Y+5, r19	; 0x05
    2ccc:	2c 83       	std	Y+4, r18	; 0x04
    2cce:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd2:	81 30       	cpi	r24, 0x01	; 1
    2cd4:	91 05       	cpc	r25, r1
    2cd6:	a1 f0       	breq	.+40     	; 0x2d00 <DIO_u8SetPortDirection+0x1d4>
    2cd8:	2c 81       	ldd	r18, Y+4	; 0x04
    2cda:	3d 81       	ldd	r19, Y+5	; 0x05
    2cdc:	22 30       	cpi	r18, 0x02	; 2
    2cde:	31 05       	cpc	r19, r1
    2ce0:	f1 f0       	breq	.+60     	; 0x2d1e <DIO_u8SetPortDirection+0x1f2>
    2ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	f9 f4       	brne	.+62     	; 0x2d28 <DIO_u8SetPortDirection+0x1fc>
		case DIO_INPUT:
			// for input tristate mode ({DDRx, PORTx} = {0x00,0x00})
			DDRD_REG = DIO_PORT_LOW;
    2cea:	e1 e3       	ldi	r30, 0x31	; 49
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	10 82       	st	Z, r1
			SET_BIT(SFIOR_REG, PUD_BIT);
    2cf0:	a0 e5       	ldi	r26, 0x50	; 80
    2cf2:	b0 e0       	ldi	r27, 0x00	; 0
    2cf4:	e0 e5       	ldi	r30, 0x50	; 80
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	80 81       	ld	r24, Z
    2cfa:	84 60       	ori	r24, 0x04	; 4
    2cfc:	8c 93       	st	X, r24
    2cfe:	17 c0       	rjmp	.+46     	; 0x2d2e <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_INPUT_PULLUP:
			// for input PULLUP mode ( {DDRx, PORTx,PUD} =  {0b0,0x00,0xff} )
			CLR_BIT(SFIOR_REG, PUD_BIT);
    2d00:	a0 e5       	ldi	r26, 0x50	; 80
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	e0 e5       	ldi	r30, 0x50	; 80
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	8b 7f       	andi	r24, 0xFB	; 251
    2d0c:	8c 93       	st	X, r24
			DDRD_REG = DIO_PORT_LOW;
    2d0e:	e1 e3       	ldi	r30, 0x31	; 49
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	10 82       	st	Z, r1
			PORTD_REG = DIO_PORT_HIGH;
    2d14:	e2 e3       	ldi	r30, 0x32	; 50
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	8f ef       	ldi	r24, 0xFF	; 255
    2d1a:	80 83       	st	Z, r24
    2d1c:	08 c0       	rjmp	.+16     	; 0x2d2e <DIO_u8SetPortDirection+0x202>
			break;
		case DIO_OUTPUT:
			// for input tristate mode ( DDRx = 0xff )
			DDRD_REG = DIO_PORT_HIGH;
    2d1e:	e1 e3       	ldi	r30, 0x31	; 49
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	8f ef       	ldi	r24, 0xFF	; 255
    2d24:	80 83       	st	Z, r24
    2d26:	03 c0       	rjmp	.+6      	; 0x2d2e <DIO_u8SetPortDirection+0x202>
			break;
		default:
			// If the input state is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    2d28:	19 82       	std	Y+1, r1	; 0x01
    2d2a:	01 c0       	rjmp	.+2      	; 0x2d2e <DIO_u8SetPortDirection+0x202>
		}
		break;
	default:
		// If the input port is not one of the above cases return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    2d2c:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d30:	2d 96       	adiw	r28, 0x0d	; 13
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <DIO_u8SetPortData>:

// function to assign value to port
uint8_t DIO_u8SetPortData(DIOPort_t u8_PortName, DIODir_t u8_Value) {
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	00 d0       	rcall	.+0      	; 0x2d48 <DIO_u8SetPortData+0x6>
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <DIO_u8SetPortData+0x8>
    2d4a:	0f 92       	push	r0
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	8a 83       	std	Y+2, r24	; 0x02
    2d52:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	89 83       	std	Y+1, r24	; 0x01
	if (u8_Value == DIO_PORT_HIGH || u8_Value == DIO_PORT_LOW) {
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d5c:	19 f0       	breq	.+6      	; 0x2d64 <DIO_u8SetPortData+0x22>
    2d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d60:	88 23       	and	r24, r24
    2d62:	a9 f5       	brne	.+106    	; 0x2dce <DIO_u8SetPortData+0x8c>
		// check if value of port HIGH or LOW and assign it to the port 
		switch (u8_PortName) {
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	28 2f       	mov	r18, r24
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	3d 83       	std	Y+5, r19	; 0x05
    2d6c:	2c 83       	std	Y+4, r18	; 0x04
    2d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d70:	9d 81       	ldd	r25, Y+5	; 0x05
    2d72:	81 30       	cpi	r24, 0x01	; 1
    2d74:	91 05       	cpc	r25, r1
    2d76:	d1 f0       	breq	.+52     	; 0x2dac <DIO_u8SetPortData+0x6a>
    2d78:	2c 81       	ldd	r18, Y+4	; 0x04
    2d7a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d7c:	22 30       	cpi	r18, 0x02	; 2
    2d7e:	31 05       	cpc	r19, r1
    2d80:	2c f4       	brge	.+10     	; 0x2d8c <DIO_u8SetPortData+0x4a>
    2d82:	8c 81       	ldd	r24, Y+4	; 0x04
    2d84:	9d 81       	ldd	r25, Y+5	; 0x05
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	61 f0       	breq	.+24     	; 0x2da2 <DIO_u8SetPortData+0x60>
    2d8a:	1f c0       	rjmp	.+62     	; 0x2dca <DIO_u8SetPortData+0x88>
    2d8c:	2c 81       	ldd	r18, Y+4	; 0x04
    2d8e:	3d 81       	ldd	r19, Y+5	; 0x05
    2d90:	22 30       	cpi	r18, 0x02	; 2
    2d92:	31 05       	cpc	r19, r1
    2d94:	81 f0       	breq	.+32     	; 0x2db6 <DIO_u8SetPortData+0x74>
    2d96:	8c 81       	ldd	r24, Y+4	; 0x04
    2d98:	9d 81       	ldd	r25, Y+5	; 0x05
    2d9a:	83 30       	cpi	r24, 0x03	; 3
    2d9c:	91 05       	cpc	r25, r1
    2d9e:	81 f0       	breq	.+32     	; 0x2dc0 <DIO_u8SetPortData+0x7e>
    2da0:	14 c0       	rjmp	.+40     	; 0x2dca <DIO_u8SetPortData+0x88>
		case PORTA:
			PORTA_REG = u8_Value;
    2da2:	eb e3       	ldi	r30, 0x3B	; 59
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	80 83       	st	Z, r24
    2daa:	12 c0       	rjmp	.+36     	; 0x2dd0 <DIO_u8SetPortData+0x8e>
			break;
		case PORTB:
			PORTB_REG = u8_Value;
    2dac:	e8 e3       	ldi	r30, 0x38	; 56
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	80 83       	st	Z, r24
    2db4:	0d c0       	rjmp	.+26     	; 0x2dd0 <DIO_u8SetPortData+0x8e>
			break;
		case PORTC:
			PORTC_REG = u8_Value;
    2db6:	e5 e3       	ldi	r30, 0x35	; 53
    2db8:	f0 e0       	ldi	r31, 0x00	; 0
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	80 83       	st	Z, r24
    2dbe:	08 c0       	rjmp	.+16     	; 0x2dd0 <DIO_u8SetPortData+0x8e>
			break;
		case PORTD:
			PORTD_REG = u8_Value;
    2dc0:	e2 e3       	ldi	r30, 0x32	; 50
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	80 83       	st	Z, r24
    2dc8:	03 c0       	rjmp	.+6      	; 0x2dd0 <DIO_u8SetPortData+0x8e>
			break;
		default:
			// if input port is not one of the above cases return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    2dca:	19 82       	std	Y+1, r1	; 0x01
    2dcc:	01 c0       	rjmp	.+2      	; 0x2dd0 <DIO_u8SetPortData+0x8e>
		}
	} else {
		// if Value not HIGH or LOW return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    2dce:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <DIO_u8GetPortData>:

// function to read value on port
uint8_t DIO_u8GetPortData(DIOPort_t u8_PortName, uint8_t* pu8_ReturnVar) {
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	00 d0       	rcall	.+0      	; 0x2de8 <DIO_u8GetPortData+0x6>
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <DIO_u8GetPortData+0x8>
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <DIO_u8GetPortData+0xa>
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	8a 83       	std	Y+2, r24	; 0x02
    2df2:	7c 83       	std	Y+4, r23	; 0x04
    2df4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8ErrorState = STD_TYPES_OK;
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	89 83       	std	Y+1, r24	; 0x01
	if (pu8_ReturnVar != NULL) {
    2dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	e9 f1       	breq	.+122    	; 0x2e7c <DIO_u8GetPortData+0x9a>
		// get port value in register to variable depend on port and pin 
		switch (u8_PortName) {
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	28 2f       	mov	r18, r24
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	3e 83       	std	Y+6, r19	; 0x06
    2e0a:	2d 83       	std	Y+5, r18	; 0x05
    2e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e10:	81 30       	cpi	r24, 0x01	; 1
    2e12:	91 05       	cpc	r25, r1
    2e14:	e1 f0       	breq	.+56     	; 0x2e4e <DIO_u8GetPortData+0x6c>
    2e16:	2d 81       	ldd	r18, Y+5	; 0x05
    2e18:	3e 81       	ldd	r19, Y+6	; 0x06
    2e1a:	22 30       	cpi	r18, 0x02	; 2
    2e1c:	31 05       	cpc	r19, r1
    2e1e:	2c f4       	brge	.+10     	; 0x2e2a <DIO_u8GetPortData+0x48>
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	9e 81       	ldd	r25, Y+6	; 0x06
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	61 f0       	breq	.+24     	; 0x2e40 <DIO_u8GetPortData+0x5e>
    2e28:	27 c0       	rjmp	.+78     	; 0x2e78 <DIO_u8GetPortData+0x96>
    2e2a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e2c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e2e:	22 30       	cpi	r18, 0x02	; 2
    2e30:	31 05       	cpc	r19, r1
    2e32:	a1 f0       	breq	.+40     	; 0x2e5c <DIO_u8GetPortData+0x7a>
    2e34:	8d 81       	ldd	r24, Y+5	; 0x05
    2e36:	9e 81       	ldd	r25, Y+6	; 0x06
    2e38:	83 30       	cpi	r24, 0x03	; 3
    2e3a:	91 05       	cpc	r25, r1
    2e3c:	b1 f0       	breq	.+44     	; 0x2e6a <DIO_u8GetPortData+0x88>
    2e3e:	1c c0       	rjmp	.+56     	; 0x2e78 <DIO_u8GetPortData+0x96>
		case PORTA:
			*pu8_ReturnVar = PORTA_REG;
    2e40:	eb e3       	ldi	r30, 0x3B	; 59
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	eb 81       	ldd	r30, Y+3	; 0x03
    2e48:	fc 81       	ldd	r31, Y+4	; 0x04
    2e4a:	80 83       	st	Z, r24
    2e4c:	18 c0       	rjmp	.+48     	; 0x2e7e <DIO_u8GetPortData+0x9c>
			break;
		case PORTB:
			*pu8_ReturnVar = PORTB_REG;
    2e4e:	e8 e3       	ldi	r30, 0x38	; 56
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	80 81       	ld	r24, Z
    2e54:	eb 81       	ldd	r30, Y+3	; 0x03
    2e56:	fc 81       	ldd	r31, Y+4	; 0x04
    2e58:	80 83       	st	Z, r24
    2e5a:	11 c0       	rjmp	.+34     	; 0x2e7e <DIO_u8GetPortData+0x9c>
			break;
		case PORTC:
			*pu8_ReturnVar = PORTC_REG;
    2e5c:	e5 e3       	ldi	r30, 0x35	; 53
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	eb 81       	ldd	r30, Y+3	; 0x03
    2e64:	fc 81       	ldd	r31, Y+4	; 0x04
    2e66:	80 83       	st	Z, r24
    2e68:	0a c0       	rjmp	.+20     	; 0x2e7e <DIO_u8GetPortData+0x9c>
			break;
		case PORTD:
			*pu8_ReturnVar = PORTD_REG;
    2e6a:	e2 e3       	ldi	r30, 0x32	; 50
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	eb 81       	ldd	r30, Y+3	; 0x03
    2e72:	fc 81       	ldd	r31, Y+4	; 0x04
    2e74:	80 83       	st	Z, r24
    2e76:	03 c0       	rjmp	.+6      	; 0x2e7e <DIO_u8GetPortData+0x9c>
			break;
		default:
			// if not suitable port return error state NOK
			u8ErrorState = STD_TYPES_NOK;
    2e78:	19 82       	std	Y+1, r1	; 0x01
    2e7a:	01 c0       	rjmp	.+2      	; 0x2e7e <DIO_u8GetPortData+0x9c>
		}
	} else {
		// if no address passed to function return error state NOK 
		u8ErrorState = STD_TYPES_NOK;
    2e7c:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e80:	26 96       	adiw	r28, 0x06	; 6
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	08 95       	ret

00002e92 <DIO_u8TogglePinData>:

// function to toggle pin state
uint8_t DIO_u8TogglePinData(DIOPort_t u8_PortName, DIOPin_t u8_PinNum) {
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <DIO_u8TogglePinData+0x6>
    2e98:	00 d0       	rcall	.+0      	; 0x2e9a <DIO_u8TogglePinData+0x8>
    2e9a:	0f 92       	push	r0
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	8a 83       	std	Y+2, r24	; 0x02
    2ea2:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t u8ErrorState = STD_TYPES_OK;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	89 83       	std	Y+1, r24	; 0x01
	switch (u8_PortName) {
    2ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eaa:	28 2f       	mov	r18, r24
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	3d 83       	std	Y+5, r19	; 0x05
    2eb0:	2c 83       	std	Y+4, r18	; 0x04
    2eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb4:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb6:	81 30       	cpi	r24, 0x01	; 1
    2eb8:	91 05       	cpc	r25, r1
    2eba:	49 f1       	breq	.+82     	; 0x2f0e <DIO_u8TogglePinData+0x7c>
    2ebc:	2c 81       	ldd	r18, Y+4	; 0x04
    2ebe:	3d 81       	ldd	r19, Y+5	; 0x05
    2ec0:	22 30       	cpi	r18, 0x02	; 2
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	2c f4       	brge	.+10     	; 0x2ed0 <DIO_u8TogglePinData+0x3e>
    2ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eca:	00 97       	sbiw	r24, 0x00	; 0
    2ecc:	61 f0       	breq	.+24     	; 0x2ee6 <DIO_u8TogglePinData+0x54>
    2ece:	5b c0       	rjmp	.+182    	; 0x2f86 <DIO_u8TogglePinData+0xf4>
    2ed0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ed2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ed4:	22 30       	cpi	r18, 0x02	; 2
    2ed6:	31 05       	cpc	r19, r1
    2ed8:	71 f1       	breq	.+92     	; 0x2f36 <DIO_u8TogglePinData+0xa4>
    2eda:	8c 81       	ldd	r24, Y+4	; 0x04
    2edc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ede:	83 30       	cpi	r24, 0x03	; 3
    2ee0:	91 05       	cpc	r25, r1
    2ee2:	e9 f1       	breq	.+122    	; 0x2f5e <DIO_u8TogglePinData+0xcc>
    2ee4:	50 c0       	rjmp	.+160    	; 0x2f86 <DIO_u8TogglePinData+0xf4>
	// toogle bit value depend on port and pin 
	case PORTA:
		Toggle_BIT(PORTA_REG, u8_PinNum);
    2ee6:	ab e3       	ldi	r26, 0x3B	; 59
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	eb e3       	ldi	r30, 0x3B	; 59
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	48 2f       	mov	r20, r24
    2ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	02 2e       	mov	r0, r18
    2efe:	02 c0       	rjmp	.+4      	; 0x2f04 <DIO_u8TogglePinData+0x72>
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	0a 94       	dec	r0
    2f06:	e2 f7       	brpl	.-8      	; 0x2f00 <DIO_u8TogglePinData+0x6e>
    2f08:	84 27       	eor	r24, r20
    2f0a:	8c 93       	st	X, r24
    2f0c:	3d c0       	rjmp	.+122    	; 0x2f88 <DIO_u8TogglePinData+0xf6>
		break;
	case PORTB:
		Toggle_BIT(PORTB_REG, u8_PinNum);
    2f0e:	a8 e3       	ldi	r26, 0x38	; 56
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e8 e3       	ldi	r30, 0x38	; 56
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	48 2f       	mov	r20, r24
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	02 2e       	mov	r0, r18
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <DIO_u8TogglePinData+0x9a>
    2f28:	88 0f       	add	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	0a 94       	dec	r0
    2f2e:	e2 f7       	brpl	.-8      	; 0x2f28 <DIO_u8TogglePinData+0x96>
    2f30:	84 27       	eor	r24, r20
    2f32:	8c 93       	st	X, r24
    2f34:	29 c0       	rjmp	.+82     	; 0x2f88 <DIO_u8TogglePinData+0xf6>
		break;
	case PORTC:
		Toggle_BIT(PORTC_REG, u8_PinNum);
    2f36:	a5 e3       	ldi	r26, 0x35	; 53
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	e5 e3       	ldi	r30, 0x35	; 53
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	80 81       	ld	r24, Z
    2f40:	48 2f       	mov	r20, r24
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	02 2e       	mov	r0, r18
    2f4e:	02 c0       	rjmp	.+4      	; 0x2f54 <DIO_u8TogglePinData+0xc2>
    2f50:	88 0f       	add	r24, r24
    2f52:	99 1f       	adc	r25, r25
    2f54:	0a 94       	dec	r0
    2f56:	e2 f7       	brpl	.-8      	; 0x2f50 <DIO_u8TogglePinData+0xbe>
    2f58:	84 27       	eor	r24, r20
    2f5a:	8c 93       	st	X, r24
    2f5c:	15 c0       	rjmp	.+42     	; 0x2f88 <DIO_u8TogglePinData+0xf6>
		break;
	case PORTD:
		Toggle_BIT(PORTD_REG, u8_PinNum);
    2f5e:	a2 e3       	ldi	r26, 0x32	; 50
    2f60:	b0 e0       	ldi	r27, 0x00	; 0
    2f62:	e2 e3       	ldi	r30, 0x32	; 50
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	48 2f       	mov	r20, r24
    2f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6c:	28 2f       	mov	r18, r24
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	02 2e       	mov	r0, r18
    2f76:	02 c0       	rjmp	.+4      	; 0x2f7c <DIO_u8TogglePinData+0xea>
    2f78:	88 0f       	add	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	0a 94       	dec	r0
    2f7e:	e2 f7       	brpl	.-8      	; 0x2f78 <DIO_u8TogglePinData+0xe6>
    2f80:	84 27       	eor	r24, r20
    2f82:	8c 93       	st	X, r24
    2f84:	01 c0       	rjmp	.+2      	; 0x2f88 <DIO_u8TogglePinData+0xf6>
		break;
	default:
		// if input port is not one of the above cases return error state NOK
		u8ErrorState = STD_TYPES_NOK;
    2f86:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	0f 90       	pop	r0
    2f92:	0f 90       	pop	r0
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <TIMER0_u8Init>:

/*
 * brief: This function is used to initialize Timer 0 to use CTC mode and 64 prescaler
 * return: (output) the Error state of the function 0 if an error happens and 1 otherwise
 */
uint8_t TIMER0_u8Init(void) {
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG = (1 << WGM01) | (1 << CS01) | (1 << CS00);
    2fa2:	e3 e5       	ldi	r30, 0x53	; 83
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	8b e0       	ldi	r24, 0x0B	; 11
    2fa8:	80 83       	st	Z, r24
	return DELAY_OK;
    2faa:	81 e0       	ldi	r24, 0x01	; 1
}
    2fac:	cf 91       	pop	r28
    2fae:	df 91       	pop	r29
    2fb0:	08 95       	ret

00002fb2 <TIMER0_u8InterruptDelay>:
 * brief: This function is used to initialize an interrupt delay if the Timer isn't busy
 * param.: (input) the delay to be set in ms
 * param.: (input) a pointer to a function to be called when the delay is over
 * return: (output) the Error state of the function 0 if an error happens, 2 if the timer is busy and 1 otherwise
 */
uint8_t TIMER0_u8InterruptDelay(uint16_t delay, void (*fnCallBack)(void)) {
    2fb2:	df 93       	push	r29
    2fb4:	cf 93       	push	r28
    2fb6:	00 d0       	rcall	.+0      	; 0x2fb8 <TIMER0_u8InterruptDelay+0x6>
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <TIMER0_u8InterruptDelay+0x8>
    2fba:	0f 92       	push	r0
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    2fc0:	9a 83       	std	Y+2, r25	; 0x02
    2fc2:	89 83       	std	Y+1, r24	; 0x01
    2fc4:	7c 83       	std	Y+4, r23	; 0x04
    2fc6:	6b 83       	std	Y+3, r22	; 0x03
	if (delay_stat == DELAY_BUSY) {
    2fc8:	80 91 bf 01 	lds	r24, 0x01BF
    2fcc:	82 30       	cpi	r24, 0x02	; 2
    2fce:	21 f4       	brne	.+8      	; 0x2fd8 <TIMER0_u8InterruptDelay+0x26>
		return delay_stat;
    2fd0:	80 91 bf 01 	lds	r24, 0x01BF
    2fd4:	8d 83       	std	Y+5, r24	; 0x05
    2fd6:	29 c0       	rjmp	.+82     	; 0x302a <TIMER0_u8InterruptDelay+0x78>
	}
	delay_stat = DELAY_BUSY;
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	80 93 bf 01 	sts	0x01BF, r24
	compare = delay;
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe2:	90 93 dd 01 	sts	0x01DD, r25
    2fe6:	80 93 dc 01 	sts	0x01DC, r24
	if (fnCallBack != NULL) {
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	9c 81       	ldd	r25, Y+4	; 0x04
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	d9 f0       	breq	.+54     	; 0x3028 <TIMER0_u8InterruptDelay+0x76>
		delayCallBack = fnCallBack;
    2ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff6:	90 93 e1 01 	sts	0x01E1, r25
    2ffa:	80 93 e0 01 	sts	0x01E0, r24
		OCR0_REG = (F_CPU / PRESCALER);
    2ffe:	ec e5       	ldi	r30, 0x5C	; 92
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	8d e7       	ldi	r24, 0x7D	; 125
    3004:	80 83       	st	Z, r24
		SET_BIT(TIMSK_REG, OCIE0);
    3006:	a9 e5       	ldi	r26, 0x59	; 89
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e9 e5       	ldi	r30, 0x59	; 89
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	82 60       	ori	r24, 0x02	; 2
    3012:	8c 93       	st	X, r24
		SET_BIT(SREG_REG, I_BIT);
    3014:	af e5       	ldi	r26, 0x5F	; 95
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	ef e5       	ldi	r30, 0x5F	; 95
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	80 68       	ori	r24, 0x80	; 128
    3020:	8c 93       	st	X, r24
		return DELAY_OK;
    3022:	81 e0       	ldi	r24, 0x01	; 1
    3024:	8d 83       	std	Y+5, r24	; 0x05
    3026:	01 c0       	rjmp	.+2      	; 0x302a <TIMER0_u8InterruptDelay+0x78>
	} else {
		return DELAY_ERR;
    3028:	1d 82       	std	Y+5, r1	; 0x05
    302a:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <TIMER0_u8PollingDelay>:
/*
 * brief: This function is used to initialize a polling delay if the Timer isn't busy
 * param.: (input) the delay to be set in ms
 * return: (output) the Error state of the function 0 if an error happens, 2 if the timer is busy and 1 otherwise
 */
uint8_t TIMER0_u8PollingDelay(uint16_t delay) {
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	00 d0       	rcall	.+0      	; 0x3042 <TIMER0_u8PollingDelay+0x6>
    3042:	0f 92       	push	r0
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	9a 83       	std	Y+2, r25	; 0x02
    304a:	89 83       	std	Y+1, r24	; 0x01
	if (delay_stat == DELAY_BUSY) {
    304c:	80 91 bf 01 	lds	r24, 0x01BF
    3050:	82 30       	cpi	r24, 0x02	; 2
    3052:	21 f4       	brne	.+8      	; 0x305c <TIMER0_u8PollingDelay+0x20>
		return delay_stat;
    3054:	80 91 bf 01 	lds	r24, 0x01BF
    3058:	8b 83       	std	Y+3, r24	; 0x03
    305a:	3b c0       	rjmp	.+118    	; 0x30d2 <TIMER0_u8PollingDelay+0x96>
	}
	delay_stat = DELAY_BUSY;
    305c:	82 e0       	ldi	r24, 0x02	; 2
    305e:	80 93 bf 01 	sts	0x01BF, r24
	counter = 0;						// reset counter to 0
    3062:	10 92 df 01 	sts	0x01DF, r1
    3066:	10 92 de 01 	sts	0x01DE, r1
	compare = delay;
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	9a 81       	ldd	r25, Y+2	; 0x02
    306e:	90 93 dd 01 	sts	0x01DD, r25
    3072:	80 93 dc 01 	sts	0x01DC, r24
	TIMER0_u8Init();				// initialize timer0
    3076:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <TIMER0_u8Init>
	TCNT0_REG = 0;
    307a:	e2 e5       	ldi	r30, 0x52	; 82
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	10 82       	st	Z, r1
	OCR0_REG = (F_CPU / PRESCALER);		// set OCR0_REG value
    3080:	ec e5       	ldi	r30, 0x5C	; 92
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	8d e7       	ldi	r24, 0x7D	; 125
    3086:	80 83       	st	Z, r24
	SET_BIT(TIMSK_REG, OCIE0);			// enable interrupt
    3088:	a9 e5       	ldi	r26, 0x59	; 89
    308a:	b0 e0       	ldi	r27, 0x00	; 0
    308c:	e9 e5       	ldi	r30, 0x59	; 89
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	82 60       	ori	r24, 0x02	; 2
    3094:	8c 93       	st	X, r24
	SET_BIT(SREG_REG, I_BIT);
    3096:	af e5       	ldi	r26, 0x5F	; 95
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	ef e5       	ldi	r30, 0x5F	; 95
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	80 68       	ori	r24, 0x80	; 128
    30a2:	8c 93       	st	X, r24
	while (counter <= compare)
    30a4:	20 91 de 01 	lds	r18, 0x01DE
    30a8:	30 91 df 01 	lds	r19, 0x01DF
    30ac:	80 91 dc 01 	lds	r24, 0x01DC
    30b0:	90 91 dd 01 	lds	r25, 0x01DD
    30b4:	82 17       	cp	r24, r18
    30b6:	93 07       	cpc	r25, r19
    30b8:	a8 f7       	brcc	.-22     	; 0x30a4 <TIMER0_u8PollingDelay+0x68>
		;			// stop if delay not finished
	CLR_BIT(TIMSK_REG, OCIE0);
    30ba:	a9 e5       	ldi	r26, 0x59	; 89
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e9 e5       	ldi	r30, 0x59	; 89
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	8d 7f       	andi	r24, 0xFD	; 253
    30c6:	8c 93       	st	X, r24
	delay_stat = DELAY_OK;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	80 93 bf 01 	sts	0x01BF, r24
	return DELAY_OK;
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	8b 83       	std	Y+3, r24	; 0x03
    30d2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	08 95       	ret

000030e0 <__vector_10>:
void __vector_10(void) {
    30e0:	1f 92       	push	r1
    30e2:	0f 92       	push	r0
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	0f 92       	push	r0
    30e8:	11 24       	eor	r1, r1
    30ea:	2f 93       	push	r18
    30ec:	3f 93       	push	r19
    30ee:	4f 93       	push	r20
    30f0:	5f 93       	push	r21
    30f2:	6f 93       	push	r22
    30f4:	7f 93       	push	r23
    30f6:	8f 93       	push	r24
    30f8:	9f 93       	push	r25
    30fa:	af 93       	push	r26
    30fc:	bf 93       	push	r27
    30fe:	ef 93       	push	r30
    3100:	ff 93       	push	r31
    3102:	df 93       	push	r29
    3104:	cf 93       	push	r28
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
	counter++;
    310a:	80 91 de 01 	lds	r24, 0x01DE
    310e:	90 91 df 01 	lds	r25, 0x01DF
    3112:	01 96       	adiw	r24, 0x01	; 1
    3114:	90 93 df 01 	sts	0x01DF, r25
    3118:	80 93 de 01 	sts	0x01DE, r24
	if (counter == compare && delayCallBack != NULL) {
    311c:	20 91 de 01 	lds	r18, 0x01DE
    3120:	30 91 df 01 	lds	r19, 0x01DF
    3124:	80 91 dc 01 	lds	r24, 0x01DC
    3128:	90 91 dd 01 	lds	r25, 0x01DD
    312c:	28 17       	cp	r18, r24
    312e:	39 07       	cpc	r19, r25
    3130:	c9 f4       	brne	.+50     	; 0x3164 <__vector_10+0x84>
    3132:	80 91 e0 01 	lds	r24, 0x01E0
    3136:	90 91 e1 01 	lds	r25, 0x01E1
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	99 f0       	breq	.+38     	; 0x3164 <__vector_10+0x84>
		counter = 0;
    313e:	10 92 df 01 	sts	0x01DF, r1
    3142:	10 92 de 01 	sts	0x01DE, r1
		CLR_BIT(TIMSK_REG, OCIE0);
    3146:	a9 e5       	ldi	r26, 0x59	; 89
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	e9 e5       	ldi	r30, 0x59	; 89
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	80 81       	ld	r24, Z
    3150:	8d 7f       	andi	r24, 0xFD	; 253
    3152:	8c 93       	st	X, r24
		delay_stat = DELAY_OK;
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	80 93 bf 01 	sts	0x01BF, r24
		delayCallBack();
    315a:	e0 91 e0 01 	lds	r30, 0x01E0
    315e:	f0 91 e1 01 	lds	r31, 0x01E1
    3162:	09 95       	icall
	}
}
    3164:	cf 91       	pop	r28
    3166:	df 91       	pop	r29
    3168:	ff 91       	pop	r31
    316a:	ef 91       	pop	r30
    316c:	bf 91       	pop	r27
    316e:	af 91       	pop	r26
    3170:	9f 91       	pop	r25
    3172:	8f 91       	pop	r24
    3174:	7f 91       	pop	r23
    3176:	6f 91       	pop	r22
    3178:	5f 91       	pop	r21
    317a:	4f 91       	pop	r20
    317c:	3f 91       	pop	r19
    317e:	2f 91       	pop	r18
    3180:	0f 90       	pop	r0
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	0f 90       	pop	r0
    3186:	1f 90       	pop	r1
    3188:	18 95       	reti

0000318a <ADC_u8Init>:
#include "../../LIB/atmega32.h"
#include "../DELAY/TIMER0.h"
#include "ADC_interface.h"

static void (*ADC_callBack)(void);
uint8_t ADC_u8Init(void) {
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	0f 92       	push	r0
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8ErrorState = ADC_OK;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	89 83       	std	Y+1, r24	; 0x01
	if (ADC_VREF== 0 || ADC_VREF==1 || ADC_VREF == 3)
	{
		ADMUX_REG &= ~ ADC_VREF_MASK;
    3198:	a7 e2       	ldi	r26, 0x27	; 39
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	e7 e2       	ldi	r30, 0x27	; 39
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	8f 73       	andi	r24, 0x3F	; 63
    31a4:	8c 93       	st	X, r24
		ADMUX_REG |= (ADC_VREF << REFS0_BIT);
    31a6:	a7 e2       	ldi	r26, 0x27	; 39
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	e7 e2       	ldi	r30, 0x27	; 39
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	80 64       	ori	r24, 0x40	; 64
    31b2:	8c 93       	st	X, r24
	}
	// Set the Data Adjustment of the ADC depending on the ADC_DATA_ADJUSMENT configured in the ADC configuration file
	if (ADC_DATA_ADJUSMENT == ADC_LEFT_ADJUST) {
	SET_BIT(ADMUX_REG, ADLAR_BIT);
	} else {
	CLR_BIT(ADMUX_REG, ADLAR_BIT);
    31b4:	a7 e2       	ldi	r26, 0x27	; 39
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e7 e2       	ldi	r30, 0x27	; 39
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	80 81       	ld	r24, Z
    31be:	8f 7d       	andi	r24, 0xDF	; 223
    31c0:	8c 93       	st	X, r24

	//Set the prescaler of the ADC depending on the ADC_PRESCALAR configured in the ADC configuration file
	if (ADC_PRESCALAR>0 && ADC_PRESCALAR<8)
	{
		//ADCSRA_REG &= ADC_PRESCALAR_MASK;
		ADMUX_REG &= ~ ADC_PRESCALAR_MASK;
    31c2:	a7 e2       	ldi	r26, 0x27	; 39
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	e7 e2       	ldi	r30, 0x27	; 39
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	88 7f       	andi	r24, 0xF8	; 248
    31ce:	8c 93       	st	X, r24
		ADMUX_REG |= (ADC_PRESCALAR << ADC_PRESCALAR_BITS);
    31d0:	a7 e2       	ldi	r26, 0x27	; 39
    31d2:	b0 e0       	ldi	r27, 0x00	; 0
    31d4:	e7 e2       	ldi	r30, 0x27	; 39
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	80 81       	ld	r24, Z
    31da:	87 60       	ori	r24, 0x07	; 7
    31dc:	8c 93       	st	X, r24
	}else
	{
		u8ErrorState = ADC_WRONG_PRESCALAR;
	}

	return u8ErrorState;
    31de:	89 81       	ldd	r24, Y+1	; 0x01
}
    31e0:	0f 90       	pop	r0
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	08 95       	ret

000031e8 <ADC_u8StartConversion>:

uint8_t ADC_u8StartConversion(ADCChannel_t* st_ChannelConfig) {
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <ADC_u8StartConversion+0x6>
    31ee:	0f 92       	push	r0
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	9b 83       	std	Y+3, r25	; 0x03
    31f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = ADC_OK;
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	89 83       	std	Y+1, r24	; 0x01

	if (st_ChannelConfig != NULL) {
    31fc:	8a 81       	ldd	r24, Y+2	; 0x02
    31fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3200:	00 97       	sbiw	r24, 0x00	; 0
    3202:	09 f4       	brne	.+2      	; 0x3206 <ADC_u8StartConversion+0x1e>
    3204:	55 c0       	rjmp	.+170    	; 0x32b0 <ADC_u8StartConversion+0xc8>
		// Choose the ADC Channel to convert from
		ADMUX_REG &= ~ ADC_MUX_MASK;
    3206:	a7 e2       	ldi	r26, 0x27	; 39
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	e7 e2       	ldi	r30, 0x27	; 39
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	80 7e       	andi	r24, 0xE0	; 224
    3212:	8c 93       	st	X, r24
		ADMUX_REG |= (st_ChannelConfig->pin << ADC_MUX_BITS);
    3214:	a7 e2       	ldi	r26, 0x27	; 39
    3216:	b0 e0       	ldi	r27, 0x00	; 0
    3218:	e7 e2       	ldi	r30, 0x27	; 39
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	90 81       	ld	r25, Z
    321e:	ea 81       	ldd	r30, Y+2	; 0x02
    3220:	fb 81       	ldd	r31, Y+3	; 0x03
    3222:	81 81       	ldd	r24, Z+1	; 0x01
    3224:	89 2b       	or	r24, r25
    3226:	8c 93       	st	X, r24

		//After configuring the conversion enable the ADC to start the conversion process
		SET_BIT(ADCSRA_REG, ADEN_BIT);
    3228:	a6 e2       	ldi	r26, 0x26	; 38
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	e6 e2       	ldi	r30, 0x26	; 38
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	80 68       	ori	r24, 0x80	; 128
    3234:	8c 93       	st	X, r24
		//Set the conversion mode and trigger source
		if (st_ChannelConfig->triggerSource == ADC_SINGLE_CONVERSION) {
    3236:	ea 81       	ldd	r30, Y+2	; 0x02
    3238:	fb 81       	ldd	r31, Y+3	; 0x03
    323a:	82 81       	ldd	r24, Z+2	; 0x02
    323c:	88 30       	cpi	r24, 0x08	; 8
    323e:	41 f4       	brne	.+16     	; 0x3250 <ADC_u8StartConversion+0x68>
			// if the conversion mode is single conversion disable the auto trigger then give the start signal
			//CLR_BIT(ADCSRA_REG, ADATE_BIT);
			SET_BIT(ADCSRA_REG, ADSC_BIT);
    3240:	a6 e2       	ldi	r26, 0x26	; 38
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	e6 e2       	ldi	r30, 0x26	; 38
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	80 64       	ori	r24, 0x40	; 64
    324c:	8c 93       	st	X, r24
    324e:	32 c0       	rjmp	.+100    	; 0x32b4 <ADC_u8StartConversion+0xcc>
		} else {
			//if the conversion is not single then enable the Auto trigger mode
			SET_BIT(ADCSRA_REG, ADATE_BIT);
    3250:	a6 e2       	ldi	r26, 0x26	; 38
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	e6 e2       	ldi	r30, 0x26	; 38
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	80 62       	ori	r24, 0x20	; 32
    325c:	8c 93       	st	X, r24
			// After Enabling the auto trigger mode Set the trigger source
			SFIOR_REG &= ~ ADC_TRIGGER_SOURCE_MASK;
    325e:	a0 e5       	ldi	r26, 0x50	; 80
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	e0 e5       	ldi	r30, 0x50	; 80
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	8f 71       	andi	r24, 0x1F	; 31
    326a:	8c 93       	st	X, r24
			SFIOR_REG |= (st_ChannelConfig->triggerSource << ADTS0_BIT);
    326c:	a0 e5       	ldi	r26, 0x50	; 80
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	e0 e5       	ldi	r30, 0x50	; 80
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	28 2f       	mov	r18, r24
    3278:	ea 81       	ldd	r30, Y+2	; 0x02
    327a:	fb 81       	ldd	r31, Y+3	; 0x03
    327c:	82 81       	ldd	r24, Z+2	; 0x02
    327e:	88 2f       	mov	r24, r24
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	88 0f       	add	r24, r24
    3284:	99 1f       	adc	r25, r25
    3286:	82 95       	swap	r24
    3288:	92 95       	swap	r25
    328a:	90 7f       	andi	r25, 0xF0	; 240
    328c:	98 27       	eor	r25, r24
    328e:	80 7f       	andi	r24, 0xF0	; 240
    3290:	98 27       	eor	r25, r24
    3292:	82 2b       	or	r24, r18
    3294:	8c 93       	st	X, r24
			//if the trigger source is the ending of the current conversion (free running) then you need to start the first conversion manually
			if (st_ChannelConfig->triggerSource == ADC_FREE_RUNNIG) {
    3296:	ea 81       	ldd	r30, Y+2	; 0x02
    3298:	fb 81       	ldd	r31, Y+3	; 0x03
    329a:	82 81       	ldd	r24, Z+2	; 0x02
    329c:	88 23       	and	r24, r24
    329e:	51 f4       	brne	.+20     	; 0x32b4 <ADC_u8StartConversion+0xcc>
				SET_BIT(ADCSRA_REG, ADSC_BIT);
    32a0:	a6 e2       	ldi	r26, 0x26	; 38
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e6 e2       	ldi	r30, 0x26	; 38
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	80 64       	ori	r24, 0x40	; 64
    32ac:	8c 93       	st	X, r24
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <ADC_u8StartConversion+0xcc>
			}
		}

	} else {

		u8ErrorState = ADC_NULL_INPUT;
    32b0:	87 e5       	ldi	r24, 0x57	; 87
    32b2:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	08 95       	ret

000032c2 <ADC_u8GetRead>:


uint8_t ADC_u8GetRead(uint16_t* u16_ADCReading) {
    32c2:	df 93       	push	r29
    32c4:	cf 93       	push	r28
    32c6:	00 d0       	rcall	.+0      	; 0x32c8 <ADC_u8GetRead+0x6>
    32c8:	0f 92       	push	r0
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
    32ce:	9b 83       	std	Y+3, r25	; 0x03
    32d0:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t u8ErrorState = ADC_OK;
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	89 83       	std	Y+1, r24	; 0x01

	if (u16_ADCReading != NULL) // Check if the pointer is pointing to NULL or not
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	9b 81       	ldd	r25, Y+3	; 0x03
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	09 f4       	brne	.+2      	; 0x32e0 <ADC_u8GetRead+0x1e>
    32de:	4a c0       	rjmp	.+148    	; 0x3374 <ADC_u8GetRead+0xb2>
	{
		// wait until the current conversion is finished

		while ( GET_BIT(ADCSRA_REG,ADIF_BIT) != 1);
    32e0:	e6 e2       	ldi	r30, 0x26	; 38
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	80 81       	ld	r24, Z
    32e6:	82 95       	swap	r24
    32e8:	8f 70       	andi	r24, 0x0F	; 15
    32ea:	88 2f       	mov	r24, r24
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	81 70       	andi	r24, 0x01	; 1
    32f0:	90 70       	andi	r25, 0x00	; 0
    32f2:	00 97       	sbiw	r24, 0x00	; 0
    32f4:	a9 f3       	breq	.-22     	; 0x32e0 <ADC_u8GetRead+0x1e>
		//first check for the data adjustment then Get the data from the ADC data registers
		if (GET_BIT(ADMUX_REG,ADLAR_BIT)==1)
    32f6:	e7 e2       	ldi	r30, 0x27	; 39
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 81       	ld	r24, Z
    32fc:	82 95       	swap	r24
    32fe:	86 95       	lsr	r24
    3300:	87 70       	andi	r24, 0x07	; 7
    3302:	88 2f       	mov	r24, r24
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	81 70       	andi	r24, 0x01	; 1
    3308:	90 70       	andi	r25, 0x00	; 0
    330a:	88 23       	and	r24, r24
    330c:	c9 f0       	breq	.+50     	; 0x3340 <ADC_u8GetRead+0x7e>
		{
			//if the data is left ADJUSTED then
			*u16_ADCReading=(ADCL_REG>>6)|(ADCH_REG<<2);
    330e:	e4 e2       	ldi	r30, 0x24	; 36
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	82 95       	swap	r24
    3316:	86 95       	lsr	r24
    3318:	86 95       	lsr	r24
    331a:	83 70       	andi	r24, 0x03	; 3
    331c:	28 2f       	mov	r18, r24
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	e5 e2       	ldi	r30, 0x25	; 37
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	80 81       	ld	r24, Z
    3326:	88 2f       	mov	r24, r24
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	88 0f       	add	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	82 2b       	or	r24, r18
    3334:	93 2b       	or	r25, r19
    3336:	ea 81       	ldd	r30, Y+2	; 0x02
    3338:	fb 81       	ldd	r31, Y+3	; 0x03
    333a:	91 83       	std	Z+1, r25	; 0x01
    333c:	80 83       	st	Z, r24
    333e:	12 c0       	rjmp	.+36     	; 0x3364 <ADC_u8GetRead+0xa2>
		}else
		{
			//if the data is right ADJUSTED then
			*u16_ADCReading = ADCL_REG | ( ADCH_REG << 8);
    3340:	e4 e2       	ldi	r30, 0x24	; 36
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	80 81       	ld	r24, Z
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	e5 e2       	ldi	r30, 0x25	; 37
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	88 2f       	mov	r24, r24
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	98 2f       	mov	r25, r24
    3356:	88 27       	eor	r24, r24
    3358:	82 2b       	or	r24, r18
    335a:	93 2b       	or	r25, r19
    335c:	ea 81       	ldd	r30, Y+2	; 0x02
    335e:	fb 81       	ldd	r31, Y+3	; 0x03
    3360:	91 83       	std	Z+1, r25	; 0x01
    3362:	80 83       	st	Z, r24
		}
		// Clear the flag after reading
		CLR_BIT(ADCSRA_REG, ADIF);
    3364:	a6 e2       	ldi	r26, 0x26	; 38
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	e6 e2       	ldi	r30, 0x26	; 38
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	8f 7e       	andi	r24, 0xEF	; 239
    3370:	8c 93       	st	X, r24
    3372:	02 c0       	rjmp	.+4      	; 0x3378 <ADC_u8GetRead+0xb6>
	}
	else
	{
		u8ErrorState = ADC_NULL_INPUT;
    3374:	87 e5       	ldi	r24, 0x57	; 87
    3376:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
    3378:	89 81       	ldd	r24, Y+1	; 0x01
}
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	0f 90       	pop	r0
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <ADC_u8GetVolt>:

uint8_t ADC_u8GetVolt(uint16_t* f32_ADCVolt) {
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	00 d0       	rcall	.+0      	; 0x338c <ADC_u8GetVolt+0x6>
    338c:	00 d0       	rcall	.+0      	; 0x338e <ADC_u8GetVolt+0x8>
    338e:	0f 92       	push	r0
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	9d 83       	std	Y+5, r25	; 0x05
    3396:	8c 83       	std	Y+4, r24	; 0x04

	uint8_t u8ErrorState = ADC_OK;
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	89 83       	std	Y+1, r24	; 0x01
	uint16_t u16_ADCReading = 0;
    339c:	1b 82       	std	Y+3, r1	; 0x03
    339e:	1a 82       	std	Y+2, r1	; 0x02

	if (f32_ADCVolt !=NULL)
    33a0:	8c 81       	ldd	r24, Y+4	; 0x04
    33a2:	9d 81       	ldd	r25, Y+5	; 0x05
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	a1 f0       	breq	.+40     	; 0x33d0 <ADC_u8GetVolt+0x4a>
	{
		//Get the ADC data to convert to voltage
		if (ADC_u8GetRead(&u16_ADCReading) == ADC_OK)
    33a8:	ce 01       	movw	r24, r28
    33aa:	02 96       	adiw	r24, 0x02	; 2
    33ac:	0e 94 61 19 	call	0x32c2	; 0x32c2 <ADC_u8GetRead>
    33b0:	81 30       	cpi	r24, 0x01	; 1
    33b2:	59 f4       	brne	.+22     	; 0x33ca <ADC_u8GetVolt+0x44>
		{
			// if the data is fetched correctly then calculate the volt using the equation volt = ADCread * (Vref/resolution)
			*f32_ADCVolt = ((uint16_t)u16_ADCReading * (ADC_MAX_VOLT / ADC_RESOLUTION));
    33b4:	8a 81       	ldd	r24, Y+2	; 0x02
    33b6:	9b 81       	ldd	r25, Y+3	; 0x03
    33b8:	88 0f       	add	r24, r24
    33ba:	99 1f       	adc	r25, r25
    33bc:	88 0f       	add	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	ec 81       	ldd	r30, Y+4	; 0x04
    33c2:	fd 81       	ldd	r31, Y+5	; 0x05
    33c4:	91 83       	std	Z+1, r25	; 0x01
    33c6:	80 83       	st	Z, r24
    33c8:	05 c0       	rjmp	.+10     	; 0x33d4 <ADC_u8GetVolt+0x4e>
			//*f32_ADCVolt = u16_ADCReading;
		}
		else
		{
			u8ErrorState = ADC_GetVolt_Error;
    33ca:	84 e5       	ldi	r24, 0x54	; 84
    33cc:	89 83       	std	Y+1, r24	; 0x01
    33ce:	02 c0       	rjmp	.+4      	; 0x33d4 <ADC_u8GetVolt+0x4e>
		}
	}
	else
	{
		u8ErrorState = ADC_NULL_INPUT;
    33d0:	87 e5       	ldi	r24, 0x57	; 87
    33d2:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ErrorState;
    33d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    33d6:	0f 90       	pop	r0
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	cf 91       	pop	r28
    33e2:	df 91       	pop	r29
    33e4:	08 95       	ret

000033e6 <ADC_u8EnableInterrupt>:

uint8_t ADC_u8EnableInterrupt(void (*fnCallBack)(void)) {
    33e6:	df 93       	push	r29
    33e8:	cf 93       	push	r28
    33ea:	00 d0       	rcall	.+0      	; 0x33ec <ADC_u8EnableInterrupt+0x6>
    33ec:	0f 92       	push	r0
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	9b 83       	std	Y+3, r25	; 0x03
    33f4:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t u8ErrorState = ADC_OK;
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	89 83       	std	Y+1, r24	; 0x01
	if (fnCallBack != NULL) // Check that the pointer is not pointing to NULL
    33fa:	8a 81       	ldd	r24, Y+2	; 0x02
    33fc:	9b 81       	ldd	r25, Y+3	; 0x03
    33fe:	00 97       	sbiw	r24, 0x00	; 0
    3400:	41 f1       	breq	.+80     	; 0x3452 <ADC_u8EnableInterrupt+0x6c>
	{
		//Set the Call Back Function for the Interrupt
		ADC_callBack = fnCallBack;
    3402:	8a 81       	ldd	r24, Y+2	; 0x02
    3404:	9b 81       	ldd	r25, Y+3	; 0x03
    3406:	90 93 e3 01 	sts	0x01E3, r25
    340a:	80 93 e2 01 	sts	0x01E2, r24
		//Enable Global Interrupt
		SET_BIT(SREG_REG, I_BIT);
    340e:	af e5       	ldi	r26, 0x5F	; 95
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	ef e5       	ldi	r30, 0x5F	; 95
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	80 68       	ori	r24, 0x80	; 128
    341a:	8c 93       	st	X, r24
		//Enable ADC Interrupt
		SET_BIT(ADCSRA_REG, ADIE);
    341c:	a6 e2       	ldi	r26, 0x26	; 38
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	e6 e2       	ldi	r30, 0x26	; 38
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	88 60       	ori	r24, 0x08	; 8
    3428:	8c 93       	st	X, r24

		//Check that change took place
		if ((GET_BIT(SREG_REG, I_BIT) == 0) || (GET_BIT(ADCSRA_REG,ADIE) == 0))
    342a:	ef e5       	ldi	r30, 0x5F	; 95
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	88 23       	and	r24, r24
    3432:	64 f4       	brge	.+24     	; 0x344c <ADC_u8EnableInterrupt+0x66>
    3434:	e6 e2       	ldi	r30, 0x26	; 38
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	86 95       	lsr	r24
    343c:	86 95       	lsr	r24
    343e:	86 95       	lsr	r24
    3440:	88 2f       	mov	r24, r24
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	81 70       	andi	r24, 0x01	; 1
    3446:	90 70       	andi	r25, 0x00	; 0
    3448:	00 97       	sbiw	r24, 0x00	; 0
    344a:	29 f4       	brne	.+10     	; 0x3456 <ADC_u8EnableInterrupt+0x70>
		{
			u8ErrorState = ADC_EnableInterrupt_Error;
    344c:	85 e5       	ldi	r24, 0x55	; 85
    344e:	89 83       	std	Y+1, r24	; 0x01
    3450:	02 c0       	rjmp	.+4      	; 0x3456 <ADC_u8EnableInterrupt+0x70>
		}

	}
	else
	{
		u8ErrorState = ADC_NULL_INPUT;
    3452:	87 e5       	ldi	r24, 0x57	; 87
    3454:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorState;
    3456:	89 81       	ldd	r24, Y+1	; 0x01
}
    3458:	0f 90       	pop	r0
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	cf 91       	pop	r28
    3460:	df 91       	pop	r29
    3462:	08 95       	ret

00003464 <ADC_u8DisableInterrupt>:

uint8_t ADC_u8DisableInterrupt(void) {
    3464:	df 93       	push	r29
    3466:	cf 93       	push	r28
    3468:	0f 92       	push	r0
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62

	uint8_t u8ErrorState = ADC_OK;
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	89 83       	std	Y+1, r24	; 0x01

	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG, ADIE);
    3472:	a6 e2       	ldi	r26, 0x26	; 38
    3474:	b0 e0       	ldi	r27, 0x00	; 0
    3476:	e6 e2       	ldi	r30, 0x26	; 38
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	80 81       	ld	r24, Z
    347c:	87 7f       	andi	r24, 0xF7	; 247
    347e:	8c 93       	st	X, r24

	//Check that change took place
	if ( GET_BIT(ADCSRA_REG,ADIE) != 0)
    3480:	e6 e2       	ldi	r30, 0x26	; 38
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	80 81       	ld	r24, Z
    3486:	86 95       	lsr	r24
    3488:	86 95       	lsr	r24
    348a:	86 95       	lsr	r24
    348c:	88 2f       	mov	r24, r24
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	81 70       	andi	r24, 0x01	; 1
    3492:	90 70       	andi	r25, 0x00	; 0
    3494:	88 23       	and	r24, r24
    3496:	11 f0       	breq	.+4      	; 0x349c <ADC_u8DisableInterrupt+0x38>
	{
		//if the interrupt is not disabled then return Error
		u8ErrorState = ADC_DisableInterrupt_Error;
    3498:	86 e5       	ldi	r24, 0x56	; 86
    349a:	89 83       	std	Y+1, r24	; 0x01
	}else
	{
		//NOP
	}

	return u8ErrorState;
    349c:	89 81       	ldd	r24, Y+1	; 0x01
}
    349e:	0f 90       	pop	r0
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	08 95       	ret

000034a6 <__vector_16>:

void __vector_16(void) {
    34a6:	1f 92       	push	r1
    34a8:	0f 92       	push	r0
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	0f 92       	push	r0
    34ae:	11 24       	eor	r1, r1
    34b0:	2f 93       	push	r18
    34b2:	3f 93       	push	r19
    34b4:	4f 93       	push	r20
    34b6:	5f 93       	push	r21
    34b8:	6f 93       	push	r22
    34ba:	7f 93       	push	r23
    34bc:	8f 93       	push	r24
    34be:	9f 93       	push	r25
    34c0:	af 93       	push	r26
    34c2:	bf 93       	push	r27
    34c4:	ef 93       	push	r30
    34c6:	ff 93       	push	r31
    34c8:	df 93       	push	r29
    34ca:	cf 93       	push	r28
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
	if (ADC_callBack != NULL) {
    34d0:	80 91 e2 01 	lds	r24, 0x01E2
    34d4:	90 91 e3 01 	lds	r25, 0x01E3
    34d8:	00 97       	sbiw	r24, 0x00	; 0
    34da:	29 f0       	breq	.+10     	; 0x34e6 <__vector_16+0x40>
		ADC_callBack();
    34dc:	e0 91 e2 01 	lds	r30, 0x01E2
    34e0:	f0 91 e3 01 	lds	r31, 0x01E3
    34e4:	09 95       	icall
	}
}
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	ff 91       	pop	r31
    34ec:	ef 91       	pop	r30
    34ee:	bf 91       	pop	r27
    34f0:	af 91       	pop	r26
    34f2:	9f 91       	pop	r25
    34f4:	8f 91       	pop	r24
    34f6:	7f 91       	pop	r23
    34f8:	6f 91       	pop	r22
    34fa:	5f 91       	pop	r21
    34fc:	4f 91       	pop	r20
    34fe:	3f 91       	pop	r19
    3500:	2f 91       	pop	r18
    3502:	0f 90       	pop	r0
    3504:	0f be       	out	0x3f, r0	; 63
    3506:	0f 90       	pop	r0
    3508:	1f 90       	pop	r1
    350a:	18 95       	reti

0000350c <TEMP_u8Init>:




void TEMP_u8Init(void)
{
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTA,PIN0,DIO_INPUT);
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	60 e0       	ldi	r22, 0x00	; 0
    3518:	40 e0       	ldi	r20, 0x00	; 0
    351a:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>


	ADC_u8Init();
    351e:	0e 94 c5 18 	call	0x318a	; 0x318a <ADC_u8Init>
}
    3522:	cf 91       	pop	r28
    3524:	df 91       	pop	r29
    3526:	08 95       	ret

00003528 <TEMP_u8GetRead>:


uint8_t TEMP_u8GetRead(TEMPElement_t* TempElement, uint16_t* f32TempReading)
{
    3528:	df 93       	push	r29
    352a:	cf 93       	push	r28
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
    3530:	2b 97       	sbiw	r28, 0x0b	; 11
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61
    353c:	99 87       	std	Y+9, r25	; 0x09
    353e:	88 87       	std	Y+8, r24	; 0x08
    3540:	7b 87       	std	Y+11, r23	; 0x0b
    3542:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t u8ErrorState = TEMP_OK;
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16PreRead=0;
    3548:	1b 82       	std	Y+3, r1	; 0x03
    354a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8ReadingCounts=0;
    354c:	19 82       	std	Y+1, r1	; 0x01
	if (TempElement!= NULL && f32TempReading !=NULL )
    354e:	88 85       	ldd	r24, Y+8	; 0x08
    3550:	99 85       	ldd	r25, Y+9	; 0x09
    3552:	00 97       	sbiw	r24, 0x00	; 0
    3554:	09 f4       	brne	.+2      	; 0x3558 <TEMP_u8GetRead+0x30>
    3556:	47 c0       	rjmp	.+142    	; 0x35e6 <TEMP_u8GetRead+0xbe>
    3558:	8a 85       	ldd	r24, Y+10	; 0x0a
    355a:	9b 85       	ldd	r25, Y+11	; 0x0b
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	09 f4       	brne	.+2      	; 0x3562 <TEMP_u8GetRead+0x3a>
    3560:	42 c0       	rjmp	.+132    	; 0x35e6 <TEMP_u8GetRead+0xbe>
	{
		ADCChannel_t TempSensor = {TempElement->port,TempElement->pin, ADC_SINGLE_CONVERSION};
    3562:	e8 85       	ldd	r30, Y+8	; 0x08
    3564:	f9 85       	ldd	r31, Y+9	; 0x09
    3566:	90 81       	ld	r25, Z
    3568:	e8 85       	ldd	r30, Y+8	; 0x08
    356a:	f9 85       	ldd	r31, Y+9	; 0x09
    356c:	81 81       	ldd	r24, Z+1	; 0x01
    356e:	9d 83       	std	Y+5, r25	; 0x05
    3570:	8e 83       	std	Y+6, r24	; 0x06
    3572:	88 e0       	ldi	r24, 0x08	; 8
    3574:	8f 83       	std	Y+7, r24	; 0x07
		if (ADC_u8StartConversion(&TempSensor) != ADC_OK)
    3576:	ce 01       	movw	r24, r28
    3578:	05 96       	adiw	r24, 0x05	; 5
    357a:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <ADC_u8StartConversion>
    357e:	81 30       	cpi	r24, 0x01	; 1
    3580:	11 f1       	breq	.+68     	; 0x35c6 <TEMP_u8GetRead+0x9e>
		{
			u8ErrorState = TEMP_ADC_Error;
    3582:	83 e0       	ldi	r24, 0x03	; 3
    3584:	8c 83       	std	Y+4, r24	; 0x04
    3586:	31 c0       	rjmp	.+98     	; 0x35ea <TEMP_u8GetRead+0xc2>
		}else
		{
			while (u8ReadingCounts< TOTAL_READINGS_COUNT )
			{
				ADC_u8GetVolt(f32TempReading);
    3588:	8a 85       	ldd	r24, Y+10	; 0x0a
    358a:	9b 85       	ldd	r25, Y+11	; 0x0b
    358c:	0e 94 c3 19 	call	0x3386	; 0x3386 <ADC_u8GetVolt>
				*f32TempReading = ((uint16_t)*f32TempReading/10);
    3590:	ea 85       	ldd	r30, Y+10	; 0x0a
    3592:	fb 85       	ldd	r31, Y+11	; 0x0b
    3594:	80 81       	ld	r24, Z
    3596:	91 81       	ldd	r25, Z+1	; 0x01
    3598:	2a e0       	ldi	r18, 0x0A	; 10
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	b9 01       	movw	r22, r18
    359e:	0e 94 b4 23 	call	0x4768	; 0x4768 <__udivmodhi4>
    35a2:	cb 01       	movw	r24, r22
    35a4:	ea 85       	ldd	r30, Y+10	; 0x0a
    35a6:	fb 85       	ldd	r31, Y+11	; 0x0b
    35a8:	91 83       	std	Z+1, r25	; 0x01
    35aa:	80 83       	st	Z, r24
				u8ReadingCounts++;
    35ac:	89 81       	ldd	r24, Y+1	; 0x01
    35ae:	8f 5f       	subi	r24, 0xFF	; 255
    35b0:	89 83       	std	Y+1, r24	; 0x01
				u16PreRead += *f32TempReading;
    35b2:	ea 85       	ldd	r30, Y+10	; 0x0a
    35b4:	fb 85       	ldd	r31, Y+11	; 0x0b
    35b6:	20 81       	ld	r18, Z
    35b8:	31 81       	ldd	r19, Z+1	; 0x01
    35ba:	8a 81       	ldd	r24, Y+2	; 0x02
    35bc:	9b 81       	ldd	r25, Y+3	; 0x03
    35be:	82 0f       	add	r24, r18
    35c0:	93 1f       	adc	r25, r19
    35c2:	9b 83       	std	Y+3, r25	; 0x03
    35c4:	8a 83       	std	Y+2, r24	; 0x02
		if (ADC_u8StartConversion(&TempSensor) != ADC_OK)
		{
			u8ErrorState = TEMP_ADC_Error;
		}else
		{
			while (u8ReadingCounts< TOTAL_READINGS_COUNT )
    35c6:	89 81       	ldd	r24, Y+1	; 0x01
    35c8:	84 36       	cpi	r24, 0x64	; 100
    35ca:	f0 f2       	brcs	.-68     	; 0x3588 <TEMP_u8GetRead+0x60>
				ADC_u8GetVolt(f32TempReading);
				*f32TempReading = ((uint16_t)*f32TempReading/10);
				u8ReadingCounts++;
				u16PreRead += *f32TempReading;
			}
			*f32TempReading = u16PreRead/TOTAL_READINGS_COUNT;
    35cc:	8a 81       	ldd	r24, Y+2	; 0x02
    35ce:	9b 81       	ldd	r25, Y+3	; 0x03
    35d0:	24 e6       	ldi	r18, 0x64	; 100
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	b9 01       	movw	r22, r18
    35d6:	0e 94 b4 23 	call	0x4768	; 0x4768 <__udivmodhi4>
    35da:	cb 01       	movw	r24, r22
    35dc:	ea 85       	ldd	r30, Y+10	; 0x0a
    35de:	fb 85       	ldd	r31, Y+11	; 0x0b
    35e0:	91 83       	std	Z+1, r25	; 0x01
    35e2:	80 83       	st	Z, r24
    35e4:	02 c0       	rjmp	.+4      	; 0x35ea <TEMP_u8GetRead+0xc2>

		}

	}else
	{
		u8ErrorState = TEMP_NULL_INPUT;
    35e6:	82 e0       	ldi	r24, 0x02	; 2
    35e8:	8c 83       	std	Y+4, r24	; 0x04
	}

	return u8ErrorState;
    35ea:	8c 81       	ldd	r24, Y+4	; 0x04
}
    35ec:	2b 96       	adiw	r28, 0x0b	; 11
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	f8 94       	cli
    35f2:	de bf       	out	0x3e, r29	; 62
    35f4:	0f be       	out	0x3f, r0	; 63
    35f6:	cd bf       	out	0x3d, r28	; 61
    35f8:	cf 91       	pop	r28
    35fa:	df 91       	pop	r29
    35fc:	08 95       	ret

000035fe <MOTOR_init>:
 */

#include "MOTOR_interface.h"

// function to initialze motor 
uint8_t MOTOR_init(MotorDef_t* MotorElement) {
    35fe:	df 93       	push	r29
    3600:	cf 93       	push	r28
    3602:	00 d0       	rcall	.+0      	; 0x3604 <MOTOR_init+0x6>
    3604:	00 d0       	rcall	.+0      	; 0x3606 <MOTOR_init+0x8>
    3606:	0f 92       	push	r0
    3608:	cd b7       	in	r28, 0x3d	; 61
    360a:	de b7       	in	r29, 0x3e	; 62
    360c:	9d 83       	std	Y+5, r25	; 0x05
    360e:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ErrorState = STD_TYPES_OK;
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	89 83       	std	Y+1, r24	; 0x01
	// set PWM pin channel to motor 
	PWMPin_t MotorDef = { MotorElement->port, MotorElement->ENPin };
    3614:	ec 81       	ldd	r30, Y+4	; 0x04
    3616:	fd 81       	ldd	r31, Y+5	; 0x05
    3618:	90 81       	ld	r25, Z
    361a:	ec 81       	ldd	r30, Y+4	; 0x04
    361c:	fd 81       	ldd	r31, Y+5	; 0x05
    361e:	83 81       	ldd	r24, Z+3	; 0x03
    3620:	9a 83       	std	Y+2, r25	; 0x02
    3622:	8b 83       	std	Y+3, r24	; 0x03
	// set direction of motor's pins as OUTPUT pins
	u8ErrorState = DIO_u8SetPinDirection(MotorElement->port,
    3624:	ec 81       	ldd	r30, Y+4	; 0x04
    3626:	fd 81       	ldd	r31, Y+5	; 0x05
    3628:	80 81       	ld	r24, Z
    362a:	ec 81       	ldd	r30, Y+4	; 0x04
    362c:	fd 81       	ldd	r31, Y+5	; 0x05
    362e:	91 81       	ldd	r25, Z+1	; 0x01
    3630:	69 2f       	mov	r22, r25
    3632:	42 e0       	ldi	r20, 0x02	; 2
    3634:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
    3638:	89 83       	std	Y+1, r24	; 0x01
			MotorElement->DirPinA, DIO_OUTPUT);
	if (u8ErrorState == STD_TYPES_OK) {
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	81 30       	cpi	r24, 0x01	; 1
    363e:	59 f4       	brne	.+22     	; 0x3656 <MOTOR_init+0x58>
		u8ErrorState = DIO_u8SetPinDirection(MotorElement->port,
    3640:	ec 81       	ldd	r30, Y+4	; 0x04
    3642:	fd 81       	ldd	r31, Y+5	; 0x05
    3644:	80 81       	ld	r24, Z
    3646:	ec 81       	ldd	r30, Y+4	; 0x04
    3648:	fd 81       	ldd	r31, Y+5	; 0x05
    364a:	92 81       	ldd	r25, Z+2	; 0x02
    364c:	69 2f       	mov	r22, r25
    364e:	42 e0       	ldi	r20, 0x02	; 2
    3650:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
    3654:	89 83       	std	Y+1, r24	; 0x01
				MotorElement->DirPinB, DIO_OUTPUT);
	}
	if (u8ErrorState == STD_TYPES_OK) {
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	81 30       	cpi	r24, 0x01	; 1
    365a:	59 f4       	brne	.+22     	; 0x3672 <MOTOR_init+0x74>
		u8ErrorState = DIO_u8SetPinDirection(MotorElement->port,
    365c:	ec 81       	ldd	r30, Y+4	; 0x04
    365e:	fd 81       	ldd	r31, Y+5	; 0x05
    3660:	80 81       	ld	r24, Z
    3662:	ec 81       	ldd	r30, Y+4	; 0x04
    3664:	fd 81       	ldd	r31, Y+5	; 0x05
    3666:	93 81       	ldd	r25, Z+3	; 0x03
    3668:	69 2f       	mov	r22, r25
    366a:	42 e0       	ldi	r20, 0x02	; 2
    366c:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
    3670:	89 83       	std	Y+1, r24	; 0x01
				MotorElement->ENPin, DIO_OUTPUT);
	}
	// initialize PWM 
	PWM_u8Init(MotorElement->ChannelNum, &MotorDef);
    3672:	ec 81       	ldd	r30, Y+4	; 0x04
    3674:	fd 81       	ldd	r31, Y+5	; 0x05
    3676:	84 81       	ldd	r24, Z+4	; 0x04
    3678:	9e 01       	movw	r18, r28
    367a:	2e 5f       	subi	r18, 0xFE	; 254
    367c:	3f 4f       	sbci	r19, 0xFF	; 255
    367e:	b9 01       	movw	r22, r18
    3680:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <PWM_u8Init>
	return u8ErrorState;
    3684:	89 81       	ldd	r24, Y+1	; 0x01
}
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	cf 91       	pop	r28
    3692:	df 91       	pop	r29
    3694:	08 95       	ret

00003696 <MOTOR_Move>:

// function make motor move with specific speed and direction
uint8_t MOTOR_Move(MotorDef_t* MotorElement, uint8_t MotorSpeed,
		uint8_t MotorDir) {
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	27 97       	sbiw	r28, 0x07	; 7
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	f8 94       	cli
    36a4:	de bf       	out	0x3e, r29	; 62
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	cd bf       	out	0x3d, r28	; 61
    36aa:	9b 83       	std	Y+3, r25	; 0x03
    36ac:	8a 83       	std	Y+2, r24	; 0x02
    36ae:	6c 83       	std	Y+4, r22	; 0x04
    36b0:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t u8ErrorState = STD_TYPES_OK;
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	89 83       	std	Y+1, r24	; 0x01

	if (MotorElement != NULL && MotorSpeed > 0 && MotorSpeed < 100) {
    36b6:	8a 81       	ldd	r24, Y+2	; 0x02
    36b8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	09 f4       	brne	.+2      	; 0x36c0 <MOTOR_Move+0x2a>
    36be:	5d c0       	rjmp	.+186    	; 0x377a <MOTOR_Move+0xe4>
    36c0:	8c 81       	ldd	r24, Y+4	; 0x04
    36c2:	88 23       	and	r24, r24
    36c4:	09 f4       	brne	.+2      	; 0x36c8 <MOTOR_Move+0x32>
    36c6:	59 c0       	rjmp	.+178    	; 0x377a <MOTOR_Move+0xe4>
    36c8:	8c 81       	ldd	r24, Y+4	; 0x04
    36ca:	84 36       	cpi	r24, 0x64	; 100
    36cc:	08 f0       	brcs	.+2      	; 0x36d0 <MOTOR_Move+0x3a>
    36ce:	55 c0       	rjmp	.+170    	; 0x377a <MOTOR_Move+0xe4>
		switch (MotorDir) {
    36d0:	8d 81       	ldd	r24, Y+5	; 0x05
    36d2:	28 2f       	mov	r18, r24
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	3f 83       	std	Y+7, r19	; 0x07
    36d8:	2e 83       	std	Y+6, r18	; 0x06
    36da:	8e 81       	ldd	r24, Y+6	; 0x06
    36dc:	9f 81       	ldd	r25, Y+7	; 0x07
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	31 f0       	breq	.+12     	; 0x36ee <MOTOR_Move+0x58>
    36e2:	2e 81       	ldd	r18, Y+6	; 0x06
    36e4:	3f 81       	ldd	r19, Y+7	; 0x07
    36e6:	21 30       	cpi	r18, 0x01	; 1
    36e8:	31 05       	cpc	r19, r1
    36ea:	19 f1       	breq	.+70     	; 0x3732 <MOTOR_Move+0x9c>
    36ec:	44 c0       	rjmp	.+136    	; 0x3776 <MOTOR_Move+0xe0>
		// set direction pins and duty cycle to control in speed and direction 
		case CLOCKWISE:
			DIO_u8SetPinData(MotorElement->port, MotorElement->DirPinA,
    36ee:	ea 81       	ldd	r30, Y+2	; 0x02
    36f0:	fb 81       	ldd	r31, Y+3	; 0x03
    36f2:	80 81       	ld	r24, Z
    36f4:	ea 81       	ldd	r30, Y+2	; 0x02
    36f6:	fb 81       	ldd	r31, Y+3	; 0x03
    36f8:	91 81       	ldd	r25, Z+1	; 0x01
    36fa:	69 2f       	mov	r22, r25
    36fc:	41 e0       	ldi	r20, 0x01	; 1
    36fe:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
					DIO_HIGH);
			DIO_u8SetPinData(MotorElement->port, MotorElement->DirPinB,
    3702:	ea 81       	ldd	r30, Y+2	; 0x02
    3704:	fb 81       	ldd	r31, Y+3	; 0x03
    3706:	80 81       	ld	r24, Z
    3708:	ea 81       	ldd	r30, Y+2	; 0x02
    370a:	fb 81       	ldd	r31, Y+3	; 0x03
    370c:	92 81       	ldd	r25, Z+2	; 0x02
    370e:	69 2f       	mov	r22, r25
    3710:	40 e0       	ldi	r20, 0x00	; 0
    3712:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
					DIO_LOW);
			PWM_u8DutyCycle(MotorElement->ChannelNum, MotorSpeed);
    3716:	ea 81       	ldd	r30, Y+2	; 0x02
    3718:	fb 81       	ldd	r31, Y+3	; 0x03
    371a:	94 81       	ldd	r25, Z+4	; 0x04
    371c:	8c 81       	ldd	r24, Y+4	; 0x04
    371e:	28 2f       	mov	r18, r24
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	40 e0       	ldi	r20, 0x00	; 0
    3724:	50 e0       	ldi	r21, 0x00	; 0
    3726:	89 2f       	mov	r24, r25
    3728:	ba 01       	movw	r22, r20
    372a:	a9 01       	movw	r20, r18
    372c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <PWM_u8DutyCycle>
    3730:	25 c0       	rjmp	.+74     	; 0x377c <MOTOR_Move+0xe6>
			break;
		case ANTI_CLOCKWISE:
			DIO_u8SetPinData(MotorElement->port, MotorElement->DirPinA,
    3732:	ea 81       	ldd	r30, Y+2	; 0x02
    3734:	fb 81       	ldd	r31, Y+3	; 0x03
    3736:	80 81       	ld	r24, Z
    3738:	ea 81       	ldd	r30, Y+2	; 0x02
    373a:	fb 81       	ldd	r31, Y+3	; 0x03
    373c:	91 81       	ldd	r25, Z+1	; 0x01
    373e:	69 2f       	mov	r22, r25
    3740:	40 e0       	ldi	r20, 0x00	; 0
    3742:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
					DIO_LOW);
			DIO_u8SetPinData(MotorElement->port, MotorElement->DirPinB,
    3746:	ea 81       	ldd	r30, Y+2	; 0x02
    3748:	fb 81       	ldd	r31, Y+3	; 0x03
    374a:	80 81       	ld	r24, Z
    374c:	ea 81       	ldd	r30, Y+2	; 0x02
    374e:	fb 81       	ldd	r31, Y+3	; 0x03
    3750:	92 81       	ldd	r25, Z+2	; 0x02
    3752:	69 2f       	mov	r22, r25
    3754:	41 e0       	ldi	r20, 0x01	; 1
    3756:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
					DIO_HIGH);
			PWM_u8DutyCycle(MotorElement->ChannelNum, MotorSpeed);
    375a:	ea 81       	ldd	r30, Y+2	; 0x02
    375c:	fb 81       	ldd	r31, Y+3	; 0x03
    375e:	94 81       	ldd	r25, Z+4	; 0x04
    3760:	8c 81       	ldd	r24, Y+4	; 0x04
    3762:	28 2f       	mov	r18, r24
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e0       	ldi	r20, 0x00	; 0
    3768:	50 e0       	ldi	r21, 0x00	; 0
    376a:	89 2f       	mov	r24, r25
    376c:	ba 01       	movw	r22, r20
    376e:	a9 01       	movw	r20, r18
    3770:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <PWM_u8DutyCycle>
    3774:	03 c0       	rjmp	.+6      	; 0x377c <MOTOR_Move+0xe6>
			break;
		default:
			u8ErrorState = STD_TYPES_NOK;
    3776:	19 82       	std	Y+1, r1	; 0x01
    3778:	01 c0       	rjmp	.+2      	; 0x377c <MOTOR_Move+0xe6>
			break;
		}

	} else {
		u8ErrorState = STD_TYPES_NOK;
    377a:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    377c:	89 81       	ldd	r24, Y+1	; 0x01
}
    377e:	27 96       	adiw	r28, 0x07	; 7
    3780:	0f b6       	in	r0, 0x3f	; 63
    3782:	f8 94       	cli
    3784:	de bf       	out	0x3e, r29	; 62
    3786:	0f be       	out	0x3f, r0	; 63
    3788:	cd bf       	out	0x3d, r28	; 61
    378a:	cf 91       	pop	r28
    378c:	df 91       	pop	r29
    378e:	08 95       	ret

00003790 <MOTOR_Stop>:

// function make motor stop 
uint8_t MOTOR_Stop(MotorDef_t* MotorElement) {
    3790:	df 93       	push	r29
    3792:	cf 93       	push	r28
    3794:	00 d0       	rcall	.+0      	; 0x3796 <MOTOR_Stop+0x6>
    3796:	0f 92       	push	r0
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	9b 83       	std	Y+3, r25	; 0x03
    379e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ErrorState = STD_TYPES_OK;
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	89 83       	std	Y+1, r24	; 0x01
	if (MotorElement != NULL) {
    37a4:	8a 81       	ldd	r24, Y+2	; 0x02
    37a6:	9b 81       	ldd	r25, Y+3	; 0x03
    37a8:	00 97       	sbiw	r24, 0x00	; 0
    37aa:	a9 f0       	breq	.+42     	; 0x37d6 <MOTOR_Stop+0x46>
		// make 2 pins LOW force motor to stop 
		DIO_u8SetPinData(MotorElement->port, MotorElement->DirPinA, DIO_LOW);
    37ac:	ea 81       	ldd	r30, Y+2	; 0x02
    37ae:	fb 81       	ldd	r31, Y+3	; 0x03
    37b0:	80 81       	ld	r24, Z
    37b2:	ea 81       	ldd	r30, Y+2	; 0x02
    37b4:	fb 81       	ldd	r31, Y+3	; 0x03
    37b6:	91 81       	ldd	r25, Z+1	; 0x01
    37b8:	69 2f       	mov	r22, r25
    37ba:	40 e0       	ldi	r20, 0x00	; 0
    37bc:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
		DIO_u8SetPinData(MotorElement->port, MotorElement->DirPinB, DIO_LOW);
    37c0:	ea 81       	ldd	r30, Y+2	; 0x02
    37c2:	fb 81       	ldd	r31, Y+3	; 0x03
    37c4:	80 81       	ld	r24, Z
    37c6:	ea 81       	ldd	r30, Y+2	; 0x02
    37c8:	fb 81       	ldd	r31, Y+3	; 0x03
    37ca:	92 81       	ldd	r25, Z+2	; 0x02
    37cc:	69 2f       	mov	r22, r25
    37ce:	40 e0       	ldi	r20, 0x00	; 0
    37d0:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    37d4:	01 c0       	rjmp	.+2      	; 0x37d8 <MOTOR_Stop+0x48>
	} else {
		u8ErrorState = STD_TYPES_NOK;
    37d6:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8ErrorState;
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	cf 91       	pop	r28
    37e2:	df 91       	pop	r29
    37e4:	08 95       	ret

000037e6 <LED_u8Init>:
 */

#include "LED.h"

// function to initialize LED 
uint8_t LED_u8Init(LED_t* led) {
    37e6:	df 93       	push	r29
    37e8:	cf 93       	push	r28
    37ea:	00 d0       	rcall	.+0      	; 0x37ec <LED_u8Init+0x6>
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
    37f0:	9a 83       	std	Y+2, r25	; 0x02
    37f2:	89 83       	std	Y+1, r24	; 0x01
	// set direction of LED's pin to OUTPUT 
	return DIO_u8SetPinDirection(led->port, led->pin, DIO_OUTPUT);
    37f4:	e9 81       	ldd	r30, Y+1	; 0x01
    37f6:	fa 81       	ldd	r31, Y+2	; 0x02
    37f8:	80 81       	ld	r24, Z
    37fa:	e9 81       	ldd	r30, Y+1	; 0x01
    37fc:	fa 81       	ldd	r31, Y+2	; 0x02
    37fe:	91 81       	ldd	r25, Z+1	; 0x01
    3800:	69 2f       	mov	r22, r25
    3802:	42 e0       	ldi	r20, 0x02	; 2
    3804:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
}
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	08 95       	ret

00003812 <LED_u8On>:

// function ta turn LED on
uint8_t LED_u8On(LED_t* led) {
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	00 d0       	rcall	.+0      	; 0x3818 <LED_u8On+0x6>
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
    381c:	9a 83       	std	Y+2, r25	; 0x02
    381e:	89 83       	std	Y+1, r24	; 0x01
	// set LED's pin to HIGH 
	return DIO_u8SetPinData(led->port, led->pin, DIO_HIGH);
    3820:	e9 81       	ldd	r30, Y+1	; 0x01
    3822:	fa 81       	ldd	r31, Y+2	; 0x02
    3824:	80 81       	ld	r24, Z
    3826:	e9 81       	ldd	r30, Y+1	; 0x01
    3828:	fa 81       	ldd	r31, Y+2	; 0x02
    382a:	91 81       	ldd	r25, Z+1	; 0x01
    382c:	69 2f       	mov	r22, r25
    382e:	41 e0       	ldi	r20, 0x01	; 1
    3830:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
}
    3834:	0f 90       	pop	r0
    3836:	0f 90       	pop	r0
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <LED_u8Off>:

// function ta turn LED off
uint8_t LED_u8Off(LED_t* led) {
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	00 d0       	rcall	.+0      	; 0x3844 <LED_u8Off+0x6>
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
    3848:	9a 83       	std	Y+2, r25	; 0x02
    384a:	89 83       	std	Y+1, r24	; 0x01
	// set LED's pin to LOW
	return DIO_u8SetPinData(led->port, led->pin, DIO_LOW);
    384c:	e9 81       	ldd	r30, Y+1	; 0x01
    384e:	fa 81       	ldd	r31, Y+2	; 0x02
    3850:	80 81       	ld	r24, Z
    3852:	e9 81       	ldd	r30, Y+1	; 0x01
    3854:	fa 81       	ldd	r31, Y+2	; 0x02
    3856:	91 81       	ldd	r25, Z+1	; 0x01
    3858:	69 2f       	mov	r22, r25
    385a:	40 e0       	ldi	r20, 0x00	; 0
    385c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
}
    3860:	0f 90       	pop	r0
    3862:	0f 90       	pop	r0
    3864:	cf 91       	pop	r28
    3866:	df 91       	pop	r29
    3868:	08 95       	ret

0000386a <LED_u8Toggle>:

// function to toggle LED state
uint8_t LED_u8Toggle(LED_t* led) {
    386a:	df 93       	push	r29
    386c:	cf 93       	push	r28
    386e:	00 d0       	rcall	.+0      	; 0x3870 <LED_u8Toggle+0x6>
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	9a 83       	std	Y+2, r25	; 0x02
    3876:	89 83       	std	Y+1, r24	; 0x01
	// toggle LED's pin state 
	return DIO_u8TogglePinData(led->port, led->pin);
    3878:	e9 81       	ldd	r30, Y+1	; 0x01
    387a:	fa 81       	ldd	r31, Y+2	; 0x02
    387c:	80 81       	ld	r24, Z
    387e:	e9 81       	ldd	r30, Y+1	; 0x01
    3880:	fa 81       	ldd	r31, Y+2	; 0x02
    3882:	91 81       	ldd	r25, Z+1	; 0x01
    3884:	69 2f       	mov	r22, r25
    3886:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8TogglePinData>
}
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	08 95       	ret

00003894 <LCD_u8Init>:
#include "../LED/LED.h"
/*
* brief: This function is used to initialize pin directions of the LCD as defined in the configurations and in 4-Bit Mode
* return: (output) the Error state of the function 0 if an error happens and 1 otherwise
*/
uint8_t LCD_u8Init(void) {
    3894:	df 93       	push	r29
    3896:	cf 93       	push	r28
    3898:	0f 92       	push	r0
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
	uint8_t state = STD_TYPES_OK;
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	89 83       	std	Y+1, r24	; 0x01
	state = DIO_u8SetPinDirection(RS_PORT, RS_PIN, DIO_OUTPUT);
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	61 e0       	ldi	r22, 0x01	; 1
    38a6:	42 e0       	ldi	r20, 0x02	; 2
    38a8:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
    38ac:	89 83       	std	Y+1, r24	; 0x01
	if(state == STD_TYPES_OK){
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	81 30       	cpi	r24, 0x01	; 1
    38b2:	31 f4       	brne	.+12     	; 0x38c0 <LCD_u8Init+0x2c>
		state = DIO_u8SetPinDirection(RW_PORT, RW_PIN, DIO_OUTPUT);
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	62 e0       	ldi	r22, 0x02	; 2
    38b8:	42 e0       	ldi	r20, 0x02	; 2
    38ba:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
    38be:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    38c0:	89 81       	ldd	r24, Y+1	; 0x01
    38c2:	81 30       	cpi	r24, 0x01	; 1
    38c4:	31 f4       	brne	.+12     	; 0x38d2 <LCD_u8Init+0x3e>
		state = DIO_u8SetPinDirection(E_PORT, E_PIN, DIO_OUTPUT);
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	63 e0       	ldi	r22, 0x03	; 3
    38ca:	42 e0       	ldi	r20, 0x02	; 2
    38cc:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
    38d0:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    38d2:	89 81       	ldd	r24, Y+1	; 0x01
    38d4:	81 30       	cpi	r24, 0x01	; 1
    38d6:	31 f4       	brne	.+12     	; 0x38e4 <LCD_u8Init+0x50>
		state = DIO_u8SetPinDirection(D4_PORT, D4_PIN, DIO_OUTPUT);
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	64 e0       	ldi	r22, 0x04	; 4
    38dc:	42 e0       	ldi	r20, 0x02	; 2
    38de:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
    38e2:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    38e4:	89 81       	ldd	r24, Y+1	; 0x01
    38e6:	81 30       	cpi	r24, 0x01	; 1
    38e8:	31 f4       	brne	.+12     	; 0x38f6 <LCD_u8Init+0x62>
		state = DIO_u8SetPinDirection(D4_PORT, D5_PIN, DIO_OUTPUT);
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	65 e0       	ldi	r22, 0x05	; 5
    38ee:	42 e0       	ldi	r20, 0x02	; 2
    38f0:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
    38f4:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	81 30       	cpi	r24, 0x01	; 1
    38fa:	31 f4       	brne	.+12     	; 0x3908 <LCD_u8Init+0x74>
		state = DIO_u8SetPinDirection(D4_PORT, D6_PIN, DIO_OUTPUT);
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	66 e0       	ldi	r22, 0x06	; 6
    3900:	42 e0       	ldi	r20, 0x02	; 2
    3902:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
    3906:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	81 30       	cpi	r24, 0x01	; 1
    390c:	31 f4       	brne	.+12     	; 0x391a <LCD_u8Init+0x86>
		state = DIO_u8SetPinDirection(D4_PORT, D7_PIN, DIO_OUTPUT);
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	67 e0       	ldi	r22, 0x07	; 7
    3912:	42 e0       	ldi	r20, 0x02	; 2
    3914:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
    3918:	89 83       	std	Y+1, r24	; 0x01
	}

	if(state == STD_TYPES_OK){
    391a:	89 81       	ldd	r24, Y+1	; 0x01
    391c:	81 30       	cpi	r24, 0x01	; 1
    391e:	21 f4       	brne	.+8      	; 0x3928 <LCD_u8Init+0x94>
		state = LCD_u8SendCommand(0x33);
    3920:	83 e3       	ldi	r24, 0x33	; 51
    3922:	0e 94 bc 1c 	call	0x3978	; 0x3978 <LCD_u8SendCommand>
    3926:	89 83       	std	Y+1, r24	; 0x01
	}

	if(state == STD_TYPES_OK){
    3928:	89 81       	ldd	r24, Y+1	; 0x01
    392a:	81 30       	cpi	r24, 0x01	; 1
    392c:	21 f4       	brne	.+8      	; 0x3936 <LCD_u8Init+0xa2>
		state = LCD_u8SendCommand(0x32);
    392e:	82 e3       	ldi	r24, 0x32	; 50
    3930:	0e 94 bc 1c 	call	0x3978	; 0x3978 <LCD_u8SendCommand>
    3934:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    3936:	89 81       	ldd	r24, Y+1	; 0x01
    3938:	81 30       	cpi	r24, 0x01	; 1
    393a:	21 f4       	brne	.+8      	; 0x3944 <LCD_u8Init+0xb0>
		state = LCD_u8SendCommand(0x28);
    393c:	88 e2       	ldi	r24, 0x28	; 40
    393e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <LCD_u8SendCommand>
    3942:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	81 30       	cpi	r24, 0x01	; 1
    3948:	21 f4       	brne	.+8      	; 0x3952 <LCD_u8Init+0xbe>
		state = LCD_u8SendCommand(0x0c);
    394a:	8c e0       	ldi	r24, 0x0C	; 12
    394c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <LCD_u8SendCommand>
    3950:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	81 30       	cpi	r24, 0x01	; 1
    3956:	21 f4       	brne	.+8      	; 0x3960 <LCD_u8Init+0xcc>
		state = LCD_u8SendCommand(0x06);
    3958:	86 e0       	ldi	r24, 0x06	; 6
    395a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <LCD_u8SendCommand>
    395e:	89 83       	std	Y+1, r24	; 0x01
	}
	if(state == STD_TYPES_OK){
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	81 30       	cpi	r24, 0x01	; 1
    3964:	21 f4       	brne	.+8      	; 0x396e <LCD_u8Init+0xda>
		state = LCD_u8SendCommand(0x01);
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	0e 94 bc 1c 	call	0x3978	; 0x3978 <LCD_u8SendCommand>
    396c:	89 83       	std	Y+1, r24	; 0x01
	}

	return state;
    396e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3970:	0f 90       	pop	r0
    3972:	cf 91       	pop	r28
    3974:	df 91       	pop	r29
    3976:	08 95       	ret

00003978 <LCD_u8SendCommand>:
/*
* brief: This function is used to send a command to the LCD
* param.: (input) the command to be sent
* return: (output) the Error state of the function 0 if an error happens and 1 otherwise
*/
uint8_t LCD_u8SendCommand(uint8_t command){
    3978:	df 93       	push	r29
    397a:	cf 93       	push	r28
    397c:	00 d0       	rcall	.+0      	; 0x397e <LCD_u8SendCommand+0x6>
    397e:	0f 92       	push	r0
    3980:	cd b7       	in	r28, 0x3d	; 61
    3982:	de b7       	in	r29, 0x3e	; 62
    3984:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t state = STD_TYPES_OK;	
    3986:	81 e0       	ldi	r24, 0x01	; 1
    3988:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t bit = GET_BIT(command, 4);
    398a:	8b 81       	ldd	r24, Y+3	; 0x03
    398c:	82 95       	swap	r24
    398e:	8f 70       	andi	r24, 0x0F	; 15
    3990:	81 70       	andi	r24, 0x01	; 1
    3992:	89 83       	std	Y+1, r24	; 0x01
	state = DIO_u8SetPinData(D4_PORT,D4_PIN,bit);
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	64 e0       	ldi	r22, 0x04	; 4
    3998:	49 81       	ldd	r20, Y+1	; 0x01
    399a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    399e:	8a 83       	std	Y+2, r24	; 0x02
	if(state == STD_TYPES_OK){
    39a0:	8a 81       	ldd	r24, Y+2	; 0x02
    39a2:	81 30       	cpi	r24, 0x01	; 1
    39a4:	61 f4       	brne	.+24     	; 0x39be <LCD_u8SendCommand+0x46>
		bit = GET_BIT(command, 5);
    39a6:	8b 81       	ldd	r24, Y+3	; 0x03
    39a8:	82 95       	swap	r24
    39aa:	86 95       	lsr	r24
    39ac:	87 70       	andi	r24, 0x07	; 7
    39ae:	81 70       	andi	r24, 0x01	; 1
    39b0:	89 83       	std	Y+1, r24	; 0x01
		state = DIO_u8SetPinData(D5_PORT,D5_PIN,bit);
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	65 e0       	ldi	r22, 0x05	; 5
    39b6:	49 81       	ldd	r20, Y+1	; 0x01
    39b8:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    39bc:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(state == STD_TYPES_OK){
    39be:	8a 81       	ldd	r24, Y+2	; 0x02
    39c0:	81 30       	cpi	r24, 0x01	; 1
    39c2:	61 f4       	brne	.+24     	; 0x39dc <LCD_u8SendCommand+0x64>
		bit = GET_BIT(command, 6);
    39c4:	8b 81       	ldd	r24, Y+3	; 0x03
    39c6:	82 95       	swap	r24
    39c8:	86 95       	lsr	r24
    39ca:	86 95       	lsr	r24
    39cc:	83 70       	andi	r24, 0x03	; 3
    39ce:	81 70       	andi	r24, 0x01	; 1
    39d0:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D6_PORT,D6_PIN,bit);
    39d2:	80 e0       	ldi	r24, 0x00	; 0
    39d4:	66 e0       	ldi	r22, 0x06	; 6
    39d6:	49 81       	ldd	r20, Y+1	; 0x01
    39d8:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    39dc:	8a 81       	ldd	r24, Y+2	; 0x02
    39de:	81 30       	cpi	r24, 0x01	; 1
    39e0:	51 f4       	brne	.+20     	; 0x39f6 <LCD_u8SendCommand+0x7e>
		bit = GET_BIT(command, 7);
    39e2:	8b 81       	ldd	r24, Y+3	; 0x03
    39e4:	88 1f       	adc	r24, r24
    39e6:	88 27       	eor	r24, r24
    39e8:	88 1f       	adc	r24, r24
    39ea:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D7_PORT,D7_PIN,bit);
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	67 e0       	ldi	r22, 0x07	; 7
    39f0:	49 81       	ldd	r20, Y+1	; 0x01
    39f2:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	81 30       	cpi	r24, 0x01	; 1
    39fa:	31 f4       	brne	.+12     	; 0x3a08 <LCD_u8SendCommand+0x90>
		state = DIO_u8SetPinData(RS_PORT,RS_PIN,DIO_LOW);
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	61 e0       	ldi	r22, 0x01	; 1
    3a00:	40 e0       	ldi	r20, 0x00	; 0
    3a02:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3a06:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3a08:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0a:	81 30       	cpi	r24, 0x01	; 1
    3a0c:	31 f4       	brne	.+12     	; 0x3a1a <LCD_u8SendCommand+0xa2>
		state = DIO_u8SetPinData(RW_PORT,RW_PIN,DIO_LOW);
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	62 e0       	ldi	r22, 0x02	; 2
    3a12:	40 e0       	ldi	r20, 0x00	; 0
    3a14:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3a18:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1c:	81 30       	cpi	r24, 0x01	; 1
    3a1e:	31 f4       	brne	.+12     	; 0x3a2c <LCD_u8SendCommand+0xb4>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_HIGH);
    3a20:	80 e0       	ldi	r24, 0x00	; 0
    3a22:	63 e0       	ldi	r22, 0x03	; 3
    3a24:	41 e0       	ldi	r20, 0x01	; 1
    3a26:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3a2a:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(state == STD_TYPES_OK){
    3a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a2e:	81 30       	cpi	r24, 0x01	; 1
    3a30:	51 f4       	brne	.+20     	; 0x3a46 <LCD_u8SendCommand+0xce>
		TIMER0_u8PollingDelay(2);
    3a32:	82 e0       	ldi	r24, 0x02	; 2
    3a34:	90 e0       	ldi	r25, 0x00	; 0
    3a36:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_LOW);
    3a3a:	80 e0       	ldi	r24, 0x00	; 0
    3a3c:	63 e0       	ldi	r22, 0x03	; 3
    3a3e:	40 e0       	ldi	r20, 0x00	; 0
    3a40:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3a44:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(state == STD_TYPES_OK){
    3a46:	8a 81       	ldd	r24, Y+2	; 0x02
    3a48:	81 30       	cpi	r24, 0x01	; 1
    3a4a:	49 f4       	brne	.+18     	; 0x3a5e <LCD_u8SendCommand+0xe6>
		bit = GET_BIT(command, 0);
    3a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4e:	81 70       	andi	r24, 0x01	; 1
    3a50:	89 83       	std	Y+1, r24	; 0x01
		state = DIO_u8SetPinData(D4_PORT,D4_PIN,bit);
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	64 e0       	ldi	r22, 0x04	; 4
    3a56:	49 81       	ldd	r20, Y+1	; 0x01
    3a58:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3a5c:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a60:	81 30       	cpi	r24, 0x01	; 1
    3a62:	49 f4       	brne	.+18     	; 0x3a76 <LCD_u8SendCommand+0xfe>
		bit = GET_BIT(command, 1);
    3a64:	8b 81       	ldd	r24, Y+3	; 0x03
    3a66:	86 95       	lsr	r24
    3a68:	81 70       	andi	r24, 0x01	; 1
    3a6a:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D5_PORT,D5_PIN,bit);
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	65 e0       	ldi	r22, 0x05	; 5
    3a70:	49 81       	ldd	r20, Y+1	; 0x01
    3a72:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    3a76:	8a 81       	ldd	r24, Y+2	; 0x02
    3a78:	81 30       	cpi	r24, 0x01	; 1
    3a7a:	51 f4       	brne	.+20     	; 0x3a90 <LCD_u8SendCommand+0x118>
		bit = GET_BIT(command, 2);
    3a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7e:	86 95       	lsr	r24
    3a80:	86 95       	lsr	r24
    3a82:	81 70       	andi	r24, 0x01	; 1
    3a84:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D6_PORT,D6_PIN,bit);
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	66 e0       	ldi	r22, 0x06	; 6
    3a8a:	49 81       	ldd	r20, Y+1	; 0x01
    3a8c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    3a90:	8a 81       	ldd	r24, Y+2	; 0x02
    3a92:	81 30       	cpi	r24, 0x01	; 1
    3a94:	59 f4       	brne	.+22     	; 0x3aac <LCD_u8SendCommand+0x134>
		bit = GET_BIT(command, 3);
    3a96:	8b 81       	ldd	r24, Y+3	; 0x03
    3a98:	86 95       	lsr	r24
    3a9a:	86 95       	lsr	r24
    3a9c:	86 95       	lsr	r24
    3a9e:	81 70       	andi	r24, 0x01	; 1
    3aa0:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D7_PORT,D7_PIN,bit);
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	67 e0       	ldi	r22, 0x07	; 7
    3aa6:	49 81       	ldd	r20, Y+1	; 0x01
    3aa8:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    3aac:	8a 81       	ldd	r24, Y+2	; 0x02
    3aae:	81 30       	cpi	r24, 0x01	; 1
    3ab0:	31 f4       	brne	.+12     	; 0x3abe <LCD_u8SendCommand+0x146>
		state = DIO_u8SetPinData(RS_PORT,RS_PIN,DIO_LOW);
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	61 e0       	ldi	r22, 0x01	; 1
    3ab6:	40 e0       	ldi	r20, 0x00	; 0
    3ab8:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3abc:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3abe:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac0:	81 30       	cpi	r24, 0x01	; 1
    3ac2:	31 f4       	brne	.+12     	; 0x3ad0 <LCD_u8SendCommand+0x158>
		state = DIO_u8SetPinData(RW_PORT,RW_PIN,DIO_LOW);
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	62 e0       	ldi	r22, 0x02	; 2
    3ac8:	40 e0       	ldi	r20, 0x00	; 0
    3aca:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3ace:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad2:	81 30       	cpi	r24, 0x01	; 1
    3ad4:	31 f4       	brne	.+12     	; 0x3ae2 <LCD_u8SendCommand+0x16a>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_HIGH);
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	63 e0       	ldi	r22, 0x03	; 3
    3ada:	41 e0       	ldi	r20, 0x01	; 1
    3adc:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3ae0:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae4:	81 30       	cpi	r24, 0x01	; 1
    3ae6:	51 f4       	brne	.+20     	; 0x3afc <LCD_u8SendCommand+0x184>
		TIMER0_u8PollingDelay(2);
    3ae8:	82 e0       	ldi	r24, 0x02	; 2
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_LOW);
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	63 e0       	ldi	r22, 0x03	; 3
    3af4:	40 e0       	ldi	r20, 0x00	; 0
    3af6:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3afa:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3afc:	8a 81       	ldd	r24, Y+2	; 0x02
    3afe:	81 30       	cpi	r24, 0x01	; 1
    3b00:	29 f4       	brne	.+10     	; 0x3b0c <LCD_u8SendCommand+0x194>
		state = TIMER0_u8PollingDelay(5);	
    3b02:	85 e0       	ldi	r24, 0x05	; 5
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
    3b0a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return state;
    3b0c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3b0e:	0f 90       	pop	r0
    3b10:	0f 90       	pop	r0
    3b12:	0f 90       	pop	r0
    3b14:	cf 91       	pop	r28
    3b16:	df 91       	pop	r29
    3b18:	08 95       	ret

00003b1a <LCD_u8SendData>:
/*
* brief: This function is used to send a data character to he LCD
* param.: (input) the data to be sent
* return: (output) the Error state of the function 0 if an error happens and 1 otherwise
*/
uint8_t LCD_u8SendData(uint8_t data) {
    3b1a:	df 93       	push	r29
    3b1c:	cf 93       	push	r28
    3b1e:	00 d0       	rcall	.+0      	; 0x3b20 <LCD_u8SendData+0x6>
    3b20:	0f 92       	push	r0
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
    3b26:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t state = STD_TYPES_OK;
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t bit = GET_BIT(data, 4);
    3b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2e:	82 95       	swap	r24
    3b30:	8f 70       	andi	r24, 0x0F	; 15
    3b32:	81 70       	andi	r24, 0x01	; 1
    3b34:	89 83       	std	Y+1, r24	; 0x01
	state = DIO_u8SetPinData(D4_PORT,D4_PIN,bit);
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	64 e0       	ldi	r22, 0x04	; 4
    3b3a:	49 81       	ldd	r20, Y+1	; 0x01
    3b3c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3b40:	8a 83       	std	Y+2, r24	; 0x02
	if(state == STD_TYPES_OK){
    3b42:	8a 81       	ldd	r24, Y+2	; 0x02
    3b44:	81 30       	cpi	r24, 0x01	; 1
    3b46:	61 f4       	brne	.+24     	; 0x3b60 <LCD_u8SendData+0x46>
		bit = GET_BIT(data, 5);
    3b48:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4a:	82 95       	swap	r24
    3b4c:	86 95       	lsr	r24
    3b4e:	87 70       	andi	r24, 0x07	; 7
    3b50:	81 70       	andi	r24, 0x01	; 1
    3b52:	89 83       	std	Y+1, r24	; 0x01
		state = DIO_u8SetPinData(D5_PORT,D5_PIN,bit);
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	65 e0       	ldi	r22, 0x05	; 5
    3b58:	49 81       	ldd	r20, Y+1	; 0x01
    3b5a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3b5e:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3b60:	8a 81       	ldd	r24, Y+2	; 0x02
    3b62:	81 30       	cpi	r24, 0x01	; 1
    3b64:	61 f4       	brne	.+24     	; 0x3b7e <LCD_u8SendData+0x64>
		bit = GET_BIT(data, 6);
    3b66:	8b 81       	ldd	r24, Y+3	; 0x03
    3b68:	82 95       	swap	r24
    3b6a:	86 95       	lsr	r24
    3b6c:	86 95       	lsr	r24
    3b6e:	83 70       	andi	r24, 0x03	; 3
    3b70:	81 70       	andi	r24, 0x01	; 1
    3b72:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D6_PORT,D6_PIN,bit);
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	66 e0       	ldi	r22, 0x06	; 6
    3b78:	49 81       	ldd	r20, Y+1	; 0x01
    3b7a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    3b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b80:	81 30       	cpi	r24, 0x01	; 1
    3b82:	51 f4       	brne	.+20     	; 0x3b98 <LCD_u8SendData+0x7e>
		bit = GET_BIT(data, 7);
    3b84:	8b 81       	ldd	r24, Y+3	; 0x03
    3b86:	88 1f       	adc	r24, r24
    3b88:	88 27       	eor	r24, r24
    3b8a:	88 1f       	adc	r24, r24
    3b8c:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D7_PORT,D7_PIN,bit);
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	67 e0       	ldi	r22, 0x07	; 7
    3b92:	49 81       	ldd	r20, Y+1	; 0x01
    3b94:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    3b98:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9a:	81 30       	cpi	r24, 0x01	; 1
    3b9c:	31 f4       	brne	.+12     	; 0x3baa <LCD_u8SendData+0x90>
		state = DIO_u8SetPinData(RS_PORT,RS_PIN,DIO_HIGH);
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	61 e0       	ldi	r22, 0x01	; 1
    3ba2:	41 e0       	ldi	r20, 0x01	; 1
    3ba4:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3ba8:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3baa:	8a 81       	ldd	r24, Y+2	; 0x02
    3bac:	81 30       	cpi	r24, 0x01	; 1
    3bae:	31 f4       	brne	.+12     	; 0x3bbc <LCD_u8SendData+0xa2>
		state = DIO_u8SetPinData(RW_PORT,RW_PIN,DIO_LOW);
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	62 e0       	ldi	r22, 0x02	; 2
    3bb4:	40 e0       	ldi	r20, 0x00	; 0
    3bb6:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3bba:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bbe:	81 30       	cpi	r24, 0x01	; 1
    3bc0:	31 f4       	brne	.+12     	; 0x3bce <LCD_u8SendData+0xb4>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_HIGH);
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	63 e0       	ldi	r22, 0x03	; 3
    3bc6:	41 e0       	ldi	r20, 0x01	; 1
    3bc8:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3bcc:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3bce:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd0:	81 30       	cpi	r24, 0x01	; 1
    3bd2:	51 f4       	brne	.+20     	; 0x3be8 <LCD_u8SendData+0xce>
		TIMER0_u8PollingDelay(2);
    3bd4:	82 e0       	ldi	r24, 0x02	; 2
    3bd6:	90 e0       	ldi	r25, 0x00	; 0
    3bd8:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_LOW);
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	63 e0       	ldi	r22, 0x03	; 3
    3be0:	40 e0       	ldi	r20, 0x00	; 0
    3be2:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3be6:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(state == STD_TYPES_OK){
    3be8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bea:	81 30       	cpi	r24, 0x01	; 1
    3bec:	49 f4       	brne	.+18     	; 0x3c00 <LCD_u8SendData+0xe6>
		bit = GET_BIT(data, 0);
    3bee:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf0:	81 70       	andi	r24, 0x01	; 1
    3bf2:	89 83       	std	Y+1, r24	; 0x01
		state = DIO_u8SetPinData(D4_PORT,D4_PIN,bit);
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	64 e0       	ldi	r22, 0x04	; 4
    3bf8:	49 81       	ldd	r20, Y+1	; 0x01
    3bfa:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3bfe:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3c00:	8a 81       	ldd	r24, Y+2	; 0x02
    3c02:	81 30       	cpi	r24, 0x01	; 1
    3c04:	49 f4       	brne	.+18     	; 0x3c18 <LCD_u8SendData+0xfe>
		bit = GET_BIT(data, 1);
    3c06:	8b 81       	ldd	r24, Y+3	; 0x03
    3c08:	86 95       	lsr	r24
    3c0a:	81 70       	andi	r24, 0x01	; 1
    3c0c:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D5_PORT,D5_PIN,bit);
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	65 e0       	ldi	r22, 0x05	; 5
    3c12:	49 81       	ldd	r20, Y+1	; 0x01
    3c14:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    3c18:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1a:	81 30       	cpi	r24, 0x01	; 1
    3c1c:	51 f4       	brne	.+20     	; 0x3c32 <LCD_u8SendData+0x118>
		bit = GET_BIT(data, 2);
    3c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c20:	86 95       	lsr	r24
    3c22:	86 95       	lsr	r24
    3c24:	81 70       	andi	r24, 0x01	; 1
    3c26:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D6_PORT,D6_PIN,bit);
    3c28:	80 e0       	ldi	r24, 0x00	; 0
    3c2a:	66 e0       	ldi	r22, 0x06	; 6
    3c2c:	49 81       	ldd	r20, Y+1	; 0x01
    3c2e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    3c32:	8a 81       	ldd	r24, Y+2	; 0x02
    3c34:	81 30       	cpi	r24, 0x01	; 1
    3c36:	59 f4       	brne	.+22     	; 0x3c4e <LCD_u8SendData+0x134>
		bit = GET_BIT(data, 3);
    3c38:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3a:	86 95       	lsr	r24
    3c3c:	86 95       	lsr	r24
    3c3e:	86 95       	lsr	r24
    3c40:	81 70       	andi	r24, 0x01	; 1
    3c42:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPinData(D7_PORT,D7_PIN,bit);
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	67 e0       	ldi	r22, 0x07	; 7
    3c48:	49 81       	ldd	r20, Y+1	; 0x01
    3c4a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	}
	if(state == STD_TYPES_OK){
    3c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c50:	81 30       	cpi	r24, 0x01	; 1
    3c52:	31 f4       	brne	.+12     	; 0x3c60 <LCD_u8SendData+0x146>
		state = DIO_u8SetPinData(RS_PORT,RS_PIN,DIO_HIGH);
    3c54:	80 e0       	ldi	r24, 0x00	; 0
    3c56:	61 e0       	ldi	r22, 0x01	; 1
    3c58:	41 e0       	ldi	r20, 0x01	; 1
    3c5a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3c5e:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3c60:	8a 81       	ldd	r24, Y+2	; 0x02
    3c62:	81 30       	cpi	r24, 0x01	; 1
    3c64:	31 f4       	brne	.+12     	; 0x3c72 <LCD_u8SendData+0x158>
		state = DIO_u8SetPinData(RW_PORT,RW_PIN,DIO_LOW);
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	62 e0       	ldi	r22, 0x02	; 2
    3c6a:	40 e0       	ldi	r20, 0x00	; 0
    3c6c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3c70:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3c72:	8a 81       	ldd	r24, Y+2	; 0x02
    3c74:	81 30       	cpi	r24, 0x01	; 1
    3c76:	31 f4       	brne	.+12     	; 0x3c84 <LCD_u8SendData+0x16a>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_HIGH);
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	63 e0       	ldi	r22, 0x03	; 3
    3c7c:	41 e0       	ldi	r20, 0x01	; 1
    3c7e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3c82:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(state == STD_TYPES_OK){
    3c84:	8a 81       	ldd	r24, Y+2	; 0x02
    3c86:	81 30       	cpi	r24, 0x01	; 1
    3c88:	51 f4       	brne	.+20     	; 0x3c9e <LCD_u8SendData+0x184>
		TIMER0_u8PollingDelay(2);
    3c8a:	82 e0       	ldi	r24, 0x02	; 2
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
		state = DIO_u8SetPinData(E_PORT,E_PIN,DIO_LOW);
    3c92:	80 e0       	ldi	r24, 0x00	; 0
    3c94:	63 e0       	ldi	r22, 0x03	; 3
    3c96:	40 e0       	ldi	r20, 0x00	; 0
    3c98:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
    3c9c:	8a 83       	std	Y+2, r24	; 0x02
	}
	state = TIMER0_u8PollingDelay(5);
    3c9e:	85 e0       	ldi	r24, 0x05	; 5
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
    3ca6:	8a 83       	std	Y+2, r24	; 0x02
	return state;
    3ca8:	8a 81       	ldd	r24, Y+2	; 0x02

}
    3caa:	0f 90       	pop	r0
    3cac:	0f 90       	pop	r0
    3cae:	0f 90       	pop	r0
    3cb0:	cf 91       	pop	r28
    3cb2:	df 91       	pop	r29
    3cb4:	08 95       	ret

00003cb6 <LCD_u8SendString>:
/*
* brief: This function is used to send a string to the LCD
* param.: (input) a pointer to char pointing to the string
* return: (output) the Error state of the function 0 if an error happens and 1 otherwise
*/
uint8_t LCD_u8SendString(uint8_t *str){
    3cb6:	df 93       	push	r29
    3cb8:	cf 93       	push	r28
    3cba:	00 d0       	rcall	.+0      	; 0x3cbc <LCD_u8SendString+0x6>
    3cbc:	00 d0       	rcall	.+0      	; 0x3cbe <LCD_u8SendString+0x8>
    3cbe:	0f 92       	push	r0
    3cc0:	cd b7       	in	r28, 0x3d	; 61
    3cc2:	de b7       	in	r29, 0x3e	; 62
    3cc4:	9d 83       	std	Y+5, r25	; 0x05
    3cc6:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t state = STD_TYPES_OK;
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	8b 83       	std	Y+3, r24	; 0x03
	if(str == NULL){
    3ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    3cce:	9d 81       	ldd	r25, Y+5	; 0x05
    3cd0:	00 97       	sbiw	r24, 0x00	; 0
    3cd2:	11 f4       	brne	.+4      	; 0x3cd8 <LCD_u8SendString+0x22>
		state = STD_TYPES_NOK;
    3cd4:	1b 82       	std	Y+3, r1	; 0x03
    3cd6:	1d c0       	rjmp	.+58     	; 0x3d12 <LCD_u8SendString+0x5c>
	}
	else{
		uint8_t* iterator = str;
    3cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    3cda:	9d 81       	ldd	r25, Y+5	; 0x05
    3cdc:	9a 83       	std	Y+2, r25	; 0x02
    3cde:	89 83       	std	Y+1, r24	; 0x01
    3ce0:	10 c0       	rjmp	.+32     	; 0x3d02 <LCD_u8SendString+0x4c>
		while(*iterator != '\0' && state == STD_TYPES_OK){
			state = LCD_u8SendData(*iterator);
    3ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce6:	80 81       	ld	r24, Z
    3ce8:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_u8SendData>
    3cec:	8b 83       	std	Y+3, r24	; 0x03
			state = TIMER0_u8PollingDelay(1);
    3cee:	81 e0       	ldi	r24, 0x01	; 1
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
    3cf6:	8b 83       	std	Y+3, r24	; 0x03
			iterator++;
    3cf8:	89 81       	ldd	r24, Y+1	; 0x01
    3cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfc:	01 96       	adiw	r24, 0x01	; 1
    3cfe:	9a 83       	std	Y+2, r25	; 0x02
    3d00:	89 83       	std	Y+1, r24	; 0x01
	if(str == NULL){
		state = STD_TYPES_NOK;
	}
	else{
		uint8_t* iterator = str;
		while(*iterator != '\0' && state == STD_TYPES_OK){
    3d02:	e9 81       	ldd	r30, Y+1	; 0x01
    3d04:	fa 81       	ldd	r31, Y+2	; 0x02
    3d06:	80 81       	ld	r24, Z
    3d08:	88 23       	and	r24, r24
    3d0a:	19 f0       	breq	.+6      	; 0x3d12 <LCD_u8SendString+0x5c>
    3d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0e:	81 30       	cpi	r24, 0x01	; 1
    3d10:	41 f3       	breq	.-48     	; 0x3ce2 <LCD_u8SendString+0x2c>
			state = LCD_u8SendData(*iterator);
			state = TIMER0_u8PollingDelay(1);
			iterator++;
		}	
	}
	return state;
    3d12:	8b 81       	ldd	r24, Y+3	; 0x03

}
    3d14:	0f 90       	pop	r0
    3d16:	0f 90       	pop	r0
    3d18:	0f 90       	pop	r0
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	08 95       	ret

00003d24 <LCD_u8SendNumber>:
* brief: This function is used to send a positive integer to the LCD
* param.: (input) the integer to be sent
* return: (output) the Error state of the function 0 if an error happens and 1 otherwise
*/
void LCD_u8SendNumber(uint16_t num)
{
    3d24:	df 93       	push	r29
    3d26:	cf 93       	push	r28
    3d28:	00 d0       	rcall	.+0      	; 0x3d2a <LCD_u8SendNumber+0x6>
    3d2a:	00 d0       	rcall	.+0      	; 0x3d2c <LCD_u8SendNumber+0x8>
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	9c 83       	std	Y+4, r25	; 0x04
    3d32:	8b 83       	std	Y+3, r24	; 0x03

	uint16_t y = 1;
    3d34:	81 e0       	ldi	r24, 0x01	; 1
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	9a 83       	std	Y+2, r25	; 0x02
    3d3a:	89 83       	std	Y+1, r24	; 0x01
	do{
		y = (y * 10) + (num % 10);
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d40:	9c 01       	movw	r18, r24
    3d42:	22 0f       	add	r18, r18
    3d44:	33 1f       	adc	r19, r19
    3d46:	c9 01       	movw	r24, r18
    3d48:	88 0f       	add	r24, r24
    3d4a:	99 1f       	adc	r25, r25
    3d4c:	88 0f       	add	r24, r24
    3d4e:	99 1f       	adc	r25, r25
    3d50:	f9 01       	movw	r30, r18
    3d52:	e8 0f       	add	r30, r24
    3d54:	f9 1f       	adc	r31, r25
    3d56:	8b 81       	ldd	r24, Y+3	; 0x03
    3d58:	9c 81       	ldd	r25, Y+4	; 0x04
    3d5a:	2a e0       	ldi	r18, 0x0A	; 10
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	b9 01       	movw	r22, r18
    3d60:	0e 94 b4 23 	call	0x4768	; 0x4768 <__udivmodhi4>
    3d64:	8e 0f       	add	r24, r30
    3d66:	9f 1f       	adc	r25, r31
    3d68:	9a 83       	std	Y+2, r25	; 0x02
    3d6a:	89 83       	std	Y+1, r24	; 0x01
		num = num /10;
    3d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d70:	2a e0       	ldi	r18, 0x0A	; 10
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	b9 01       	movw	r22, r18
    3d76:	0e 94 b4 23 	call	0x4768	; 0x4768 <__udivmodhi4>
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	9c 83       	std	Y+4, r25	; 0x04
    3d7e:	8b 83       	std	Y+3, r24	; 0x03
	}while(num > 0);
    3d80:	8b 81       	ldd	r24, Y+3	; 0x03
    3d82:	9c 81       	ldd	r25, Y+4	; 0x04
    3d84:	00 97       	sbiw	r24, 0x00	; 0
    3d86:	d1 f6       	brne	.-76     	; 0x3d3c <LCD_u8SendNumber+0x18>
    3d88:	14 c0       	rjmp	.+40     	; 0x3db2 <LCD_u8SendNumber+0x8e>
	
	while(y>1)
	{
		LCD_u8SendData((y%10)+48);
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8e:	2a e0       	ldi	r18, 0x0A	; 10
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	b9 01       	movw	r22, r18
    3d94:	0e 94 b4 23 	call	0x4768	; 0x4768 <__udivmodhi4>
    3d98:	80 5d       	subi	r24, 0xD0	; 208
    3d9a:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_u8SendData>
		y=y/10;
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
    3da0:	9a 81       	ldd	r25, Y+2	; 0x02
    3da2:	2a e0       	ldi	r18, 0x0A	; 10
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	b9 01       	movw	r22, r18
    3da8:	0e 94 b4 23 	call	0x4768	; 0x4768 <__udivmodhi4>
    3dac:	cb 01       	movw	r24, r22
    3dae:	9a 83       	std	Y+2, r25	; 0x02
    3db0:	89 83       	std	Y+1, r24	; 0x01
	do{
		y = (y * 10) + (num % 10);
		num = num /10;
	}while(num > 0);
	
	while(y>1)
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	9a 81       	ldd	r25, Y+2	; 0x02
    3db6:	82 30       	cpi	r24, 0x02	; 2
    3db8:	91 05       	cpc	r25, r1
    3dba:	38 f7       	brcc	.-50     	; 0x3d8a <LCD_u8SendNumber+0x66>
	{
		LCD_u8SendData((y%10)+48);
		y=y/10;
	}
}
    3dbc:	0f 90       	pop	r0
    3dbe:	0f 90       	pop	r0
    3dc0:	0f 90       	pop	r0
    3dc2:	0f 90       	pop	r0
    3dc4:	cf 91       	pop	r28
    3dc6:	df 91       	pop	r29
    3dc8:	08 95       	ret

00003dca <LCD_u8SetCursor>:
* param.: (input) the row to set the cursor at, should be 0 or 1
* param.: (input) the column to set the cursor at, should be an integer between 0 and 15
* return: (output) the Error state of the function 0 if an error happens and 1 otherwise
*/
uint8_t LCD_u8SetCursor(uint8_t row, uint8_t col)
{	uint8_t state = STD_TYPES_OK;
    3dca:	df 93       	push	r29
    3dcc:	cf 93       	push	r28
    3dce:	00 d0       	rcall	.+0      	; 0x3dd0 <LCD_u8SetCursor+0x6>
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <LCD_u8SetCursor+0x8>
    3dd2:	0f 92       	push	r0
    3dd4:	cd b7       	in	r28, 0x3d	; 61
    3dd6:	de b7       	in	r29, 0x3e	; 62
    3dd8:	8a 83       	std	Y+2, r24	; 0x02
    3dda:	6b 83       	std	Y+3, r22	; 0x03
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	89 83       	std	Y+1, r24	; 0x01
	if(col > 15){
    3de0:	8b 81       	ldd	r24, Y+3	; 0x03
    3de2:	80 31       	cpi	r24, 0x10	; 16
    3de4:	10 f0       	brcs	.+4      	; 0x3dea <LCD_u8SetCursor+0x20>
		state = STD_TYPES_NOK;
    3de6:	19 82       	std	Y+1, r1	; 0x01
    3de8:	18 c0       	rjmp	.+48     	; 0x3e1a <LCD_u8SetCursor+0x50>
	}
	else{
		switch (row)
    3dea:	8a 81       	ldd	r24, Y+2	; 0x02
    3dec:	28 2f       	mov	r18, r24
    3dee:	30 e0       	ldi	r19, 0x00	; 0
    3df0:	3d 83       	std	Y+5, r19	; 0x05
    3df2:	2c 83       	std	Y+4, r18	; 0x04
    3df4:	8c 81       	ldd	r24, Y+4	; 0x04
    3df6:	9d 81       	ldd	r25, Y+5	; 0x05
    3df8:	00 97       	sbiw	r24, 0x00	; 0
    3dfa:	31 f0       	breq	.+12     	; 0x3e08 <LCD_u8SetCursor+0x3e>
    3dfc:	2c 81       	ldd	r18, Y+4	; 0x04
    3dfe:	3d 81       	ldd	r19, Y+5	; 0x05
    3e00:	21 30       	cpi	r18, 0x01	; 1
    3e02:	31 05       	cpc	r19, r1
    3e04:	29 f0       	breq	.+10     	; 0x3e10 <LCD_u8SetCursor+0x46>
    3e06:	08 c0       	rjmp	.+16     	; 0x3e18 <LCD_u8SetCursor+0x4e>
		{
			case 0:
			col |= 0x80;
    3e08:	8b 81       	ldd	r24, Y+3	; 0x03
    3e0a:	80 68       	ori	r24, 0x80	; 128
    3e0c:	8b 83       	std	Y+3, r24	; 0x03
    3e0e:	05 c0       	rjmp	.+10     	; 0x3e1a <LCD_u8SetCursor+0x50>
			break;
			case 1:
			col |= 0xC0;
    3e10:	8b 81       	ldd	r24, Y+3	; 0x03
    3e12:	80 6c       	ori	r24, 0xC0	; 192
    3e14:	8b 83       	std	Y+3, r24	; 0x03
    3e16:	01 c0       	rjmp	.+2      	; 0x3e1a <LCD_u8SetCursor+0x50>
			break;
			default:
			state = STD_TYPES_NOK;
    3e18:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	if(state == STD_TYPES_OK){
    3e1a:	89 81       	ldd	r24, Y+1	; 0x01
    3e1c:	81 30       	cpi	r24, 0x01	; 1
    3e1e:	21 f4       	brne	.+8      	; 0x3e28 <LCD_u8SetCursor+0x5e>
		state = LCD_u8SendCommand(col);
    3e20:	8b 81       	ldd	r24, Y+3	; 0x03
    3e22:	0e 94 bc 1c 	call	0x3978	; 0x3978 <LCD_u8SendCommand>
    3e26:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e2a:	0f 90       	pop	r0
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	cf 91       	pop	r28
    3e36:	df 91       	pop	r29
    3e38:	08 95       	ret

00003e3a <KEYPAD_u8Init>:
#include "../../MCAL/DELAY/TIMER0.h"
#include "KEYPAD_interface.h"
#include "KEYPAD_cfg.h"

// function to initialize keypad 
uint8_t KEYPAD_u8Init(void) {
    3e3a:	df 93       	push	r29
    3e3c:	cf 93       	push	r28
    3e3e:	0f 92       	push	r0
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
	/*step 1 : config Col pins as output*/
	DIO_u8SetPinDirection(COL_PORT, COL_PIN0, DIO_OUTPUT);
    3e44:	82 e0       	ldi	r24, 0x02	; 2
    3e46:	65 e0       	ldi	r22, 0x05	; 5
    3e48:	42 e0       	ldi	r20, 0x02	; 2
    3e4a:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(COL_PORT, COL_PIN1, DIO_OUTPUT);
    3e4e:	82 e0       	ldi	r24, 0x02	; 2
    3e50:	66 e0       	ldi	r22, 0x06	; 6
    3e52:	42 e0       	ldi	r20, 0x02	; 2
    3e54:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(COL_PORT, COL_PIN2, DIO_OUTPUT);
    3e58:	82 e0       	ldi	r24, 0x02	; 2
    3e5a:	67 e0       	ldi	r22, 0x07	; 7
    3e5c:	42 e0       	ldi	r20, 0x02	; 2
    3e5e:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
	/*step 2 : config Rows pins as inputs , pull ups*/
	DIO_u8SetPinDirection(ROW_PORT, ROW_PIN0, DIO_INPUT_PULLUP);
    3e62:	82 e0       	ldi	r24, 0x02	; 2
    3e64:	62 e0       	ldi	r22, 0x02	; 2
    3e66:	41 e0       	ldi	r20, 0x01	; 1
    3e68:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(ROW_PORT, ROW_PIN1, DIO_INPUT_PULLUP);
    3e6c:	82 e0       	ldi	r24, 0x02	; 2
    3e6e:	63 e0       	ldi	r22, 0x03	; 3
    3e70:	41 e0       	ldi	r20, 0x01	; 1
    3e72:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(ROW_PORT, ROW_PIN2, DIO_INPUT_PULLUP);
    3e76:	82 e0       	ldi	r24, 0x02	; 2
    3e78:	64 e0       	ldi	r22, 0x04	; 4
    3e7a:	41 e0       	ldi	r20, 0x01	; 1
    3e7c:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
	/*step 3 : Initialize Col pins -> HIGH*/
	DIO_u8SetPinData(COL_PORT, COL_PIN0, DIO_HIGH);
    3e80:	82 e0       	ldi	r24, 0x02	; 2
    3e82:	65 e0       	ldi	r22, 0x05	; 5
    3e84:	41 e0       	ldi	r20, 0x01	; 1
    3e86:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	DIO_u8SetPinData(COL_PORT, COL_PIN1, DIO_HIGH);
    3e8a:	82 e0       	ldi	r24, 0x02	; 2
    3e8c:	66 e0       	ldi	r22, 0x06	; 6
    3e8e:	41 e0       	ldi	r20, 0x01	; 1
    3e90:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	DIO_u8SetPinData(COL_PORT, COL_PIN2, DIO_HIGH);
    3e94:	82 e0       	ldi	r24, 0x02	; 2
    3e96:	67 e0       	ldi	r22, 0x07	; 7
    3e98:	41 e0       	ldi	r20, 0x01	; 1
    3e9a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
}
    3e9e:	0f 90       	pop	r0
    3ea0:	cf 91       	pop	r28
    3ea2:	df 91       	pop	r29
    3ea4:	08 95       	ret

00003ea6 <KEYPAD_u8GetPressedKey>:

// function to check which key is pressed 
uint8_t KEYPAD_u8GetPressedKey(uint8_t* KeyPressed) {
    3ea6:	df 93       	push	r29
    3ea8:	cf 93       	push	r28
    3eaa:	cd b7       	in	r28, 0x3d	; 61
    3eac:	de b7       	in	r29, 0x3e	; 62
    3eae:	65 97       	sbiw	r28, 0x15	; 21
    3eb0:	0f b6       	in	r0, 0x3f	; 63
    3eb2:	f8 94       	cli
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	0f be       	out	0x3f, r0	; 63
    3eb8:	cd bf       	out	0x3d, r28	; 61
    3eba:	98 8b       	std	Y+16, r25	; 0x10
    3ebc:	8f 87       	std	Y+15, r24	; 0x0f
	uint8_t u8ErrorState = STD_TYPES_OK;
    3ebe:	81 e0       	ldi	r24, 0x01	; 1
    3ec0:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t LOC_u8ReturnVal = KEYPAD_NO_PRESSED_KEY;
    3ec2:	8f ef       	ldi	r24, 0xFF	; 255
    3ec4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t col_indx;
	uint8_t row_indx;
	uint8_t Pin_State;
	uint8_t LOC_u8KEYPAD_Arr[KEYPAD_ROWS][KEYPAD_COL] = KEYPAD_VALUES;
    3ec6:	ce 01       	movw	r24, r28
    3ec8:	06 96       	adiw	r24, 0x06	; 6
    3eca:	9a 8b       	std	Y+18, r25	; 0x12
    3ecc:	89 8b       	std	Y+17, r24	; 0x11
    3ece:	e1 ec       	ldi	r30, 0xC1	; 193
    3ed0:	f1 e0       	ldi	r31, 0x01	; 1
    3ed2:	fc 8b       	std	Y+20, r31	; 0x14
    3ed4:	eb 8b       	std	Y+19, r30	; 0x13
    3ed6:	f9 e0       	ldi	r31, 0x09	; 9
    3ed8:	fd 8b       	std	Y+21, r31	; 0x15
    3eda:	eb 89       	ldd	r30, Y+19	; 0x13
    3edc:	fc 89       	ldd	r31, Y+20	; 0x14
    3ede:	00 80       	ld	r0, Z
    3ee0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ee4:	01 96       	adiw	r24, 0x01	; 1
    3ee6:	9c 8b       	std	Y+20, r25	; 0x14
    3ee8:	8b 8b       	std	Y+19, r24	; 0x13
    3eea:	e9 89       	ldd	r30, Y+17	; 0x11
    3eec:	fa 89       	ldd	r31, Y+18	; 0x12
    3eee:	00 82       	st	Z, r0
    3ef0:	89 89       	ldd	r24, Y+17	; 0x11
    3ef2:	9a 89       	ldd	r25, Y+18	; 0x12
    3ef4:	01 96       	adiw	r24, 0x01	; 1
    3ef6:	9a 8b       	std	Y+18, r25	; 0x12
    3ef8:	89 8b       	std	Y+17, r24	; 0x11
    3efa:	9d 89       	ldd	r25, Y+21	; 0x15
    3efc:	91 50       	subi	r25, 0x01	; 1
    3efe:	9d 8b       	std	Y+21, r25	; 0x15
    3f00:	ed 89       	ldd	r30, Y+21	; 0x15
    3f02:	ee 23       	and	r30, r30
    3f04:	51 f7       	brne	.-44     	; 0x3eda <KEYPAD_u8GetPressedKey+0x34>

	if (KeyPressed != NULL) {
    3f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f08:	98 89       	ldd	r25, Y+16	; 0x10
    3f0a:	00 97       	sbiw	r24, 0x00	; 0
    3f0c:	09 f4       	brne	.+2      	; 0x3f10 <KEYPAD_u8GetPressedKey+0x6a>
    3f0e:	4d c0       	rjmp	.+154    	; 0x3faa <KEYPAD_u8GetPressedKey+0x104>
		for (col_indx = COL_S; col_indx < COL_MAX; col_indx++) {
    3f10:	85 e0       	ldi	r24, 0x05	; 5
    3f12:	8a 83       	std	Y+2, r24	; 0x02
    3f14:	41 c0       	rjmp	.+130    	; 0x3f98 <KEYPAD_u8GetPressedKey+0xf2>
			/*select column and output low*/
			DIO_u8SetPinData(COL_PORT, col_indx, DIO_LOW);
    3f16:	82 e0       	ldi	r24, 0x02	; 2
    3f18:	6a 81       	ldd	r22, Y+2	; 0x02
    3f1a:	40 e0       	ldi	r20, 0x00	; 0
    3f1c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
			for (row_indx = ROW_S; row_indx < ROW_MAX; row_indx++) {
    3f20:	82 e0       	ldi	r24, 0x02	; 2
    3f22:	89 83       	std	Y+1, r24	; 0x01
    3f24:	2e c0       	rjmp	.+92     	; 0x3f82 <KEYPAD_u8GetPressedKey+0xdc>
				DIO_u8GetPinData(ROW_PORT, row_indx, &Pin_State);
    3f26:	9e 01       	movw	r18, r28
    3f28:	2b 5f       	subi	r18, 0xFB	; 251
    3f2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2c:	82 e0       	ldi	r24, 0x02	; 2
    3f2e:	69 81       	ldd	r22, Y+1	; 0x01
    3f30:	a9 01       	movw	r20, r18
    3f32:	0e 94 ff 14 	call	0x29fe	; 0x29fe <DIO_u8GetPinData>
				if (Pin_State == 0) /*if true -> PB is pressed*/
    3f36:	8d 81       	ldd	r24, Y+5	; 0x05
    3f38:	88 23       	and	r24, r24
    3f3a:	01 f5       	brne	.+64     	; 0x3f7c <KEYPAD_u8GetPressedKey+0xd6>
				{
					LOC_u8ReturnVal =
    3f3c:	89 81       	ldd	r24, Y+1	; 0x01
    3f3e:	88 2f       	mov	r24, r24
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	9c 01       	movw	r18, r24
    3f44:	22 50       	subi	r18, 0x02	; 2
    3f46:	30 40       	sbci	r19, 0x00	; 0
    3f48:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4a:	88 2f       	mov	r24, r24
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	ac 01       	movw	r20, r24
    3f50:	45 50       	subi	r20, 0x05	; 5
    3f52:	50 40       	sbci	r21, 0x00	; 0
    3f54:	c9 01       	movw	r24, r18
    3f56:	88 0f       	add	r24, r24
    3f58:	99 1f       	adc	r25, r25
    3f5a:	82 0f       	add	r24, r18
    3f5c:	93 1f       	adc	r25, r19
    3f5e:	9e 01       	movw	r18, r28
    3f60:	2f 5f       	subi	r18, 0xFF	; 255
    3f62:	3f 4f       	sbci	r19, 0xFF	; 255
    3f64:	82 0f       	add	r24, r18
    3f66:	93 1f       	adc	r25, r19
    3f68:	84 0f       	add	r24, r20
    3f6a:	95 1f       	adc	r25, r21
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	35 96       	adiw	r30, 0x05	; 5
    3f70:	80 81       	ld	r24, Z
    3f72:	8b 83       	std	Y+3, r24	; 0x03
							LOC_u8KEYPAD_Arr[row_indx - ROW_S][col_indx - COL_S];
					/*busy waiting loop*/

					/*debouncing button */
					TIMER0_u8PollingDelay(10);
    3f74:	8a e0       	ldi	r24, 0x0A	; 10
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>

	if (KeyPressed != NULL) {
		for (col_indx = COL_S; col_indx < COL_MAX; col_indx++) {
			/*select column and output low*/
			DIO_u8SetPinData(COL_PORT, col_indx, DIO_LOW);
			for (row_indx = ROW_S; row_indx < ROW_MAX; row_indx++) {
    3f7c:	89 81       	ldd	r24, Y+1	; 0x01
    3f7e:	8f 5f       	subi	r24, 0xFF	; 255
    3f80:	89 83       	std	Y+1, r24	; 0x01
    3f82:	89 81       	ldd	r24, Y+1	; 0x01
    3f84:	85 30       	cpi	r24, 0x05	; 5
    3f86:	78 f2       	brcs	.-98     	; 0x3f26 <KEYPAD_u8GetPressedKey+0x80>
					/*debouncing button */
					TIMER0_u8PollingDelay(10);

				}
			}
			DIO_u8SetPinData(COL_PORT, col_indx, DIO_HIGH);
    3f88:	82 e0       	ldi	r24, 0x02	; 2
    3f8a:	6a 81       	ldd	r22, Y+2	; 0x02
    3f8c:	41 e0       	ldi	r20, 0x01	; 1
    3f8e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <DIO_u8SetPinData>
	uint8_t row_indx;
	uint8_t Pin_State;
	uint8_t LOC_u8KEYPAD_Arr[KEYPAD_ROWS][KEYPAD_COL] = KEYPAD_VALUES;

	if (KeyPressed != NULL) {
		for (col_indx = COL_S; col_indx < COL_MAX; col_indx++) {
    3f92:	8a 81       	ldd	r24, Y+2	; 0x02
    3f94:	8f 5f       	subi	r24, 0xFF	; 255
    3f96:	8a 83       	std	Y+2, r24	; 0x02
    3f98:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9a:	88 30       	cpi	r24, 0x08	; 8
    3f9c:	08 f4       	brcc	.+2      	; 0x3fa0 <KEYPAD_u8GetPressedKey+0xfa>
    3f9e:	bb cf       	rjmp	.-138    	; 0x3f16 <KEYPAD_u8GetPressedKey+0x70>
				}
			}
			DIO_u8SetPinData(COL_PORT, col_indx, DIO_HIGH);
		}

		*KeyPressed = LOC_u8ReturnVal;
    3fa0:	ef 85       	ldd	r30, Y+15	; 0x0f
    3fa2:	f8 89       	ldd	r31, Y+16	; 0x10
    3fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa6:	80 83       	st	Z, r24
    3fa8:	01 c0       	rjmp	.+2      	; 0x3fac <KEYPAD_u8GetPressedKey+0x106>
	} else {
		u8ErrorState = STD_TYPES_NOK;
    3faa:	1c 82       	std	Y+4, r1	; 0x04
	}
	return u8ErrorState;
    3fac:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3fae:	65 96       	adiw	r28, 0x15	; 21
    3fb0:	0f b6       	in	r0, 0x3f	; 63
    3fb2:	f8 94       	cli
    3fb4:	de bf       	out	0x3e, r29	; 62
    3fb6:	0f be       	out	0x3f, r0	; 63
    3fb8:	cd bf       	out	0x3d, r28	; 61
    3fba:	cf 91       	pop	r28
    3fbc:	df 91       	pop	r29
    3fbe:	08 95       	ret

00003fc0 <INTERFACE_u8Init>:
 *  Author: Khaled Ali
 */ 
#include "INTERFACE_SLAVE.h"


uint8_t INTERFACE_u8Init(void){
    3fc0:	df 93       	push	r29
    3fc2:	cf 93       	push	r28
    3fc4:	cd b7       	in	r28, 0x3d	; 61
    3fc6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(PORTB, PIN4, DIO_INPUT);
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	64 e0       	ldi	r22, 0x04	; 4
    3fcc:	40 e0       	ldi	r20, 0x00	; 0
    3fce:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTB, PIN5, DIO_INPUT);
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	65 e0       	ldi	r22, 0x05	; 5
    3fd6:	40 e0       	ldi	r20, 0x00	; 0
    3fd8:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTB, PIN6, DIO_OUTPUT);
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	66 e0       	ldi	r22, 0x06	; 6
    3fe0:	42 e0       	ldi	r20, 0x02	; 2
    3fe2:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PORTB, PIN7, DIO_INPUT);
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	67 e0       	ldi	r22, 0x07	; 7
    3fea:	40 e0       	ldi	r20, 0x00	; 0
    3fec:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>
	SPI_u8Init(SPI_MASTER);
    3ff0:	81 e0       	ldi	r24, 0x01	; 1
    3ff2:	0e 94 a3 0c 	call	0x1946	; 0x1946 <SPI_u8Init>
	return 1; //To be Changed
    3ff6:	81 e0       	ldi	r24, 0x01	; 1
}
    3ff8:	cf 91       	pop	r28
    3ffa:	df 91       	pop	r29
    3ffc:	08 95       	ret

00003ffe <INTERFACE_u8SendData>:

uint8_t INTERFACE_u8SendData(uint8_t* str){
    3ffe:	df 93       	push	r29
    4000:	cf 93       	push	r28
    4002:	00 d0       	rcall	.+0      	; 0x4004 <INTERFACE_u8SendData+0x6>
    4004:	0f 92       	push	r0
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62
    400a:	9b 83       	std	Y+3, r25	; 0x03
    400c:	8a 83       	std	Y+2, r24	; 0x02
	//if slave selected
	uint8_t StrNav;

	DIO_u8GetPinData(PORTB, PIN4, &StrNav);
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	64 e0       	ldi	r22, 0x04	; 4
    4012:	9e 01       	movw	r18, r28
    4014:	2f 5f       	subi	r18, 0xFF	; 255
    4016:	3f 4f       	sbci	r19, 0xFF	; 255
    4018:	a9 01       	movw	r20, r18
    401a:	0e 94 ff 14 	call	0x29fe	; 0x29fe <DIO_u8GetPinData>

	if(StrNav == 0){
    401e:	89 81       	ldd	r24, Y+1	; 0x01
    4020:	88 23       	and	r24, r24
    4022:	21 f4       	brne	.+8      	; 0x402c <INTERFACE_u8SendData+0x2e>
		//UART_u8SendString("Sended once");
		//UART_u8SendByte(0x0D);
		SPI_u8SendString(str);
    4024:	8a 81       	ldd	r24, Y+2	; 0x02
    4026:	9b 81       	ldd	r25, Y+3	; 0x03
    4028:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <SPI_u8SendString>
	{
		SPI_SetData(str[StrNav]);
		StrNav++;
	}
*/
	return 1; //To be Changed
    402c:	81 e0       	ldi	r24, 0x01	; 1
}
    402e:	0f 90       	pop	r0
    4030:	0f 90       	pop	r0
    4032:	0f 90       	pop	r0
    4034:	cf 91       	pop	r28
    4036:	df 91       	pop	r29
    4038:	08 95       	ret

0000403a <TERMINAL_u8Init>:
 */ 
#include "TERMINAL_SLAVE.h"



uint8_t TERMINAL_u8Init(void){
    403a:	df 93       	push	r29
    403c:	cf 93       	push	r28
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
	UART_u8Init(9600);
    4042:	60 e8       	ldi	r22, 0x80	; 128
    4044:	75 e2       	ldi	r23, 0x25	; 37
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <UART_u8Init>
	return 1;
    404e:	81 e0       	ldi	r24, 0x01	; 1
}
    4050:	cf 91       	pop	r28
    4052:	df 91       	pop	r29
    4054:	08 95       	ret

00004056 <TERMINAL_u8Interface>:

uint8_t TERMINAL_u8Interface(Card_t* card){
    4056:	df 93       	push	r29
    4058:	cf 93       	push	r28
    405a:	00 d0       	rcall	.+0      	; 0x405c <TERMINAL_u8Interface+0x6>
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
    4060:	9a 83       	std	Y+2, r25	; 0x02
    4062:	89 83       	std	Y+1, r24	; 0x01

	UART_u8SendString((uint8_t*) "Enter Card Holder Name: \r\n");
    4064:	80 e6       	ldi	r24, 0x60	; 96
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	0e 94 67 08 	call	0x10ce	; 0x10ce <UART_u8SendString>
	UART_u8ReceiveCountedString(card->NAME,9);
    406c:	89 81       	ldd	r24, Y+1	; 0x01
    406e:	9a 81       	ldd	r25, Y+2	; 0x02
    4070:	69 e0       	ldi	r22, 0x09	; 9
    4072:	70 e0       	ldi	r23, 0x00	; 0
    4074:	0e 94 a3 09 	call	0x1346	; 0x1346 <UART_u8ReceiveCountedString>
	UART_u8SendString((uint8_t*) "Enter Primary Account Number: \r\n");
    4078:	8b e7       	ldi	r24, 0x7B	; 123
    407a:	90 e0       	ldi	r25, 0x00	; 0
    407c:	0e 94 67 08 	call	0x10ce	; 0x10ce <UART_u8SendString>
	UART_u8ReceiveCountedString(card->PAN,9);
    4080:	89 81       	ldd	r24, Y+1	; 0x01
    4082:	9a 81       	ldd	r25, Y+2	; 0x02
    4084:	0a 96       	adiw	r24, 0x0a	; 10
    4086:	69 e0       	ldi	r22, 0x09	; 9
    4088:	70 e0       	ldi	r23, 0x00	; 0
    408a:	0e 94 a3 09 	call	0x1346	; 0x1346 <UART_u8ReceiveCountedString>
	UART_u8SendByte(0x0D);
    408e:	8d e0       	ldi	r24, 0x0D	; 13
    4090:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_u8SendByte>
	UART_u8SendString((uint8_t*) "Enter PIN: \r\n");
    4094:	8c e9       	ldi	r24, 0x9C	; 156
    4096:	90 e0       	ldi	r25, 0x00	; 0
    4098:	0e 94 67 08 	call	0x10ce	; 0x10ce <UART_u8SendString>
	UART_u8ReceiveCountedString(card->PIN,4);
    409c:	89 81       	ldd	r24, Y+1	; 0x01
    409e:	9a 81       	ldd	r25, Y+2	; 0x02
    40a0:	44 96       	adiw	r24, 0x14	; 20
    40a2:	64 e0       	ldi	r22, 0x04	; 4
    40a4:	70 e0       	ldi	r23, 0x00	; 0
    40a6:	0e 94 a3 09 	call	0x1346	; 0x1346 <UART_u8ReceiveCountedString>
	UART_u8SendByte(0x0D);
    40aa:	8d e0       	ldi	r24, 0x0D	; 13
    40ac:	0e 94 52 07 	call	0xea4	; 0xea4 <UART_u8SendByte>
	return 1; //To be Changed
    40b0:	81 e0       	ldi	r24, 0x01	; 1
}
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	cf 91       	pop	r28
    40b8:	df 91       	pop	r29
    40ba:	08 95       	ret

000040bc <TERMINAL_u8EnableInterrupt>:

uint8_t TERMINAL_u8EnableInterrupt(void (*pfnCallBack)(uint8_t)){
    40bc:	df 93       	push	r29
    40be:	cf 93       	push	r28
    40c0:	00 d0       	rcall	.+0      	; 0x40c2 <TERMINAL_u8EnableInterrupt+0x6>
    40c2:	cd b7       	in	r28, 0x3d	; 61
    40c4:	de b7       	in	r29, 0x3e	; 62
    40c6:	9a 83       	std	Y+2, r25	; 0x02
    40c8:	89 83       	std	Y+1, r24	; 0x01
	UART_u8EnableRecievingInterrupt(pfnCallBack);
    40ca:	89 81       	ldd	r24, Y+1	; 0x01
    40cc:	9a 81       	ldd	r25, Y+2	; 0x02
    40ce:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <UART_u8EnableRecievingInterrupt>
	return 1;
    40d2:	81 e0       	ldi	r24, 0x01	; 1
}
    40d4:	0f 90       	pop	r0
    40d6:	0f 90       	pop	r0
    40d8:	cf 91       	pop	r28
    40da:	df 91       	pop	r29
    40dc:	08 95       	ret

000040de <TERMINAL_u8DisableInterrupt>:

uint8_t TERMINAL_u8DisableInterrupt(void){
    40de:	df 93       	push	r29
    40e0:	cf 93       	push	r28
    40e2:	cd b7       	in	r28, 0x3d	; 61
    40e4:	de b7       	in	r29, 0x3e	; 62
	UART_u8DisableReceivingInterrupt();
    40e6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <UART_u8DisableReceivingInterrupt>
	return 1;
    40ea:	81 e0       	ldi	r24, 0x01	; 1
}
    40ec:	cf 91       	pop	r28
    40ee:	df 91       	pop	r29
    40f0:	08 95       	ret

000040f2 <EEPROM_Init>:
	uint8_t u8Bytes[4];
}Data_t;


void EEPROM_Init(void)
{
    40f2:	df 93       	push	r29
    40f4:	cf 93       	push	r28
    40f6:	cd b7       	in	r28, 0x3d	; 61
    40f8:	de b7       	in	r29, 0x3e	; 62
	I2C_u8Init();
    40fa:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <I2C_u8Init>
}
    40fe:	cf 91       	pop	r28
    4100:	df 91       	pop	r29
    4102:	08 95       	ret

00004104 <EEPROM_u8WriteByteTo>:

uint8_t EEPROM_u8WriteByteTo(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint8_t u8Data)
{
    4104:	df 93       	push	r29
    4106:	cf 93       	push	r28
    4108:	cd b7       	in	r28, 0x3d	; 61
    410a:	de b7       	in	r29, 0x3e	; 62
    410c:	28 97       	sbiw	r28, 0x08	; 8
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	f8 94       	cli
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	cd bf       	out	0x3d, r28	; 61
    4118:	8c 83       	std	Y+4, r24	; 0x04
    411a:	7e 83       	std	Y+6, r23	; 0x06
    411c:	6d 83       	std	Y+5, r22	; 0x05
    411e:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t u8OperationAddress = (EEPROM_CONTROL_BYTE_HIGH_NIBBLE_MASK|(u8ChipAddress<<EEPROM_FIRST_CHIP_SELECT_BIT));
    4120:	8c 81       	ldd	r24, Y+4	; 0x04
    4122:	88 2f       	mov	r24, r24
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	88 0f       	add	r24, r24
    4128:	99 1f       	adc	r25, r25
    412a:	80 6a       	ori	r24, 0xA0	; 160
    412c:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ByteAddressHigh = (u16ByteAddress>>8);
    412e:	8d 81       	ldd	r24, Y+5	; 0x05
    4130:	9e 81       	ldd	r25, Y+6	; 0x06
    4132:	89 2f       	mov	r24, r25
    4134:	99 27       	eor	r25, r25
    4136:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ByteAddressLow = u16ByteAddress;
    4138:	8d 81       	ldd	r24, Y+5	; 0x05
    413a:	89 83       	std	Y+1, r24	; 0x01

	I2C_u8MasterSendStart();
    413c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <I2C_u8MasterSendStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
    4140:	8b 81       	ldd	r24, Y+3	; 0x03
    4142:	60 e0       	ldi	r22, 0x00	; 0
    4144:	0e 94 08 10 	call	0x2010	; 0x2010 <I2C_u8MasterSendSLA>
	I2C_u8MasterSendByte(u8ByteAddressHigh);
    4148:	8a 81       	ldd	r24, Y+2	; 0x02
    414a:	0e 94 39 10 	call	0x2072	; 0x2072 <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8ByteAddressLow);
    414e:	89 81       	ldd	r24, Y+1	; 0x01
    4150:	0e 94 39 10 	call	0x2072	; 0x2072 <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8Data);
    4154:	8f 81       	ldd	r24, Y+7	; 0x07
    4156:	0e 94 39 10 	call	0x2072	; 0x2072 <I2C_u8MasterSendByte>

	I2C_u8Stop();
    415a:	0e 94 1f 11 	call	0x223e	; 0x223e <I2C_u8Stop>
}
    415e:	28 96       	adiw	r28, 0x08	; 8
    4160:	0f b6       	in	r0, 0x3f	; 63
    4162:	f8 94       	cli
    4164:	de bf       	out	0x3e, r29	; 62
    4166:	0f be       	out	0x3f, r0	; 63
    4168:	cd bf       	out	0x3d, r28	; 61
    416a:	cf 91       	pop	r28
    416c:	df 91       	pop	r29
    416e:	08 95       	ret

00004170 <EEPROM_u8RandonReadFrom>:


uint8_t EEPROM_u8RandonReadFrom(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint8_t* u8Data)
{
    4170:	df 93       	push	r29
    4172:	cf 93       	push	r28
    4174:	cd b7       	in	r28, 0x3d	; 61
    4176:	de b7       	in	r29, 0x3e	; 62
    4178:	29 97       	sbiw	r28, 0x09	; 9
    417a:	0f b6       	in	r0, 0x3f	; 63
    417c:	f8 94       	cli
    417e:	de bf       	out	0x3e, r29	; 62
    4180:	0f be       	out	0x3f, r0	; 63
    4182:	cd bf       	out	0x3d, r28	; 61
    4184:	8c 83       	std	Y+4, r24	; 0x04
    4186:	7e 83       	std	Y+6, r23	; 0x06
    4188:	6d 83       	std	Y+5, r22	; 0x05
    418a:	58 87       	std	Y+8, r21	; 0x08
    418c:	4f 83       	std	Y+7, r20	; 0x07
	uint8_t u8OperationAddress = (EEPROM_CONTROL_BYTE_HIGH_NIBBLE_MASK|(u8ChipAddress<<EEPROM_FIRST_CHIP_SELECT_BIT));
    418e:	8c 81       	ldd	r24, Y+4	; 0x04
    4190:	88 2f       	mov	r24, r24
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	88 0f       	add	r24, r24
    4196:	99 1f       	adc	r25, r25
    4198:	80 6a       	ori	r24, 0xA0	; 160
    419a:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ByteAddressHigh = (u16ByteAddress>>8);
    419c:	8d 81       	ldd	r24, Y+5	; 0x05
    419e:	9e 81       	ldd	r25, Y+6	; 0x06
    41a0:	89 2f       	mov	r24, r25
    41a2:	99 27       	eor	r25, r25
    41a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8ByteAddressLow =u16ByteAddress;
    41a6:	8d 81       	ldd	r24, Y+5	; 0x05
    41a8:	89 83       	std	Y+1, r24	; 0x01


	I2C_u8MasterSendStart();
    41aa:	0e 94 58 10 	call	0x20b0	; 0x20b0 <I2C_u8MasterSendStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
    41ae:	8b 81       	ldd	r24, Y+3	; 0x03
    41b0:	60 e0       	ldi	r22, 0x00	; 0
    41b2:	0e 94 08 10 	call	0x2010	; 0x2010 <I2C_u8MasterSendSLA>
	I2C_u8MasterSendByte(u8ByteAddressHigh);
    41b6:	8a 81       	ldd	r24, Y+2	; 0x02
    41b8:	0e 94 39 10 	call	0x2072	; 0x2072 <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8ByteAddressLow);
    41bc:	89 81       	ldd	r24, Y+1	; 0x01
    41be:	0e 94 39 10 	call	0x2072	; 0x2072 <I2C_u8MasterSendByte>
	I2C_u8SendRepeatedStart();
    41c2:	0e 94 77 10 	call	0x20ee	; 0x20ee <I2C_u8SendRepeatedStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_READ);
    41c6:	8b 81       	ldd	r24, Y+3	; 0x03
    41c8:	61 e0       	ldi	r22, 0x01	; 1
    41ca:	0e 94 08 10 	call	0x2010	; 0x2010 <I2C_u8MasterSendSLA>
	I2C_u8MasterReceiveWithNAK(u8Data);
    41ce:	8f 81       	ldd	r24, Y+7	; 0x07
    41d0:	98 85       	ldd	r25, Y+8	; 0x08
    41d2:	0e 94 df 10 	call	0x21be	; 0x21be <I2C_u8MasterReceiveWithNAK>
	I2C_u8Stop();
    41d6:	0e 94 1f 11 	call	0x223e	; 0x223e <I2C_u8Stop>

}
    41da:	29 96       	adiw	r28, 0x09	; 9
    41dc:	0f b6       	in	r0, 0x3f	; 63
    41de:	f8 94       	cli
    41e0:	de bf       	out	0x3e, r29	; 62
    41e2:	0f be       	out	0x3f, r0	; 63
    41e4:	cd bf       	out	0x3d, r28	; 61
    41e6:	cf 91       	pop	r28
    41e8:	df 91       	pop	r29
    41ea:	08 95       	ret

000041ec <EEPROM_u8WriteStringTo>:


uint8_t EEPROM_u8WriteStringTo(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint8_t* u8Data)
{
    41ec:	df 93       	push	r29
    41ee:	cf 93       	push	r28
    41f0:	cd b7       	in	r28, 0x3d	; 61
    41f2:	de b7       	in	r29, 0x3e	; 62
    41f4:	2a 97       	sbiw	r28, 0x0a	; 10
    41f6:	0f b6       	in	r0, 0x3f	; 63
    41f8:	f8 94       	cli
    41fa:	de bf       	out	0x3e, r29	; 62
    41fc:	0f be       	out	0x3f, r0	; 63
    41fe:	cd bf       	out	0x3d, r28	; 61
    4200:	8d 83       	std	Y+5, r24	; 0x05
    4202:	7f 83       	std	Y+7, r23	; 0x07
    4204:	6e 83       	std	Y+6, r22	; 0x06
    4206:	59 87       	std	Y+9, r21	; 0x09
    4208:	48 87       	std	Y+8, r20	; 0x08
	uint8_t u8OperationAddress = (EEPROM_CONTROL_BYTE_HIGH_NIBBLE_MASK|(u8ChipAddress<<EEPROM_FIRST_CHIP_SELECT_BIT));
    420a:	8d 81       	ldd	r24, Y+5	; 0x05
    420c:	88 2f       	mov	r24, r24
    420e:	90 e0       	ldi	r25, 0x00	; 0
    4210:	88 0f       	add	r24, r24
    4212:	99 1f       	adc	r25, r25
    4214:	80 6a       	ori	r24, 0xA0	; 160
    4216:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ByteAddressHigh = (u16ByteAddress>>8);
    4218:	8e 81       	ldd	r24, Y+6	; 0x06
    421a:	9f 81       	ldd	r25, Y+7	; 0x07
    421c:	89 2f       	mov	r24, r25
    421e:	99 27       	eor	r25, r25
    4220:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ByteAddressLow = u16ByteAddress;
    4222:	8e 81       	ldd	r24, Y+6	; 0x06
    4224:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8BytesCounter=0;
    4226:	19 82       	std	Y+1, r1	; 0x01

	I2C_u8MasterSendStart();
    4228:	0e 94 58 10 	call	0x20b0	; 0x20b0 <I2C_u8MasterSendStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
    422c:	8c 81       	ldd	r24, Y+4	; 0x04
    422e:	60 e0       	ldi	r22, 0x00	; 0
    4230:	0e 94 08 10 	call	0x2010	; 0x2010 <I2C_u8MasterSendSLA>
	I2C_u8MasterSendByte(u8ByteAddressHigh);
    4234:	8b 81       	ldd	r24, Y+3	; 0x03
    4236:	0e 94 39 10 	call	0x2072	; 0x2072 <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8ByteAddressLow);
    423a:	8a 81       	ldd	r24, Y+2	; 0x02
    423c:	0e 94 39 10 	call	0x2072	; 0x2072 <I2C_u8MasterSendByte>
    4240:	0e c0       	rjmp	.+28     	; 0x425e <EEPROM_u8WriteStringTo+0x72>
	while (u8Data[u8BytesCounter]!='\0' && u8BytesCounter!=63)
	{
		I2C_u8MasterSendByte(u8Data[u8BytesCounter]);
    4242:	89 81       	ldd	r24, Y+1	; 0x01
    4244:	28 2f       	mov	r18, r24
    4246:	30 e0       	ldi	r19, 0x00	; 0
    4248:	88 85       	ldd	r24, Y+8	; 0x08
    424a:	99 85       	ldd	r25, Y+9	; 0x09
    424c:	fc 01       	movw	r30, r24
    424e:	e2 0f       	add	r30, r18
    4250:	f3 1f       	adc	r31, r19
    4252:	80 81       	ld	r24, Z
    4254:	0e 94 39 10 	call	0x2072	; 0x2072 <I2C_u8MasterSendByte>
		u8BytesCounter++;
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	8f 5f       	subi	r24, 0xFF	; 255
    425c:	89 83       	std	Y+1, r24	; 0x01

	I2C_u8MasterSendStart();
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
	I2C_u8MasterSendByte(u8ByteAddressHigh);
	I2C_u8MasterSendByte(u8ByteAddressLow);
	while (u8Data[u8BytesCounter]!='\0' && u8BytesCounter!=63)
    425e:	89 81       	ldd	r24, Y+1	; 0x01
    4260:	28 2f       	mov	r18, r24
    4262:	30 e0       	ldi	r19, 0x00	; 0
    4264:	88 85       	ldd	r24, Y+8	; 0x08
    4266:	99 85       	ldd	r25, Y+9	; 0x09
    4268:	fc 01       	movw	r30, r24
    426a:	e2 0f       	add	r30, r18
    426c:	f3 1f       	adc	r31, r19
    426e:	80 81       	ld	r24, Z
    4270:	88 23       	and	r24, r24
    4272:	19 f0       	breq	.+6      	; 0x427a <EEPROM_u8WriteStringTo+0x8e>
    4274:	89 81       	ldd	r24, Y+1	; 0x01
    4276:	8f 33       	cpi	r24, 0x3F	; 63
    4278:	21 f7       	brne	.-56     	; 0x4242 <EEPROM_u8WriteStringTo+0x56>
	{
		I2C_u8MasterSendByte(u8Data[u8BytesCounter]);
		u8BytesCounter++;
	}
	I2C_u8MasterSendByte('\0');
    427a:	80 e0       	ldi	r24, 0x00	; 0
    427c:	0e 94 39 10 	call	0x2072	; 0x2072 <I2C_u8MasterSendByte>

	I2C_u8Stop();
    4280:	0e 94 1f 11 	call	0x223e	; 0x223e <I2C_u8Stop>

}
    4284:	2a 96       	adiw	r28, 0x0a	; 10
    4286:	0f b6       	in	r0, 0x3f	; 63
    4288:	f8 94       	cli
    428a:	de bf       	out	0x3e, r29	; 62
    428c:	0f be       	out	0x3f, r0	; 63
    428e:	cd bf       	out	0x3d, r28	; 61
    4290:	cf 91       	pop	r28
    4292:	df 91       	pop	r29
    4294:	08 95       	ret

00004296 <EEPROM_u8ReadStringFrom>:

uint8_t EEPROM_u8ReadStringFrom(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint8_t* u8Data)
{
    4296:	df 93       	push	r29
    4298:	cf 93       	push	r28
    429a:	cd b7       	in	r28, 0x3d	; 61
    429c:	de b7       	in	r29, 0x3e	; 62
    429e:	2b 97       	sbiw	r28, 0x0b	; 11
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	f8 94       	cli
    42a4:	de bf       	out	0x3e, r29	; 62
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	cd bf       	out	0x3d, r28	; 61
    42aa:	8e 83       	std	Y+6, r24	; 0x06
    42ac:	78 87       	std	Y+8, r23	; 0x08
    42ae:	6f 83       	std	Y+7, r22	; 0x07
    42b0:	5a 87       	std	Y+10, r21	; 0x0a
    42b2:	49 87       	std	Y+9, r20	; 0x09
	uint8_t u8OperationAddress = (EEPROM_CONTROL_BYTE_HIGH_NIBBLE_MASK|(u8ChipAddress<<EEPROM_FIRST_CHIP_SELECT_BIT));
    42b4:	8e 81       	ldd	r24, Y+6	; 0x06
    42b6:	88 2f       	mov	r24, r24
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	88 0f       	add	r24, r24
    42bc:	99 1f       	adc	r25, r25
    42be:	80 6a       	ori	r24, 0xA0	; 160
    42c0:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t u8ByteAddressHigh = (u16ByteAddress>>8);
    42c2:	8f 81       	ldd	r24, Y+7	; 0x07
    42c4:	98 85       	ldd	r25, Y+8	; 0x08
    42c6:	89 2f       	mov	r24, r25
    42c8:	99 27       	eor	r25, r25
    42ca:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8ByteAddressLow =u16ByteAddress;
    42cc:	8f 81       	ldd	r24, Y+7	; 0x07
    42ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8BytesCounter=0;
    42d0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Flush;

	I2C_u8MasterSendStart();
    42d2:	0e 94 58 10 	call	0x20b0	; 0x20b0 <I2C_u8MasterSendStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_WRITE);
    42d6:	8c 81       	ldd	r24, Y+4	; 0x04
    42d8:	60 e0       	ldi	r22, 0x00	; 0
    42da:	0e 94 08 10 	call	0x2010	; 0x2010 <I2C_u8MasterSendSLA>
	I2C_u8MasterSendByte(u8ByteAddressHigh);
    42de:	8b 81       	ldd	r24, Y+3	; 0x03
    42e0:	0e 94 39 10 	call	0x2072	; 0x2072 <I2C_u8MasterSendByte>
	I2C_u8MasterSendByte(u8ByteAddressLow);
    42e4:	8a 81       	ldd	r24, Y+2	; 0x02
    42e6:	0e 94 39 10 	call	0x2072	; 0x2072 <I2C_u8MasterSendByte>
	I2C_u8SendRepeatedStart();
    42ea:	0e 94 77 10 	call	0x20ee	; 0x20ee <I2C_u8SendRepeatedStart>
	I2C_u8MasterSendSLA(u8OperationAddress,I2C_MASTER_READ);
    42ee:	8c 81       	ldd	r24, Y+4	; 0x04
    42f0:	61 e0       	ldi	r22, 0x01	; 1
    42f2:	0e 94 08 10 	call	0x2010	; 0x2010 <I2C_u8MasterSendSLA>
	do{
		I2C_u8MasterReceiveWithACK(&u8Data[u8BytesCounter]);
    42f6:	89 81       	ldd	r24, Y+1	; 0x01
    42f8:	28 2f       	mov	r18, r24
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	89 85       	ldd	r24, Y+9	; 0x09
    42fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4300:	82 0f       	add	r24, r18
    4302:	93 1f       	adc	r25, r19
    4304:	0e 94 9b 10 	call	0x2136	; 0x2136 <I2C_u8MasterReceiveWithACK>
		u8BytesCounter++;
    4308:	89 81       	ldd	r24, Y+1	; 0x01
    430a:	8f 5f       	subi	r24, 0xFF	; 255
    430c:	89 83       	std	Y+1, r24	; 0x01
	}while (u8Data[u8BytesCounter-1]!='\0');
    430e:	89 81       	ldd	r24, Y+1	; 0x01
    4310:	88 2f       	mov	r24, r24
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	9c 01       	movw	r18, r24
    4316:	21 50       	subi	r18, 0x01	; 1
    4318:	30 40       	sbci	r19, 0x00	; 0
    431a:	89 85       	ldd	r24, Y+9	; 0x09
    431c:	9a 85       	ldd	r25, Y+10	; 0x0a
    431e:	fc 01       	movw	r30, r24
    4320:	e2 0f       	add	r30, r18
    4322:	f3 1f       	adc	r31, r19
    4324:	80 81       	ld	r24, Z
    4326:	88 23       	and	r24, r24
    4328:	31 f7       	brne	.-52     	; 0x42f6 <EEPROM_u8ReadStringFrom+0x60>
	I2C_u8MasterReceiveWithNAK(&u8Flush);
    432a:	ce 01       	movw	r24, r28
    432c:	05 96       	adiw	r24, 0x05	; 5
    432e:	0e 94 df 10 	call	0x21be	; 0x21be <I2C_u8MasterReceiveWithNAK>
	I2C_u8Stop();
    4332:	0e 94 1f 11 	call	0x223e	; 0x223e <I2C_u8Stop>

}
    4336:	2b 96       	adiw	r28, 0x0b	; 11
    4338:	0f b6       	in	r0, 0x3f	; 63
    433a:	f8 94       	cli
    433c:	de bf       	out	0x3e, r29	; 62
    433e:	0f be       	out	0x3f, r0	; 63
    4340:	cd bf       	out	0x3d, r28	; 61
    4342:	cf 91       	pop	r28
    4344:	df 91       	pop	r29
    4346:	08 95       	ret

00004348 <EEPROM_u8WriteIntTo>:

uint8_t EEPROM_u8WriteIntTo(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint32_t u8Data)
{
    4348:	df 93       	push	r29
    434a:	cf 93       	push	r28
    434c:	cd b7       	in	r28, 0x3d	; 61
    434e:	de b7       	in	r29, 0x3e	; 62
    4350:	2c 97       	sbiw	r28, 0x0c	; 12
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	f8 94       	cli
    4356:	de bf       	out	0x3e, r29	; 62
    4358:	0f be       	out	0x3f, r0	; 63
    435a:	cd bf       	out	0x3d, r28	; 61
    435c:	8d 83       	std	Y+5, r24	; 0x05
    435e:	7f 83       	std	Y+7, r23	; 0x07
    4360:	6e 83       	std	Y+6, r22	; 0x06
    4362:	28 87       	std	Y+8, r18	; 0x08
    4364:	39 87       	std	Y+9, r19	; 0x09
    4366:	4a 87       	std	Y+10, r20	; 0x0a
    4368:	5b 87       	std	Y+11, r21	; 0x0b

	Data_t New;
	New.u32Data=u8Data;
    436a:	88 85       	ldd	r24, Y+8	; 0x08
    436c:	99 85       	ldd	r25, Y+9	; 0x09
    436e:	aa 85       	ldd	r26, Y+10	; 0x0a
    4370:	bb 85       	ldd	r27, Y+11	; 0x0b
    4372:	89 83       	std	Y+1, r24	; 0x01
    4374:	9a 83       	std	Y+2, r25	; 0x02
    4376:	ab 83       	std	Y+3, r26	; 0x03
    4378:	bc 83       	std	Y+4, r27	; 0x04
	EEPROM_u8WriteByteTo(u8ChipAddress,u16ByteAddress,New.u8Bytes[3]);
    437a:	9c 81       	ldd	r25, Y+4	; 0x04
    437c:	2e 81       	ldd	r18, Y+6	; 0x06
    437e:	3f 81       	ldd	r19, Y+7	; 0x07
    4380:	8d 81       	ldd	r24, Y+5	; 0x05
    4382:	b9 01       	movw	r22, r18
    4384:	49 2f       	mov	r20, r25
    4386:	0e 94 82 20 	call	0x4104	; 0x4104 <EEPROM_u8WriteByteTo>
	TIMER0_u8PollingDelay(10);
    438a:	8a e0       	ldi	r24, 0x0A	; 10
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
	EEPROM_u8WriteByteTo(u8ChipAddress,u16ByteAddress+1,New.u8Bytes[2]);
    4392:	8e 81       	ldd	r24, Y+6	; 0x06
    4394:	9f 81       	ldd	r25, Y+7	; 0x07
    4396:	9c 01       	movw	r18, r24
    4398:	2f 5f       	subi	r18, 0xFF	; 255
    439a:	3f 4f       	sbci	r19, 0xFF	; 255
    439c:	9b 81       	ldd	r25, Y+3	; 0x03
    439e:	8d 81       	ldd	r24, Y+5	; 0x05
    43a0:	b9 01       	movw	r22, r18
    43a2:	49 2f       	mov	r20, r25
    43a4:	0e 94 82 20 	call	0x4104	; 0x4104 <EEPROM_u8WriteByteTo>
	TIMER0_u8PollingDelay(10);
    43a8:	8a e0       	ldi	r24, 0x0A	; 10
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
	EEPROM_u8WriteByteTo(u8ChipAddress,u16ByteAddress+2,New.u8Bytes[1]);
    43b0:	8e 81       	ldd	r24, Y+6	; 0x06
    43b2:	9f 81       	ldd	r25, Y+7	; 0x07
    43b4:	9c 01       	movw	r18, r24
    43b6:	2e 5f       	subi	r18, 0xFE	; 254
    43b8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ba:	9a 81       	ldd	r25, Y+2	; 0x02
    43bc:	8d 81       	ldd	r24, Y+5	; 0x05
    43be:	b9 01       	movw	r22, r18
    43c0:	49 2f       	mov	r20, r25
    43c2:	0e 94 82 20 	call	0x4104	; 0x4104 <EEPROM_u8WriteByteTo>
	TIMER0_u8PollingDelay(10);
    43c6:	8a e0       	ldi	r24, 0x0A	; 10
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
	EEPROM_u8WriteByteTo(u8ChipAddress,u16ByteAddress+3,New.u8Bytes[0]);
    43ce:	8e 81       	ldd	r24, Y+6	; 0x06
    43d0:	9f 81       	ldd	r25, Y+7	; 0x07
    43d2:	9c 01       	movw	r18, r24
    43d4:	2d 5f       	subi	r18, 0xFD	; 253
    43d6:	3f 4f       	sbci	r19, 0xFF	; 255
    43d8:	99 81       	ldd	r25, Y+1	; 0x01
    43da:	8d 81       	ldd	r24, Y+5	; 0x05
    43dc:	b9 01       	movw	r22, r18
    43de:	49 2f       	mov	r20, r25
    43e0:	0e 94 82 20 	call	0x4104	; 0x4104 <EEPROM_u8WriteByteTo>
	TIMER0_u8PollingDelay(10);
    43e4:	8a e0       	ldi	r24, 0x0A	; 10
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
}
    43ec:	2c 96       	adiw	r28, 0x0c	; 12
    43ee:	0f b6       	in	r0, 0x3f	; 63
    43f0:	f8 94       	cli
    43f2:	de bf       	out	0x3e, r29	; 62
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	cd bf       	out	0x3d, r28	; 61
    43f8:	cf 91       	pop	r28
    43fa:	df 91       	pop	r29
    43fc:	08 95       	ret

000043fe <EEPROM_u8ReadIntFrom>:

uint8_t EEPROM_u8ReadIntFrom(uint8_t u8ChipAddress,uint16_t u16ByteAddress,uint32_t* u8Data)
{
    43fe:	df 93       	push	r29
    4400:	cf 93       	push	r28
    4402:	cd b7       	in	r28, 0x3d	; 61
    4404:	de b7       	in	r29, 0x3e	; 62
    4406:	2e 97       	sbiw	r28, 0x0e	; 14
    4408:	0f b6       	in	r0, 0x3f	; 63
    440a:	f8 94       	cli
    440c:	de bf       	out	0x3e, r29	; 62
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	cd bf       	out	0x3d, r28	; 61
    4412:	89 87       	std	Y+9, r24	; 0x09
    4414:	7b 87       	std	Y+11, r23	; 0x0b
    4416:	6a 87       	std	Y+10, r22	; 0x0a
    4418:	5d 87       	std	Y+13, r21	; 0x0d
    441a:	4c 87       	std	Y+12, r20	; 0x0c
	uint8_t u8Byte2;
	uint8_t u8Byte3;
	uint8_t u8Byte4;

	Data_t Received;
	EEPROM_u8RandonReadFrom(u8ChipAddress,u16ByteAddress,&Received.u8Bytes[3]);
    441c:	4a 85       	ldd	r20, Y+10	; 0x0a
    441e:	5b 85       	ldd	r21, Y+11	; 0x0b
    4420:	ce 01       	movw	r24, r28
    4422:	05 96       	adiw	r24, 0x05	; 5
    4424:	9c 01       	movw	r18, r24
    4426:	2d 5f       	subi	r18, 0xFD	; 253
    4428:	3f 4f       	sbci	r19, 0xFF	; 255
    442a:	89 85       	ldd	r24, Y+9	; 0x09
    442c:	ba 01       	movw	r22, r20
    442e:	a9 01       	movw	r20, r18
    4430:	0e 94 b8 20 	call	0x4170	; 0x4170 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    4434:	8a e0       	ldi	r24, 0x0A	; 10
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
	//UART_u8SendByte(Received.u8Bytes[0]);
	EEPROM_u8RandonReadFrom(u8ChipAddress,u16ByteAddress+1,&Received.u8Bytes[2]);
    443c:	8a 85       	ldd	r24, Y+10	; 0x0a
    443e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4440:	ac 01       	movw	r20, r24
    4442:	4f 5f       	subi	r20, 0xFF	; 255
    4444:	5f 4f       	sbci	r21, 0xFF	; 255
    4446:	ce 01       	movw	r24, r28
    4448:	05 96       	adiw	r24, 0x05	; 5
    444a:	9c 01       	movw	r18, r24
    444c:	2e 5f       	subi	r18, 0xFE	; 254
    444e:	3f 4f       	sbci	r19, 0xFF	; 255
    4450:	89 85       	ldd	r24, Y+9	; 0x09
    4452:	ba 01       	movw	r22, r20
    4454:	a9 01       	movw	r20, r18
    4456:	0e 94 b8 20 	call	0x4170	; 0x4170 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    445a:	8a e0       	ldi	r24, 0x0A	; 10
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
	//UART_u8SendByte(Received.u8Bytes[1]);
	EEPROM_u8RandonReadFrom(u8ChipAddress,u16ByteAddress+2,&Received.u8Bytes[1]);
    4462:	8a 85       	ldd	r24, Y+10	; 0x0a
    4464:	9b 85       	ldd	r25, Y+11	; 0x0b
    4466:	ac 01       	movw	r20, r24
    4468:	4e 5f       	subi	r20, 0xFE	; 254
    446a:	5f 4f       	sbci	r21, 0xFF	; 255
    446c:	ce 01       	movw	r24, r28
    446e:	05 96       	adiw	r24, 0x05	; 5
    4470:	9c 01       	movw	r18, r24
    4472:	2f 5f       	subi	r18, 0xFF	; 255
    4474:	3f 4f       	sbci	r19, 0xFF	; 255
    4476:	89 85       	ldd	r24, Y+9	; 0x09
    4478:	ba 01       	movw	r22, r20
    447a:	a9 01       	movw	r20, r18
    447c:	0e 94 b8 20 	call	0x4170	; 0x4170 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    4480:	8a e0       	ldi	r24, 0x0A	; 10
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
	//UART_u8SendByte(Received.u8Bytes[2]);
	EEPROM_u8RandonReadFrom(u8ChipAddress,u16ByteAddress+3,&Received.u8Bytes[0]);
    4488:	8a 85       	ldd	r24, Y+10	; 0x0a
    448a:	9b 85       	ldd	r25, Y+11	; 0x0b
    448c:	9c 01       	movw	r18, r24
    448e:	2d 5f       	subi	r18, 0xFD	; 253
    4490:	3f 4f       	sbci	r19, 0xFF	; 255
    4492:	ae 01       	movw	r20, r28
    4494:	4b 5f       	subi	r20, 0xFB	; 251
    4496:	5f 4f       	sbci	r21, 0xFF	; 255
    4498:	89 85       	ldd	r24, Y+9	; 0x09
    449a:	b9 01       	movw	r22, r18
    449c:	0e 94 b8 20 	call	0x4170	; 0x4170 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    44a0:	8a e0       	ldi	r24, 0x0A	; 10
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>
	//UART_u8SendByte(Received.u8Bytes[3]);
	*u8Data = Received.u32Data;
    44a8:	8d 81       	ldd	r24, Y+5	; 0x05
    44aa:	9e 81       	ldd	r25, Y+6	; 0x06
    44ac:	af 81       	ldd	r26, Y+7	; 0x07
    44ae:	b8 85       	ldd	r27, Y+8	; 0x08
    44b0:	ec 85       	ldd	r30, Y+12	; 0x0c
    44b2:	fd 85       	ldd	r31, Y+13	; 0x0d
    44b4:	80 83       	st	Z, r24
    44b6:	91 83       	std	Z+1, r25	; 0x01
    44b8:	a2 83       	std	Z+2, r26	; 0x02
    44ba:	b3 83       	std	Z+3, r27	; 0x03
}
    44bc:	2e 96       	adiw	r28, 0x0e	; 14
    44be:	0f b6       	in	r0, 0x3f	; 63
    44c0:	f8 94       	cli
    44c2:	de bf       	out	0x3e, r29	; 62
    44c4:	0f be       	out	0x3f, r0	; 63
    44c6:	cd bf       	out	0x3d, r28	; 61
    44c8:	cf 91       	pop	r28
    44ca:	df 91       	pop	r29
    44cc:	08 95       	ret

000044ce <Card_init>:
uint8_t *PAN;
uint8_t *PIN;
volatile uint8_t counter=0;

void Card_init()
{
    44ce:	df 93       	push	r29
    44d0:	cf 93       	push	r28
    44d2:	0f 92       	push	r0
    44d4:	cd b7       	in	r28, 0x3d	; 61
    44d6:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8FirstTimeCheck;
	//uint8_t test[10];
	TERMINAL_u8Init();
    44d8:	0e 94 1d 20 	call	0x403a	; 0x403a <TERMINAL_u8Init>
	INTERFACE_u8Init();
    44dc:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <INTERFACE_u8Init>
	EEPROM_Init();
    44e0:	0e 94 79 20 	call	0x40f2	; 0x40f2 <EEPROM_Init>
	//TERMINAL_u8EnableInterrupt(UART_callBack);
	TERMINAL_u8DisableInterrupt();
    44e4:	0e 94 6f 20 	call	0x40de	; 0x40de <TERMINAL_u8DisableInterrupt>

	SET_BIT(SREG_REG,I_BIT);
    44e8:	af e5       	ldi	r26, 0x5F	; 95
    44ea:	b0 e0       	ldi	r27, 0x00	; 0
    44ec:	ef e5       	ldi	r30, 0x5F	; 95
    44ee:	f0 e0       	ldi	r31, 0x00	; 0
    44f0:	80 81       	ld	r24, Z
    44f2:	80 68       	ori	r24, 0x80	; 128
    44f4:	8c 93       	st	X, r24
	CLR_BIT(GICR_REG,INT2_BIT);
    44f6:	ab e5       	ldi	r26, 0x5B	; 91
    44f8:	b0 e0       	ldi	r27, 0x00	; 0
    44fa:	eb e5       	ldi	r30, 0x5B	; 91
    44fc:	f0 e0       	ldi	r31, 0x00	; 0
    44fe:	80 81       	ld	r24, Z
    4500:	8f 7d       	andi	r24, 0xDF	; 223
    4502:	8c 93       	st	X, r24
	SET_BIT(MCUCSR_REG,ISC2_BIT);
    4504:	a4 e5       	ldi	r26, 0x54	; 84
    4506:	b0 e0       	ldi	r27, 0x00	; 0
    4508:	e4 e5       	ldi	r30, 0x54	; 84
    450a:	f0 e0       	ldi	r31, 0x00	; 0
    450c:	80 81       	ld	r24, Z
    450e:	80 64       	ori	r24, 0x40	; 64
    4510:	8c 93       	st	X, r24
	SET_BIT(GICR_REG,INT2_BIT);
    4512:	ab e5       	ldi	r26, 0x5B	; 91
    4514:	b0 e0       	ldi	r27, 0x00	; 0
    4516:	eb e5       	ldi	r30, 0x5B	; 91
    4518:	f0 e0       	ldi	r31, 0x00	; 0
    451a:	80 81       	ld	r24, Z
    451c:	80 62       	ori	r24, 0x20	; 32
    451e:	8c 93       	st	X, r24

	EEPROM_u8RandonReadFrom(CARD_EEPROM_ADDRESS,CARD_EEPROM_FIRST_TIME_ADDRESS,&u8FirstTimeCheck);
    4520:	80 e0       	ldi	r24, 0x00	; 0
    4522:	6f ef       	ldi	r22, 0xFF	; 255
    4524:	70 e0       	ldi	r23, 0x00	; 0
    4526:	9e 01       	movw	r18, r28
    4528:	2f 5f       	subi	r18, 0xFF	; 255
    452a:	3f 4f       	sbci	r19, 0xFF	; 255
    452c:	a9 01       	movw	r20, r18
    452e:	0e 94 b8 20 	call	0x4170	; 0x4170 <EEPROM_u8RandonReadFrom>
	TIMER0_u8PollingDelay(10);
    4532:	8a e0       	ldi	r24, 0x0A	; 10
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER0_u8PollingDelay>

	if (u8FirstTimeCheck!=CARD_EEPROM_FIRST_TIME_DATA)
    453a:	89 81       	ldd	r24, Y+1	; 0x01
    453c:	81 3a       	cpi	r24, 0xA1	; 161
    453e:	69 f0       	breq	.+26     	; 0x455a <Card_init+0x8c>
	{
		u8State = PROGRAMMING;
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	80 93 c0 01 	sts	0x01C0, r24
		card.MODE=CARD_PROGRAMMING_MODE;
    4546:	82 e0       	ldi	r24, 0x02	; 2
    4548:	80 93 fe 01 	sts	0x01FE, r24
		EEPROM_u8WriteByteTo(CARD_EEPROM_ADDRESS,CARD_EEPROM_FIRST_TIME_ADDRESS,CARD_EEPROM_FIRST_TIME_DATA);
    454c:	80 e0       	ldi	r24, 0x00	; 0
    454e:	6f ef       	ldi	r22, 0xFF	; 255
    4550:	70 e0       	ldi	r23, 0x00	; 0
    4552:	41 ea       	ldi	r20, 0xA1	; 161
    4554:	0e 94 82 20 	call	0x4104	; 0x4104 <EEPROM_u8WriteByteTo>
    4558:	18 c0       	rjmp	.+48     	; 0x458a <Card_init+0xbc>
	}else{

		//u8State = USER;
		EEPROM_u8ReadStringFrom(CARD_EEPROM_ADDRESS, CARD_HOLDER_NAME_ADDRESS,&card.NAME);
    455a:	25 ee       	ldi	r18, 0xE5	; 229
    455c:	31 e0       	ldi	r19, 0x01	; 1
    455e:	80 e0       	ldi	r24, 0x00	; 0
    4560:	61 e0       	ldi	r22, 0x01	; 1
    4562:	70 e0       	ldi	r23, 0x00	; 0
    4564:	a9 01       	movw	r20, r18
    4566:	0e 94 4b 21 	call	0x4296	; 0x4296 <EEPROM_u8ReadStringFrom>
		EEPROM_u8ReadStringFrom(CARD_EEPROM_ADDRESS, CARD_PAN_ADDRESS, &card.PAN);
    456a:	2f ee       	ldi	r18, 0xEF	; 239
    456c:	31 e0       	ldi	r19, 0x01	; 1
    456e:	80 e0       	ldi	r24, 0x00	; 0
    4570:	61 e1       	ldi	r22, 0x11	; 17
    4572:	70 e0       	ldi	r23, 0x00	; 0
    4574:	a9 01       	movw	r20, r18
    4576:	0e 94 4b 21 	call	0x4296	; 0x4296 <EEPROM_u8ReadStringFrom>
		EEPROM_u8ReadStringFrom(CARD_EEPROM_ADDRESS, CARD_PIN_ADDRESS, &card.PIN);
    457a:	29 ef       	ldi	r18, 0xF9	; 249
    457c:	31 e0       	ldi	r19, 0x01	; 1
    457e:	80 e0       	ldi	r24, 0x00	; 0
    4580:	61 e2       	ldi	r22, 0x21	; 33
    4582:	70 e0       	ldi	r23, 0x00	; 0
    4584:	a9 01       	movw	r20, r18
    4586:	0e 94 4b 21 	call	0x4296	; 0x4296 <EEPROM_u8ReadStringFrom>

		//TERMINAL_u8EnableInterrupt(UART_callBack);
	}
	DIO_u8SetPinDirection(PORTB, PIN2, DIO_INPUT);
    458a:	81 e0       	ldi	r24, 0x01	; 1
    458c:	62 e0       	ldi	r22, 0x02	; 2
    458e:	40 e0       	ldi	r20, 0x00	; 0
    4590:	0e 94 91 11 	call	0x2322	; 0x2322 <DIO_u8SetPinDirection>


}
    4594:	0f 90       	pop	r0
    4596:	cf 91       	pop	r28
    4598:	df 91       	pop	r29
    459a:	08 95       	ret

0000459c <Card_App>:



void Card_App(void){
    459c:	df 93       	push	r29
    459e:	cf 93       	push	r28
    45a0:	00 d0       	rcall	.+0      	; 0x45a2 <Card_App+0x6>
    45a2:	00 d0       	rcall	.+0      	; 0x45a4 <Card_App+0x8>
    45a4:	00 d0       	rcall	.+0      	; 0x45a6 <Card_App+0xa>
    45a6:	cd b7       	in	r28, 0x3d	; 61
    45a8:	de b7       	in	r29, 0x3e	; 62

	uint8_t* m="Mohseno";
    45aa:	8a ea       	ldi	r24, 0xAA	; 170
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	9a 83       	std	Y+2, r25	; 0x02
    45b0:	89 83       	std	Y+1, r24	; 0x01

	while(1){
		switch(u8State){
    45b2:	80 91 c0 01 	lds	r24, 0x01C0
    45b6:	28 2f       	mov	r18, r24
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	3e 83       	std	Y+6, r19	; 0x06
    45bc:	2d 83       	std	Y+5, r18	; 0x05
    45be:	8d 81       	ldd	r24, Y+5	; 0x05
    45c0:	9e 81       	ldd	r25, Y+6	; 0x06
    45c2:	81 30       	cpi	r24, 0x01	; 1
    45c4:	91 05       	cpc	r25, r1
    45c6:	31 f0       	breq	.+12     	; 0x45d4 <Card_App+0x38>
    45c8:	2d 81       	ldd	r18, Y+5	; 0x05
    45ca:	3e 81       	ldd	r19, Y+6	; 0x06
    45cc:	22 30       	cpi	r18, 0x02	; 2
    45ce:	31 05       	cpc	r19, r1
    45d0:	09 f1       	breq	.+66     	; 0x4614 <Card_App+0x78>
    45d2:	ef cf       	rjmp	.-34     	; 0x45b2 <Card_App+0x16>
			case PROGRAMMING:
			//Enter Programming mode
			TERMINAL_u8Interface(&card);
    45d4:	85 ee       	ldi	r24, 0xE5	; 229
    45d6:	91 e0       	ldi	r25, 0x01	; 1
    45d8:	0e 94 2b 20 	call	0x4056	; 0x4056 <TERMINAL_u8Interface>
			EEPROM_u8WriteStringTo(CARD_EEPROM_ADDRESS, CARD_HOLDER_NAME_ADDRESS, card.NAME);
    45dc:	25 ee       	ldi	r18, 0xE5	; 229
    45de:	31 e0       	ldi	r19, 0x01	; 1
    45e0:	80 e0       	ldi	r24, 0x00	; 0
    45e2:	61 e0       	ldi	r22, 0x01	; 1
    45e4:	70 e0       	ldi	r23, 0x00	; 0
    45e6:	a9 01       	movw	r20, r18
    45e8:	0e 94 f6 20 	call	0x41ec	; 0x41ec <EEPROM_u8WriteStringTo>
			EEPROM_u8WriteStringTo(CARD_EEPROM_ADDRESS, CARD_PAN_ADDRESS, card.PAN);
    45ec:	2f ee       	ldi	r18, 0xEF	; 239
    45ee:	31 e0       	ldi	r19, 0x01	; 1
    45f0:	80 e0       	ldi	r24, 0x00	; 0
    45f2:	61 e1       	ldi	r22, 0x11	; 17
    45f4:	70 e0       	ldi	r23, 0x00	; 0
    45f6:	a9 01       	movw	r20, r18
    45f8:	0e 94 f6 20 	call	0x41ec	; 0x41ec <EEPROM_u8WriteStringTo>
			EEPROM_u8WriteStringTo(CARD_EEPROM_ADDRESS, CARD_PIN_ADDRESS, card.PIN);
    45fc:	29 ef       	ldi	r18, 0xF9	; 249
    45fe:	31 e0       	ldi	r19, 0x01	; 1
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	61 e2       	ldi	r22, 0x21	; 33
    4604:	70 e0       	ldi	r23, 0x00	; 0
    4606:	a9 01       	movw	r20, r18
    4608:	0e 94 f6 20 	call	0x41ec	; 0x41ec <EEPROM_u8WriteStringTo>
			u8State = USER;
    460c:	82 e0       	ldi	r24, 0x02	; 2
    460e:	80 93 c0 01 	sts	0x01C0, r24
    4612:	cf cf       	rjmp	.-98     	; 0x45b2 <Card_App+0x16>
			//TERMINAL_u8EnableInterrupt(UART_callBack);
			break;
			case USER:
				//UART_u8SendString("Hello");
				switch(counter)
    4614:	80 91 e4 01 	lds	r24, 0x01E4
    4618:	28 2f       	mov	r18, r24
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	3c 83       	std	Y+4, r19	; 0x04
    461e:	2b 83       	std	Y+3, r18	; 0x03
    4620:	8b 81       	ldd	r24, Y+3	; 0x03
    4622:	9c 81       	ldd	r25, Y+4	; 0x04
    4624:	81 30       	cpi	r24, 0x01	; 1
    4626:	91 05       	cpc	r25, r1
    4628:	21 f2       	breq	.-120    	; 0x45b2 <Card_App+0x16>
    462a:	2b 81       	ldd	r18, Y+3	; 0x03
    462c:	3c 81       	ldd	r19, Y+4	; 0x04
    462e:	22 30       	cpi	r18, 0x02	; 2
    4630:	31 05       	cpc	r19, r1
    4632:	2c f4       	brge	.+10     	; 0x463e <Card_App+0xa2>
    4634:	8b 81       	ldd	r24, Y+3	; 0x03
    4636:	9c 81       	ldd	r25, Y+4	; 0x04
    4638:	00 97       	sbiw	r24, 0x00	; 0
    463a:	61 f0       	breq	.+24     	; 0x4654 <Card_App+0xb8>
    463c:	ba cf       	rjmp	.-140    	; 0x45b2 <Card_App+0x16>
    463e:	2b 81       	ldd	r18, Y+3	; 0x03
    4640:	3c 81       	ldd	r19, Y+4	; 0x04
    4642:	22 30       	cpi	r18, 0x02	; 2
    4644:	31 05       	cpc	r19, r1
    4646:	69 f0       	breq	.+26     	; 0x4662 <Card_App+0xc6>
    4648:	8b 81       	ldd	r24, Y+3	; 0x03
    464a:	9c 81       	ldd	r25, Y+4	; 0x04
    464c:	83 30       	cpi	r24, 0x03	; 3
    464e:	91 05       	cpc	r25, r1
    4650:	79 f0       	breq	.+30     	; 0x4670 <Card_App+0xd4>
    4652:	af cf       	rjmp	.-162    	; 0x45b2 <Card_App+0x16>
				{
				case 0:
					HoldeName = card.PAN;
    4654:	8f ee       	ldi	r24, 0xEF	; 239
    4656:	91 e0       	ldi	r25, 0x01	; 1
    4658:	90 93 02 02 	sts	0x0202, r25
    465c:	80 93 01 02 	sts	0x0201, r24
    4660:	a8 cf       	rjmp	.-176    	; 0x45b2 <Card_App+0x16>
					break;
				case 1:
					break;
				case 2:
					HoldeName = card.PIN;
    4662:	89 ef       	ldi	r24, 0xF9	; 249
    4664:	91 e0       	ldi	r25, 0x01	; 1
    4666:	90 93 02 02 	sts	0x0202, r25
    466a:	80 93 01 02 	sts	0x0201, r24
    466e:	a1 cf       	rjmp	.-190    	; 0x45b2 <Card_App+0x16>
					break;
				case 3:
					counter=0;
    4670:	10 92 e4 01 	sts	0x01E4, r1
    4674:	9e cf       	rjmp	.-196    	; 0x45b2 <Card_App+0x16>

00004676 <UART_callBack>:
		}	
	}
}


void UART_callBack(void){
    4676:	df 93       	push	r29
    4678:	cf 93       	push	r28
    467a:	cd b7       	in	r28, 0x3d	; 61
    467c:	de b7       	in	r29, 0x3e	; 62
		iter = 0;
	}
*/


}
    467e:	cf 91       	pop	r28
    4680:	df 91       	pop	r29
    4682:	08 95       	ret

00004684 <__vector_3>:


void __vector_3(void) __attribute__ ((signal, used));

void __vector_3(void)
{
    4684:	1f 92       	push	r1
    4686:	0f 92       	push	r0
    4688:	0f b6       	in	r0, 0x3f	; 63
    468a:	0f 92       	push	r0
    468c:	11 24       	eor	r1, r1
    468e:	2f 93       	push	r18
    4690:	3f 93       	push	r19
    4692:	4f 93       	push	r20
    4694:	5f 93       	push	r21
    4696:	6f 93       	push	r22
    4698:	7f 93       	push	r23
    469a:	8f 93       	push	r24
    469c:	9f 93       	push	r25
    469e:	af 93       	push	r26
    46a0:	bf 93       	push	r27
    46a2:	ef 93       	push	r30
    46a4:	ff 93       	push	r31
    46a6:	df 93       	push	r29
    46a8:	cf 93       	push	r28
    46aa:	cd b7       	in	r28, 0x3d	; 61
    46ac:	de b7       	in	r29, 0x3e	; 62
	//UART_u8SendString(&card.NAME);
	switch(counter)
    46ae:	80 91 e4 01 	lds	r24, 0x01E4
    46b2:	88 2f       	mov	r24, r24
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	81 30       	cpi	r24, 0x01	; 1
    46b8:	91 05       	cpc	r25, r1
    46ba:	29 f4       	brne	.+10     	; 0x46c6 <__vector_3+0x42>
	{
	case 1:
		SPI_u8SendByte(u8State);
    46bc:	80 91 c0 01 	lds	r24, 0x01C0
    46c0:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <SPI_u8SendByte>
    46c4:	06 c0       	rjmp	.+12     	; 0x46d2 <__vector_3+0x4e>
		break;
	default:
		SPI_u8SendString(HoldeName);
    46c6:	80 91 01 02 	lds	r24, 0x0201
    46ca:	90 91 02 02 	lds	r25, 0x0202
    46ce:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <SPI_u8SendString>
	}
	counter++;
    46d2:	80 91 e4 01 	lds	r24, 0x01E4
    46d6:	8f 5f       	subi	r24, 0xFF	; 255
    46d8:	80 93 e4 01 	sts	0x01E4, r24
	CLR_BIT(GIFR_REG,5);
    46dc:	aa e5       	ldi	r26, 0x5A	; 90
    46de:	b0 e0       	ldi	r27, 0x00	; 0
    46e0:	ea e5       	ldi	r30, 0x5A	; 90
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	80 81       	ld	r24, Z
    46e6:	8f 7d       	andi	r24, 0xDF	; 223
    46e8:	8c 93       	st	X, r24
}
    46ea:	cf 91       	pop	r28
    46ec:	df 91       	pop	r29
    46ee:	ff 91       	pop	r31
    46f0:	ef 91       	pop	r30
    46f2:	bf 91       	pop	r27
    46f4:	af 91       	pop	r26
    46f6:	9f 91       	pop	r25
    46f8:	8f 91       	pop	r24
    46fa:	7f 91       	pop	r23
    46fc:	6f 91       	pop	r22
    46fe:	5f 91       	pop	r21
    4700:	4f 91       	pop	r20
    4702:	3f 91       	pop	r19
    4704:	2f 91       	pop	r18
    4706:	0f 90       	pop	r0
    4708:	0f be       	out	0x3f, r0	; 63
    470a:	0f 90       	pop	r0
    470c:	1f 90       	pop	r1
    470e:	18 95       	reti

00004710 <main>:
#include "../APP/Card.h"



int main(void)
{
    4710:	df 93       	push	r29
    4712:	cf 93       	push	r28
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
	Card_init();
    4718:	0e 94 67 22 	call	0x44ce	; 0x44ce <Card_init>
	Card_App();
    471c:	0e 94 ce 22 	call	0x459c	; 0x459c <Card_App>
    4720:	80 e0       	ldi	r24, 0x00	; 0
    4722:	90 e0       	ldi	r25, 0x00	; 0
}
    4724:	cf 91       	pop	r28
    4726:	df 91       	pop	r29
    4728:	08 95       	ret

0000472a <__mulsi3>:
    472a:	62 9f       	mul	r22, r18
    472c:	d0 01       	movw	r26, r0
    472e:	73 9f       	mul	r23, r19
    4730:	f0 01       	movw	r30, r0
    4732:	82 9f       	mul	r24, r18
    4734:	e0 0d       	add	r30, r0
    4736:	f1 1d       	adc	r31, r1
    4738:	64 9f       	mul	r22, r20
    473a:	e0 0d       	add	r30, r0
    473c:	f1 1d       	adc	r31, r1
    473e:	92 9f       	mul	r25, r18
    4740:	f0 0d       	add	r31, r0
    4742:	83 9f       	mul	r24, r19
    4744:	f0 0d       	add	r31, r0
    4746:	74 9f       	mul	r23, r20
    4748:	f0 0d       	add	r31, r0
    474a:	65 9f       	mul	r22, r21
    474c:	f0 0d       	add	r31, r0
    474e:	99 27       	eor	r25, r25
    4750:	72 9f       	mul	r23, r18
    4752:	b0 0d       	add	r27, r0
    4754:	e1 1d       	adc	r30, r1
    4756:	f9 1f       	adc	r31, r25
    4758:	63 9f       	mul	r22, r19
    475a:	b0 0d       	add	r27, r0
    475c:	e1 1d       	adc	r30, r1
    475e:	f9 1f       	adc	r31, r25
    4760:	bd 01       	movw	r22, r26
    4762:	cf 01       	movw	r24, r30
    4764:	11 24       	eor	r1, r1
    4766:	08 95       	ret

00004768 <__udivmodhi4>:
    4768:	aa 1b       	sub	r26, r26
    476a:	bb 1b       	sub	r27, r27
    476c:	51 e1       	ldi	r21, 0x11	; 17
    476e:	07 c0       	rjmp	.+14     	; 0x477e <__udivmodhi4_ep>

00004770 <__udivmodhi4_loop>:
    4770:	aa 1f       	adc	r26, r26
    4772:	bb 1f       	adc	r27, r27
    4774:	a6 17       	cp	r26, r22
    4776:	b7 07       	cpc	r27, r23
    4778:	10 f0       	brcs	.+4      	; 0x477e <__udivmodhi4_ep>
    477a:	a6 1b       	sub	r26, r22
    477c:	b7 0b       	sbc	r27, r23

0000477e <__udivmodhi4_ep>:
    477e:	88 1f       	adc	r24, r24
    4780:	99 1f       	adc	r25, r25
    4782:	5a 95       	dec	r21
    4784:	a9 f7       	brne	.-22     	; 0x4770 <__udivmodhi4_loop>
    4786:	80 95       	com	r24
    4788:	90 95       	com	r25
    478a:	bc 01       	movw	r22, r24
    478c:	cd 01       	movw	r24, r26
    478e:	08 95       	ret

00004790 <__udivmodsi4>:
    4790:	a1 e2       	ldi	r26, 0x21	; 33
    4792:	1a 2e       	mov	r1, r26
    4794:	aa 1b       	sub	r26, r26
    4796:	bb 1b       	sub	r27, r27
    4798:	fd 01       	movw	r30, r26
    479a:	0d c0       	rjmp	.+26     	; 0x47b6 <__udivmodsi4_ep>

0000479c <__udivmodsi4_loop>:
    479c:	aa 1f       	adc	r26, r26
    479e:	bb 1f       	adc	r27, r27
    47a0:	ee 1f       	adc	r30, r30
    47a2:	ff 1f       	adc	r31, r31
    47a4:	a2 17       	cp	r26, r18
    47a6:	b3 07       	cpc	r27, r19
    47a8:	e4 07       	cpc	r30, r20
    47aa:	f5 07       	cpc	r31, r21
    47ac:	20 f0       	brcs	.+8      	; 0x47b6 <__udivmodsi4_ep>
    47ae:	a2 1b       	sub	r26, r18
    47b0:	b3 0b       	sbc	r27, r19
    47b2:	e4 0b       	sbc	r30, r20
    47b4:	f5 0b       	sbc	r31, r21

000047b6 <__udivmodsi4_ep>:
    47b6:	66 1f       	adc	r22, r22
    47b8:	77 1f       	adc	r23, r23
    47ba:	88 1f       	adc	r24, r24
    47bc:	99 1f       	adc	r25, r25
    47be:	1a 94       	dec	r1
    47c0:	69 f7       	brne	.-38     	; 0x479c <__udivmodsi4_loop>
    47c2:	60 95       	com	r22
    47c4:	70 95       	com	r23
    47c6:	80 95       	com	r24
    47c8:	90 95       	com	r25
    47ca:	9b 01       	movw	r18, r22
    47cc:	ac 01       	movw	r20, r24
    47ce:	bd 01       	movw	r22, r26
    47d0:	cf 01       	movw	r24, r30
    47d2:	08 95       	ret

000047d4 <__prologue_saves__>:
    47d4:	2f 92       	push	r2
    47d6:	3f 92       	push	r3
    47d8:	4f 92       	push	r4
    47da:	5f 92       	push	r5
    47dc:	6f 92       	push	r6
    47de:	7f 92       	push	r7
    47e0:	8f 92       	push	r8
    47e2:	9f 92       	push	r9
    47e4:	af 92       	push	r10
    47e6:	bf 92       	push	r11
    47e8:	cf 92       	push	r12
    47ea:	df 92       	push	r13
    47ec:	ef 92       	push	r14
    47ee:	ff 92       	push	r15
    47f0:	0f 93       	push	r16
    47f2:	1f 93       	push	r17
    47f4:	cf 93       	push	r28
    47f6:	df 93       	push	r29
    47f8:	cd b7       	in	r28, 0x3d	; 61
    47fa:	de b7       	in	r29, 0x3e	; 62
    47fc:	ca 1b       	sub	r28, r26
    47fe:	db 0b       	sbc	r29, r27
    4800:	0f b6       	in	r0, 0x3f	; 63
    4802:	f8 94       	cli
    4804:	de bf       	out	0x3e, r29	; 62
    4806:	0f be       	out	0x3f, r0	; 63
    4808:	cd bf       	out	0x3d, r28	; 61
    480a:	09 94       	ijmp

0000480c <__epilogue_restores__>:
    480c:	2a 88       	ldd	r2, Y+18	; 0x12
    480e:	39 88       	ldd	r3, Y+17	; 0x11
    4810:	48 88       	ldd	r4, Y+16	; 0x10
    4812:	5f 84       	ldd	r5, Y+15	; 0x0f
    4814:	6e 84       	ldd	r6, Y+14	; 0x0e
    4816:	7d 84       	ldd	r7, Y+13	; 0x0d
    4818:	8c 84       	ldd	r8, Y+12	; 0x0c
    481a:	9b 84       	ldd	r9, Y+11	; 0x0b
    481c:	aa 84       	ldd	r10, Y+10	; 0x0a
    481e:	b9 84       	ldd	r11, Y+9	; 0x09
    4820:	c8 84       	ldd	r12, Y+8	; 0x08
    4822:	df 80       	ldd	r13, Y+7	; 0x07
    4824:	ee 80       	ldd	r14, Y+6	; 0x06
    4826:	fd 80       	ldd	r15, Y+5	; 0x05
    4828:	0c 81       	ldd	r16, Y+4	; 0x04
    482a:	1b 81       	ldd	r17, Y+3	; 0x03
    482c:	aa 81       	ldd	r26, Y+2	; 0x02
    482e:	b9 81       	ldd	r27, Y+1	; 0x01
    4830:	ce 0f       	add	r28, r30
    4832:	d1 1d       	adc	r29, r1
    4834:	0f b6       	in	r0, 0x3f	; 63
    4836:	f8 94       	cli
    4838:	de bf       	out	0x3e, r29	; 62
    483a:	0f be       	out	0x3f, r0	; 63
    483c:	cd bf       	out	0x3d, r28	; 61
    483e:	ed 01       	movw	r28, r26
    4840:	08 95       	ret

00004842 <_exit>:
    4842:	f8 94       	cli

00004844 <__stop_program>:
    4844:	ff cf       	rjmp	.-2      	; 0x4844 <__stop_program>
